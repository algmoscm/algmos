     1                                  %include "../bootloader/global_def.asm"
     1                              <1> %ifndef GLOBAL_DEF_ASM
     2                              <1> %define GLOBAL_DEF_ASM
     3                              <1> 
     4                              <1> 
     5                              <1> ;|----------------------|
     6                              <1> ;|	100000 ~ END	|
     7                              <1> ;|	   KERNEL	|
     8                              <1> ;|----------------------|
     9                              <1> ;|	E0000 ~ 100000	|
    10                              <1> ;| Extended System BIOS |
    11                              <1> ;|----------------------|
    12                              <1> ;|	C0000 ~ Dffff	|
    13                              <1> ;|     Expansion Area   |
    14                              <1> ;|----------------------|
    15                              <1> ;|	A0000 ~ bffff	|
    16                              <1> ;|   Legacy Video Area  |
    17                              <1> ;|----------------------|
    18                              <1> ;|	9f000 ~ A0000	|
    19                              <1> ;|	 BIOS reserve	|
    20                              <1> ;|----------------------|
    21                              <1> ;|	90000 ~ 9f000	|
    22                              <1> ;|	 kernel tmpbuf	|
    23                              <1> ;|----------------------|
    24                              <1> ;|	10000 ~ 90000	|
    25                              <1> ;|	   LOADER	|
    26                              <1> ;|----------------------|
    27                              <1> ;|	8000 ~ 10000	|
    28                              <1> ;|	  VBE info	|
    29                              <1> ;|----------------------|
    30                              <1> ;|	7e00 ~ 8000	|
    31                              <1> ;|	  mem info	|
    32                              <1> ;|----------------------|
    33                              <1> ;|	7c00 ~ 7e00	|
    34                              <1> ;|	 MBR (BOOT)	|
    35                              <1> ;|----------------------|
    36                              <1> ;|	0000 ~ 7c00	|
    37                              <1> ;|	 BIOS Code	|
    38                              <1> ;|----------------------|
    39                              <1> 
    40                              <1> 
    41                              <1> ;_______________________________________________________
    42                              <1> ; START	END	    SIZE	        USED
    43                              <1> ; FFFF0	FFFFF	16B	        BIOS System Entry
    44                              <1> ; F0000	FFFEF	64KB-16B	BIOS System Code
    45                              <1> ; C8000	EFFFF	160KB	    ROM/Mapped IO
    46                              <1> ; C0000	C7FFF	32KB	    Graphic Adapter BIOS
    47                              <1> ; B8000	BFFFF	32KB	    Chroma Text Video Buffer
    48                              <1> ; B0000	B7FFF	32KB	    Mono Text Video Buffer
    49                              <1> ; A0000	AFFFF	64KB	    Graphic Video Buffer
    50                              <1> ; 9FC00	9FFFF	1KB	        Extended BIOS Data Area
    51                              <1> ; 7E00	9FBFF	622080B     Useable 608KB	
    52                              <1> ; 7C00	7DFF	512B	    MBR
    53                              <1> ; 500	7BFF	30464B      Useable 30KB	
    54                              <1> ; 400	4FF	    256B	    BIOS Data Area
    55                              <1> ; 000	3FF	    1KB	        IVT
    56                              <1> ; _____________________________________________________
    57                              <1> 
    58                              <1> 
    59                              <1> 
    60                              <1> 
    61                              <1> 
    62                              <1> 
    63                              <1> 
    64                              <1> 
    65                              <1> 
    66                              <1> 
    67                              <1> 
    68                              <1> ;|----------------------|
    69                              <1> ;|	100000 ~ END	|
    70                              <1> ;|	   KERNEL	|
    71                              <1> ;|----------------------|
    72                              <1> ;|	E0000 ~ 100000	|
    73                              <1> ;| Extended System BIOS |
    74                              <1> ;|----------------------|
    75                              <1> ;|	C0000 ~ Dffff	|
    76                              <1> ;|     Expansion Area   |
    77                              <1> ;|----------------------|
    78                              <1> ;|	A0000 ~ bffff	|
    79                              <1> ;|   Legacy Video Area  |
    80                              <1> ;|----------------------|
    81                              <1> ;|	9F000 ~ A0000	|
    82                              <1> ;|	 BIOS reserve	|
    83                              <1> ;|----------------------|
    84                              <1> ;|	90000 ~ 9F000	|
    85                              <1> ;|	 kernel tmpbuf	|
    86                              <1> ;|----------------------|
    87                              <1> ;|	10000 ~ 90000	|
    88                              <1> ;|	   LOADER	|
    89                              <1> ;|----------------------|
    90                              <1> ;|	8000 ~ 10000	|
    91                              <1> ;|	  VBE info	|
    92                              <1> ;|----------------------|
    93                              <1> ;|	7E00 ~ 8000	|
    94                              <1> ;|	  mem info	|
    95                              <1> ;|----------------------|
    96                              <1> ;|	7C00 ~ 7E00	|
    97                              <1> ;|	 MBR (BOOT)	|
    98                              <1> ;|----------------------|
    99                              <1> ;|	0000 ~ 7C00	|
   100                              <1> ;|	 BIOS Code	|
   101                              <1> ;|----------------------|
   102                              <1> 
   103                              <1> 
   104                              <1> 
   105                              <1> 
   106                              <1> 
   107                              <1> 
   108                              <1> 
   109                              <1> 
   110                              <1> 
   111                              <1> 
   112                              <1> ;______________________________________________
   113                              <1> ; ----------------Vbe Info Block------------
   114                              <1> ; typedef struct {
   115                              <1> ;     unsigned char       vbe_signature;
   116                              <1> ;     unsigned short      vbe_version;
   117                              <1> ;     unsigned long       oem_string_ptr;
   118                              <1> ;     unsigned char       capabilities;
   119                              <1> ;     unsigned long       video_mode_ptr;
   120                              <1> ;     unsigned short      total_memory;
   121                              <1> ;     unsigned short      oem_software_rev;
   122                              <1> ;     unsigned long       oem_vendor_name_ptr;
   123                              <1> ;     unsigned long       oem_product_name_ptr;
   124                              <1> ;     unsigned long       oem_product_rev_ptr;
   125                              <1> ;     unsigned char       reserved[222];
   126                              <1> ;     unsigned char       oem_data[256];  
   127                              <1> ; } VbeInfoBlock;
   128                              <1> ;______________________________________________
   129                              <1> 
   130                              <1> 
   131                              <1> BaseOfKernelFile	equ	0x00
   132                              <1> OffsetOfKernelFile	equ	0x100000
   133                              <1> BaseTmpOfKernelAddr	equ	0x9000
   134                              <1> OffsetTmpOfKernelFile	equ	0x0000
   135                              <1> VBEStructBufferAddr	equ	0x8000
   136                              <1> VBEModeStructBufferAddr	equ	0x8200
   137                              <1> MemoryStructBufferAddr	equ	0x8800
   138                              <1> KernelSpaceUpperAddress equ 0xFFFF800000000000
   139                              <1> VideoFrameBufferAddress equ 0xFFFF800003000000
   140                              <1> KernelStartSectorNum	equ	16
   141                              <1> 
   142                              <1> 
   143                              <1> %define PLATFORM_QEMU_X64 1
   144                              <1> %define PLATFORM_X64 2
   145                              <1> 
   146                              <1> %define DEBUG_PLATFORM PLATFORM_QEMU_X64
   147                              <1> %define DEBUG_MODE 1
   148                              <1> 
   149                              <1> 
   150                              <1> MasterSectorReadNumPort    equ	0x1F2
   151                              <1> MasterSectorReadPort    equ	0x1F0
   152                              <1> 
   153                              <1> SlaveReadNumPort    equ	0x172
   154                              <1> SlaveSectorReadPort    equ	0x170
   155                              <1> 
   156                              <1> SectorReadNumPort    equ	MasterSectorReadNumPort
   157                              <1> SectorReadPort    equ	MasterSectorReadPort
   158                              <1> 
   159                              <1> struc vbe_info_block
   160 00000000 ????????            <1>     .signature                 resb 4    ; 'VESA' signature (must be "VESA")
   161 00000004 ????                <1>     .version                   resw 1    ; VBE version (e.g., 0x0300 for VBE 3.0)
   162 00000006 ????????            <1>     .oem_string_ptr            resd 1    ; Pointer to OEM string
   163 0000000A ????????            <1>     .capabilities              resd 1    ; Capabilities of the video card
   164 0000000E ????????            <1>     .video_mode_ptr            resd 1    ; Pointer to supported video modes
   165 00000012 ????                <1>     .total_memory              resw 1    ; Total memory in 64KB blocks
   166                              <1> 
   167                              <1>     ; VBE 2.0+ fields
   168 00000014 ????                <1>     .oem_software_rev          resw 1    ; OEM software revision
   169 00000016 ????????            <1>     .oem_vendor_name_ptr       resd 1    ; Pointer to OEM vendor name string
   170 0000001A ????????            <1>     .oem_product_name_ptr      resd 1    ; Pointer to OEM product name string
   171 0000001E ????????            <1>     .oem_product_rev_ptr       resd 1    ; Pointer to OEM product revision string
   172 00000022 <res DEh>           <1>     .reserved                  resb 222  ; Reserved for VBE implementation
   173 00000100 <res 100h>          <1>     .oem_data                  resb 256  ; Data area for OEM-specific information
   174                              <1> endstruc
   175                              <1> 
   176                              <1> struc vbe_mode_info_block
   177 00000000 ????                <1>     .attributes                resw 1    ; Mode attributes
   178 00000002 ??                  <1>     .winA_attributes           resb 1    ; Window A attributes
   179 00000003 ??                  <1>     .winB_attributes           resb 1    ; Window B attributes
   180 00000004 ????                <1>     .win_granularity           resw 1    ; Window granularity in KB
   181 00000006 ????                <1>     .win_size                  resw 1    ; Window size in KB
   182 00000008 ????                <1>     .winA_segment              resw 1    ; Window A segment
   183 0000000A ????                <1>     .winB_segment              resw 1    ; Window B segment
   184 0000000C ????????            <1>     .win_func_ptr              resd 1    ; Pointer to window function
   185 00000010 ????                <1>     .bytes_per_scanline        resw 1    ; Bytes per scanline
   186                              <1> 
   187                              <1>     ; VBE 1.2+ fields
   188 00000012 ????                <1>     .x_resolution              resw 1    ; Horizontal resolution in pixels
   189 00000014 ????                <1>     .y_resolution              resw 1    ; Vertical resolution in pixels
   190 00000016 ??                  <1>     .x_char_size               resb 1    ; Character cell width in pixels
   191 00000017 ??                  <1>     .y_char_size               resb 1    ; Character cell height in pixels
   192 00000018 ??                  <1>     .number_of_planes          resb 1    ; Number of memory planes
   193 00000019 ??                  <1>     .bits_per_pixel            resb 1    ; Bits per pixel
   194 0000001A ??                  <1>     .number_of_banks           resb 1    ; Number of banks
   195 0000001B ??                  <1>     .memory_model              resb 1    ; Memory model type
   196 0000001C ??                  <1>     .bank_size                 resb 1    ; Bank size in KB
   197 0000001D ??                  <1>     .number_of_image_pages     resb 1    ; Number of images
   198 0000001E ??                  <1>     .reserved1                 resb 1    ; Reserved
   199                              <1> 
   200                              <1>     ; Direct Color fields (VBE 1.2+)
   201 0000001F ??                  <1>     .red_mask_size             resb 1    ; Size of direct color red mask
   202 00000020 ??                  <1>     .red_field_position        resb 1    ; Bit position of red mask
   203 00000021 ??                  <1>     .green_mask_size           resb 1    ; Size of direct color green mask
   204 00000022 ??                  <1>     .green_field_position      resb 1    ; Bit position of green mask
   205 00000023 ??                  <1>     .blue_mask_size            resb 1    ; Size of direct color blue mask
   206 00000024 ??                  <1>     .blue_field_position       resb 1    ; Bit position of blue mask
   207 00000025 ??                  <1>     .reserved_mask_size        resb 1    ; Size of direct color reserved mask
   208 00000026 ??                  <1>     .reserved_field_position   resb 1    ; Bit position of reserved mask
   209 00000027 ??                  <1>     .direct_color_mode_info    resb 1    ; Direct color mode attributes
   210                              <1> 
   211                              <1>     ; VBE 2.0+ fields
   212 00000028 ????????            <1>     .phys_base_ptr             resd 1    ; Physical address for flat memory frame buffer
   213 0000002C ????????            <1>     .reserved2                 resd 1    ; Reserved
   214 00000030 ????                <1>     .reserved3                 resw 1    ; Reserved
   215                              <1> 
   216                              <1>     ; VBE 3.0+ fields
   217 00000032 ????                <1>     .lin_bytes_per_scanline    resw 1    ; Bytes per scanline for linear modes
   218 00000034 ??                  <1>     .bnk_number_of_image_pages resb 1    ; Number of images for banked modes
   219 00000035 ??                  <1>     .lin_number_of_image_pages resb 1    ; Number of images for linear modes
   220 00000036 ??                  <1>     .lin_red_mask_size         resb 1    ; Size of direct color red mask (linear modes)
   221 00000037 ??                  <1>     .lin_red_field_position    resb 1    ; Bit position of red mask (linear modes)
   222 00000038 ??                  <1>     .lin_green_mask_size       resb 1    ; Size of direct color green mask (linear modes)
   223 00000039 ??                  <1>     .lin_green_field_position  resb 1    ; Bit position of green mask (linear modes)
   224 0000003A ??                  <1>     .lin_blue_mask_size        resb 1    ; Size of direct color blue mask (linear modes)
   225 0000003B ??                  <1>     .lin_blue_field_position   resb 1    ; Bit position of blue mask (linear modes)
   226 0000003C ??                  <1>     .lin_reserved_mask_size    resb 1    ; Size of direct color reserved mask (linear modes)
   227 0000003D ??                  <1>     .lin_reserved_field_position resb 1  ; Bit position of reserved mask (linear modes)
   228 0000003E ????????            <1>     .max_pixel_clock           resd 1    ; Maximum pixel clock (Hz)
   229 00000042 <res BEh>           <1>     .reserved4                 resb 190  ; Reserved for future expansion
   230                              <1> endstruc
   231                              <1> 
   232                              <1> struc e820_memory_entry
   233 00000000 ????????            <1>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   234 00000004 ????????            <1>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   235 00000008 ????????            <1>     .length_low               resd 1    ; Lower 32 bits of the length
   236 0000000C ????????            <1>     .length_high              resd 1    ; Upper 32 bits of the length
   237 00000010 ????????            <1>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   238                              <1>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   239                              <1> endstruc
   240                              <1> 
   241                              <1> %endif
     2                                  %include "../kernel/stddef.asm"
     1                              <1> %ifndef STDDEF_ASM
     2                              <1> %define STDDEF_ASM
     3                              <1> 
     4                              <1> ;-----------Calling Conventions Standard------------;
     5                              <1> %define USE_CC_STANDARD
     6                              <1> %ifdef USE_CC_STANDARD
     7                              <1> ;caller maintain the stack balance 
     8                              <1> 
     9                              <1> 
    10                              <1> ; -------------------------------
    11                              <1> ; 栈帧结构定义
    12                              <1> ; -------------------------------
    13                              <1> ; 调用后的栈布局:
    14                              <1> ; [rsp+0x00] 返回地址 (8字节)
    15                              <1> ; [rsp+0x08] 旧RBP     (8字节) <- rbp指向这里
    16                              <1> ; [rsp+0x10] 参数1     (8字节)
    17                              <1> ; [rsp+0x18] 参数2
    18                              <1> ; ...
    19                              <1> ; [rsp+X]    局部变量区
    20                              <1> ; -------------------------------
    21                              <1> 
    22                              <1> %define PARAM_OFFSET   16      ; 第一个参数的偏移量(返回地址8 + 旧RBP8)
    23                              <1> %macro function 1-* ; 1=函数名, 2=返回参数数量, 3=参数列表
    24                              <1>     %assign param_count %0 - 2 ; 参数数量
    25                              <1>     
    26                              <1>     %if param_count < 0
    27                              <1>         %assign param_count 0 ; 如果没有参数，设置为 0
    28                              <1>     %endif
    29                              <1>     %if param_count < 1
    30                              <1>         %assign ret_param_count 0 ; 返回参数数量
    31                              <1>     %else
    32                              <1>         %assign ret_param_count %2 ; 返回参数数量
    33                              <1>     %endif
    34                              <1>     
    35                              <1> 
    36                              <1>     ; 准备调用
    37                              <1>     prepare_call param_count, ret_param_count
    38                              <1> 
    39                              <1>     ; 如果有参数，将参数压入栈
    40                              <1>     %if param_count > 0
    41                              <1>         %assign i 0
    42                              <1>         %rep param_count
    43                              <1>             %rotate 1
    44                              <1>             mov rax, %2
    45                              <1>             ; mov rbx, %2
    46                              <1>             ; mov rcx, %3
    47                              <1>             ; jmp $
    48                              <1>             mov [rsp + 8*i], rax ; 将参数压入栈
    49                              <1>             %assign i i+1
    50                              <1>         %endrep
    51                              <1>         %rotate 1
    52                              <1>         %rotate 1
    53                              <1>     %endif
    54                              <1> 
    55                              <1>     ; 调用函数
    56                              <1>     call %1
    57                              <1> 
    58                              <1>     ; 清理栈空间
    59                              <1>     cleanup_call param_count, ret_param_count
    60                              <1> 
    61                              <1>     ; %if param_count < 0
    62                              <1>     ;     %assign param_count 0
    63                              <1>     ;     %assign ret_param_count 0
    64                              <1> 
    65                              <1>     ;     prepare_call param_count, ret_param_count ; 准备调用
    66                              <1> 
    67                              <1>     ;     call %1
    68                              <1> 
    69                              <1>     ;     cleanup_call param_count, ret_param_count ; 清理栈空间
    70                              <1>     ; %elseif param_count == 0
    71                              <1>     ;     %assign ret_param_count %2 ; 返回参数数量
    72                              <1> 
    73                              <1>     ;     prepare_call param_count, ret_param_count ; 准备调用
    74                              <1> 
    75                              <1>     ;     call %1
    76                              <1> 
    77                              <1>     ;     cleanup_call param_count, ret_param_count ; 清理栈空间
    78                              <1>     ; %else 
    79                              <1>     ;     %assign ret_param_count %2 ; 返回参数数量
    80                              <1> 
    81                              <1>     ;     prepare_call param_count, ret_param_count ; 准备调用
    82                              <1> 
    83                              <1>     ;     %assign i 0
    84                              <1>     ;     %rep param_count
    85                              <1>     ;         %rotate -1
    86                              <1>     ;         mov rax, %3
    87                              <1>     ;         mov [rsp + 8*i], rax ; 将参数压入栈
    88                              <1>     ;         %assign i i+1 
    89                              <1>     ;     %endrep
    90                              <1> 
    91                              <1>     ;     call %3
    92                              <1> 
    93                              <1>     ;     cleanup_call param_count, %4 ; 清理栈空间
    94                              <1>     ; %endif
    95                              <1> %endmacro
    96                              <1> 
    97                              <1> %macro prolog 1;local var size(bytes)
    98                              <1>     push rbp
    99                              <1>     mov rbp, rsp
   100                              <1> 
   101                              <1>     mov rax, %1
   102                              <1>     add rax, 15
   103                              <1>     and rax, ~15
   104                              <1>     sub rsp, rax
   105                              <1> 
   106                              <1>     push r15
   107                              <1>     push r14
   108                              <1>     push r13
   109                              <1>     push r12
   110                              <1>     push r11
   111                              <1>     push r10
   112                              <1>     push r9
   113                              <1>     push r8
   114                              <1>     push rdi
   115                              <1>     push rsi
   116                              <1>     push rdx
   117                              <1>     push rcx
   118                              <1>     push rbx
   119                              <1>     push rax
   120                              <1>     
   121                              <1>     ; 调试信息可以放在这里
   122                              <1>     ; %ifdef DEBUG
   123                              <1>     ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
   124                              <1>     ; %endif
   125                              <1> %endmacro
   126                              <1> 
   127                              <1> %macro epilog 0
   128                              <1>     pop rax
   129                              <1>     pop rbx
   130                              <1>     pop rcx
   131                              <1>     pop rdx
   132                              <1>     pop rsi
   133                              <1>     pop rdi
   134                              <1>     pop r8
   135                              <1>     pop r9
   136                              <1>     pop r10
   137                              <1>     pop r11
   138                              <1>     pop r12
   139                              <1>     pop r13
   140                              <1>     pop r14
   141                              <1>     pop r15
   142                              <1> 
   143                              <1>     mov rsp, rbp
   144                              <1>     pop rbp
   145                              <1>     ret
   146                              <1> %endmacro
   147                              <1> 
   148                              <1> %macro get_param 2;1=register, 2=param index(from 1)
   149                              <1>     mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   150                              <1> %endmacro
   151                              <1> 
   152                              <1> %macro set_ret_param 2;1=register, 2=param index(from 1)
   153                              <1>     mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   154                              <1> %endmacro
   155                              <1> 
   156                              <1> %macro prepare_call 2;1=param count, 2=return param count
   157                              <1>     %assign total_space ((%1 + %2) * 8)
   158                              <1>     
   159                              <1>     %if (total_space % 16) != 0
   160                              <1>         %assign total_space total_space + 8  ; 添加填充
   161                              <1>     %endif
   162                              <1>     
   163                              <1>     sub rsp, total_space
   164                              <1> %endmacro
   165                              <1> 
   166                              <1> %macro cleanup_call 2;1=param count, 2=return param count
   167                              <1>     %assign total_space ((%1 + %2) * 8)
   168                              <1>     %if (total_space % 16) != 0
   169                              <1>         %assign total_space total_space + 8
   170                              <1>     %endif
   171                              <1>     add rsp, total_space
   172                              <1> %endmacro
   173                              <1> 
   174                              <1> 
   175                              <1> ; %macro function 1-*;1=function entry offset
   176                              <1> ;     prepare_call %0-2,1
   177                              <1> 
   178                              <1> ;     %assign i %0
   179                              <1> ;     %rep i-1
   180                              <1> ;         %rotate -1
   181                              <1> ;         push %1
   182                              <1> ;     %endrep
   183                              <1> ;     call %1
   184                              <1> 
   185                              <1> ;     cleanup_call %0-2,1
   186                              <1> ;     ; mov rax,[rsp-8]
   187                              <1> ; %endmacro
   188                              <1> 
   189                              <1> %endif
   190                              <1> ;---------------------ABI Standard------------------;
   191                              <1> %define USE_ABI_STANDARD
   192                              <1> %ifdef USE_ABI_STANDARD
   193                              <1> 
   194                              <1> 
   195                              <1>     %define ABI_File_None   0       ; 无文件类型
   196                              <1>     %define ABI_File_REL    1       ; 可重定位文件
   197                              <1>     %define ABI_File_EXEC   2       ; 可执行文件
   198                              <1>     %define ABI_File_DYN    3       ; 共享目标文件
   199                              <1>     %define ABI_File_CORE   4       ; 核心文件
   200                              <1> 
   201                              <1>     %define Section_Type_NULL    0      ; 未使用
   202                              <1>     %define Section_Type_LOAD    1      ; 可加载段
   203                              <1>     %define Section_Type_DYNAMIC 2      ; 动态链接信息
   204                              <1>     %define Section_Type_INTERP  3      ; 解释器路径
   205                              <1>     %define Section_Type_NOTE    4      ; 辅助信息
   206                              <1>     %define Section_Type_SHLIB   5      ; 保留
   207                              <1> 
   208                              <1>     %macro ABI_HEADER 4 ;1=File Type, 2=Entry Point Address, 3=Section Header Offset, 4=Section Header Count
   209                              <1>         db 0xA5, 'A', 'B', 'I'     ; ABI Magic Number
   210                              <1>         db 1                       ; Encode Type
   211                              <1>         db 1                       ; ABI Version
   212                              <1> 
   213                              <1>         dw %1                      ; ABI File Type
   214                              <1>         dq %2                      ; Entry Point Address
   215                              <1>         dw 32                      ; ABI Headers Size
   216                              <1> 
   217                              <1>         dq %3                      ; Section Header Offset
   218                              <1>         dw 32                      ; Section Header Size
   219                              <1>         dw %4                      ; Section Header Count
   220                              <1>         dw 0                       ; Symble Table Entry Size
   221                              <1>     %endmacro
   222                              <1>     STRUC struct_ABI_HEADER
   223 00000000 ????????            <1>         .magic:         resb 4    ; ABI Magic Number (4 bytes)
   224 00000004 ??                  <1>         .encode_type:   resb 1    ; Encode Type (1 byte)
   225 00000005 ??                  <1>         .abi_version:   resb 1    ; ABI Version (1 byte)
   226 00000006 ????                <1>         .file_type:     resw 1    ; ABI File Type (2 bytes)
   227 00000008 ????????????????    <1>         .entry_point:   resq 1    ; Entry Point Address (8 bytes)
   228 00000010 ????                <1>         .header_size:   resw 1    ; ABI Headers Size (2 bytes)
   229 00000012 ????????????????    <1>         .section_offset: resq 1   ; Section Header Offset (8 bytes)
   230 0000001A ????                <1>         .section_size:  resw 1    ; Section Header Size (2 bytes)
   231 0000001C ????                <1>         .section_count: resw 1    ; Section Header Count (2 bytes)
   232 0000001E ????                <1>         .sym_table_size: resw 1   ; Symbol Table Entry Size (2 bytes)
   233                              <1>     ENDSTRUC
   234                              <1> 
   235                              <1>     %macro SECTION_HEADER 4 ;1=Section Type, 2=Virtual Address, 3=Section Offset, 4=Section Size
   236                              <1>         dq %1                  ; Section Type
   237                              <1>         dq %2                  ; Virtual Address
   238                              <1>         dq %3                  ; Section Offset
   239                              <1>         dq %4                  ; Section Size
   240                              <1>     %endmacro
   241                              <1>     STRUC struct_SECTION_HEADER
   242 00000000 ????????????????    <1>         .type:      resq 1    ; Section Type (8 bytes)
   243 00000008 ????????????????    <1>         .vaddr:     resq 1    ; Virtual Address (8 bytes)
   244 00000010 ????????????????    <1>         .offset:    resq 1    ; Section Offset (8 bytes)
   245 00000018 ????????????????    <1>         .size:      resq 1    ; Section Size (8 bytes)
   246                              <1>     ENDSTRUC
   247                              <1> %endif
   248                              <1> 
   249                              <1> %endif
     3                                  [BITS 64]          ; 0xFFFF800000106200
     4                                  ehdr:
     5                                      ABI_HEADER ABI_File_CORE, kernel_start, shdr,1
   209 00000000 A5414249            <1>  db 0xA5, 'A', 'B', 'I'
   210 00000004 01                  <1>  db 1
   211 00000005 01                  <1>  db 1
   212                              <1> 
   213 00000006 0400                <1>  dw %1
   214 00000008 [4000000000000000]  <1>  dq %2
   215 00000010 2000                <1>  dw 32
   216                              <1> 
   217 00000012 [2000000000000000]  <1>  dq %3
   218 0000001A 2000                <1>  dw 32
   219 0000001C 0100                <1>  dw %4
   220 0000001E 0000                <1>  dw 0
     6                                  shdr:
     7                                      SECTION_HEADER Section_Type_LOAD, 0, kernel_start,section_end-section_start
   236 00000020 0100000000000000    <1>  dq %1
   237 00000028 0000000000000000    <1>  dq %2
   238 00000030 [4000000000000000]  <1>  dq %3
   239 00000038 1511000000000000    <1>  dq %4
     8                                  section_start:
     9                                  kernel_start:
    10                                  
    11                                      function video_init
    24                              <1>  %assign param_count %0 - 2
    25                              <1> 
    26                              <1>  %if param_count < 0
    27                              <1>  %assign param_count 0
    28                              <1>  %endif
    29                              <1>  %if param_count < 1
    30                              <1>  %assign ret_param_count 0
    31                              <1>  %else
    32                              <1>  %assign ret_param_count %2
    33                              <1>  %endif
    34                              <1> 
    35                              <1> 
    36                              <1> 
    37                              <1>  prepare_call param_count, ret_param_count
   157                              <2>  %assign total_space ((%1 + %2) * 8)
   158                              <2> 
   159                              <2>  %if (total_space % 16) != 0
   160                              <2>  %assign total_space total_space + 8
   161                              <2>  %endif
   162                              <2> 
   163 00000040 4883EC00            <2>  sub rsp, total_space
    38                              <1> 
    39                              <1> 
    40                              <1>  %if param_count > 0
    41                              <1>  %assign i 0
    42                              <1>  %rep param_count
    43                              <1>  %rotate 1
    44                              <1>  mov rax, %2
    45                              <1> 
    46                              <1> 
    47                              <1> 
    48                              <1>  mov [rsp + 8*i], rax
    49                              <1>  %assign i i+1
    50                              <1>  %endrep
    51                              <1>  %rotate 1
    52                              <1>  %rotate 1
    53                              <1>  %endif
    54                              <1> 
    55                              <1> 
    56 00000044 E879020000          <1>  call %1
    57                              <1> 
    58                              <1> 
    59                              <1>  cleanup_call param_count, ret_param_count
   167                              <2>  %assign total_space ((%1 + %2) * 8)
   168                              <2>  %if (total_space % 16) != 0
   169                              <2>  %assign total_space total_space + 8
   170                              <2>  %endif
   171 00000049 4883C400            <2>  add rsp, total_space
    60                              <1> 
    61                              <1> 
    62                              <1> 
    63                              <1> 
    64                              <1> 
    65                              <1> 
    66                              <1> 
    67                              <1> 
    68                              <1> 
    69                              <1> 
    70                              <1> 
    71                              <1> 
    72                              <1> 
    73                              <1> 
    74                              <1> 
    75                              <1> 
    76                              <1> 
    77                              <1> 
    78                              <1> 
    79                              <1> 
    80                              <1> 
    81                              <1> 
    82                              <1> 
    83                              <1> 
    84                              <1> 
    85                              <1> 
    86                              <1> 
    87                              <1> 
    88                              <1> 
    89                              <1> 
    90                              <1> 
    91                              <1> 
    92                              <1> 
    93                              <1> 
    94                              <1> 
    12                                      ; prepare_call 1,1
    13                                      ; call video_init
    14                                      ; cleanup_call 1,1
    15                                  
    16                                      prepare_call 1,1
   157                              <1>  %assign total_space ((%1 + %2) * 8)
   158                              <1> 
   159                              <1>  %if (total_space % 16) != 0
   160                              <1>  %assign total_space total_space + 8
   161                              <1>  %endif
   162                              <1> 
   163 0000004D 4883EC10            <1>  sub rsp, total_space
    17 00000051 E856090000                  call printk_init
    18                                      cleanup_call 1,1
   167                              <1>  %assign total_space ((%1 + %2) * 8)
   168                              <1>  %if (total_space % 16) != 0
   169                              <1>  %assign total_space total_space + 8
   170                              <1>  %endif
   171 00000056 4883C410            <1>  add rsp, total_space
    19                                  
    20                                      prepare_call 3,1
   157                              <1>  %assign total_space ((%1 + %2) * 8)
   158                              <1> 
   159                              <1>  %if (total_space % 16) != 0
   160                              <1>  %assign total_space total_space + 8
   161                              <1>  %endif
   162                              <1> 
   163 0000005A 4883EC20            <1>  sub rsp, total_space
    21 0000005E 48C7442410FFFFFF00          mov qword [rsp+16], 0x00FFFFFF
    22 00000067 48C7442408C8000000          mov qword [rsp+8], 200
    23 00000070 48C7042464000000            mov qword [rsp], 100
    24 00000078 E8E7020000                  call draw_pixel
    25                                      cleanup_call 3,1
   167                              <1>  %assign total_space ((%1 + %2) * 8)
   168                              <1>  %if (total_space % 16) != 0
   169                              <1>  %assign total_space total_space + 8
   170                              <1>  %endif
   171 0000007D 4883C420            <1>  add rsp, total_space
    26 00000081 488B4424F8                  mov rax, [rsp-8]
    27                                  
    28                                      ; draw_line; Input: x1,y1,x2,y2,color
    29                                      prepare_call 5,1
   157                              <1>  %assign total_space ((%1 + %2) * 8)
   158                              <1> 
   159                              <1>  %if (total_space % 16) != 0
   160                              <1>  %assign total_space total_space + 8
   161                              <1>  %endif
   162                              <1> 
   163 00000086 4883EC30            <1>  sub rsp, total_space
    30 0000008A 48C7442420FFFFFF00          mov qword [rsp+32], 0x00FFFFFF
    31 00000093 48C744241890010000          mov qword [rsp+24], 400
    32 0000009C 48C744241090010000          mov qword [rsp+16], 400
    33                                  
    34 000000A5 48C7442408C8000000          mov qword [rsp+8], 200
    35 000000AE 48C70424C8000000            mov qword [rsp], 200
    36 000000B6 E828030000                  call draw_line
    37                                      cleanup_call 5,1
   167                              <1>  %assign total_space ((%1 + %2) * 8)
   168                              <1>  %if (total_space % 16) != 0
   169                              <1>  %assign total_space total_space + 8
   170                              <1>  %endif
   171 000000BB 4883C430            <1>  add rsp, total_space
    38 000000BF 488B4424F8                  mov rax, [rsp-8]
    39                                  
    40                                      ; draw_rect; Input: x1,y1,x2,y2,color
    41                                      ; prepare_call 5,1
    42                                      ; mov qword [rsp+32], 0x00FFFFFF
    43                                      ; mov qword [rsp+24], 400
    44                                      ; mov qword [rsp+16], 400
    45                                  
    46                                      ; mov qword [rsp+8], 200
    47                                      ; mov qword [rsp], 200
    48                                      ; call draw_rect
    49                                      ; cleanup_call 5,1
    50                                      ; mov rax, [rsp-8]
    51                                  
    52                                      function draw_rect,1,200,300,400,500,0x00FFFFFF
    24                              <1>  %assign param_count %0 - 2
    25                              <1> 
    26                              <1>  %if param_count < 0
    27                              <1>  %assign param_count 0
    28                              <1>  %endif
    29                              <1>  %if param_count < 1
    30                              <1>  %assign ret_param_count 0
    31                              <1>  %else
    32                              <1>  %assign ret_param_count %2
    33                              <1>  %endif
    34                              <1> 
    35                              <1> 
    36                              <1> 
    37                              <1>  prepare_call param_count, ret_param_count
   157                              <2>  %assign total_space ((%1 + %2) * 8)
   158                              <2> 
   159                              <2>  %if (total_space % 16) != 0
   160                              <2>  %assign total_space total_space + 8
   161                              <2>  %endif
   162                              <2> 
   163 000000C4 4883EC30            <2>  sub rsp, total_space
    38                              <1> 
    39                              <1> 
    40                              <1>  %if param_count > 0
    41                              <1>  %assign i 0
    42                              <1>  %rep param_count
    43                              <1>  %rotate 1
    44                              <1>  mov rax, %2
    45                              <1> 
    46                              <1> 
    47                              <1> 
    48                              <1>  mov [rsp + 8*i], rax
    49                              <1>  %assign i i+1
    50                              <1>  %endrep
    43                              <2>  %rotate 1
    44 000000C8 B8C8000000          <2>  mov rax, %2
    45                              <2> 
    46                              <2> 
    47                              <2> 
    48 000000CD 48890424            <2>  mov [rsp + 8*i], rax
    49                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 000000D1 B82C010000          <2>  mov rax, %2
    45                              <2> 
    46                              <2> 
    47                              <2> 
    48 000000D6 4889442408          <2>  mov [rsp + 8*i], rax
    49                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 000000DB B890010000          <2>  mov rax, %2
    45                              <2> 
    46                              <2> 
    47                              <2> 
    48 000000E0 4889442410          <2>  mov [rsp + 8*i], rax
    49                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 000000E5 B8F4010000          <2>  mov rax, %2
    45                              <2> 
    46                              <2> 
    47                              <2> 
    48 000000EA 4889442418          <2>  mov [rsp + 8*i], rax
    49                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 000000EF B8FFFFFF00          <2>  mov rax, %2
    45                              <2> 
    46                              <2> 
    47                              <2> 
    48 000000F4 4889442420          <2>  mov [rsp + 8*i], rax
    49                              <2>  %assign i i+1
    51                              <1>  %rotate 1
    52                              <1>  %rotate 1
    53                              <1>  %endif
    54                              <1> 
    55                              <1> 
    56 000000F9 E841040000          <1>  call %1
    57                              <1> 
    58                              <1> 
    59                              <1>  cleanup_call param_count, ret_param_count
   167                              <2>  %assign total_space ((%1 + %2) * 8)
   168                              <2>  %if (total_space % 16) != 0
   169                              <2>  %assign total_space total_space + 8
   170                              <2>  %endif
   171 000000FE 4883C430            <2>  add rsp, total_space
    60                              <1> 
    61                              <1> 
    62                              <1> 
    63                              <1> 
    64                              <1> 
    65                              <1> 
    66                              <1> 
    67                              <1> 
    68                              <1> 
    69                              <1> 
    70                              <1> 
    71                              <1> 
    72                              <1> 
    73                              <1> 
    74                              <1> 
    75                              <1> 
    76                              <1> 
    77                              <1> 
    78                              <1> 
    79                              <1> 
    80                              <1> 
    81                              <1> 
    82                              <1> 
    83                              <1> 
    84                              <1> 
    85                              <1> 
    86                              <1> 
    87                              <1> 
    88                              <1> 
    89                              <1> 
    90                              <1> 
    91                              <1> 
    92                              <1> 
    93                              <1> 
    94                              <1> 
    53                                      ; ; draw_screen; Input: color
    54                                      ; prepare_call 1,1
    55                                      ; mov qword [rsp], 0x00000000
    56                                      ; call draw_screen
    57                                      ; cleanup_call 1,1
    58                                      ; mov rax, [rsp-8]
    59                                  
    60                                  ; draw_circle: ; Input: x_center, y_center, radius, color
    61                                      prepare_call 4,1
   157                              <1>  %assign total_space ((%1 + %2) * 8)
   158                              <1> 
   159                              <1>  %if (total_space % 16) != 0
   160                              <1>  %assign total_space total_space + 8
   161                              <1>  %endif
   162                              <1> 
   163 00000102 4883EC30            <1>  sub rsp, total_space
    62 00000106 48C7442418FFFFFF00          mov qword [rsp+24], 0x00FFFFFF
    63 0000010F 48C7442410C8000000          mov qword [rsp+16], 200
    64                                  
    65 00000118 48C74424082C010000          mov qword [rsp+8], 300
    66 00000121 48C704242C010000            mov qword [rsp], 300
    67 00000129 E87E060000                  call draw_circle
    68                                      cleanup_call 4,1
   167                              <1>  %assign total_space ((%1 + %2) * 8)
   168                              <1>  %if (total_space % 16) != 0
   169                              <1>  %assign total_space total_space + 8
   170                              <1>  %endif
   171 0000012E 4883C430            <1>  add rsp, total_space
    69 00000132 488B4424F8                  mov rax, [rsp-8]
    70                                  
    71                                      ;draw_triangle: ; Input: x1, y1, x2, y2, x3, y3, color
    72                                      prepare_call 7,1
   157                              <1>  %assign total_space ((%1 + %2) * 8)
   158                              <1> 
   159                              <1>  %if (total_space % 16) != 0
   160                              <1>  %assign total_space total_space + 8
   161                              <1>  %endif
   162                              <1> 
   163 00000137 4883EC40            <1>  sub rsp, total_space
    73 0000013B 48C7442430FFFFFF00          mov qword [rsp+48], 0x00FFFFFF
    74                                  
    75 00000144 48C74424285E010000          mov qword [rsp+40], 350
    76 0000014D 48C74424205E010000          mov qword [rsp+32], 350
    77                                  
    78 00000156 48C74424182C010000          mov qword [rsp+24], 300
    79 0000015F 48C744241090010000          mov qword [rsp+16], 400
    80                                  
    81 00000168 48C74424082C010000          mov qword [rsp+8], 300
    82 00000171 48C704242C010000            mov qword [rsp], 300
    83 00000179 E85A050000                  call draw_triangle
    84                                      cleanup_call 7,1
   167                              <1>  %assign total_space ((%1 + %2) * 8)
   168                              <1>  %if (total_space % 16) != 0
   169                              <1>  %assign total_space total_space + 8
   170                              <1>  %endif
   171 0000017E 4883C440            <1>  add rsp, total_space
    85 00000182 488B4424F8                  mov rax, [rsp-8]
    86                                  
    87                                  
    88                                  
    89                                  
    90                                      prepare_call 3,1
   157                              <1>  %assign total_space ((%1 + %2) * 8)
   158                              <1> 
   159                              <1>  %if (total_space % 16) != 0
   160                              <1>  %assign total_space total_space + 8
   161                              <1>  %endif
   162                              <1> 
   163 00000187 4883EC20            <1>  sub rsp, total_space
    91 0000018B 488D35540D0000              lea rsi,[rel messages]
    92 00000192 4889742410                  mov qword [rsp+16], rsi
    93 00000197 48C744240800000000          mov qword [rsp+8], 0
    94 000001A0 48C7042400000000            mov qword [rsp], 0
    95 000001A8 E8740C0000                  call draw_string
    96                                      cleanup_call 3,1
   167                              <1>  %assign total_space ((%1 + %2) * 8)
   168                              <1>  %if (total_space % 16) != 0
   169                              <1>  %assign total_space total_space + 8
   170                              <1>  %endif
   171 000001AD 4883C420            <1>  add rsp, total_space
    97 000001B1 488B4424F8                  mov rax, [rsp-8]
    98                                  
    99                                  
   100                                  
   101                                      prepare_call 3,1
   157                              <1>  %assign total_space ((%1 + %2) * 8)
   158                              <1> 
   159                              <1>  %if (total_space % 16) != 0
   160                              <1>  %assign total_space total_space + 8
   161                              <1>  %endif
   162                              <1> 
   163 000001B6 4883EC20            <1>  sub rsp, total_space
   102 000001BA 488D354E0D0000              lea rsi,[rel messages1]
   103 000001C1 4889742410                  mov qword [rsp+16], rsi
   104 000001C6 48C744240814000000          mov qword [rsp+8], 20
   105 000001CF 48C7042400000000            mov qword [rsp], 0
   106 000001D7 E8450C0000                  call draw_string
   107                                      cleanup_call 3,1
   167                              <1>  %assign total_space ((%1 + %2) * 8)
   168                              <1>  %if (total_space % 16) != 0
   169                              <1>  %assign total_space total_space + 8
   170                              <1>  %endif
   171 000001DC 4883C420            <1>  add rsp, total_space
   108 000001E0 488B4424F8                  mov rax, [rsp-8]
   109                                  
   110                                          prepare_call 3,1
   157                              <1>  %assign total_space ((%1 + %2) * 8)
   158                              <1> 
   159                              <1>  %if (total_space % 16) != 0
   160                              <1>  %assign total_space total_space + 8
   161                              <1>  %endif
   162                              <1> 
   163 000001E5 4883EC20            <1>  sub rsp, total_space
   111 000001E9 488D35530D0000              lea rsi,[rel messages2]
   112 000001F0 4889742410                  mov qword [rsp+16], rsi
   113 000001F5 48C744240828000000          mov qword [rsp+8], 40
   114 000001FE 48C7042400000000            mov qword [rsp], 0
   115 00000206 E8160C0000                  call draw_string
   116                                      cleanup_call 3,1
   167                              <1>  %assign total_space ((%1 + %2) * 8)
   168                              <1>  %if (total_space % 16) != 0
   169                              <1>  %assign total_space total_space + 8
   170                              <1>  %endif
   171 0000020B 4883C420            <1>  add rsp, total_space
   117 0000020F 488B4424F8                  mov rax, [rsp-8]
   118                                  
   119                                          prepare_call 3,1
   157                              <1>  %assign total_space ((%1 + %2) * 8)
   158                              <1> 
   159                              <1>  %if (total_space % 16) != 0
   160                              <1>  %assign total_space total_space + 8
   161                              <1>  %endif
   162                              <1> 
   163 00000214 4883EC20            <1>  sub rsp, total_space
   120 00000218 488D356B0D0000              lea rsi,[rel messages3]
   121 0000021F 4889742410                  mov qword [rsp+16], rsi
   122 00000224 48C74424083C000000          mov qword [rsp+8], 60
   123 0000022D 48C7042400000000            mov qword [rsp], 0
   124 00000235 E8E70B0000                  call draw_string
   125                                      cleanup_call 3,1
   167                              <1>  %assign total_space ((%1 + %2) * 8)
   168                              <1>  %if (total_space % 16) != 0
   169                              <1>  %assign total_space total_space + 8
   170                              <1>  %endif
   171 0000023A 4883C420            <1>  add rsp, total_space
   126 0000023E 488B4424F8                  mov rax, [rsp-8]
   127                                  
   128                                      prepare_call 2,1
   157                              <1>  %assign total_space ((%1 + %2) * 8)
   158                              <1> 
   159                              <1>  %if (total_space % 16) != 0
   160                              <1>  %assign total_space total_space + 8
   161                              <1>  %endif
   162                              <1> 
   163 00000243 4883EC20            <1>  sub rsp, total_space
   129 00000247 488D358A0E0000              lea rsi, [rel format1]
   130 0000024E 488D15A00E0000              lea rdx, [rel string1]
   131                                  
   132 00000255 4889542408                  mov qword [rsp+8], rdx
   133 0000025A 48893424                    mov qword [rsp], rsi
   134 0000025E E80D080000                  call printk
   135                                      cleanup_call 2,1
   167                              <1>  %assign total_space ((%1 + %2) * 8)
   168                              <1>  %if (total_space % 16) != 0
   169                              <1>  %assign total_space total_space + 8
   170                              <1>  %endif
   171 00000263 4883C420            <1>  add rsp, total_space
   136 00000267 488B4424F8                  mov rax, [rsp-8]
   137 0000026C EBFE                    jmp $
   138                                      ; lea rsi, [format1]
   139                                      ; lea rdx, [string1]
   140                                      ; call printk
   141                                  
   142                                      ; mov rdi, 0xFFFF800003000000
   143                                      ; mov rax,0
   144                                      ; mov rbx,40
   145                                      ; mov rcx,30
   146                                  
   147                                      ; ; lea rsi,[rel params]
   148                                      ; mov rsi,0xffff800000008800
   149                                      ; call print_hex_str
   150                                  
   151 0000026E EBFE                        jmp $
   152                                  
   153                                  parse_system_params:
   154                                      prolog 2;
    98 00000270 55                  <1>  push rbp
    99 00000271 4889E5              <1>  mov rbp, rsp
   100                              <1> 
   101 00000274 B802000000          <1>  mov rax, %1
   102 00000279 4883C00F            <1>  add rax, 15
   103 0000027D 4883E0F0            <1>  and rax, ~15
   104 00000281 4829C4              <1>  sub rsp, rax
   105                              <1> 
   106 00000284 4157                <1>  push r15
   107 00000286 4156                <1>  push r14
   108 00000288 4155                <1>  push r13
   109 0000028A 4154                <1>  push r12
   110 0000028C 4153                <1>  push r11
   111 0000028E 4152                <1>  push r10
   112 00000290 4151                <1>  push r9
   113 00000292 4150                <1>  push r8
   114 00000294 57                  <1>  push rdi
   115 00000295 56                  <1>  push rsi
   116 00000296 52                  <1>  push rdx
   117 00000297 51                  <1>  push rcx
   118 00000298 53                  <1>  push rbx
   119 00000299 50                  <1>  push rax
   120                              <1> 
   121                              <1> 
   122                              <1> 
   123                              <1> 
   124                              <1> 
   155                                  
   156                                  
   157                                      epilog
   128 0000029A 58                  <1>  pop rax
   129 0000029B 5B                  <1>  pop rbx
   130 0000029C 59                  <1>  pop rcx
   131 0000029D 5A                  <1>  pop rdx
   132 0000029E 5E                  <1>  pop rsi
   133 0000029F 5F                  <1>  pop rdi
   134 000002A0 4158                <1>  pop r8
   135 000002A2 4159                <1>  pop r9
   136 000002A4 415A                <1>  pop r10
   137 000002A6 415B                <1>  pop r11
   138 000002A8 415C                <1>  pop r12
   139 000002AA 415D                <1>  pop r13
   140 000002AC 415E                <1>  pop r14
   141 000002AE 415F                <1>  pop r15
   142                              <1> 
   143 000002B0 4889EC              <1>  mov rsp, rbp
   144 000002B3 5D                  <1>  pop rbp
   145 000002B4 C3                  <1>  ret
   158                                      
   159                                  %include "../kernel/printk.asm"
     1                              <1> %ifndef PRINTK_ASM
     2                              <1> %define PRINTK_ASM
     3                              <1> 
     4                              <1> %include "../bootloader/global_def.asm"
     1                              <2> %ifndef GLOBAL_DEF_ASM
     2                              <2> %define GLOBAL_DEF_ASM
     3                              <2> 
     4                              <2> 
     5                              <2> ;|----------------------|
     6                              <2> ;|	100000 ~ END	|
     7                              <2> ;|	   KERNEL	|
     8                              <2> ;|----------------------|
     9                              <2> ;|	E0000 ~ 100000	|
    10                              <2> ;| Extended System BIOS |
    11                              <2> ;|----------------------|
    12                              <2> ;|	C0000 ~ Dffff	|
    13                              <2> ;|     Expansion Area   |
    14                              <2> ;|----------------------|
    15                              <2> ;|	A0000 ~ bffff	|
    16                              <2> ;|   Legacy Video Area  |
    17                              <2> ;|----------------------|
    18                              <2> ;|	9f000 ~ A0000	|
    19                              <2> ;|	 BIOS reserve	|
    20                              <2> ;|----------------------|
    21                              <2> ;|	90000 ~ 9f000	|
    22                              <2> ;|	 kernel tmpbuf	|
    23                              <2> ;|----------------------|
    24                              <2> ;|	10000 ~ 90000	|
    25                              <2> ;|	   LOADER	|
    26                              <2> ;|----------------------|
    27                              <2> ;|	8000 ~ 10000	|
    28                              <2> ;|	  VBE info	|
    29                              <2> ;|----------------------|
    30                              <2> ;|	7e00 ~ 8000	|
    31                              <2> ;|	  mem info	|
    32                              <2> ;|----------------------|
    33                              <2> ;|	7c00 ~ 7e00	|
    34                              <2> ;|	 MBR (BOOT)	|
    35                              <2> ;|----------------------|
    36                              <2> ;|	0000 ~ 7c00	|
    37                              <2> ;|	 BIOS Code	|
    38                              <2> ;|----------------------|
    39                              <2> 
    40                              <2> 
    41                              <2> ;_______________________________________________________
    42                              <2> ; START	END	    SIZE	        USED
    43                              <2> ; FFFF0	FFFFF	16B	        BIOS System Entry
    44                              <2> ; F0000	FFFEF	64KB-16B	BIOS System Code
    45                              <2> ; C8000	EFFFF	160KB	    ROM/Mapped IO
    46                              <2> ; C0000	C7FFF	32KB	    Graphic Adapter BIOS
    47                              <2> ; B8000	BFFFF	32KB	    Chroma Text Video Buffer
    48                              <2> ; B0000	B7FFF	32KB	    Mono Text Video Buffer
    49                              <2> ; A0000	AFFFF	64KB	    Graphic Video Buffer
    50                              <2> ; 9FC00	9FFFF	1KB	        Extended BIOS Data Area
    51                              <2> ; 7E00	9FBFF	622080B     Useable 608KB	
    52                              <2> ; 7C00	7DFF	512B	    MBR
    53                              <2> ; 500	7BFF	30464B      Useable 30KB	
    54                              <2> ; 400	4FF	    256B	    BIOS Data Area
    55                              <2> ; 000	3FF	    1KB	        IVT
    56                              <2> ; _____________________________________________________
    57                              <2> 
    58                              <2> 
    59                              <2> 
    60                              <2> 
    61                              <2> 
    62                              <2> 
    63                              <2> 
    64                              <2> 
    65                              <2> 
    66                              <2> 
    67                              <2> 
    68                              <2> ;|----------------------|
    69                              <2> ;|	100000 ~ END	|
    70                              <2> ;|	   KERNEL	|
    71                              <2> ;|----------------------|
    72                              <2> ;|	E0000 ~ 100000	|
    73                              <2> ;| Extended System BIOS |
    74                              <2> ;|----------------------|
    75                              <2> ;|	C0000 ~ Dffff	|
    76                              <2> ;|     Expansion Area   |
    77                              <2> ;|----------------------|
    78                              <2> ;|	A0000 ~ bffff	|
    79                              <2> ;|   Legacy Video Area  |
    80                              <2> ;|----------------------|
    81                              <2> ;|	9F000 ~ A0000	|
    82                              <2> ;|	 BIOS reserve	|
    83                              <2> ;|----------------------|
    84                              <2> ;|	90000 ~ 9F000	|
    85                              <2> ;|	 kernel tmpbuf	|
    86                              <2> ;|----------------------|
    87                              <2> ;|	10000 ~ 90000	|
    88                              <2> ;|	   LOADER	|
    89                              <2> ;|----------------------|
    90                              <2> ;|	8000 ~ 10000	|
    91                              <2> ;|	  VBE info	|
    92                              <2> ;|----------------------|
    93                              <2> ;|	7E00 ~ 8000	|
    94                              <2> ;|	  mem info	|
    95                              <2> ;|----------------------|
    96                              <2> ;|	7C00 ~ 7E00	|
    97                              <2> ;|	 MBR (BOOT)	|
    98                              <2> ;|----------------------|
    99                              <2> ;|	0000 ~ 7C00	|
   100                              <2> ;|	 BIOS Code	|
   101                              <2> ;|----------------------|
   102                              <2> 
   103                              <2> 
   104                              <2> 
   105                              <2> 
   106                              <2> 
   107                              <2> 
   108                              <2> 
   109                              <2> 
   110                              <2> 
   111                              <2> 
   112                              <2> ;______________________________________________
   113                              <2> ; ----------------Vbe Info Block------------
   114                              <2> ; typedef struct {
   115                              <2> ;     unsigned char       vbe_signature;
   116                              <2> ;     unsigned short      vbe_version;
   117                              <2> ;     unsigned long       oem_string_ptr;
   118                              <2> ;     unsigned char       capabilities;
   119                              <2> ;     unsigned long       video_mode_ptr;
   120                              <2> ;     unsigned short      total_memory;
   121                              <2> ;     unsigned short      oem_software_rev;
   122                              <2> ;     unsigned long       oem_vendor_name_ptr;
   123                              <2> ;     unsigned long       oem_product_name_ptr;
   124                              <2> ;     unsigned long       oem_product_rev_ptr;
   125                              <2> ;     unsigned char       reserved[222];
   126                              <2> ;     unsigned char       oem_data[256];  
   127                              <2> ; } VbeInfoBlock;
   128                              <2> ;______________________________________________
   129                              <2> 
   130                              <2> 
   131                              <2> BaseOfKernelFile	equ	0x00
   132                              <2> OffsetOfKernelFile	equ	0x100000
   133                              <2> BaseTmpOfKernelAddr	equ	0x9000
   134                              <2> OffsetTmpOfKernelFile	equ	0x0000
   135                              <2> VBEStructBufferAddr	equ	0x8000
   136                              <2> VBEModeStructBufferAddr	equ	0x8200
   137                              <2> MemoryStructBufferAddr	equ	0x8800
   138                              <2> KernelSpaceUpperAddress equ 0xFFFF800000000000
   139                              <2> VideoFrameBufferAddress equ 0xFFFF800003000000
   140                              <2> KernelStartSectorNum	equ	16
   141                              <2> 
   142                              <2> 
   143                              <2> %define PLATFORM_QEMU_X64 1
   144                              <2> %define PLATFORM_X64 2
   145                              <2> 
   146                              <2> %define DEBUG_PLATFORM PLATFORM_QEMU_X64
   147                              <2> %define DEBUG_MODE 1
   148                              <2> 
   149                              <2> 
   150                              <2> MasterSectorReadNumPort    equ	0x1F2
   151                              <2> MasterSectorReadPort    equ	0x1F0
   152                              <2> 
   153                              <2> SlaveReadNumPort    equ	0x172
   154                              <2> SlaveSectorReadPort    equ	0x170
   155                              <2> 
   156                              <2> SectorReadNumPort    equ	MasterSectorReadNumPort
   157                              <2> SectorReadPort    equ	MasterSectorReadPort
   158                              <2> 
   159                              <2> struc vbe_info_block
   160                              <2>     .signature                 resb 4    ; 'VESA' signature (must be "VESA")
   161                              <2>     .version                   resw 1    ; VBE version (e.g., 0x0300 for VBE 3.0)
   162                              <2>     .oem_string_ptr            resd 1    ; Pointer to OEM string
   163                              <2>     .capabilities              resd 1    ; Capabilities of the video card
   164                              <2>     .video_mode_ptr            resd 1    ; Pointer to supported video modes
   165                              <2>     .total_memory              resw 1    ; Total memory in 64KB blocks
   166                              <2> 
   167                              <2>     ; VBE 2.0+ fields
   168                              <2>     .oem_software_rev          resw 1    ; OEM software revision
   169                              <2>     .oem_vendor_name_ptr       resd 1    ; Pointer to OEM vendor name string
   170                              <2>     .oem_product_name_ptr      resd 1    ; Pointer to OEM product name string
   171                              <2>     .oem_product_rev_ptr       resd 1    ; Pointer to OEM product revision string
   172                              <2>     .reserved                  resb 222  ; Reserved for VBE implementation
   173                              <2>     .oem_data                  resb 256  ; Data area for OEM-specific information
   174                              <2> endstruc
   175                              <2> 
   176                              <2> struc vbe_mode_info_block
   177                              <2>     .attributes                resw 1    ; Mode attributes
   178                              <2>     .winA_attributes           resb 1    ; Window A attributes
   179                              <2>     .winB_attributes           resb 1    ; Window B attributes
   180                              <2>     .win_granularity           resw 1    ; Window granularity in KB
   181                              <2>     .win_size                  resw 1    ; Window size in KB
   182                              <2>     .winA_segment              resw 1    ; Window A segment
   183                              <2>     .winB_segment              resw 1    ; Window B segment
   184                              <2>     .win_func_ptr              resd 1    ; Pointer to window function
   185                              <2>     .bytes_per_scanline        resw 1    ; Bytes per scanline
   186                              <2> 
   187                              <2>     ; VBE 1.2+ fields
   188                              <2>     .x_resolution              resw 1    ; Horizontal resolution in pixels
   189                              <2>     .y_resolution              resw 1    ; Vertical resolution in pixels
   190                              <2>     .x_char_size               resb 1    ; Character cell width in pixels
   191                              <2>     .y_char_size               resb 1    ; Character cell height in pixels
   192                              <2>     .number_of_planes          resb 1    ; Number of memory planes
   193                              <2>     .bits_per_pixel            resb 1    ; Bits per pixel
   194                              <2>     .number_of_banks           resb 1    ; Number of banks
   195                              <2>     .memory_model              resb 1    ; Memory model type
   196                              <2>     .bank_size                 resb 1    ; Bank size in KB
   197                              <2>     .number_of_image_pages     resb 1    ; Number of images
   198                              <2>     .reserved1                 resb 1    ; Reserved
   199                              <2> 
   200                              <2>     ; Direct Color fields (VBE 1.2+)
   201                              <2>     .red_mask_size             resb 1    ; Size of direct color red mask
   202                              <2>     .red_field_position        resb 1    ; Bit position of red mask
   203                              <2>     .green_mask_size           resb 1    ; Size of direct color green mask
   204                              <2>     .green_field_position      resb 1    ; Bit position of green mask
   205                              <2>     .blue_mask_size            resb 1    ; Size of direct color blue mask
   206                              <2>     .blue_field_position       resb 1    ; Bit position of blue mask
   207                              <2>     .reserved_mask_size        resb 1    ; Size of direct color reserved mask
   208                              <2>     .reserved_field_position   resb 1    ; Bit position of reserved mask
   209                              <2>     .direct_color_mode_info    resb 1    ; Direct color mode attributes
   210                              <2> 
   211                              <2>     ; VBE 2.0+ fields
   212                              <2>     .phys_base_ptr             resd 1    ; Physical address for flat memory frame buffer
   213                              <2>     .reserved2                 resd 1    ; Reserved
   214                              <2>     .reserved3                 resw 1    ; Reserved
   215                              <2> 
   216                              <2>     ; VBE 3.0+ fields
   217                              <2>     .lin_bytes_per_scanline    resw 1    ; Bytes per scanline for linear modes
   218                              <2>     .bnk_number_of_image_pages resb 1    ; Number of images for banked modes
   219                              <2>     .lin_number_of_image_pages resb 1    ; Number of images for linear modes
   220                              <2>     .lin_red_mask_size         resb 1    ; Size of direct color red mask (linear modes)
   221                              <2>     .lin_red_field_position    resb 1    ; Bit position of red mask (linear modes)
   222                              <2>     .lin_green_mask_size       resb 1    ; Size of direct color green mask (linear modes)
   223                              <2>     .lin_green_field_position  resb 1    ; Bit position of green mask (linear modes)
   224                              <2>     .lin_blue_mask_size        resb 1    ; Size of direct color blue mask (linear modes)
   225                              <2>     .lin_blue_field_position   resb 1    ; Bit position of blue mask (linear modes)
   226                              <2>     .lin_reserved_mask_size    resb 1    ; Size of direct color reserved mask (linear modes)
   227                              <2>     .lin_reserved_field_position resb 1  ; Bit position of reserved mask (linear modes)
   228                              <2>     .max_pixel_clock           resd 1    ; Maximum pixel clock (Hz)
   229                              <2>     .reserved4                 resb 190  ; Reserved for future expansion
   230                              <2> endstruc
   231                              <2> 
   232                              <2> struc e820_memory_entry
   233                              <2>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   234                              <2>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   235                              <2>     .length_low               resd 1    ; Lower 32 bits of the length
   236                              <2>     .length_high              resd 1    ; Upper 32 bits of the length
   237                              <2>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   238                              <2>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   239                              <2> endstruc
   240                              <2> 
   241                              <2> %endif
     5                              <1> %include "../kernel/video.asm"
     1                              <2> %ifndef VIDEO_ASM
     2                              <2> %define VIDEO_ASM
     3                              <2> %include "../bootloader/global_def.asm"
     1                              <3> %ifndef GLOBAL_DEF_ASM
     2                              <3> %define GLOBAL_DEF_ASM
     3                              <3> 
     4                              <3> 
     5                              <3> ;|----------------------|
     6                              <3> ;|	100000 ~ END	|
     7                              <3> ;|	   KERNEL	|
     8                              <3> ;|----------------------|
     9                              <3> ;|	E0000 ~ 100000	|
    10                              <3> ;| Extended System BIOS |
    11                              <3> ;|----------------------|
    12                              <3> ;|	C0000 ~ Dffff	|
    13                              <3> ;|     Expansion Area   |
    14                              <3> ;|----------------------|
    15                              <3> ;|	A0000 ~ bffff	|
    16                              <3> ;|   Legacy Video Area  |
    17                              <3> ;|----------------------|
    18                              <3> ;|	9f000 ~ A0000	|
    19                              <3> ;|	 BIOS reserve	|
    20                              <3> ;|----------------------|
    21                              <3> ;|	90000 ~ 9f000	|
    22                              <3> ;|	 kernel tmpbuf	|
    23                              <3> ;|----------------------|
    24                              <3> ;|	10000 ~ 90000	|
    25                              <3> ;|	   LOADER	|
    26                              <3> ;|----------------------|
    27                              <3> ;|	8000 ~ 10000	|
    28                              <3> ;|	  VBE info	|
    29                              <3> ;|----------------------|
    30                              <3> ;|	7e00 ~ 8000	|
    31                              <3> ;|	  mem info	|
    32                              <3> ;|----------------------|
    33                              <3> ;|	7c00 ~ 7e00	|
    34                              <3> ;|	 MBR (BOOT)	|
    35                              <3> ;|----------------------|
    36                              <3> ;|	0000 ~ 7c00	|
    37                              <3> ;|	 BIOS Code	|
    38                              <3> ;|----------------------|
    39                              <3> 
    40                              <3> 
    41                              <3> ;_______________________________________________________
    42                              <3> ; START	END	    SIZE	        USED
    43                              <3> ; FFFF0	FFFFF	16B	        BIOS System Entry
    44                              <3> ; F0000	FFFEF	64KB-16B	BIOS System Code
    45                              <3> ; C8000	EFFFF	160KB	    ROM/Mapped IO
    46                              <3> ; C0000	C7FFF	32KB	    Graphic Adapter BIOS
    47                              <3> ; B8000	BFFFF	32KB	    Chroma Text Video Buffer
    48                              <3> ; B0000	B7FFF	32KB	    Mono Text Video Buffer
    49                              <3> ; A0000	AFFFF	64KB	    Graphic Video Buffer
    50                              <3> ; 9FC00	9FFFF	1KB	        Extended BIOS Data Area
    51                              <3> ; 7E00	9FBFF	622080B     Useable 608KB	
    52                              <3> ; 7C00	7DFF	512B	    MBR
    53                              <3> ; 500	7BFF	30464B      Useable 30KB	
    54                              <3> ; 400	4FF	    256B	    BIOS Data Area
    55                              <3> ; 000	3FF	    1KB	        IVT
    56                              <3> ; _____________________________________________________
    57                              <3> 
    58                              <3> 
    59                              <3> 
    60                              <3> 
    61                              <3> 
    62                              <3> 
    63                              <3> 
    64                              <3> 
    65                              <3> 
    66                              <3> 
    67                              <3> 
    68                              <3> ;|----------------------|
    69                              <3> ;|	100000 ~ END	|
    70                              <3> ;|	   KERNEL	|
    71                              <3> ;|----------------------|
    72                              <3> ;|	E0000 ~ 100000	|
    73                              <3> ;| Extended System BIOS |
    74                              <3> ;|----------------------|
    75                              <3> ;|	C0000 ~ Dffff	|
    76                              <3> ;|     Expansion Area   |
    77                              <3> ;|----------------------|
    78                              <3> ;|	A0000 ~ bffff	|
    79                              <3> ;|   Legacy Video Area  |
    80                              <3> ;|----------------------|
    81                              <3> ;|	9F000 ~ A0000	|
    82                              <3> ;|	 BIOS reserve	|
    83                              <3> ;|----------------------|
    84                              <3> ;|	90000 ~ 9F000	|
    85                              <3> ;|	 kernel tmpbuf	|
    86                              <3> ;|----------------------|
    87                              <3> ;|	10000 ~ 90000	|
    88                              <3> ;|	   LOADER	|
    89                              <3> ;|----------------------|
    90                              <3> ;|	8000 ~ 10000	|
    91                              <3> ;|	  VBE info	|
    92                              <3> ;|----------------------|
    93                              <3> ;|	7E00 ~ 8000	|
    94                              <3> ;|	  mem info	|
    95                              <3> ;|----------------------|
    96                              <3> ;|	7C00 ~ 7E00	|
    97                              <3> ;|	 MBR (BOOT)	|
    98                              <3> ;|----------------------|
    99                              <3> ;|	0000 ~ 7C00	|
   100                              <3> ;|	 BIOS Code	|
   101                              <3> ;|----------------------|
   102                              <3> 
   103                              <3> 
   104                              <3> 
   105                              <3> 
   106                              <3> 
   107                              <3> 
   108                              <3> 
   109                              <3> 
   110                              <3> 
   111                              <3> 
   112                              <3> ;______________________________________________
   113                              <3> ; ----------------Vbe Info Block------------
   114                              <3> ; typedef struct {
   115                              <3> ;     unsigned char       vbe_signature;
   116                              <3> ;     unsigned short      vbe_version;
   117                              <3> ;     unsigned long       oem_string_ptr;
   118                              <3> ;     unsigned char       capabilities;
   119                              <3> ;     unsigned long       video_mode_ptr;
   120                              <3> ;     unsigned short      total_memory;
   121                              <3> ;     unsigned short      oem_software_rev;
   122                              <3> ;     unsigned long       oem_vendor_name_ptr;
   123                              <3> ;     unsigned long       oem_product_name_ptr;
   124                              <3> ;     unsigned long       oem_product_rev_ptr;
   125                              <3> ;     unsigned char       reserved[222];
   126                              <3> ;     unsigned char       oem_data[256];  
   127                              <3> ; } VbeInfoBlock;
   128                              <3> ;______________________________________________
   129                              <3> 
   130                              <3> 
   131                              <3> BaseOfKernelFile	equ	0x00
   132                              <3> OffsetOfKernelFile	equ	0x100000
   133                              <3> BaseTmpOfKernelAddr	equ	0x9000
   134                              <3> OffsetTmpOfKernelFile	equ	0x0000
   135                              <3> VBEStructBufferAddr	equ	0x8000
   136                              <3> VBEModeStructBufferAddr	equ	0x8200
   137                              <3> MemoryStructBufferAddr	equ	0x8800
   138                              <3> KernelSpaceUpperAddress equ 0xFFFF800000000000
   139                              <3> VideoFrameBufferAddress equ 0xFFFF800003000000
   140                              <3> KernelStartSectorNum	equ	16
   141                              <3> 
   142                              <3> 
   143                              <3> %define PLATFORM_QEMU_X64 1
   144                              <3> %define PLATFORM_X64 2
   145                              <3> 
   146                              <3> %define DEBUG_PLATFORM PLATFORM_QEMU_X64
   147                              <3> %define DEBUG_MODE 1
   148                              <3> 
   149                              <3> 
   150                              <3> MasterSectorReadNumPort    equ	0x1F2
   151                              <3> MasterSectorReadPort    equ	0x1F0
   152                              <3> 
   153                              <3> SlaveReadNumPort    equ	0x172
   154                              <3> SlaveSectorReadPort    equ	0x170
   155                              <3> 
   156                              <3> SectorReadNumPort    equ	MasterSectorReadNumPort
   157                              <3> SectorReadPort    equ	MasterSectorReadPort
   158                              <3> 
   159                              <3> struc vbe_info_block
   160                              <3>     .signature                 resb 4    ; 'VESA' signature (must be "VESA")
   161                              <3>     .version                   resw 1    ; VBE version (e.g., 0x0300 for VBE 3.0)
   162                              <3>     .oem_string_ptr            resd 1    ; Pointer to OEM string
   163                              <3>     .capabilities              resd 1    ; Capabilities of the video card
   164                              <3>     .video_mode_ptr            resd 1    ; Pointer to supported video modes
   165                              <3>     .total_memory              resw 1    ; Total memory in 64KB blocks
   166                              <3> 
   167                              <3>     ; VBE 2.0+ fields
   168                              <3>     .oem_software_rev          resw 1    ; OEM software revision
   169                              <3>     .oem_vendor_name_ptr       resd 1    ; Pointer to OEM vendor name string
   170                              <3>     .oem_product_name_ptr      resd 1    ; Pointer to OEM product name string
   171                              <3>     .oem_product_rev_ptr       resd 1    ; Pointer to OEM product revision string
   172                              <3>     .reserved                  resb 222  ; Reserved for VBE implementation
   173                              <3>     .oem_data                  resb 256  ; Data area for OEM-specific information
   174                              <3> endstruc
   175                              <3> 
   176                              <3> struc vbe_mode_info_block
   177                              <3>     .attributes                resw 1    ; Mode attributes
   178                              <3>     .winA_attributes           resb 1    ; Window A attributes
   179                              <3>     .winB_attributes           resb 1    ; Window B attributes
   180                              <3>     .win_granularity           resw 1    ; Window granularity in KB
   181                              <3>     .win_size                  resw 1    ; Window size in KB
   182                              <3>     .winA_segment              resw 1    ; Window A segment
   183                              <3>     .winB_segment              resw 1    ; Window B segment
   184                              <3>     .win_func_ptr              resd 1    ; Pointer to window function
   185                              <3>     .bytes_per_scanline        resw 1    ; Bytes per scanline
   186                              <3> 
   187                              <3>     ; VBE 1.2+ fields
   188                              <3>     .x_resolution              resw 1    ; Horizontal resolution in pixels
   189                              <3>     .y_resolution              resw 1    ; Vertical resolution in pixels
   190                              <3>     .x_char_size               resb 1    ; Character cell width in pixels
   191                              <3>     .y_char_size               resb 1    ; Character cell height in pixels
   192                              <3>     .number_of_planes          resb 1    ; Number of memory planes
   193                              <3>     .bits_per_pixel            resb 1    ; Bits per pixel
   194                              <3>     .number_of_banks           resb 1    ; Number of banks
   195                              <3>     .memory_model              resb 1    ; Memory model type
   196                              <3>     .bank_size                 resb 1    ; Bank size in KB
   197                              <3>     .number_of_image_pages     resb 1    ; Number of images
   198                              <3>     .reserved1                 resb 1    ; Reserved
   199                              <3> 
   200                              <3>     ; Direct Color fields (VBE 1.2+)
   201                              <3>     .red_mask_size             resb 1    ; Size of direct color red mask
   202                              <3>     .red_field_position        resb 1    ; Bit position of red mask
   203                              <3>     .green_mask_size           resb 1    ; Size of direct color green mask
   204                              <3>     .green_field_position      resb 1    ; Bit position of green mask
   205                              <3>     .blue_mask_size            resb 1    ; Size of direct color blue mask
   206                              <3>     .blue_field_position       resb 1    ; Bit position of blue mask
   207                              <3>     .reserved_mask_size        resb 1    ; Size of direct color reserved mask
   208                              <3>     .reserved_field_position   resb 1    ; Bit position of reserved mask
   209                              <3>     .direct_color_mode_info    resb 1    ; Direct color mode attributes
   210                              <3> 
   211                              <3>     ; VBE 2.0+ fields
   212                              <3>     .phys_base_ptr             resd 1    ; Physical address for flat memory frame buffer
   213                              <3>     .reserved2                 resd 1    ; Reserved
   214                              <3>     .reserved3                 resw 1    ; Reserved
   215                              <3> 
   216                              <3>     ; VBE 3.0+ fields
   217                              <3>     .lin_bytes_per_scanline    resw 1    ; Bytes per scanline for linear modes
   218                              <3>     .bnk_number_of_image_pages resb 1    ; Number of images for banked modes
   219                              <3>     .lin_number_of_image_pages resb 1    ; Number of images for linear modes
   220                              <3>     .lin_red_mask_size         resb 1    ; Size of direct color red mask (linear modes)
   221                              <3>     .lin_red_field_position    resb 1    ; Bit position of red mask (linear modes)
   222                              <3>     .lin_green_mask_size       resb 1    ; Size of direct color green mask (linear modes)
   223                              <3>     .lin_green_field_position  resb 1    ; Bit position of green mask (linear modes)
   224                              <3>     .lin_blue_mask_size        resb 1    ; Size of direct color blue mask (linear modes)
   225                              <3>     .lin_blue_field_position   resb 1    ; Bit position of blue mask (linear modes)
   226                              <3>     .lin_reserved_mask_size    resb 1    ; Size of direct color reserved mask (linear modes)
   227                              <3>     .lin_reserved_field_position resb 1  ; Bit position of reserved mask (linear modes)
   228                              <3>     .max_pixel_clock           resd 1    ; Maximum pixel clock (Hz)
   229                              <3>     .reserved4                 resb 190  ; Reserved for future expansion
   230                              <3> endstruc
   231                              <3> 
   232                              <3> struc e820_memory_entry
   233                              <3>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   234                              <3>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   235                              <3>     .length_low               resd 1    ; Lower 32 bits of the length
   236                              <3>     .length_high              resd 1    ; Upper 32 bits of the length
   237                              <3>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   238                              <3>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   239                              <3> endstruc
   240                              <3> 
   241                              <3> %endif
     4                              <2> %include "../kernel/stddef.asm"
     1                              <3> %ifndef STDDEF_ASM
     2                              <3> %define STDDEF_ASM
     3                              <3> 
     4                              <3> ;-----------Calling Conventions Standard------------;
     5                              <3> %define USE_CC_STANDARD
     6                              <3> %ifdef USE_CC_STANDARD
     7                              <3> ;caller maintain the stack balance 
     8                              <3> 
     9                              <3> 
    10                              <3> ; -------------------------------
    11                              <3> ; 栈帧结构定义
    12                              <3> ; -------------------------------
    13                              <3> ; 调用后的栈布局:
    14                              <3> ; [rsp+0x00] 返回地址 (8字节)
    15                              <3> ; [rsp+0x08] 旧RBP     (8字节) <- rbp指向这里
    16                              <3> ; [rsp+0x10] 参数1     (8字节)
    17                              <3> ; [rsp+0x18] 参数2
    18                              <3> ; ...
    19                              <3> ; [rsp+X]    局部变量区
    20                              <3> ; -------------------------------
    21                              <3> 
    22                              <3> %define PARAM_OFFSET   16      ; 第一个参数的偏移量(返回地址8 + 旧RBP8)
    23                              <3> %macro function 1-* ; 1=函数名, 2=返回参数数量, 3=参数列表
    24                              <3>     %assign param_count %0 - 2 ; 参数数量
    25                              <3>     
    26                              <3>     %if param_count < 0
    27                              <3>         %assign param_count 0 ; 如果没有参数，设置为 0
    28                              <3>     %endif
    29                              <3>     %if param_count < 1
    30                              <3>         %assign ret_param_count 0 ; 返回参数数量
    31                              <3>     %else
    32                              <3>         %assign ret_param_count %2 ; 返回参数数量
    33                              <3>     %endif
    34                              <3>     
    35                              <3> 
    36                              <3>     ; 准备调用
    37                              <3>     prepare_call param_count, ret_param_count
    38                              <3> 
    39                              <3>     ; 如果有参数，将参数压入栈
    40                              <3>     %if param_count > 0
    41                              <3>         %assign i 0
    42                              <3>         %rep param_count
    43                              <3>             %rotate 1
    44                              <3>             mov rax, %2
    45                              <3>             ; mov rbx, %2
    46                              <3>             ; mov rcx, %3
    47                              <3>             ; jmp $
    48                              <3>             mov [rsp + 8*i], rax ; 将参数压入栈
    49                              <3>             %assign i i+1
    50                              <3>         %endrep
    51                              <3>         %rotate 1
    52                              <3>         %rotate 1
    53                              <3>     %endif
    54                              <3> 
    55                              <3>     ; 调用函数
    56                              <3>     call %1
    57                              <3> 
    58                              <3>     ; 清理栈空间
    59                              <3>     cleanup_call param_count, ret_param_count
    60                              <3> 
    61                              <3>     ; %if param_count < 0
    62                              <3>     ;     %assign param_count 0
    63                              <3>     ;     %assign ret_param_count 0
    64                              <3> 
    65                              <3>     ;     prepare_call param_count, ret_param_count ; 准备调用
    66                              <3> 
    67                              <3>     ;     call %1
    68                              <3> 
    69                              <3>     ;     cleanup_call param_count, ret_param_count ; 清理栈空间
    70                              <3>     ; %elseif param_count == 0
    71                              <3>     ;     %assign ret_param_count %2 ; 返回参数数量
    72                              <3> 
    73                              <3>     ;     prepare_call param_count, ret_param_count ; 准备调用
    74                              <3> 
    75                              <3>     ;     call %1
    76                              <3> 
    77                              <3>     ;     cleanup_call param_count, ret_param_count ; 清理栈空间
    78                              <3>     ; %else 
    79                              <3>     ;     %assign ret_param_count %2 ; 返回参数数量
    80                              <3> 
    81                              <3>     ;     prepare_call param_count, ret_param_count ; 准备调用
    82                              <3> 
    83                              <3>     ;     %assign i 0
    84                              <3>     ;     %rep param_count
    85                              <3>     ;         %rotate -1
    86                              <3>     ;         mov rax, %3
    87                              <3>     ;         mov [rsp + 8*i], rax ; 将参数压入栈
    88                              <3>     ;         %assign i i+1 
    89                              <3>     ;     %endrep
    90                              <3> 
    91                              <3>     ;     call %3
    92                              <3> 
    93                              <3>     ;     cleanup_call param_count, %4 ; 清理栈空间
    94                              <3>     ; %endif
    95                              <3> %endmacro
    96                              <3> 
    97                              <3> %macro prolog 1;local var size(bytes)
    98                              <3>     push rbp
    99                              <3>     mov rbp, rsp
   100                              <3> 
   101                              <3>     mov rax, %1
   102                              <3>     add rax, 15
   103                              <3>     and rax, ~15
   104                              <3>     sub rsp, rax
   105                              <3> 
   106                              <3>     push r15
   107                              <3>     push r14
   108                              <3>     push r13
   109                              <3>     push r12
   110                              <3>     push r11
   111                              <3>     push r10
   112                              <3>     push r9
   113                              <3>     push r8
   114                              <3>     push rdi
   115                              <3>     push rsi
   116                              <3>     push rdx
   117                              <3>     push rcx
   118                              <3>     push rbx
   119                              <3>     push rax
   120                              <3>     
   121                              <3>     ; 调试信息可以放在这里
   122                              <3>     ; %ifdef DEBUG
   123                              <3>     ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
   124                              <3>     ; %endif
   125                              <3> %endmacro
   126                              <3> 
   127                              <3> %macro epilog 0
   128                              <3>     pop rax
   129                              <3>     pop rbx
   130                              <3>     pop rcx
   131                              <3>     pop rdx
   132                              <3>     pop rsi
   133                              <3>     pop rdi
   134                              <3>     pop r8
   135                              <3>     pop r9
   136                              <3>     pop r10
   137                              <3>     pop r11
   138                              <3>     pop r12
   139                              <3>     pop r13
   140                              <3>     pop r14
   141                              <3>     pop r15
   142                              <3> 
   143                              <3>     mov rsp, rbp
   144                              <3>     pop rbp
   145                              <3>     ret
   146                              <3> %endmacro
   147                              <3> 
   148                              <3> %macro get_param 2;1=register, 2=param index(from 1)
   149                              <3>     mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   150                              <3> %endmacro
   151                              <3> 
   152                              <3> %macro set_ret_param 2;1=register, 2=param index(from 1)
   153                              <3>     mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   154                              <3> %endmacro
   155                              <3> 
   156                              <3> %macro prepare_call 2;1=param count, 2=return param count
   157                              <3>     %assign total_space ((%1 + %2) * 8)
   158                              <3>     
   159                              <3>     %if (total_space % 16) != 0
   160                              <3>         %assign total_space total_space + 8  ; 添加填充
   161                              <3>     %endif
   162                              <3>     
   163                              <3>     sub rsp, total_space
   164                              <3> %endmacro
   165                              <3> 
   166                              <3> %macro cleanup_call 2;1=param count, 2=return param count
   167                              <3>     %assign total_space ((%1 + %2) * 8)
   168                              <3>     %if (total_space % 16) != 0
   169                              <3>         %assign total_space total_space + 8
   170                              <3>     %endif
   171                              <3>     add rsp, total_space
   172                              <3> %endmacro
   173                              <3> 
   174                              <3> 
   175                              <3> ; %macro function 1-*;1=function entry offset
   176                              <3> ;     prepare_call %0-2,1
   177                              <3> 
   178                              <3> ;     %assign i %0
   179                              <3> ;     %rep i-1
   180                              <3> ;         %rotate -1
   181                              <3> ;         push %1
   182                              <3> ;     %endrep
   183                              <3> ;     call %1
   184                              <3> 
   185                              <3> ;     cleanup_call %0-2,1
   186                              <3> ;     ; mov rax,[rsp-8]
   187                              <3> ; %endmacro
   188                              <3> 
   189                              <3> %endif
   190                              <3> ;---------------------ABI Standard------------------;
   191                              <3> %define USE_ABI_STANDARD
   192                              <3> %ifdef USE_ABI_STANDARD
   193                              <3> 
   194                              <3> 
   195                              <3>     %define ABI_File_None   0       ; 无文件类型
   196                              <3>     %define ABI_File_REL    1       ; 可重定位文件
   197                              <3>     %define ABI_File_EXEC   2       ; 可执行文件
   198                              <3>     %define ABI_File_DYN    3       ; 共享目标文件
   199                              <3>     %define ABI_File_CORE   4       ; 核心文件
   200                              <3> 
   201                              <3>     %define Section_Type_NULL    0      ; 未使用
   202                              <3>     %define Section_Type_LOAD    1      ; 可加载段
   203                              <3>     %define Section_Type_DYNAMIC 2      ; 动态链接信息
   204                              <3>     %define Section_Type_INTERP  3      ; 解释器路径
   205                              <3>     %define Section_Type_NOTE    4      ; 辅助信息
   206                              <3>     %define Section_Type_SHLIB   5      ; 保留
   207                              <3> 
   208                              <3>     %macro ABI_HEADER 4 ;1=File Type, 2=Entry Point Address, 3=Section Header Offset, 4=Section Header Count
   209                              <3>         db 0xA5, 'A', 'B', 'I'     ; ABI Magic Number
   210                              <3>         db 1                       ; Encode Type
   211                              <3>         db 1                       ; ABI Version
   212                              <3> 
   213                              <3>         dw %1                      ; ABI File Type
   214                              <3>         dq %2                      ; Entry Point Address
   215                              <3>         dw 32                      ; ABI Headers Size
   216                              <3> 
   217                              <3>         dq %3                      ; Section Header Offset
   218                              <3>         dw 32                      ; Section Header Size
   219                              <3>         dw %4                      ; Section Header Count
   220                              <3>         dw 0                       ; Symble Table Entry Size
   221                              <3>     %endmacro
   222                              <3>     STRUC struct_ABI_HEADER
   223                              <3>         .magic:         resb 4    ; ABI Magic Number (4 bytes)
   224                              <3>         .encode_type:   resb 1    ; Encode Type (1 byte)
   225                              <3>         .abi_version:   resb 1    ; ABI Version (1 byte)
   226                              <3>         .file_type:     resw 1    ; ABI File Type (2 bytes)
   227                              <3>         .entry_point:   resq 1    ; Entry Point Address (8 bytes)
   228                              <3>         .header_size:   resw 1    ; ABI Headers Size (2 bytes)
   229                              <3>         .section_offset: resq 1   ; Section Header Offset (8 bytes)
   230                              <3>         .section_size:  resw 1    ; Section Header Size (2 bytes)
   231                              <3>         .section_count: resw 1    ; Section Header Count (2 bytes)
   232                              <3>         .sym_table_size: resw 1   ; Symbol Table Entry Size (2 bytes)
   233                              <3>     ENDSTRUC
   234                              <3> 
   235                              <3>     %macro SECTION_HEADER 4 ;1=Section Type, 2=Virtual Address, 3=Section Offset, 4=Section Size
   236                              <3>         dq %1                  ; Section Type
   237                              <3>         dq %2                  ; Virtual Address
   238                              <3>         dq %3                  ; Section Offset
   239                              <3>         dq %4                  ; Section Size
   240                              <3>     %endmacro
   241                              <3>     STRUC struct_SECTION_HEADER
   242                              <3>         .type:      resq 1    ; Section Type (8 bytes)
   243                              <3>         .vaddr:     resq 1    ; Virtual Address (8 bytes)
   244                              <3>         .offset:    resq 1    ; Section Offset (8 bytes)
   245                              <3>         .size:      resq 1    ; Section Size (8 bytes)
   246                              <3>     ENDSTRUC
   247                              <3> %endif
   248                              <3> 
   249                              <3> %endif
     5                              <2> [BITS 64]
     6                              <2> struc video_info
     7                              <2>     .start:
     8 00000000 ????                <2>     .xpixel:            resw 1      
     9 00000002 ????                <2>     .ypixel:            resw 1       
    10 00000004 ??                  <2>     .byte_per_pixel:    resb 1     
    11 00000005 ????????????????    <2>     .video_framebuffer: resq 1
    12                              <2>     .end:
    13                              <2> endstruc
    14                              <2> video_info_ptr:
    15                              <2>     istruc video_info
    16 000002B5 0000                <2>         at video_info.xpixel, dw 0
    17 000002B7 0000                <2>         at video_info.ypixel, dw 0
    18 000002B9 00                  <2>         at video_info.byte_per_pixel, db 0
    19 000002BA 0000000000000000    <2>         at video_info.video_framebuffer, dq 0
    20                              <2>     iend
    21                              <2> ;argb
    22                              <2> video_init:
    23                              <2>     prolog 0;
    98 000002C2 55                  <3>  push rbp
    99 000002C3 4889E5              <3>  mov rbp, rsp
   100                              <3> 
   101 000002C6 B800000000          <3>  mov rax, %1
   102 000002CB 4883C00F            <3>  add rax, 15
   103 000002CF 4883E0F0            <3>  and rax, ~15
   104 000002D3 4829C4              <3>  sub rsp, rax
   105                              <3> 
   106 000002D6 4157                <3>  push r15
   107 000002D8 4156                <3>  push r14
   108 000002DA 4155                <3>  push r13
   109 000002DC 4154                <3>  push r12
   110 000002DE 4153                <3>  push r11
   111 000002E0 4152                <3>  push r10
   112 000002E2 4151                <3>  push r9
   113 000002E4 4150                <3>  push r8
   114 000002E6 57                  <3>  push rdi
   115 000002E7 56                  <3>  push rsi
   116 000002E8 52                  <3>  push rdx
   117 000002E9 51                  <3>  push rcx
   118 000002EA 53                  <3>  push rbx
   119 000002EB 50                  <3>  push rax
   120                              <3> 
   121                              <3> 
   122                              <3> 
   123                              <3> 
   124                              <3> 
    24 000002EC 48BE128200000080FF- <2>     mov rsi,KernelSpaceUpperAddress + VBEModeStructBufferAddr + vbe_mode_info_block.x_resolution
    24 000002F5 FF                  <2>
    25 000002F6 BB00000000          <2>     mov rbx,0
    26 000002FB 668B1E              <2>     mov  bx, word [rsi]
    27 000002FE 66891DB0FFFFFF      <2>     mov word [rel video_info_ptr + video_info.xpixel],bx
    28                              <2> 
    29 00000305 48BE148200000080FF- <2>     mov rsi,KernelSpaceUpperAddress + VBEModeStructBufferAddr + vbe_mode_info_block.y_resolution
    29 0000030E FF                  <2>
    30 0000030F BB00000000          <2>     mov rbx,0
    31 00000314 668B1E              <2>     mov  bx, word [rsi]
    32 00000317 66891D99FFFFFF      <2>     mov word [rel video_info_ptr + video_info.ypixel],bx
    33                              <2> 
    34 0000031E 48BE198200000080FF- <2>     mov rsi,KernelSpaceUpperAddress + VBEModeStructBufferAddr + vbe_mode_info_block.bits_per_pixel
    34 00000327 FF                  <2>
    35 00000328 BB00000000          <2>     mov rbx,0
    36 0000032D 8A1E                <2>     mov bl, byte [rsi]
    37 0000032F C0EB03              <2>     shr bl,3
    38 00000332 881D81FFFFFF        <2>     mov byte [rel video_info_ptr + video_info.byte_per_pixel],bl
    39                              <2> 
    40                              <2>     ; mov rsi,KernelSpaceUpperAddress + VBEModeStructBufferAddr + vbe_mode_info_block.y_resolution
    41                              <2>     ; mov rbx,0
    42                              <2>     ; mov  bx, word [rsi]
    43 00000338 48BE000000030080FF- <2>     mov rsi,VideoFrameBufferAddress
    43 00000341 FF                  <2>
    44 00000342 48893571FFFFFF      <2>     mov qword [rel video_info_ptr + video_info.video_framebuffer],rsi
    45                              <2> 
    46                              <2>     epilog
   128 00000349 58                  <3>  pop rax
   129 0000034A 5B                  <3>  pop rbx
   130 0000034B 59                  <3>  pop rcx
   131 0000034C 5A                  <3>  pop rdx
   132 0000034D 5E                  <3>  pop rsi
   133 0000034E 5F                  <3>  pop rdi
   134 0000034F 4158                <3>  pop r8
   135 00000351 4159                <3>  pop r9
   136 00000353 415A                <3>  pop r10
   137 00000355 415B                <3>  pop r11
   138 00000357 415C                <3>  pop r12
   139 00000359 415D                <3>  pop r13
   140 0000035B 415E                <3>  pop r14
   141 0000035D 415F                <3>  pop r15
   142                              <3> 
   143 0000035F 4889EC              <3>  mov rsp, rbp
   144 00000362 5D                  <3>  pop rbp
   145 00000363 C3                  <3>  ret
    47                              <2> 
    48                              <2> draw_pixel:; Input: x,y,color
    49                              <2>     prolog 2;
    98 00000364 55                  <3>  push rbp
    99 00000365 4889E5              <3>  mov rbp, rsp
   100                              <3> 
   101 00000368 B802000000          <3>  mov rax, %1
   102 0000036D 4883C00F            <3>  add rax, 15
   103 00000371 4883E0F0            <3>  and rax, ~15
   104 00000375 4829C4              <3>  sub rsp, rax
   105                              <3> 
   106 00000378 4157                <3>  push r15
   107 0000037A 4156                <3>  push r14
   108 0000037C 4155                <3>  push r13
   109 0000037E 4154                <3>  push r12
   110 00000380 4153                <3>  push r11
   111 00000382 4152                <3>  push r10
   112 00000384 4151                <3>  push r9
   113 00000386 4150                <3>  push r8
   114 00000388 57                  <3>  push rdi
   115 00000389 56                  <3>  push rsi
   116 0000038A 52                  <3>  push rdx
   117 0000038B 51                  <3>  push rcx
   118 0000038C 53                  <3>  push rbx
   119 0000038D 50                  <3>  push rax
   120                              <3> 
   121                              <3> 
   122                              <3> 
   123                              <3> 
   124                              <3> 
    50                              <2>     get_param rdi, 1   ; x
   149 0000038E 488B7D10            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    51                              <2>     get_param rsi, 2   ; y
   149 00000392 488B7518            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    52                              <2>     get_param rdx, 3   ; c
   149 00000396 488B5520            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    53 0000039A 52                  <2>     push rdx
    54                              <2>     ; mov []
    55 0000039B 488D1D13FFFFFF      <2>     lea rbx, [rel video_info_ptr] ; Load video info structure address
    56                              <2> 
    57                              <2> 
    58                              <2> 
    59                              <2>     ; Calculate pixel offset
    60 000003A2 B800000000          <2>     mov rax,0
    61 000003A7 480FB703            <2>     movzx rax, word [rbx + video_info.xpixel] ; Screen width
    62                              <2> 
    63 000003AB 48F7E6              <2>     mul rsi                                 ; y * screen width
    64                              <2>         ; jmp $
    65 000003AE 4801F8              <2>     add rax, rdi                             ; Add x
    66 000003B1 480FB64B04          <2>     movzx rcx, byte [rbx + video_info.byte_per_pixel] ; Bytes per pixel
    67 000003B6 480FAFC1            <2>     imul rax, rcx                          ; Offset = (y * width + x) * bytes_per_pixel
    68                              <2> 
    69                              <2>     ; Write color to framebuffer
    70 000003BA 488B5B05            <2>     mov rbx, qword [rbx + video_info.video_framebuffer] ; Framebuffer address
    71 000003BE 4801C3              <2>     add rbx, rax                          ; rbx = framebuffer + offset
    72                              <2> 
    73 000003C1 5A                  <2>     pop rdx
    74 000003C2 8913                <2>     mov dword [rbx], edx                        ; Write color (assumes 32-bit color)
    75                              <2> 
    76                              <2>         ; jmp $
    77                              <2>     set_ret_param rax,4
   153 000003C4 48894528            <3>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
    78                              <2>     epilog
   128 000003C8 58                  <3>  pop rax
   129 000003C9 5B                  <3>  pop rbx
   130 000003CA 59                  <3>  pop rcx
   131 000003CB 5A                  <3>  pop rdx
   132 000003CC 5E                  <3>  pop rsi
   133 000003CD 5F                  <3>  pop rdi
   134 000003CE 4158                <3>  pop r8
   135 000003D0 4159                <3>  pop r9
   136 000003D2 415A                <3>  pop r10
   137 000003D4 415B                <3>  pop r11
   138 000003D6 415C                <3>  pop r12
   139 000003D8 415D                <3>  pop r13
   140 000003DA 415E                <3>  pop r14
   141 000003DC 415F                <3>  pop r15
   142                              <3> 
   143 000003DE 4889EC              <3>  mov rsp, rbp
   144 000003E1 5D                  <3>  pop rbp
   145 000003E2 C3                  <3>  ret
    79                              <2> 
    80                              <2> draw_line:; Bresenham's line algorithm Input: x1,y1,x2,y2,color
    81                              <2>     prolog 2;
    98 000003E3 55                  <3>  push rbp
    99 000003E4 4889E5              <3>  mov rbp, rsp
   100                              <3> 
   101 000003E7 B802000000          <3>  mov rax, %1
   102 000003EC 4883C00F            <3>  add rax, 15
   103 000003F0 4883E0F0            <3>  and rax, ~15
   104 000003F4 4829C4              <3>  sub rsp, rax
   105                              <3> 
   106 000003F7 4157                <3>  push r15
   107 000003F9 4156                <3>  push r14
   108 000003FB 4155                <3>  push r13
   109 000003FD 4154                <3>  push r12
   110 000003FF 4153                <3>  push r11
   111 00000401 4152                <3>  push r10
   112 00000403 4151                <3>  push r9
   113 00000405 4150                <3>  push r8
   114 00000407 57                  <3>  push rdi
   115 00000408 56                  <3>  push rsi
   116 00000409 52                  <3>  push rdx
   117 0000040A 51                  <3>  push rcx
   118 0000040B 53                  <3>  push rbx
   119 0000040C 50                  <3>  push rax
   120                              <3> 
   121                              <3> 
   122                              <3> 
   123                              <3> 
   124                              <3> 
    82                              <2>     get_param rdi, 1    ; x1
   149 0000040D 488B7D10            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    83                              <2>     get_param rsi, 2    ; y1
   149 00000411 488B7518            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    84                              <2>     get_param rdx, 3    ; x2
   149 00000415 488B5520            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    85                              <2>     get_param rcx, 4    ; y2
   149 00000419 488B4D28            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    86                              <2>     get_param r8,  5    ; color
   149 0000041D 4C8B4530            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    87                              <2> 
    88                              <2>     ; Calculate dx and dy
    89 00000421 4989D1              <2>     mov r9, rdx         ; r9 = x2
    90 00000424 4929F9              <2>     sub r9, rdi         ; dx = x2 - x1
    91 00000427 4989CA              <2>     mov r10, rcx        ; r10 = y2
    92 0000042A 4929F2              <2>     sub r10, rsi        ; dy = y2 - y1
    93                              <2> 
    94                              <2>     ; Determine the absolute values of dx and dy
    95 0000042D 4D89CB              <2>     mov r11, r9         ; r11 = dx
    96 00000430 4D85DB              <2>     test r11, r11
    97 00000433 7903                <2>     jns .dx_positive
    98 00000435 49F7DB              <2>     neg r11             ; r11 = abs(dx)
    99                              <2>     .dx_positive:
   100 00000438 4D89D4              <2>         mov r12, r10        ; r12 = dy
   101 0000043B 4D85E4              <2>         test r12, r12
   102 0000043E 7903                <2>         jns .dy_positive
   103 00000440 49F7DC              <2>         neg r12             ; r12 = abs(dy)
   104                              <2>     .dy_positive:
   105                              <2> 
   106                              <2>         ; Determine the direction of the line
   107 00000443 41BD01000000        <2>         mov r13, 1          ; x_step = 1
   108 00000449 4D85C9              <2>         test r9, r9
   109 0000044C 7907                <2>         jns .x_step_positive
   110 0000044E 49C7C5FFFFFFFF      <2>         mov r13, -1         ; x_step = -1
   111                              <2>     .x_step_positive:
   112 00000455 41BE01000000        <2>         mov r14, 1          ; y_step = 1
   113 0000045B 4D85D2              <2>         test r10, r10
   114 0000045E 7907                <2>         jns .y_step_positive
   115 00000460 49C7C6FFFFFFFF      <2>         mov r14, -1         ; y_step = -1
   116                              <2>     .y_step_positive:
   117                              <2> 
   118 00000467 4D39E3              <2>     cmp r11, r12        ; Compare abs(dx) and abs(dy)
   119 0000046A 7D21                <2>     jge .steep_x        ; If abs(dx) >= abs(dy), use x-major line
   120 0000046C 4D89DF              <2>     mov r15, r11        ; error = abs(dx)
   121 0000046F 49D1E7              <2>     shl r15, 1          ; error = 2 * abs(dx)
   122 00000472 4D29E7              <2>     sub r15, r12         ; error = 2 * abs(dx) - abs(dy)
   123                              <2> 
   124 00000475 4D89D9              <2>     mov r9, r11         ; r9 = abs(dx)
   125 00000478 49D1E1              <2>     shl r9, 1           ; delta_error = 2 * abs(dx)
   126                              <2> 
   127 0000047B 4D89CA              <2>     mov r10,r9
   128 0000047E 4157                <2>     push r15
   129 00000480 4D89E7              <2>     mov r15, r12
   130 00000483 49D1E7              <2>     shl r15, 1           ; delta_error = 2 * abs(dy)
   131 00000486 4D29FA              <2>     sub r10,r15
   132 00000489 415F                <2>     pop r15
   133 0000048B EB21                <2>     jmp .draw_loop_dy
   134                              <2>     .steep_x:
   135 0000048D 4D89E7              <2>         mov r15, r12        ; error = abs(dy)
   136 00000490 49D1E7              <2>         shl r15, 1          ; error = 2 * abs(dy)
   137 00000493 4D29DF              <2>         sub r15, r11         ; error = 2 * abs(dy) - abs(dx)
   138                              <2> 
   139 00000496 4D89E1              <2>         mov r9, r12         ; r9 = abs(dy)
   140 00000499 49D1E1              <2>         shl r9, 1           ; delta_error = 2 * abs(dy)
   141                              <2> 
   142 0000049C 4D89CA              <2>         mov r10,r9
   143 0000049F 4157                <2>         push r15
   144 000004A1 4D89DF              <2>         mov r15, r11
   145 000004A4 49D1E7              <2>         shl r15, 1           ; delta_error = 2 * abs(dx)
   146 000004A7 4D29FA              <2>         sub r10,r15
   147 000004AA 415F                <2>         pop r15
   148 000004AC EB39                <2>         jmp .draw_loop_dx
   149                              <2>     .draw_loop_dy:
   150 000004AE 4839CE              <2>         cmp rsi, rcx        ; Compare y1 with y2
   151 000004B1 746D                <2>         je .done            ; If both match, we're done
   152                              <2> 
   153 000004B3 4983FF00            <2>         cmp r15,0
   154 000004B7 7D08                <2>         jge .yup1
   155 000004B9 4C01F6              <2>         add rsi, r14        ; y += y_step
   156 000004BC 4D01CF              <2>         add r15,r9
   157 000004BF EB09                <2>         jmp .ydrawloop
   158                              <2>         .yup1:
   159 000004C1 4C01EF              <2>             add rdi, r13        ; x += x_step
   160 000004C4 4C01F6              <2>             add rsi, r14        ; y += y_step
   161 000004C7 4D01D7              <2>             add r15,r10
   162                              <2>         .ydrawloop:
   163                              <2>             ; Draw the current pixel
   164                              <2>             prepare_call 3,1
   157                              <3>  %assign total_space ((%1 + %2) * 8)
   158                              <3> 
   159                              <3>  %if (total_space % 16) != 0
   160                              <3>  %assign total_space total_space + 8
   161                              <3>  %endif
   162                              <3> 
   163 000004CA 4883EC20            <3>  sub rsp, total_space
   165 000004CE 4C89442410          <2>             mov qword [rsp+16], r8
   166 000004D3 4889742408          <2>             mov qword [rsp+8], rsi
   167 000004D8 48893C24            <2>             mov qword [rsp], rdi
   168 000004DC E883FEFFFF          <2>             call draw_pixel
   169                              <2>             cleanup_call 3,1
   167                              <3>  %assign total_space ((%1 + %2) * 8)
   168                              <3>  %if (total_space % 16) != 0
   169                              <3>  %assign total_space total_space + 8
   170                              <3>  %endif
   171 000004E1 4883C420            <3>  add rsp, total_space
   170                              <2>             ; mov rax, [rsp-8]
   171 000004E5 EBC7                <2>             jmp .draw_loop_dy            ; If both match, we're done
   172                              <2> 
   173                              <2>     .draw_loop_dx:
   174 000004E7 4839D7              <2>         cmp rdi, rdx        ; Compare y1 with y2
   175 000004EA 7434                <2>         je .done            ; If both match, we're done
   176                              <2> 
   177 000004EC 4983FF00            <2>         cmp r15,0
   178 000004F0 7D08                <2>         jge .xup1
   179 000004F2 4C01EF              <2>         add rdi, r13        ; y += y_step
   180 000004F5 4D01CF              <2>         add r15,r9
   181 000004F8 EB09                <2>         jmp .xdrawloop
   182                              <2>         .xup1:
   183 000004FA 4C01EF              <2>             add rdi, r13        ; x += x_step
   184 000004FD 4C01F6              <2>             add rsi, r14        ; y += y_step
   185 00000500 4D01D7              <2>             add r15,r10
   186                              <2>         .xdrawloop:
   187                              <2>             ; Draw the current pixel
   188                              <2>             prepare_call 3,1
   157                              <3>  %assign total_space ((%1 + %2) * 8)
   158                              <3> 
   159                              <3>  %if (total_space % 16) != 0
   160                              <3>  %assign total_space total_space + 8
   161                              <3>  %endif
   162                              <3> 
   163 00000503 4883EC20            <3>  sub rsp, total_space
   189 00000507 4C89442410          <2>             mov qword [rsp+16], r8
   190 0000050C 4889742408          <2>             mov qword [rsp+8], rsi
   191 00000511 48893C24            <2>             mov qword [rsp], rdi
   192 00000515 E84AFEFFFF          <2>             call draw_pixel
   193                              <2>             cleanup_call 3,1
   167                              <3>  %assign total_space ((%1 + %2) * 8)
   168                              <3>  %if (total_space % 16) != 0
   169                              <3>  %assign total_space total_space + 8
   170                              <3>  %endif
   171 0000051A 4883C420            <3>  add rsp, total_space
   194                              <2>             ; mov rax, [rsp-8]
   195 0000051E EBC7                <2>             jmp .draw_loop_dx            ; If both match, we're done
   196                              <2>         
   197                              <2>     .done:
   198                              <2>         set_ret_param rcx,6
   153 00000520 48894D38            <3>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   199                              <2>         epilog
   128 00000524 58                  <3>  pop rax
   129 00000525 5B                  <3>  pop rbx
   130 00000526 59                  <3>  pop rcx
   131 00000527 5A                  <3>  pop rdx
   132 00000528 5E                  <3>  pop rsi
   133 00000529 5F                  <3>  pop rdi
   134 0000052A 4158                <3>  pop r8
   135 0000052C 4159                <3>  pop r9
   136 0000052E 415A                <3>  pop r10
   137 00000530 415B                <3>  pop r11
   138 00000532 415C                <3>  pop r12
   139 00000534 415D                <3>  pop r13
   140 00000536 415E                <3>  pop r14
   141 00000538 415F                <3>  pop r15
   142                              <3> 
   143 0000053A 4889EC              <3>  mov rsp, rbp
   144 0000053D 5D                  <3>  pop rbp
   145 0000053E C3                  <3>  ret
   200                              <2> 
   201                              <2> draw_rect:; Input: x1,y1,x2,y2,color
   202                              <2>     prolog 2;
    98 0000053F 55                  <3>  push rbp
    99 00000540 4889E5              <3>  mov rbp, rsp
   100                              <3> 
   101 00000543 B802000000          <3>  mov rax, %1
   102 00000548 4883C00F            <3>  add rax, 15
   103 0000054C 4883E0F0            <3>  and rax, ~15
   104 00000550 4829C4              <3>  sub rsp, rax
   105                              <3> 
   106 00000553 4157                <3>  push r15
   107 00000555 4156                <3>  push r14
   108 00000557 4155                <3>  push r13
   109 00000559 4154                <3>  push r12
   110 0000055B 4153                <3>  push r11
   111 0000055D 4152                <3>  push r10
   112 0000055F 4151                <3>  push r9
   113 00000561 4150                <3>  push r8
   114 00000563 57                  <3>  push rdi
   115 00000564 56                  <3>  push rsi
   116 00000565 52                  <3>  push rdx
   117 00000566 51                  <3>  push rcx
   118 00000567 53                  <3>  push rbx
   119 00000568 50                  <3>  push rax
   120                              <3> 
   121                              <3> 
   122                              <3> 
   123                              <3> 
   124                              <3> 
   203                              <2>     get_param rdi, 1    ; x1
   149 00000569 488B7D10            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   204                              <2>     get_param rsi, 2    ; y1
   149 0000056D 488B7518            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   205                              <2>     get_param rdx, 3    ; x2
   149 00000571 488B5520            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   206                              <2>     get_param rcx, 4    ; y2
   149 00000575 488B4D28            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   207                              <2>     get_param r8,  5    ; color
   149 00000579 4C8B4530            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   208                              <2>     ; jmp $
   209                              <2>     .line1:
   210                              <2>         prepare_call 5,1
   157                              <3>  %assign total_space ((%1 + %2) * 8)
   158                              <3> 
   159                              <3>  %if (total_space % 16) != 0
   160                              <3>  %assign total_space total_space + 8
   161                              <3>  %endif
   162                              <3> 
   163 0000057D 4883EC30            <3>  sub rsp, total_space
   211 00000581 48C7442420FFFFFF00  <2>         mov qword [rsp+32], 0x00FFFFFF
   212 0000058A 4889742418          <2>         mov qword [rsp+24], rsi
   213 0000058F 4889542410          <2>         mov qword [rsp+16], rdx
   214                              <2> 
   215 00000594 4889742408          <2>         mov qword [rsp+8], rsi
   216 00000599 48893C24            <2>         mov qword [rsp], rdi
   217 0000059D E841FEFFFF          <2>         call draw_line
   218                              <2>         cleanup_call 5,1
   167                              <3>  %assign total_space ((%1 + %2) * 8)
   168                              <3>  %if (total_space % 16) != 0
   169                              <3>  %assign total_space total_space + 8
   170                              <3>  %endif
   171 000005A2 4883C430            <3>  add rsp, total_space
   219 000005A6 488B4424F8          <2>         mov rax, [rsp-8]
   220                              <2>     .line2:
   221                              <2>         prepare_call 5,1
   157                              <3>  %assign total_space ((%1 + %2) * 8)
   158                              <3> 
   159                              <3>  %if (total_space % 16) != 0
   160                              <3>  %assign total_space total_space + 8
   161                              <3>  %endif
   162                              <3> 
   163 000005AB 4883EC30            <3>  sub rsp, total_space
   222 000005AF 48C7442420FFFFFF00  <2>         mov qword [rsp+32], 0x00FFFFFF
   223 000005B8 48894C2418          <2>         mov qword [rsp+24], rcx
   224 000005BD 4889542410          <2>         mov qword [rsp+16], rdx
   225                              <2> 
   226 000005C2 4889742408          <2>         mov qword [rsp+8], rsi
   227 000005C7 48891424            <2>         mov qword [rsp], rdx
   228 000005CB E813FEFFFF          <2>         call draw_line
   229                              <2>         cleanup_call 5,1
   167                              <3>  %assign total_space ((%1 + %2) * 8)
   168                              <3>  %if (total_space % 16) != 0
   169                              <3>  %assign total_space total_space + 8
   170                              <3>  %endif
   171 000005D0 4883C430            <3>  add rsp, total_space
   230 000005D4 488B4424F8          <2>         mov rax, [rsp-8]
   231                              <2>     .line3:
   232                              <2>         prepare_call 5,1
   157                              <3>  %assign total_space ((%1 + %2) * 8)
   158                              <3> 
   159                              <3>  %if (total_space % 16) != 0
   160                              <3>  %assign total_space total_space + 8
   161                              <3>  %endif
   162                              <3> 
   163 000005D9 4883EC30            <3>  sub rsp, total_space
   233 000005DD 48C7442420FFFFFF00  <2>         mov qword [rsp+32], 0x00FFFFFF
   234 000005E6 48894C2418          <2>         mov qword [rsp+24], rcx
   235 000005EB 48897C2410          <2>         mov qword [rsp+16], rdi
   236                              <2> 
   237 000005F0 48894C2408          <2>         mov qword [rsp+8], rcx
   238 000005F5 48891424            <2>         mov qword [rsp], rdx
   239 000005F9 E8E5FDFFFF          <2>         call draw_line
   240                              <2>         cleanup_call 5,1
   167                              <3>  %assign total_space ((%1 + %2) * 8)
   168                              <3>  %if (total_space % 16) != 0
   169                              <3>  %assign total_space total_space + 8
   170                              <3>  %endif
   171 000005FE 4883C430            <3>  add rsp, total_space
   241 00000602 488B4424F8          <2>         mov rax, [rsp-8]
   242                              <2>     .line4:
   243                              <2>         prepare_call 5,1
   157                              <3>  %assign total_space ((%1 + %2) * 8)
   158                              <3> 
   159                              <3>  %if (total_space % 16) != 0
   160                              <3>  %assign total_space total_space + 8
   161                              <3>  %endif
   162                              <3> 
   163 00000607 4883EC30            <3>  sub rsp, total_space
   244 0000060B 48C7442420FFFFFF00  <2>         mov qword [rsp+32], 0x00FFFFFF
   245 00000614 4889742418          <2>         mov qword [rsp+24], rsi
   246 00000619 48897C2410          <2>         mov qword [rsp+16], rdi
   247                              <2> 
   248 0000061E 48894C2408          <2>         mov qword [rsp+8], rcx
   249 00000623 48893C24            <2>         mov qword [rsp], rdi
   250 00000627 E8B7FDFFFF          <2>         call draw_line
   251                              <2>         cleanup_call 5,1
   167                              <3>  %assign total_space ((%1 + %2) * 8)
   168                              <3>  %if (total_space % 16) != 0
   169                              <3>  %assign total_space total_space + 8
   170                              <3>  %endif
   171 0000062C 4883C430            <3>  add rsp, total_space
   252 00000630 488B4424F8          <2>         mov rax, [rsp-8]
   253                              <2>     .done:
   254                              <2>         set_ret_param rcx,6
   153 00000635 48894D38            <3>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   255                              <2>         epilog
   128 00000639 58                  <3>  pop rax
   129 0000063A 5B                  <3>  pop rbx
   130 0000063B 59                  <3>  pop rcx
   131 0000063C 5A                  <3>  pop rdx
   132 0000063D 5E                  <3>  pop rsi
   133 0000063E 5F                  <3>  pop rdi
   134 0000063F 4158                <3>  pop r8
   135 00000641 4159                <3>  pop r9
   136 00000643 415A                <3>  pop r10
   137 00000645 415B                <3>  pop r11
   138 00000647 415C                <3>  pop r12
   139 00000649 415D                <3>  pop r13
   140 0000064B 415E                <3>  pop r14
   141 0000064D 415F                <3>  pop r15
   142                              <3> 
   143 0000064F 4889EC              <3>  mov rsp, rbp
   144 00000652 5D                  <3>  pop rbp
   145 00000653 C3                  <3>  ret
   256                              <2> 
   257                              <2> draw_screen:;Input:color
   258                              <2>     prolog 2;
    98 00000654 55                  <3>  push rbp
    99 00000655 4889E5              <3>  mov rbp, rsp
   100                              <3> 
   101 00000658 B802000000          <3>  mov rax, %1
   102 0000065D 4883C00F            <3>  add rax, 15
   103 00000661 4883E0F0            <3>  and rax, ~15
   104 00000665 4829C4              <3>  sub rsp, rax
   105                              <3> 
   106 00000668 4157                <3>  push r15
   107 0000066A 4156                <3>  push r14
   108 0000066C 4155                <3>  push r13
   109 0000066E 4154                <3>  push r12
   110 00000670 4153                <3>  push r11
   111 00000672 4152                <3>  push r10
   112 00000674 4151                <3>  push r9
   113 00000676 4150                <3>  push r8
   114 00000678 57                  <3>  push rdi
   115 00000679 56                  <3>  push rsi
   116 0000067A 52                  <3>  push rdx
   117 0000067B 51                  <3>  push rcx
   118 0000067C 53                  <3>  push rbx
   119 0000067D 50                  <3>  push rax
   120                              <3> 
   121                              <3> 
   122                              <3> 
   123                              <3> 
   124                              <3> 
   259                              <2> 
   260                              <2>     get_param rdi, 1   ; x
   149 0000067E 488B7D10            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   261                              <2> 
   262 00000682 488D1D2CFCFFFF      <2>     lea rbx, [rel video_info_ptr] ; Load video info structure address
   263                              <2>     ; Calculate pixel offset
   264 00000689 B800000000          <2>     mov rax,0
   265 0000068E 480FB703            <2>     movzx rax, word [rbx + video_info.xpixel] ; Screen width
   266                              <2> 
   267 00000692 B900000000          <2>     mov rcx,0
   268 00000697 480FB74B02          <2>     movzx rcx, word [rbx + video_info.ypixel] ; Screen height
   269                              <2> 
   270 0000069C 48F7E1              <2>     mul rcx
   271                              <2> 
   272 0000069F 4889C1              <2>     mov rcx,rax
   273 000006A2 480FB65304          <2>     movzx rdx, byte [rbx + video_info.byte_per_pixel] ; Bytes per pixel
   274 000006A7 48F7E2              <2>     mul rdx                          ; Offset = (y * width + x) * bytes_per_pixel
   275                              <2> 
   276 000006AA 488B5B05            <2>     mov rbx, qword [rbx + video_info.video_framebuffer] ; Framebuffer address
   277 000006AE 4801C3              <2>     add rbx,rax
   278                              <2>     .write_color:
   279                              <2>         ; Write color to framebuffer
   280                              <2>         
   281 000006B1 893B                <2>         mov dword [rbx], edi                        ; Write color (assumes 32-bit color)
   282 000006B3 4883EB04            <2>         sub rbx,4                          ; rbx = framebuffer + offset
   283 000006B7 E2F8                <2>         loop .write_color
   284                              <2> 
   285                              <2>         ; jmp $
   286                              <2>     set_ret_param rax,2
   153 000006B9 48894518            <3>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   287                              <2> 
   288                              <2>     epilog
   128 000006BD 58                  <3>  pop rax
   129 000006BE 5B                  <3>  pop rbx
   130 000006BF 59                  <3>  pop rcx
   131 000006C0 5A                  <3>  pop rdx
   132 000006C1 5E                  <3>  pop rsi
   133 000006C2 5F                  <3>  pop rdi
   134 000006C3 4158                <3>  pop r8
   135 000006C5 4159                <3>  pop r9
   136 000006C7 415A                <3>  pop r10
   137 000006C9 415B                <3>  pop r11
   138 000006CB 415C                <3>  pop r12
   139 000006CD 415D                <3>  pop r13
   140 000006CF 415E                <3>  pop r14
   141 000006D1 415F                <3>  pop r15
   142                              <3> 
   143 000006D3 4889EC              <3>  mov rsp, rbp
   144 000006D6 5D                  <3>  pop rbp
   145 000006D7 C3                  <3>  ret
   289                              <2> 
   290                              <2> 
   291                              <2> draw_triangle: ; Input: x1, y1, x2, y2, x3, y3, color
   292                              <2>     prolog 2;
    98 000006D8 55                  <3>  push rbp
    99 000006D9 4889E5              <3>  mov rbp, rsp
   100                              <3> 
   101 000006DC B802000000          <3>  mov rax, %1
   102 000006E1 4883C00F            <3>  add rax, 15
   103 000006E5 4883E0F0            <3>  and rax, ~15
   104 000006E9 4829C4              <3>  sub rsp, rax
   105                              <3> 
   106 000006EC 4157                <3>  push r15
   107 000006EE 4156                <3>  push r14
   108 000006F0 4155                <3>  push r13
   109 000006F2 4154                <3>  push r12
   110 000006F4 4153                <3>  push r11
   111 000006F6 4152                <3>  push r10
   112 000006F8 4151                <3>  push r9
   113 000006FA 4150                <3>  push r8
   114 000006FC 57                  <3>  push rdi
   115 000006FD 56                  <3>  push rsi
   116 000006FE 52                  <3>  push rdx
   117 000006FF 51                  <3>  push rcx
   118 00000700 53                  <3>  push rbx
   119 00000701 50                  <3>  push rax
   120                              <3> 
   121                              <3> 
   122                              <3> 
   123                              <3> 
   124                              <3> 
   293                              <2>     get_param rdi, 1    ; x1
   149 00000702 488B7D10            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   294                              <2>     get_param rsi, 2    ; y1
   149 00000706 488B7518            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   295                              <2>     get_param rdx, 3    ; x2
   149 0000070A 488B5520            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   296                              <2>     get_param rcx, 4    ; y2
   149 0000070E 488B4D28            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   297                              <2>     get_param r8,  5    ; x3
   149 00000712 4C8B4530            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   298                              <2>     get_param r9,  6    ; y3
   149 00000716 4C8B4D38            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   299                              <2>     get_param r10, 7    ; color
   149 0000071A 4C8B5540            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   300                              <2> 
   301                              <2>     ; Draw line from (x1, y1) to (x2, y2)
   302                              <2>     prepare_call 5, 1
   157                              <3>  %assign total_space ((%1 + %2) * 8)
   158                              <3> 
   159                              <3>  %if (total_space % 16) != 0
   160                              <3>  %assign total_space total_space + 8
   161                              <3>  %endif
   162                              <3> 
   163 0000071E 4883EC30            <3>  sub rsp, total_space
   303 00000722 4C89542420          <2>     mov qword [rsp+32], r10 ; color
   304 00000727 48894C2418          <2>     mov qword [rsp+24], rcx ; y2
   305 0000072C 4889542410          <2>     mov qword [rsp+16], rdx ; x2
   306 00000731 4889742408          <2>     mov qword [rsp+8], rsi  ; y1
   307 00000736 48893C24            <2>     mov qword [rsp], rdi    ; x1
   308 0000073A E8A4FCFFFF          <2>     call draw_line
   309                              <2>     cleanup_call 5, 1
   167                              <3>  %assign total_space ((%1 + %2) * 8)
   168                              <3>  %if (total_space % 16) != 0
   169                              <3>  %assign total_space total_space + 8
   170                              <3>  %endif
   171 0000073F 4883C430            <3>  add rsp, total_space
   310                              <2> 
   311                              <2>     ; Draw line from (x2, y2) to (x3, y3)
   312                              <2>     prepare_call 5, 1
   157                              <3>  %assign total_space ((%1 + %2) * 8)
   158                              <3> 
   159                              <3>  %if (total_space % 16) != 0
   160                              <3>  %assign total_space total_space + 8
   161                              <3>  %endif
   162                              <3> 
   163 00000743 4883EC30            <3>  sub rsp, total_space
   313 00000747 4C89542420          <2>     mov qword [rsp+32], r10 ; color
   314 0000074C 4C894C2418          <2>     mov qword [rsp+24], r9  ; y3
   315 00000751 4C89442410          <2>     mov qword [rsp+16], r8  ; x3
   316 00000756 48894C2408          <2>     mov qword [rsp+8], rcx  ; y2
   317 0000075B 48891424            <2>     mov qword [rsp], rdx    ; x2
   318 0000075F E87FFCFFFF          <2>     call draw_line
   319                              <2>     cleanup_call 5, 1
   167                              <3>  %assign total_space ((%1 + %2) * 8)
   168                              <3>  %if (total_space % 16) != 0
   169                              <3>  %assign total_space total_space + 8
   170                              <3>  %endif
   171 00000764 4883C430            <3>  add rsp, total_space
   320                              <2> 
   321                              <2>     ; Draw line from (x3, y3) to (x1, y1)
   322                              <2>     prepare_call 5, 1
   157                              <3>  %assign total_space ((%1 + %2) * 8)
   158                              <3> 
   159                              <3>  %if (total_space % 16) != 0
   160                              <3>  %assign total_space total_space + 8
   161                              <3>  %endif
   162                              <3> 
   163 00000768 4883EC30            <3>  sub rsp, total_space
   323 0000076C 4C89542420          <2>     mov qword [rsp+32], r10 ; color
   324 00000771 4889742418          <2>     mov qword [rsp+24], rsi ; y1
   325 00000776 48897C2410          <2>     mov qword [rsp+16], rdi ; x1
   326 0000077B 4C894C2408          <2>     mov qword [rsp+8], r9   ; y3
   327 00000780 4C890424            <2>     mov qword [rsp], r8     ; x3
   328 00000784 E85AFCFFFF          <2>     call draw_line
   329                              <2>     cleanup_call 5, 1
   167                              <3>  %assign total_space ((%1 + %2) * 8)
   168                              <3>  %if (total_space % 16) != 0
   169                              <3>  %assign total_space total_space + 8
   170                              <3>  %endif
   171 00000789 4883C430            <3>  add rsp, total_space
   330                              <2> 
   331                              <2>     set_ret_param rax, 8
   153 0000078D 48894548            <3>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   332                              <2>     epilog
   128 00000791 58                  <3>  pop rax
   129 00000792 5B                  <3>  pop rbx
   130 00000793 59                  <3>  pop rcx
   131 00000794 5A                  <3>  pop rdx
   132 00000795 5E                  <3>  pop rsi
   133 00000796 5F                  <3>  pop rdi
   134 00000797 4158                <3>  pop r8
   135 00000799 4159                <3>  pop r9
   136 0000079B 415A                <3>  pop r10
   137 0000079D 415B                <3>  pop r11
   138 0000079F 415C                <3>  pop r12
   139 000007A1 415D                <3>  pop r13
   140 000007A3 415E                <3>  pop r14
   141 000007A5 415F                <3>  pop r15
   142                              <3> 
   143 000007A7 4889EC              <3>  mov rsp, rbp
   144 000007AA 5D                  <3>  pop rbp
   145 000007AB C3                  <3>  ret
   333                              <2> 
   334                              <2> draw_circle: ; Input: x_center, y_center, radius, color
   335                              <2>     prolog 2;
    98 000007AC 55                  <3>  push rbp
    99 000007AD 4889E5              <3>  mov rbp, rsp
   100                              <3> 
   101 000007B0 B802000000          <3>  mov rax, %1
   102 000007B5 4883C00F            <3>  add rax, 15
   103 000007B9 4883E0F0            <3>  and rax, ~15
   104 000007BD 4829C4              <3>  sub rsp, rax
   105                              <3> 
   106 000007C0 4157                <3>  push r15
   107 000007C2 4156                <3>  push r14
   108 000007C4 4155                <3>  push r13
   109 000007C6 4154                <3>  push r12
   110 000007C8 4153                <3>  push r11
   111 000007CA 4152                <3>  push r10
   112 000007CC 4151                <3>  push r9
   113 000007CE 4150                <3>  push r8
   114 000007D0 57                  <3>  push rdi
   115 000007D1 56                  <3>  push rsi
   116 000007D2 52                  <3>  push rdx
   117 000007D3 51                  <3>  push rcx
   118 000007D4 53                  <3>  push rbx
   119 000007D5 50                  <3>  push rax
   120                              <3> 
   121                              <3> 
   122                              <3> 
   123                              <3> 
   124                              <3> 
   336                              <2>     get_param rdi, 1    ; x_center
   149 000007D6 488B7D10            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   337                              <2>     get_param rsi, 2    ; y_center
   149 000007DA 488B7518            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   338                              <2>     get_param rdx, 3    ; radius
   149 000007DE 488B5520            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   339                              <2>     get_param rcx, 4    ; color
   149 000007E2 488B4D28            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   340                              <2> 
   341                              <2>     ; Initialize variables
   342 000007E6 41B800000000        <2>     mov r8, 0           ; x = 0
   343 000007EC 4989D1              <2>     mov r9, rdx         ; y = radius
   344 000007EF 41BA03000000        <2>     mov r10, 3          ; decision = 1 - radius
   345 000007F5 4889D0              <2>     mov rax, rdx         ; r = radius
   346 000007F8 BB02000000          <2>     mov rbx,2
   347 000007FD 48F7E3              <2>     mul rbx
   348 00000800 4929C2              <2>     sub r10,rax
   349                              <2>     ; d = 3 - 2 * r;
   350                              <2> 
   351                              <2>     .circle_loop:
   352                              <2>         ; Draw the 8 symmetric points of the circle
   353                              <2>         prepare_call 3, 1
   157                              <3>  %assign total_space ((%1 + %2) * 8)
   158                              <3> 
   159                              <3>  %if (total_space % 16) != 0
   160                              <3>  %assign total_space total_space + 8
   161                              <3>  %endif
   162                              <3> 
   163 00000803 4883EC20            <3>  sub rsp, total_space
   354 00000807 48894C2410          <2>         mov qword [rsp+16], rcx
   355 0000080C 4889742408          <2>         mov qword [rsp+8], rsi
   356 00000811 48893C24            <2>         mov qword [rsp], rdi
   357 00000815 4C010424            <2>         add qword [rsp], r8
   358 00000819 4C014C2408          <2>         add qword [rsp+8], r9
   359 0000081E E841FBFFFF          <2>         call draw_pixel
   360                              <2>         cleanup_call 3, 1
   167                              <3>  %assign total_space ((%1 + %2) * 8)
   168                              <3>  %if (total_space % 16) != 0
   169                              <3>  %assign total_space total_space + 8
   170                              <3>  %endif
   171 00000823 4883C420            <3>  add rsp, total_space
   361                              <2> 
   362                              <2>         prepare_call 3, 1
   157                              <3>  %assign total_space ((%1 + %2) * 8)
   158                              <3> 
   159                              <3>  %if (total_space % 16) != 0
   160                              <3>  %assign total_space total_space + 8
   161                              <3>  %endif
   162                              <3> 
   163 00000827 4883EC20            <3>  sub rsp, total_space
   363 0000082B 48894C2410          <2>         mov qword [rsp+16], rcx
   364 00000830 4889742408          <2>         mov qword [rsp+8], rsi
   365 00000835 48893C24            <2>         mov qword [rsp], rdi
   366 00000839 4C290424            <2>         sub qword [rsp], r8
   367 0000083D 4C014C2408          <2>         add qword [rsp+8], r9
   368 00000842 E81DFBFFFF          <2>         call draw_pixel
   369                              <2>         cleanup_call 3, 1
   167                              <3>  %assign total_space ((%1 + %2) * 8)
   168                              <3>  %if (total_space % 16) != 0
   169                              <3>  %assign total_space total_space + 8
   170                              <3>  %endif
   171 00000847 4883C420            <3>  add rsp, total_space
   370                              <2> 
   371                              <2>         prepare_call 3, 1
   157                              <3>  %assign total_space ((%1 + %2) * 8)
   158                              <3> 
   159                              <3>  %if (total_space % 16) != 0
   160                              <3>  %assign total_space total_space + 8
   161                              <3>  %endif
   162                              <3> 
   163 0000084B 4883EC20            <3>  sub rsp, total_space
   372 0000084F 48894C2410          <2>         mov qword [rsp+16], rcx
   373 00000854 4889742408          <2>         mov qword [rsp+8], rsi
   374 00000859 48893C24            <2>         mov qword [rsp], rdi
   375 0000085D 4C010424            <2>         add qword [rsp], r8
   376 00000861 4C294C2408          <2>         sub qword [rsp+8], r9
   377 00000866 E8F9FAFFFF          <2>         call draw_pixel
   378                              <2>         cleanup_call 3, 1
   167                              <3>  %assign total_space ((%1 + %2) * 8)
   168                              <3>  %if (total_space % 16) != 0
   169                              <3>  %assign total_space total_space + 8
   170                              <3>  %endif
   171 0000086B 4883C420            <3>  add rsp, total_space
   379                              <2> 
   380                              <2>         prepare_call 3, 1
   157                              <3>  %assign total_space ((%1 + %2) * 8)
   158                              <3> 
   159                              <3>  %if (total_space % 16) != 0
   160                              <3>  %assign total_space total_space + 8
   161                              <3>  %endif
   162                              <3> 
   163 0000086F 4883EC20            <3>  sub rsp, total_space
   381 00000873 48894C2410          <2>         mov qword [rsp+16], rcx
   382 00000878 4889742408          <2>         mov qword [rsp+8], rsi
   383 0000087D 48893C24            <2>         mov qword [rsp], rdi
   384 00000881 4C290424            <2>         sub qword [rsp], r8
   385 00000885 4C294C2408          <2>         sub qword [rsp+8], r9
   386 0000088A E8D5FAFFFF          <2>         call draw_pixel
   387                              <2>         cleanup_call 3, 1
   167                              <3>  %assign total_space ((%1 + %2) * 8)
   168                              <3>  %if (total_space % 16) != 0
   169                              <3>  %assign total_space total_space + 8
   170                              <3>  %endif
   171 0000088F 4883C420            <3>  add rsp, total_space
   388                              <2> 
   389                              <2>         prepare_call 3, 1
   157                              <3>  %assign total_space ((%1 + %2) * 8)
   158                              <3> 
   159                              <3>  %if (total_space % 16) != 0
   160                              <3>  %assign total_space total_space + 8
   161                              <3>  %endif
   162                              <3> 
   163 00000893 4883EC20            <3>  sub rsp, total_space
   390 00000897 48894C2410          <2>         mov qword [rsp+16], rcx
   391 0000089C 4889742408          <2>         mov qword [rsp+8], rsi
   392 000008A1 48893C24            <2>         mov qword [rsp], rdi
   393 000008A5 4C010C24            <2>         add qword [rsp], r9
   394 000008A9 4C01442408          <2>         add qword [rsp+8], r8
   395 000008AE E8B1FAFFFF          <2>         call draw_pixel
   396                              <2>         cleanup_call 3, 1
   167                              <3>  %assign total_space ((%1 + %2) * 8)
   168                              <3>  %if (total_space % 16) != 0
   169                              <3>  %assign total_space total_space + 8
   170                              <3>  %endif
   171 000008B3 4883C420            <3>  add rsp, total_space
   397                              <2> 
   398                              <2>         prepare_call 3, 1
   157                              <3>  %assign total_space ((%1 + %2) * 8)
   158                              <3> 
   159                              <3>  %if (total_space % 16) != 0
   160                              <3>  %assign total_space total_space + 8
   161                              <3>  %endif
   162                              <3> 
   163 000008B7 4883EC20            <3>  sub rsp, total_space
   399 000008BB 48894C2410          <2>         mov qword [rsp+16], rcx
   400 000008C0 4889742408          <2>         mov qword [rsp+8], rsi
   401 000008C5 48893C24            <2>         mov qword [rsp], rdi
   402 000008C9 4C290C24            <2>         sub qword [rsp], r9
   403 000008CD 4C01442408          <2>         add qword [rsp+8], r8
   404 000008D2 E88DFAFFFF          <2>         call draw_pixel
   405                              <2>         cleanup_call 3, 1
   167                              <3>  %assign total_space ((%1 + %2) * 8)
   168                              <3>  %if (total_space % 16) != 0
   169                              <3>  %assign total_space total_space + 8
   170                              <3>  %endif
   171 000008D7 4883C420            <3>  add rsp, total_space
   406                              <2> 
   407                              <2>         prepare_call 3, 1
   157                              <3>  %assign total_space ((%1 + %2) * 8)
   158                              <3> 
   159                              <3>  %if (total_space % 16) != 0
   160                              <3>  %assign total_space total_space + 8
   161                              <3>  %endif
   162                              <3> 
   163 000008DB 4883EC20            <3>  sub rsp, total_space
   408 000008DF 48894C2410          <2>         mov qword [rsp+16], rcx
   409 000008E4 4889742408          <2>         mov qword [rsp+8], rsi
   410 000008E9 48893C24            <2>         mov qword [rsp], rdi
   411 000008ED 4C010C24            <2>         add qword [rsp], r9
   412 000008F1 4C29442408          <2>         sub qword [rsp+8], r8
   413 000008F6 E869FAFFFF          <2>         call draw_pixel
   414                              <2>         cleanup_call 3, 1
   167                              <3>  %assign total_space ((%1 + %2) * 8)
   168                              <3>  %if (total_space % 16) != 0
   169                              <3>  %assign total_space total_space + 8
   170                              <3>  %endif
   171 000008FB 4883C420            <3>  add rsp, total_space
   415                              <2> 
   416                              <2>         prepare_call 3, 1
   157                              <3>  %assign total_space ((%1 + %2) * 8)
   158                              <3> 
   159                              <3>  %if (total_space % 16) != 0
   160                              <3>  %assign total_space total_space + 8
   161                              <3>  %endif
   162                              <3> 
   163 000008FF 4883EC20            <3>  sub rsp, total_space
   417 00000903 48894C2410          <2>         mov qword [rsp+16], rcx
   418 00000908 4889742408          <2>         mov qword [rsp+8], rsi
   419 0000090D 48893C24            <2>         mov qword [rsp], rdi
   420 00000911 4C290C24            <2>         sub qword [rsp], r9
   421 00000915 4C29442408          <2>         sub qword [rsp+8], r8
   422 0000091A E845FAFFFF          <2>         call draw_pixel
   423                              <2>         cleanup_call 3, 1
   167                              <3>  %assign total_space ((%1 + %2) * 8)
   168                              <3>  %if (total_space % 16) != 0
   169                              <3>  %assign total_space total_space + 8
   170                              <3>  %endif
   171 0000091F 4883C420            <3>  add rsp, total_space
   424                              <2> 
   425                              <2>         ; Update decision parameter and coordinates
   426                              <2> 
   427                              <2> 
   428                              <2>         ;     if (d < 0) {
   429                              <2>         ;         d = d + 4 * x + 6;
   430                              <2>         ;     } else {
   431                              <2>         ;         d = d + 4 * (x - y) + 10;
   432                              <2>         ;         y --;
   433                              <2>         ;     }
   434                              <2>         ;     x ++;
   435                              <2>         ; }
   436                              <2>         ; r10
   437 00000923 4983FA00            <2>         cmp r10, 0
   438 00000927 7C1B                <2>         jl .update_y
   439 00000929 4C89C0              <2>         mov rax, r8
   440 0000092C 4C29C8              <2>         sub rax, r9
   441                              <2>         
   442 0000092F BB04000000          <2>         mov rbx,4
   443 00000934 48F7E3              <2>         mul rbx
   444 00000937 4883C00A            <2>         add rax,10
   445 0000093B 4901C2              <2>         add r10, rax         ; d = d + 4 * (x - y) + 10;
   446                              <2> 
   447 0000093E 4983E901            <2>         sub r9, 1           ; y--
   448 00000942 EB12                <2>         jmp .update_x
   449                              <2>         .update_y:
   450 00000944 4C89C0              <2>             mov rax, r8
   451                              <2> 
   452 00000947 BB04000000          <2>             mov rbx,4
   453 0000094C 48F7E3              <2>             mul rbx
   454                              <2> 
   455 0000094F 4883C006            <2>             add rax,6
   456 00000953 4901C2              <2>             add r10, rax         ;d = d + 4 * x + 6;
   457                              <2>         .update_x:
   458 00000956 4983C001            <2>             add r8, 1           ; x++
   459 0000095A 4D39C8              <2>             cmp r8, r9
   460 0000095D 0F8EA0FEFFFF        <2>             jle .circle_loop
   461                              <2> 
   462                              <2>         set_ret_param rax, 5
   153 00000963 48894530            <3>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   463                              <2>         epilog
   128 00000967 58                  <3>  pop rax
   129 00000968 5B                  <3>  pop rbx
   130 00000969 59                  <3>  pop rcx
   131 0000096A 5A                  <3>  pop rdx
   132 0000096B 5E                  <3>  pop rsi
   133 0000096C 5F                  <3>  pop rdi
   134 0000096D 4158                <3>  pop r8
   135 0000096F 4159                <3>  pop r9
   136 00000971 415A                <3>  pop r10
   137 00000973 415B                <3>  pop r11
   138 00000975 415C                <3>  pop r12
   139 00000977 415D                <3>  pop r13
   140 00000979 415E                <3>  pop r14
   141 0000097B 415F                <3>  pop r15
   142                              <3> 
   143 0000097D 4889EC              <3>  mov rsp, rbp
   144 00000980 5D                  <3>  pop rbp
   145 00000981 C3                  <3>  ret
   464                              <2> 
   465                              <2> %endif
     6                              <1>     
     7                              <1> [BITS 64]
     8                              <1>     ; struc cursor_info
     9                              <1>     ;     .print_xpixel:            resw 1      
    10                              <1>     ;     .print_ypixel:            resw 1       
    11                              <1>     ;     .current_xpixel:          resw 1      
    12                              <1>     ;     .current_ypixel:          resw 1
    13                              <1>     ; endstruc
    14                              <1>     ; cursor_info_ptr:
    15                              <1>     ;     istruc cursor_info
    16                              <1>     ;         at cursor_info.print_xpixel, dw 0
    17                              <1>     ;         at cursor_info.print_ypixel, dw 0
    18                              <1>     ;         at cursor_info.current_xpixel, dw 0
    19                              <1>     ;         at cursor_info.current_ypixel, dw 0
    20                              <1>     ;     iend
    21                              <1> 
    22                              <1>     ; struc font_info
    23                              <1>     ;     .font_base_address:    resq 1
    24                              <1>     ;     .font_size:            resq 1
    25                              <1>     ;     .font_width:           resq 1
    26                              <1>     ;     .font_height:          resq 1
    27                              <1>     ; endstruc
    28                              <1>     ; font_info_ptr:
    29                              <1>     ;     istruc font_info
    30                              <1>     ;         at font_info.font_base_address, dq 0
    31                              <1>     ;         at font_info.font_size, dq 0
    32                              <1>     ;         at font_info.font_width, dq 0
    33                              <1>     ;         at font_info.font_height, dq 0
    34                              <1>     ;     iend
    35                              <1> 
    36                              <1> struc print_info
    37 00000000 ????                <1>     .cursor_current_xpixel:     resw 1
    38 00000002 ????                <1>     .cursor_current_ypixel:     resw 1
    39 00000004 ????                <1>     .cursor_current_line:       resw 1
    40                              <1> 
    41 00000006 ????                <1>     .cursor_print_xpixel:       resw 1
    42 00000008 ????                <1>     .cursor_print_ypixel:       resw 1
    43 0000000A ????                <1>     .cursor_print_line:         resw 1
    44 0000000C ????????????????    <1>     .cursor_print_address:      resq 1
    45                              <1> 
    46 00000014 ????????????????    <1>     .font_base_address:         resq 1
    47 0000001C ????                <1>     .font_size:                 resw 1
    48 0000001E ????                <1>     .font_width:                resw 1
    49 00000020 ????                <1>     .font_height:               resw 1
    50                              <1> 
    51 00000022 ????                <1>     .pixel_line_start:          resw 1
    52 00000024 ????                <1>     .pixel_per_line:            resw 1 
    53                              <1> 
    54 00000026 ????                <1>     .default_color:             resw 1
    55 00000028 ????                <1>     .current_color:             resw 1
    56                              <1> endstruc
    57                              <1> 
    58                              <1> print_info_ptr:
    59                              <1>     istruc print_info
    60 00000982 0000                <1>         at print_info.cursor_current_xpixel, dw 0
    61 00000984 0000                <1>         at print_info.cursor_current_ypixel, dw 0
    62 00000986 0000                <1>         at print_info.cursor_current_line, dw 0
    63                              <1> 
    64 00000988 0000                <1>         at print_info.cursor_print_xpixel, dw 0
    65 0000098A 0000                <1>         at print_info.cursor_print_ypixel, dw 0
    66 0000098C 0000                <1>         at print_info.cursor_print_line, dw 0
    67 0000098E 0000000000000000    <1>         at print_info.cursor_print_address, dq 0
    68                              <1> 
    69 00000996 0000000000000000    <1>         at print_info.font_base_address, dq 0
    70 0000099E 0000                <1>         at print_info.font_size, dw 0
    71 000009A0 0000                <1>         at print_info.font_width, dw 0
    72 000009A2 0000                <1>         at print_info.font_height, dw 0
    73                              <1> 
    74 000009A4 0000                <1>         at print_info.pixel_line_start, dw 0
    75 000009A6 0000                <1>         at print_info.pixel_per_line, dw 0
    76                              <1> 
    77 000009A8 0000                <1>         at print_info.default_color, dw 0
    78 000009AA 0000                <1>         at print_info.current_color, dw 0
    79                              <1>     iend
    80                              <1> 
    81                              <1> printk_init:
    82                              <1> 
    83                              <1>     ; mov rsi,KernelSpaceUpperAddress + VBEModeStructBufferAddr + vbe_mode_info_block.x_resolution
    84                              <1>     ; mov rbx,0
    85                              <1>     ; mov  bx, word [rsi]
    86                              <1>     prolog 0;
    98 000009AC 55                  <2>  push rbp
    99 000009AD 4889E5              <2>  mov rbp, rsp
   100                              <2> 
   101 000009B0 B800000000          <2>  mov rax, %1
   102 000009B5 4883C00F            <2>  add rax, 15
   103 000009B9 4883E0F0            <2>  and rax, ~15
   104 000009BD 4829C4              <2>  sub rsp, rax
   105                              <2> 
   106 000009C0 4157                <2>  push r15
   107 000009C2 4156                <2>  push r14
   108 000009C4 4155                <2>  push r13
   109 000009C6 4154                <2>  push r12
   110 000009C8 4153                <2>  push r11
   111 000009CA 4152                <2>  push r10
   112 000009CC 4151                <2>  push r9
   113 000009CE 4150                <2>  push r8
   114 000009D0 57                  <2>  push rdi
   115 000009D1 56                  <2>  push rsi
   116 000009D2 52                  <2>  push rdx
   117 000009D3 51                  <2>  push rcx
   118 000009D4 53                  <2>  push rbx
   119 000009D5 50                  <2>  push rax
   120                              <2> 
   121                              <2> 
   122                              <2> 
   123                              <2> 
   124                              <2> 
    87                              <1> 
    88 000009D6 66C705A9FFFFFF0000  <1>     mov word [rel print_info_ptr + print_info.cursor_print_xpixel],0
    89 000009DF 66C705A2FFFFFFC800  <1>     mov word [rel print_info_ptr + print_info.cursor_print_ypixel],200
    90 000009E8 66C7059BFFFFFF0A00  <1>     mov word [rel print_info_ptr + print_info.cursor_print_line],10
    91 000009F1 48C70592FFFFFF00DC- <1>     mov qword [rel print_info_ptr + print_info.cursor_print_address],0x5DC00
    91 000009FA 0500                <1>
    92                              <1> 
    93 000009FC 66C7057DFFFFFF0000  <1>     mov word [rel print_info_ptr + print_info.cursor_current_xpixel],0
    94 00000A05 66C70576FFFFFF0000  <1>     mov word [rel print_info_ptr + print_info.cursor_current_ypixel],0    
    95 00000A0E 66C7056FFFFFFF0A00  <1>     mov word [rel print_info_ptr + print_info.cursor_current_line],10
    96                              <1> 
    97 00000A17 48BE005210000080FF- <1>     mov rsi,0xFFFF800000105200
    97 00000A20 FF                  <1>
    98 00000A21 4889356EFFFFFF      <1>     mov qword [rel print_info_ptr + print_info.font_base_address],rsi
    99 00000A28 66C7056DFFFFFF1000  <1>     mov word [rel print_info_ptr + print_info.font_size],16
   100 00000A31 66C70566FFFFFF0800  <1>     mov word [rel print_info_ptr + print_info.font_width],8
   101 00000A3A 66C7055FFFFFFF1000  <1>     mov word [rel print_info_ptr + print_info.font_height],16
   102                              <1> 
   103 00000A43 66C70558FFFFFF0400  <1>     mov word [rel print_info_ptr + print_info.pixel_line_start],4
   104 00000A4C 66C70551FFFFFF1400  <1>     mov word [rel print_info_ptr + print_info.pixel_per_line],20
   105                              <1> 
   106                              <1>     ; mov word [rel print_info_ptr + print_info.default_color],0x00FFFFFF
   107                              <1>     ; mov word [rel print_info_ptr + print_info.current_color],0x00FFFFFF
   108                              <1> 
   109                              <1>     epilog
   128 00000A55 58                  <2>  pop rax
   129 00000A56 5B                  <2>  pop rbx
   130 00000A57 59                  <2>  pop rcx
   131 00000A58 5A                  <2>  pop rdx
   132 00000A59 5E                  <2>  pop rsi
   133 00000A5A 5F                  <2>  pop rdi
   134 00000A5B 4158                <2>  pop r8
   135 00000A5D 4159                <2>  pop r9
   136 00000A5F 415A                <2>  pop r10
   137 00000A61 415B                <2>  pop r11
   138 00000A63 415C                <2>  pop r12
   139 00000A65 415D                <2>  pop r13
   140 00000A67 415E                <2>  pop r14
   141 00000A69 415F                <2>  pop r15
   142                              <2> 
   143 00000A6B 4889EC              <2>  mov rsp, rbp
   144 00000A6E 5D                  <2>  pop rbp
   145 00000A6F C3                  <2>  ret
   110                              <1> 
   111                              <1> printk:; input: format string,pointer to arguments
   112                              <1>     prolog 2
    98 00000A70 55                  <2>  push rbp
    99 00000A71 4889E5              <2>  mov rbp, rsp
   100                              <2> 
   101 00000A74 B802000000          <2>  mov rax, %1
   102 00000A79 4883C00F            <2>  add rax, 15
   103 00000A7D 4883E0F0            <2>  and rax, ~15
   104 00000A81 4829C4              <2>  sub rsp, rax
   105                              <2> 
   106 00000A84 4157                <2>  push r15
   107 00000A86 4156                <2>  push r14
   108 00000A88 4155                <2>  push r13
   109 00000A8A 4154                <2>  push r12
   110 00000A8C 4153                <2>  push r11
   111 00000A8E 4152                <2>  push r10
   112 00000A90 4151                <2>  push r9
   113 00000A92 4150                <2>  push r8
   114 00000A94 57                  <2>  push rdi
   115 00000A95 56                  <2>  push rsi
   116 00000A96 52                  <2>  push rdx
   117 00000A97 51                  <2>  push rcx
   118 00000A98 53                  <2>  push rbx
   119 00000A99 50                  <2>  push rax
   120                              <2> 
   121                              <2> 
   122                              <2> 
   123                              <2> 
   124                              <2> 
   113                              <1>     get_param rsi, 1   ; rsi = format string
   149 00000A9A 488B7510            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   114                              <1>     get_param rdx, 2   ; rdx = pointer to arguments
   149 00000A9E 488B5518            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   115                              <1> 
   116                              <1>     ; mov word [rel print_info_ptr + print_info.cursor_current_xpixel],0
   117                              <1>     ; mov word [rel print_info_ptr + print_info.cursor_current_ypixel],200
   118                              <1>     ; mov word [rel print_info_ptr + print_info.cursor_current_line],10
   119                              <1>     ; mov word [rel print_info_ptr + print_info.cursor_print_line],10
   120                              <1>     ; mov word [rel print_info_ptr + print_info.cursor_print_xpixel],0
   121                              <1>     ; mov word [rel print_info_ptr + print_info.cursor_print_ypixel],200
   122                              <1> 
   123 00000AA2 B800000000          <1>     mov rax, 0
   124 00000AA7 668B05DCFEFFFF      <1>     mov ax, word [rel print_info_ptr + print_info.cursor_print_ypixel]
   125 00000AAE BB00000000          <1>     mov rbx,0
   126 00000AB3 668B1DFBF7FFFF      <1>     mov bx,word [rel video_info_ptr + video_info.xpixel]
   127 00000ABA 480FAFC3            <1>     imul rax,rbx
   128 00000ABE B900000000          <1>     mov rcx,0
   129 00000AC3 668B0DBEFEFFFF      <1>     mov cx,word [rel print_info_ptr + print_info.cursor_print_xpixel]
   130 00000ACA 4801C8              <1>     add rax, rcx
   131 00000ACD BB00000000          <1>     mov rbx,0
   132 00000AD2 8A1DE1F7FFFF        <1>     mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   133 00000AD8 480FAFC3            <1>     imul rax,rbx
   134                              <1>     ; jmp $
   135 00000ADC 488B3DD7F7FFFF      <1>     mov rdi, qword [rel video_info_ptr + video_info.video_framebuffer]
   136 00000AE3 4801C7              <1>     add rdi, rax
   137 00000AE6 B800000000          <1>     mov rax,0
   138                              <1> 
   139                              <1>     .next_char:
   140 00000AEB AC                  <1>         lodsb                  ; Load next character from format string into AL
   141 00000AEC 84C0                <1>         test al, al            ; Check if end of string
   142 00000AEE 0F84A4000000        <1>         jz .done
   143                              <1> 
   144 00000AF4 3C25                <1>         cmp al, '%'            ; Check for format specifier
   145 00000AF6 750F                <1>         jne .print_char
   146                              <1>     ; jmp $
   147 00000AF8 AC                  <1>         lodsb                  ; Load format specifier
   148 00000AF9 3C64                <1>         cmp al, 'd'            ; Check for %d
   149 00000AFB 7440                <1>         je .print_decimal
   150 00000AFD 3C78                <1>         cmp al, 'x'            ; Check for %x
   151 00000AFF 744C                <1>         je .print_hex
   152 00000B01 3C73                <1>         cmp al, 's'            ; Check for %s
   153 00000B03 7458                <1>         je .print_string
   154 00000B05 EBE4                <1>         jmp .next_char         ; Skip unknown specifier
   155                              <1> 
   156                              <1>     .print_char:
   157 00000B07 BB00000000          <1>         mov rbx, 0
   158 00000B0C 88C3                <1>         mov bl, al             ; Character to print
   159                              <1> 
   160                              <1>         prepare_call 2,1
   157                              <2>  %assign total_space ((%1 + %2) * 8)
   158                              <2> 
   159                              <2>  %if (total_space % 16) != 0
   160                              <2>  %assign total_space total_space + 8
   161                              <2>  %endif
   162                              <2> 
   163 00000B0E 4883EC20            <2>  sub rsp, total_space
   161 00000B12 48897C2408          <1>         mov qword [rsp+8], rdi
   162 00000B17 48891C24            <1>         mov qword [rsp], rbx
   163 00000B1B E893000000          <1>         call putc
   164                              <1>         cleanup_call 2,1
   167                              <2>  %assign total_space ((%1 + %2) * 8)
   168                              <2>  %if (total_space % 16) != 0
   169                              <2>  %assign total_space total_space + 8
   170                              <2>  %endif
   171 00000B20 4883C420            <2>  add rsp, total_space
   165 00000B24 488B4424F8          <1>         mov rax, [rsp-8]
   166                              <1> 
   167 00000B29 BB00000000          <1>         mov rbx,0
   168 00000B2E 8A1D85F7FFFF        <1>         mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   169 00000B34 486BDB08            <1>         imul rbx,8        
   170 00000B38 4801DF              <1>         add rdi, rbx
   171                              <1> 
   172 00000B3B EBAE                <1>         jmp .next_char
   173                              <1> 
   174                              <1>     .print_decimal:
   175 00000B3D 52                  <1>         push rdx               ; Save argument pointer
   176 00000B3E 488B02              <1>         mov rax, [rdx]         ; Load integer argument
   177 00000B41 4883C208            <1>         add rdx, 8             ; Move to next argument
   178 00000B45 E857010000          <1>         call print_decimal     ; Convert and print integer
   179 00000B4A 5A                  <1>         pop rdx                ; Restore argument pointer
   180 00000B4B EB9E                <1>         jmp .next_char
   181                              <1> 
   182                              <1>     .print_hex:
   183 00000B4D 52                  <1>         push rdx               ; Save argument pointer
   184 00000B4E 488B02              <1>         mov rax, [rdx]         ; Load integer argument
   185 00000B51 4883C208            <1>         add rdx, 8             ; Move to next argument
   186 00000B55 E887010000          <1>         call print_hex         ; Convert and print hexadecimal
   187 00000B5A 5A                  <1>         pop rdx                ; Restore argument pointer
   188 00000B5B EB8E                <1>         jmp .next_char
   189                              <1> 
   190                              <1>     .print_string:
   191                              <1> 
   192                              <1> 
   193                              <1> 
   194                              <1>             prepare_call 3,1
   157                              <2>  %assign total_space ((%1 + %2) * 8)
   158                              <2> 
   159                              <2>  %if (total_space % 16) != 0
   160                              <2>  %assign total_space total_space + 8
   161                              <2>  %endif
   162                              <2> 
   163 00000B5D 4883EC20            <2>  sub rsp, total_space
   195                              <1> 
   196 00000B61 488B32              <1>     mov rsi, [rdx]         ; Load string pointer
   197 00000B64 4889742410          <1>     mov qword [rsp+16], rsi
   198                              <1> 
   199 00000B69 48C74424083C000000  <1>     mov qword [rsp+8], 60
   200 00000B72 48C7042400000000    <1>     mov qword [rsp], 0
   201 00000B7A E8A2020000          <1>     call draw_string
   202                              <1>     cleanup_call 3,1
   167                              <2>  %assign total_space ((%1 + %2) * 8)
   168                              <2>  %if (total_space % 16) != 0
   169                              <2>  %assign total_space total_space + 8
   170                              <2>  %endif
   171 00000B7F 4883C420            <2>  add rsp, total_space
   203 00000B83 488B4424F8          <1>     mov rax, [rsp-8]
   204                              <1> 
   205 00000B88 52                  <1>         push rdx               ; Save argument pointer
   206                              <1>         
   207 00000B89 4883C208            <1>         add rdx, 8             ; Move to next argument
   208 00000B8D E88F020000          <1>         call draw_string       ; Print string
   209 00000B92 5A                  <1>         pop rdx                ; Restore argument pointer
   210 00000B93 E953FFFFFF          <1>         jmp .next_char
   211                              <1> 
   212                              <1>     .done:
   213                              <1>         epilog
   128 00000B98 58                  <2>  pop rax
   129 00000B99 5B                  <2>  pop rbx
   130 00000B9A 59                  <2>  pop rcx
   131 00000B9B 5A                  <2>  pop rdx
   132 00000B9C 5E                  <2>  pop rsi
   133 00000B9D 5F                  <2>  pop rdi
   134 00000B9E 4158                <2>  pop r8
   135 00000BA0 4159                <2>  pop r9
   136 00000BA2 415A                <2>  pop r10
   137 00000BA4 415B                <2>  pop r11
   138 00000BA6 415C                <2>  pop r12
   139 00000BA8 415D                <2>  pop r13
   140 00000BAA 415E                <2>  pop r14
   141 00000BAC 415F                <2>  pop r15
   142                              <2> 
   143 00000BAE 4889EC              <2>  mov rsp, rbp
   144 00000BB1 5D                  <2>  pop rbp
   145 00000BB2 C3                  <2>  ret
   214                              <1> 
   215                              <1> putc: ; input: rbx=char,rdi=vga_address ;draw a character
   216                              <1> 
   217                              <1>     prolog 2;
    98 00000BB3 55                  <2>  push rbp
    99 00000BB4 4889E5              <2>  mov rbp, rsp
   100                              <2> 
   101 00000BB7 B802000000          <2>  mov rax, %1
   102 00000BBC 4883C00F            <2>  add rax, 15
   103 00000BC0 4883E0F0            <2>  and rax, ~15
   104 00000BC4 4829C4              <2>  sub rsp, rax
   105                              <2> 
   106 00000BC7 4157                <2>  push r15
   107 00000BC9 4156                <2>  push r14
   108 00000BCB 4155                <2>  push r13
   109 00000BCD 4154                <2>  push r12
   110 00000BCF 4153                <2>  push r11
   111 00000BD1 4152                <2>  push r10
   112 00000BD3 4151                <2>  push r9
   113 00000BD5 4150                <2>  push r8
   114 00000BD7 57                  <2>  push rdi
   115 00000BD8 56                  <2>  push rsi
   116 00000BD9 52                  <2>  push rdx
   117 00000BDA 51                  <2>  push rcx
   118 00000BDB 53                  <2>  push rbx
   119 00000BDC 50                  <2>  push rax
   120                              <2> 
   121                              <2> 
   122                              <2> 
   123                              <2> 
   124                              <2> 
   218                              <1>     get_param rbx, 1   ; x
   149 00000BDD 488B5D10            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   219                              <1>     get_param rdi, 2   ; y
   149 00000BE1 488B7D18            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   220                              <1> 
   221 00000BE5 4831C0              <1>     xor rax, rax
   222 00000BE8 88D8                <1>     mov al, bl
   223 00000BEA 48C1E004            <1>     shl rax, 4                 ; 乘以16(每个字符16字节)
   224                              <1> 
   225 00000BEE 56                  <1>     push rsi
   226 00000BEF 488B35A0FDFFFF      <1>     mov rsi, [rel print_info_ptr + print_info.font_base_address]
   227 00000BF6 4801C6              <1>     add rsi, rax         ; RSI = 字符数据地址
   228 00000BF9 4889F0              <1>     mov rax,rsi
   229 00000BFC 4889C3              <1>     mov rbx,rax
   230 00000BFF 5E                  <1>     pop rsi
   231 00000C00 B910000000          <1>     mov rcx, 16                ; 16行高度
   232 00000C05 57                  <1>     push rdi               ; 保存当前行起始位置
   233                              <1>     .next_line:
   234 00000C06 57                  <1>         push rdi               ; 保存当前行起始位置
   235                              <1>         
   236                              <1>         ; 处理一行(8像素)
   237 00000C07 8A13                <1>         mov dl, [rbx]          ; 获取字模数据
   238 00000C09 B608                <1>         mov dh, 8              ; 8位/行
   239                              <1>         .next_pixel:
   240 00000C0B 4831C0              <1>             xor rax,rax
   241 00000C0E 8A05A5F6FFFF        <1>             mov al,byte [rel video_info_ptr + video_info.byte_per_pixel]
   242                              <1> 
   243 00000C14 F6C280              <1>             test dl, 0x80       ; 测试最高位
   244 00000C17 7413                <1>             jz .skip_pixel
   245                              <1> 
   246                              <1> 
   247 00000C19 3C04                <1>             cmp al,4
   248 00000C1B 7208                <1>             jb .pixel_2byte
   249 00000C1D C64702FF            <1>             mov byte [rdi+2], 0xFF ; 绘制像素(白色)
   250 00000C21 C6470300            <1>             mov byte [rdi+3], 0x00 ; 绘制像素(白色)
   251                              <1>             .pixel_2byte:
   252 00000C25 C607FF              <1>                 mov byte [rdi], 0xFF ; 绘制像素(白色)
   253 00000C28 C64701FF            <1>                 mov byte [rdi+1], 0xFF ; 绘制像素(白色)
   254                              <1>             ; jmp $
   255                              <1>         .skip_pixel:
   256 00000C2C D0E2                <1>             shl dl, 1           ; 移到下一位
   257 00000C2E 4801C7              <1>             add rdi,rax
   258 00000C31 FECE                <1>             dec dh
   259 00000C33 75D6                <1>             jnz .next_pixel
   260                              <1>         
   261 00000C35 5F                  <1>         pop rdi                 ; 恢复行起始位置
   262 00000C36 4831C0              <1>         xor rax,rax
   263 00000C39 668B0575F6FFFF      <1>         mov ax,word [rel video_info_ptr + video_info.xpixel]
   264                              <1> 
   265 00000C40 4989D8              <1>         mov r8,rbx
   266 00000C43 BB00000000          <1>         mov rbx,0
   267 00000C48 8A1D6BF6FFFF        <1>         mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   268 00000C4E 480FAFC3            <1>         imul rax,rbx
   269 00000C52 4C89C3              <1>         mov rbx,r8
   270 00000C55 4801C7              <1>         add rdi,rax; 移到下一行(320=屏幕宽度)
   271                              <1>         ; jmp $
   272 00000C58 48FFC3              <1>         inc rbx                 ; 下一个字模字节
   273                              <1> 
   274 00000C5B E2A9                <1>         loop .next_line
   275                              <1>                 ; jmp $
   276 00000C5D 5F                  <1>     pop rdi                 ; 恢复行起始位置
   277                              <1>     epilog
   128 00000C5E 58                  <2>  pop rax
   129 00000C5F 5B                  <2>  pop rbx
   130 00000C60 59                  <2>  pop rcx
   131 00000C61 5A                  <2>  pop rdx
   132 00000C62 5E                  <2>  pop rsi
   133 00000C63 5F                  <2>  pop rdi
   134 00000C64 4158                <2>  pop r8
   135 00000C66 4159                <2>  pop r9
   136 00000C68 415A                <2>  pop r10
   137 00000C6A 415B                <2>  pop r11
   138 00000C6C 415C                <2>  pop r12
   139 00000C6E 415D                <2>  pop r13
   140 00000C70 415E                <2>  pop r14
   141 00000C72 415F                <2>  pop r15
   142                              <2> 
   143 00000C74 4889EC              <2>  mov rsp, rbp
   144 00000C77 5D                  <2>  pop rbp
   145 00000C78 C3                  <2>  ret
   278                              <1> 
   279                              <1> print:
   280 00000C79 4883F900            <1>     cmp rcx, 0
   281 00000C7D 7421                <1>     je .done
   282 00000C7F 53                  <1>     push rbx
   283 00000C80 BBA0000000          <1>     mov rbx,    160
   284 00000C85 48F7E3              <1>     mul rbx
   285 00000C88 4801C7              <1>     add rdi, rax
   286 00000C8B 5B                  <1>     pop rbx
   287                              <1>     .str:
   288 00000C8C 8A06                <1>         mov al, [rsi]
   289 00000C8E 8807                <1>         mov [rdi], al
   290 00000C90 4883C702            <1>         add rdi,2
   291 00000C94 48FFC6              <1>         inc rsi
   292 00000C97 48FFC9              <1>         dec rcx
   293 00000C9A 4883F900            <1>         cmp rcx, 0
   294 00000C9E 75EC                <1>         jne .str
   295                              <1>     .done:
   296 00000CA0 C3                  <1>         ret
   297                              <1> print_decimal:
   298 00000CA1 53                  <1>     push rbx
   299 00000CA2 51                  <1>     push rcx
   300 00000CA3 52                  <1>     push rdx
   301 00000CA4 4831DB              <1>     xor rbx, rbx
   302 00000CA7 BB0A000000          <1>     mov rbx, 10              ; Base 10
   303 00000CAC 4831C9              <1>     xor rcx, rcx             ; Digit counter
   304                              <1> 
   305                              <1>     .convert_loop:
   306 00000CAF 4831D2              <1>         xor rdx, rdx
   307 00000CB2 48F7F3              <1>         div rbx              ; Divide rax by 10, remainder in rdx
   308 00000CB5 52                  <1>         push rdx             ; Save remainder (digit)
   309 00000CB6 48FFC1              <1>         inc rcx              ; Increment digit counter
   310 00000CB9 4885C0              <1>         test rax, rax
   311 00000CBC 75F1                <1>         jnz .convert_loop    ; Repeat until rax == 0
   312                              <1> 
   313                              <1>     .print_digits:
   314 00000CBE 5A                  <1>         pop rdx              ; Get digit from stack
   315 00000CBF 80C230              <1>         add dl, '0'          ; Convert to ASCII
   316 00000CC2 4889D3              <1>         mov rbx, rdx
   317                              <1>         prepare_call 2, 1
   157                              <2>  %assign total_space ((%1 + %2) * 8)
   158                              <2> 
   159                              <2>  %if (total_space % 16) != 0
   160                              <2>  %assign total_space total_space + 8
   161                              <2>  %endif
   162                              <2> 
   163 00000CC5 4883EC20            <2>  sub rsp, total_space
   318 00000CC9 48897C2408          <1>         mov qword [rsp+8], rdi ; VGA address
   319 00000CCE 48891C24            <1>         mov qword [rsp], rbx   ; Character
   320 00000CD2 E8DCFEFFFF          <1>         call putc
   321                              <1>         cleanup_call 2, 1
   167                              <2>  %assign total_space ((%1 + %2) * 8)
   168                              <2>  %if (total_space % 16) != 0
   169                              <2>  %assign total_space total_space + 8
   170                              <2>  %endif
   171 00000CD7 4883C420            <2>  add rsp, total_space
   322 00000CDB E2E1                <1>         loop .print_digits
   323                              <1> 
   324 00000CDD 5A                  <1>     pop rdx
   325 00000CDE 59                  <1>     pop rcx
   326 00000CDF 5B                  <1>     pop rbx
   327 00000CE0 C3                  <1>     ret
   328                              <1> 
   329                              <1> print_hex:
   330 00000CE1 53                  <1>     push rbx
   331 00000CE2 51                  <1>     push rcx
   332 00000CE3 52                  <1>     push rdx
   333 00000CE4 B910000000          <1>     mov rcx, 16              ; Process 16 digits (64-bit number)
   334                              <1>     .convert_loop:
   335 00000CE9 48C1C004            <1>         rol rax, 4           ; Rotate left by 4 bits
   336 00000CED 88C2                <1>         mov dl, al           ; Extract lower nibble
   337 00000CEF 80E20F              <1>         and dl, 0x0F         ; Mask to get a single hex digit
   338 00000CF2 80FA0A              <1>         cmp dl, 10
   339 00000CF5 7C05                <1>         jl .digit
   340 00000CF7 80C237              <1>         add dl, 'A' - 10     ; Convert to 'A'-'F'
   341 00000CFA EB03                <1>         jmp .output
   342                              <1>     .digit:
   343 00000CFC 80C230              <1>         add dl, '0'          ; Convert to '0'-'9'
   344                              <1>     .output:
   345 00000CFF 4889D3              <1>         mov rbx, rdx
   346                              <1>         prepare_call 2, 1
   157                              <2>  %assign total_space ((%1 + %2) * 8)
   158                              <2> 
   159                              <2>  %if (total_space % 16) != 0
   160                              <2>  %assign total_space total_space + 8
   161                              <2>  %endif
   162                              <2> 
   163 00000D02 4883EC20            <2>  sub rsp, total_space
   347 00000D06 48897C2408          <1>         mov qword [rsp+8], rdi ; VGA address
   348 00000D0B 48891C24            <1>         mov qword [rsp], rbx   ; Character
   349 00000D0F E89FFEFFFF          <1>         call putc
   350                              <1>         cleanup_call 2, 1
   167                              <2>  %assign total_space ((%1 + %2) * 8)
   168                              <2>  %if (total_space % 16) != 0
   169                              <2>  %assign total_space total_space + 8
   170                              <2>  %endif
   171 00000D14 4883C420            <2>  add rsp, total_space
   351 00000D18 E2CF                <1>         loop .convert_loop
   352                              <1> 
   353 00000D1A 5A                  <1>     pop rdx
   354 00000D1B 59                  <1>     pop rcx
   355 00000D1C 5B                  <1>     pop rbx
   356 00000D1D C3                  <1>     ret
   357                              <1> print_hex_str:
   358 00000D1E 4883F900            <1>     cmp rcx, 0
   359 00000D22 743D                <1>     je .done
   360                              <1> 
   361 00000D24 50                  <1>     push rax
   362 00000D25 B880070000          <1>     mov rax,    1920
   363 00000D2A 48F7E3              <1>     mul rbx
   364 00000D2D 4889C3              <1>     mov rbx,rax
   365 00000D30 58                  <1>     pop rax
   366 00000D31 4801D8              <1>     add rax ,rbx
   367 00000D34 4889C3              <1>     mov rbx,rax
   368                              <1> 
   369 00000D37 B804000000          <1>     mov rax,4
   370 00000D3C 48F7E3              <1>     mul rbx
   371 00000D3F 4801C7              <1>     add rdi, rax
   372                              <1> 
   373                              <1>     .str:
   374 00000D42 51                  <1>         push rcx
   375 00000D43 E81A000000          <1>         call print_hex_byte
   376                              <1> 
   377 00000D48 48FFC6              <1>         inc rsi
   378 00000D4B E812000000          <1>         call print_hex_byte
   379                              <1>                 ; jmp $
   380 00000D50 48FFC6              <1>         inc rsi
   381 00000D53 4883C720            <1>         add rdi,32
   382 00000D57 59                  <1>         pop rcx
   383 00000D58 48FFC9              <1>         dec rcx
   384 00000D5B 4883F900            <1>         cmp rcx, 0
   385 00000D5F 75E1                <1>         jne .str
   386                              <1>     .done:
   387 00000D61 C3                  <1>         ret
   388                              <1> print_hex_byte:
   389 00000D62 4831C0              <1>         xor rax,rax
   390 00000D65 4831DB              <1>         xor rbx,rbx
   391 00000D68 8A1E                <1>         mov bl, [rsi]
   392                              <1>         .h4:
   393 00000D6A 88D8                <1>             mov al, bl
   394 00000D6C C0E804              <1>             shr al, 4
   395                              <1> 
   396 00000D6F 3C0A                <1>             cmp al, 10
   397 00000D71 7C02                <1>             jl .digit_h4
   398 00000D73 0407                <1>             add al, 'A'-'0'-10   ; 转换为A-F
   399                              <1>             .digit_h4:
   400 00000D75 0430                <1>                 add al, '0'          ; 转换为0-9
   401 00000D77 88C3                <1>                 mov bl, al
   402 00000D79 E835FEFFFF          <1>                 call putc
   403                              <1>                 ; mov [rdi], al
   404                              <1>                 ; add rdi,2
   405 00000D7E 4883C720            <1>                 add rdi,32
   406                              <1> 
   407                              <1>         .l4:
   408 00000D82 4831C0              <1>                 xor rax,rax
   409 00000D85 4831DB              <1>         xor rbx,rbx
   410 00000D88 8A1E                <1>         mov bl, [rsi]
   411 00000D8A 88D8                <1>             mov al, bl
   412 00000D8C 240F                <1>             and al, 0x0F
   413 00000D8E 3C0A                <1>             cmp al, 10
   414 00000D90 7C02                <1>             jl .digit_l4
   415 00000D92 0407                <1>             add al, 'A'-'0'-10   ; 转换为A-F
   416                              <1>             .digit_l4:
   417 00000D94 0430                <1>                 add al, '0'          ; 转换为0-9
   418 00000D96 88C3                <1>                 mov bl, al
   419 00000D98 E816FEFFFF          <1>                 call putc
   420 00000D9D 4883C720            <1>                 add rdi,32
   421                              <1>                 ; mov [rdi], al
   422                              <1>                 ; add rdi,2
   423 00000DA1 C3                  <1>         ret
   424                              <1> 
   425                              <1> 
   426                              <1> 
   427                              <1> 
   428                              <1> 
   429                              <1> 
   430                              <1> 
   431                              <1> draw_char:; input: x,y,char; draw a character
   432                              <1>     prolog 2;
    98 00000DA2 55                  <2>  push rbp
    99 00000DA3 4889E5              <2>  mov rbp, rsp
   100                              <2> 
   101 00000DA6 B802000000          <2>  mov rax, %1
   102 00000DAB 4883C00F            <2>  add rax, 15
   103 00000DAF 4883E0F0            <2>  and rax, ~15
   104 00000DB3 4829C4              <2>  sub rsp, rax
   105                              <2> 
   106 00000DB6 4157                <2>  push r15
   107 00000DB8 4156                <2>  push r14
   108 00000DBA 4155                <2>  push r13
   109 00000DBC 4154                <2>  push r12
   110 00000DBE 4153                <2>  push r11
   111 00000DC0 4152                <2>  push r10
   112 00000DC2 4151                <2>  push r9
   113 00000DC4 4150                <2>  push r8
   114 00000DC6 57                  <2>  push rdi
   115 00000DC7 56                  <2>  push rsi
   116 00000DC8 52                  <2>  push rdx
   117 00000DC9 51                  <2>  push rcx
   118 00000DCA 53                  <2>  push rbx
   119 00000DCB 50                  <2>  push rax
   120                              <2> 
   121                              <2> 
   122                              <2> 
   123                              <2> 
   124                              <2> 
   433                              <1>     get_param r8, 1   ; x
   149 00000DCC 4C8B4510            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   434                              <1>     get_param r9, 2   ; y
   149 00000DD0 4C8B4D18            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   435                              <1>     get_param rsi, 3   ; char
   149 00000DD4 488B7520            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   436                              <1> 
   437 00000DD8 B800000000          <1>     mov rax, 0
   438 00000DDD 668B05A6FBFFFF      <1>     mov ax, word [rel print_info_ptr + print_info.cursor_print_ypixel]
   439 00000DE4 BB00000000          <1>     mov rbx,0
   440 00000DE9 668B1DC5F4FFFF      <1>     mov bx,word [rel video_info_ptr + video_info.xpixel]
   441 00000DF0 480FAFC3            <1>     imul rax,rbx
   442 00000DF4 B900000000          <1>     mov rcx,0
   443 00000DF9 668B0D88FBFFFF      <1>     mov cx,word [rel print_info_ptr + print_info.cursor_print_xpixel]
   444 00000E00 4801C8              <1>     add rax, rcx
   445 00000E03 BB00000000          <1>     mov rbx,0
   446 00000E08 8A1DABF4FFFF        <1>     mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   447 00000E0E 480FAFC3            <1>     imul rax,rbx
   448                              <1>     ; jmp $
   449 00000E12 488B3DA1F4FFFF      <1>     mov rdi, qword [rel video_info_ptr + video_info.video_framebuffer]
   450 00000E19 4801C7              <1>     add rdi, rax
   451 00000E1C B800000000          <1>     mov rax,0
   452                              <1> draw_string:; input: x,y,string; draw string
   453                              <1>     prolog 2;
    98 00000E21 55                  <2>  push rbp
    99 00000E22 4889E5              <2>  mov rbp, rsp
   100                              <2> 
   101 00000E25 B802000000          <2>  mov rax, %1
   102 00000E2A 4883C00F            <2>  add rax, 15
   103 00000E2E 4883E0F0            <2>  and rax, ~15
   104 00000E32 4829C4              <2>  sub rsp, rax
   105                              <2> 
   106 00000E35 4157                <2>  push r15
   107 00000E37 4156                <2>  push r14
   108 00000E39 4155                <2>  push r13
   109 00000E3B 4154                <2>  push r12
   110 00000E3D 4153                <2>  push r11
   111 00000E3F 4152                <2>  push r10
   112 00000E41 4151                <2>  push r9
   113 00000E43 4150                <2>  push r8
   114 00000E45 57                  <2>  push rdi
   115 00000E46 56                  <2>  push rsi
   116 00000E47 52                  <2>  push rdx
   117 00000E48 51                  <2>  push rcx
   118 00000E49 53                  <2>  push rbx
   119 00000E4A 50                  <2>  push rax
   120                              <2> 
   121                              <2> 
   122                              <2> 
   123                              <2> 
   124                              <2> 
   454                              <1>     get_param r8, 1   ; x
   149 00000E4B 4C8B4510            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   455                              <1>     get_param r9, 2   ; y
   149 00000E4F 4C8B4D18            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   456                              <1>     get_param rsi, 3   ; string
   149 00000E53 488B7520            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   457                              <1> 
   458 00000E57 B800000000          <1>     mov rax, 0
   459 00000E5C 4C89C8              <1>     mov rax, r9
   460 00000E5F BB00000000          <1>     mov rbx,0
   461 00000E64 668B1D4AF4FFFF      <1>     mov bx,word [rel video_info_ptr + video_info.xpixel]
   462 00000E6B 480FAFC3            <1>     imul rax,rbx
   463 00000E6F 4C01C0              <1>     add rax, r8
   464 00000E72 BB00000000          <1>     mov rbx,0
   465 00000E77 8A1D3CF4FFFF        <1>     mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   466 00000E7D 480FAFC3            <1>     imul rax,rbx
   467                              <1>     ; jmp $
   468 00000E81 488B3D32F4FFFF      <1>     mov rdi, qword [rel video_info_ptr + video_info.video_framebuffer]
   469 00000E88 4801C7              <1>     add rdi, rax
   470 00000E8B B800000000          <1>     mov rax,0
   471                              <1>     ; jmp $
   472                              <1>     .next_char:
   473 00000E90 AC                  <1>         lodsb                  
   474 00000E91 84C0                <1>         test al, al
   475                              <1>         ; jmp $
   476 00000E93 7436                <1>         jz .done
   477 00000E95 BB00000000          <1>         mov rbx, 0
   478 00000E9A 88C3                <1>         mov bl, al
   479                              <1> 
   480                              <1>         prepare_call 2,1
   157                              <2>  %assign total_space ((%1 + %2) * 8)
   158                              <2> 
   159                              <2>  %if (total_space % 16) != 0
   160                              <2>  %assign total_space total_space + 8
   161                              <2>  %endif
   162                              <2> 
   163 00000E9C 4883EC20            <2>  sub rsp, total_space
   481 00000EA0 48897C2408          <1>         mov qword [rsp+8], rdi
   482 00000EA5 48891C24            <1>         mov qword [rsp], rbx
   483 00000EA9 E805FDFFFF          <1>         call putc
   484                              <1>         cleanup_call 2,1
   167                              <2>  %assign total_space ((%1 + %2) * 8)
   168                              <2>  %if (total_space % 16) != 0
   169                              <2>  %assign total_space total_space + 8
   170                              <2>  %endif
   171 00000EAE 4883C420            <2>  add rsp, total_space
   485 00000EB2 488B4424F8          <1>         mov rax, [rsp-8]
   486                              <1> 
   487                              <1> 
   488 00000EB7 BB00000000          <1>         mov rbx,0
   489 00000EBC 8A1DF7F3FFFF        <1>         mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   490 00000EC2 486BDB08            <1>         imul rbx,8        
   491 00000EC6 4801DF              <1>         add rdi, rbx
   492                              <1>                 
   493 00000EC9 EBC5                <1>         jmp .next_char
   494                              <1>     .done:
   495                              <1>     epilog
   128 00000ECB 58                  <2>  pop rax
   129 00000ECC 5B                  <2>  pop rbx
   130 00000ECD 59                  <2>  pop rcx
   131 00000ECE 5A                  <2>  pop rdx
   132 00000ECF 5E                  <2>  pop rsi
   133 00000ED0 5F                  <2>  pop rdi
   134 00000ED1 4158                <2>  pop r8
   135 00000ED3 4159                <2>  pop r9
   136 00000ED5 415A                <2>  pop r10
   137 00000ED7 415B                <2>  pop r11
   138 00000ED9 415C                <2>  pop r12
   139 00000EDB 415D                <2>  pop r13
   140 00000EDD 415E                <2>  pop r14
   141 00000EDF 415F                <2>  pop r15
   142                              <2> 
   143 00000EE1 4889EC              <2>  mov rsp, rbp
   144 00000EE4 5D                  <2>  pop rbp
   145 00000EE5 C3                  <2>  ret
   496                              <1> 
   497                              <1> 
   498                              <1> %endif
   160                                  
   161 00000EE6 68656C6C6F20776F72-     messages: db 'hello world,here to show printk function', 0
   161 00000EEF 6C642C686572652074-
   161 00000EF8 6F2073686F77207072-
   161 00000F01 696E746B2066756E63-
   161 00000F0A 74696F6E00         
   162 00000F0F 617364666768696A6B-     messages1: db 'asdfghijklmnopqrstuvwxyz_ASDFGHJKLZXCVBNM1234567890', 0
   162 00000F18 6C6D6E6F7071727374-
   162 00000F21 75767778797A5F4153-
   162 00000F2A 444647484A4B4C5A58-
   162 00000F33 4356424E4D31323334-
   162 00000F3C 35363738393000     
   163 00000F43 496D61676520666F72-     messages2: db 'Image format was not specified for ./hd60m.img and probing guessed raw', 0
   163 00000F4C 6D617420776173206E-
   163 00000F55 6F7420737065636966-
   163 00000F5E 69656420666F72202E-
   163 00000F67 2F686436306D2E696D-
   163 00000F70 6720616E642070726F-
   163 00000F79 62696E672067756573-
   163 00000F82 7365642072617700   
   164 00000F8A 4175746F6D61746963-     messages3: db 'Automatically detecting the format is dangerous for raw images, write operations on block 0 will be restricted.', 0
   164 00000F93 616C6C792064657465-
   164 00000F9C 6374696E6720746865-
   164 00000FA5 20666F726D61742069-
   164 00000FAE 732064616E6765726F-
   164 00000FB7 757320666F72207261-
   164 00000FC0 7720696D616765732C-
   164 00000FC9 207772697465206F70-
   164 00000FD2 65726174696F6E7320-
   164 00000FDB 6F6E20626C6F636B20-
   164 00000FE4 302077696C6C206265-
   164 00000FED 207265737472696374-
   164 00000FF6 65642E00           
   165                                  
   166 00000FFA 2E2E2F6B65726E656C-     messages4: db '../kernel/printk.asm:100: warning: word data exceeds bounds [-w+number-overflow]', 0
   166 00001003 2F7072696E746B2E61-
   166 0000100C 736D3A3130303A2077-
   166 00001015 61726E696E673A2077-
   166 0000101E 6F7264206461746120-
   166 00001027 657863656564732062-
   166 00001030 6F756E6473205B2D77-
   166 00001039 2B6E756D6265722D6F-
   166 00001042 766572666C6F775D00 
   167 0000104B 5741524E494E473A20-     messages5: db 'WARNING: Image format was not specified for ./hd60m.img and probing guessed raw.', 0
   167 00001054 496D61676520666F72-
   167 0000105D 6D617420776173206E-
   167 00001066 6F7420737065636966-
   167 0000106F 69656420666F72202E-
   167 00001078 2F686436306D2E696D-
   167 00001081 6720616E642070726F-
   167 0000108A 62696E672067756573-
   167 00001093 736564207261772E00 
   168 0000109C 323530383820627974-     messages6: db '25088 bytes (25 kB, 24 KiB) copied, 0.000134717 s, 186 MB/s', 0
   168 000010A5 657320283235206B42-
   168 000010AE 2C203234204B694229-
   168 000010B7 20636F706965642C20-
   168 000010C0 302E30303031333437-
   168 000010C9 313720732C20313836-
   168 000010D2 204D422F7300       
   169                                  
   170 000010D8 48656C6C6F2C202573-         format1 db "Hello, %s!", 0
   170 000010E1 2100               
   171 000010E3 56616C75653A202564-         format2 db "Value: %d", 0
   171 000010EC 00                 
   172 000010ED 4865783A20257800            format3 db "Hex: %x", 0
   173 000010F5 576F726C6400                string1 db "World", 0
   174                                  
   175 000010FB 4523010000000000-       params: times 10 dq 0x12345
   175 000010FB <rep Ah>           
   176 0000114B 00<rep Ah>              messagess: times 10 db 0
   177                                  kernel_end:
   178                                  section_end:
