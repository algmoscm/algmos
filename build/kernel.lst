     1                                  %include "../bootloader/global_def.asm"
     1                              <1> %ifndef GLOBAL_DEF_ASM
     2                              <1> %define GLOBAL_DEF_ASM
     3                              <1> 
     4                              <1> 
     5                              <1> ;|----------------------|
     6                              <1> ;|	100000 ~ END	|
     7                              <1> ;|	   KERNEL	|
     8                              <1> ;|----------------------|
     9                              <1> ;|	E0000 ~ 100000	|
    10                              <1> ;| Extended System BIOS |
    11                              <1> ;|----------------------|
    12                              <1> ;|	C0000 ~ Dffff	|
    13                              <1> ;|     Expansion Area   |
    14                              <1> ;|----------------------|
    15                              <1> ;|	A0000 ~ bffff	|
    16                              <1> ;|   Legacy Video Area  |
    17                              <1> ;|----------------------|
    18                              <1> ;|	9f000 ~ A0000	|
    19                              <1> ;|	 BIOS reserve	|
    20                              <1> ;|----------------------|
    21                              <1> ;|	90000 ~ 9f000	|
    22                              <1> ;|	 kernel tmpbuf	|
    23                              <1> ;|----------------------|
    24                              <1> ;|	10000 ~ 90000	|
    25                              <1> ;|	   LOADER	|
    26                              <1> ;|----------------------|
    27                              <1> ;|	8000 ~ 10000	|
    28                              <1> ;|	  VBE info	|
    29                              <1> ;|----------------------|
    30                              <1> ;|	7e00 ~ 8000	|
    31                              <1> ;|	  mem info	|
    32                              <1> ;|----------------------|
    33                              <1> ;|	7c00 ~ 7e00	|
    34                              <1> ;|	 MBR (BOOT)	|
    35                              <1> ;|----------------------|
    36                              <1> ;|	0000 ~ 7c00	|
    37                              <1> ;|	 BIOS Code	|
    38                              <1> ;|----------------------|
    39                              <1> 
    40                              <1> 
    41                              <1> ;_______________________________________________________
    42                              <1> ; START	END	    SIZE	        USED
    43                              <1> ; FFFF0	FFFFF	16B	        BIOS System Entry
    44                              <1> ; F0000	FFFEF	64KB-16B	BIOS System Code
    45                              <1> ; C8000	EFFFF	160KB	    ROM/Mapped IO
    46                              <1> ; C0000	C7FFF	32KB	    Graphic Adapter BIOS
    47                              <1> ; B8000	BFFFF	32KB	    Chroma Text Video Buffer
    48                              <1> ; B0000	B7FFF	32KB	    Mono Text Video Buffer
    49                              <1> ; A0000	AFFFF	64KB	    Graphic Video Buffer
    50                              <1> ; 9FC00	9FFFF	1KB	        Extended BIOS Data Area
    51                              <1> ; 7E00	9FBFF	622080B     Useable 608KB	
    52                              <1> ; 7C00	7DFF	512B	    MBR
    53                              <1> ; 500	7BFF	30464B      Useable 30KB	
    54                              <1> ; 400	4FF	    256B	    BIOS Data Area
    55                              <1> ; 000	3FF	    1KB	        IVT
    56                              <1> ; _____________________________________________________
    57                              <1> 
    58                              <1> 
    59                              <1> 
    60                              <1> 
    61                              <1> 
    62                              <1> 
    63                              <1> 
    64                              <1> 
    65                              <1> 
    66                              <1> 
    67                              <1> 
    68                              <1> ;|----------------------|
    69                              <1> ;|	100000 ~ END	|
    70                              <1> ;|	   KERNEL	|
    71                              <1> ;|----------------------|
    72                              <1> ;|	E0000 ~ 100000	|
    73                              <1> ;| Extended System BIOS |
    74                              <1> ;|----------------------|
    75                              <1> ;|	C0000 ~ Dffff	|
    76                              <1> ;|     Expansion Area   |
    77                              <1> ;|----------------------|
    78                              <1> ;|	A0000 ~ bffff	|
    79                              <1> ;|   Legacy Video Area  |
    80                              <1> ;|----------------------|
    81                              <1> ;|	9F000 ~ A0000	|
    82                              <1> ;|	 BIOS reserve	|
    83                              <1> ;|----------------------|
    84                              <1> ;|	90000 ~ 9F000	|
    85                              <1> ;|	 kernel tmpbuf	|
    86                              <1> ;|----------------------|
    87                              <1> ;|	10000 ~ 90000	|
    88                              <1> ;|	   LOADER	|
    89                              <1> ;|----------------------|
    90                              <1> ;|	8000 ~ 10000	|
    91                              <1> ;|	  VBE info	|
    92                              <1> ;|----------------------|
    93                              <1> ;|	7E00 ~ 8000	|
    94                              <1> ;|	  mem info	|
    95                              <1> ;|----------------------|
    96                              <1> ;|	7C00 ~ 7E00	|
    97                              <1> ;|	 MBR (BOOT)	|
    98                              <1> ;|----------------------|
    99                              <1> ;|	0000 ~ 7C00	|
   100                              <1> ;|	 BIOS Code	|
   101                              <1> ;|----------------------|
   102                              <1> 
   103                              <1> 
   104                              <1> 
   105                              <1> 
   106                              <1> 
   107                              <1> 
   108                              <1> 
   109                              <1> 
   110                              <1> 
   111                              <1> 
   112                              <1> ;______________________________________________
   113                              <1> ; ----------------Vbe Info Block------------
   114                              <1> ; typedef struct {
   115                              <1> ;     unsigned char       vbe_signature;
   116                              <1> ;     unsigned short      vbe_version;
   117                              <1> ;     unsigned long       oem_string_ptr;
   118                              <1> ;     unsigned char       capabilities;
   119                              <1> ;     unsigned long       video_mode_ptr;
   120                              <1> ;     unsigned short      total_memory;
   121                              <1> ;     unsigned short      oem_software_rev;
   122                              <1> ;     unsigned long       oem_vendor_name_ptr;
   123                              <1> ;     unsigned long       oem_product_name_ptr;
   124                              <1> ;     unsigned long       oem_product_rev_ptr;
   125                              <1> ;     unsigned char       reserved[222];
   126                              <1> ;     unsigned char       oem_data[256];  
   127                              <1> ; } VbeInfoBlock;
   128                              <1> ;______________________________________________
   129                              <1> 
   130                              <1> 
   131                              <1> BaseOfKernelFile	equ	0x00
   132                              <1> OffsetOfKernelFile	equ	0x100000
   133                              <1> BaseTmpOfKernelAddr	equ	0x9000
   134                              <1> OffsetTmpOfKernelFile	equ	0x0000
   135                              <1> VBEStructBufferAddr	equ	0x8000
   136                              <1> VBEModeStructBufferAddr	equ	0x8200
   137                              <1> MemoryStructBufferAddr	equ	0x8800
   138                              <1> 
   139                              <1> 
   140                              <1> 
   141                              <1> KernelSpaceUpperAddress equ 0xFFFF800000000000
   142                              <1> 
   143                              <1> GDTPointerUpperAddr equ 0xFFFF800000104000
   144                              <1> IDTPointerUpperAddr equ 0xFFFF80000010400a
   145                              <1> TSSPointerUpperAddr equ 0xFFFF800000104014
   146                              <1> 
   147                              <1> VideoFrameBufferAddress equ 0xFFFF800003000000
   148                              <1> KernelStartSectorNum	equ	16
   149                              <1> 
   150                              <1> 
   151                              <1> %define PLATFORM_QEMU_X64 1
   152                              <1> %define PLATFORM_X64 2
   153                              <1> 
   154                              <1> %define DEBUG_PLATFORM PLATFORM_QEMU_X64
   155                              <1> %define DEBUG_MODE 1
   156                              <1> 
   157                              <1> 
   158                              <1> MasterSectorReadNumPort    equ	0x1F2
   159                              <1> MasterSectorReadPort    equ	0x1F0
   160                              <1> 
   161                              <1> SlaveReadNumPort    equ	0x172
   162                              <1> SlaveSectorReadPort    equ	0x170
   163                              <1> 
   164                              <1> SectorReadNumPort    equ	MasterSectorReadNumPort
   165                              <1> SectorReadPort    equ	MasterSectorReadPort
   166                              <1> 
   167                              <1> struc vbe_info_block
   168 00000000 ????????            <1>     .signature                 resb 4    ; 'VESA' signature (must be "VESA")
   169 00000004 ????                <1>     .version                   resw 1    ; VBE version (e.g., 0x0300 for VBE 3.0)
   170 00000006 ????????            <1>     .oem_string_ptr            resd 1    ; Pointer to OEM string
   171 0000000A ????????            <1>     .capabilities              resd 1    ; Capabilities of the video card
   172 0000000E ????????            <1>     .video_mode_ptr            resd 1    ; Pointer to supported video modes
   173 00000012 ????                <1>     .total_memory              resw 1    ; Total memory in 64KB blocks
   174                              <1> 
   175                              <1>     ; VBE 2.0+ fields
   176 00000014 ????                <1>     .oem_software_rev          resw 1    ; OEM software revision
   177 00000016 ????????            <1>     .oem_vendor_name_ptr       resd 1    ; Pointer to OEM vendor name string
   178 0000001A ????????            <1>     .oem_product_name_ptr      resd 1    ; Pointer to OEM product name string
   179 0000001E ????????            <1>     .oem_product_rev_ptr       resd 1    ; Pointer to OEM product revision string
   180 00000022 <res DEh>           <1>     .reserved                  resb 222  ; Reserved for VBE implementation
   181 00000100 <res 100h>          <1>     .oem_data                  resb 256  ; Data area for OEM-specific information
   182                              <1> endstruc
   183                              <1> 
   184                              <1> struc vbe_mode_info_block
   185 00000000 ????                <1>     .attributes                resw 1    ; Mode attributes
   186 00000002 ??                  <1>     .winA_attributes           resb 1    ; Window A attributes
   187 00000003 ??                  <1>     .winB_attributes           resb 1    ; Window B attributes
   188 00000004 ????                <1>     .win_granularity           resw 1    ; Window granularity in KB
   189 00000006 ????                <1>     .win_size                  resw 1    ; Window size in KB
   190 00000008 ????                <1>     .winA_segment              resw 1    ; Window A segment
   191 0000000A ????                <1>     .winB_segment              resw 1    ; Window B segment
   192 0000000C ????????            <1>     .win_func_ptr              resd 1    ; Pointer to window function
   193 00000010 ????                <1>     .bytes_per_scanline        resw 1    ; Bytes per scanline
   194                              <1> 
   195                              <1>     ; VBE 1.2+ fields
   196 00000012 ????                <1>     .x_resolution              resw 1    ; Horizontal resolution in pixels
   197 00000014 ????                <1>     .y_resolution              resw 1    ; Vertical resolution in pixels
   198 00000016 ??                  <1>     .x_char_size               resb 1    ; Character cell width in pixels
   199 00000017 ??                  <1>     .y_char_size               resb 1    ; Character cell height in pixels
   200 00000018 ??                  <1>     .number_of_planes          resb 1    ; Number of memory planes
   201 00000019 ??                  <1>     .bits_per_pixel            resb 1    ; Bits per pixel
   202 0000001A ??                  <1>     .number_of_banks           resb 1    ; Number of banks
   203 0000001B ??                  <1>     .memory_model              resb 1    ; Memory model type
   204 0000001C ??                  <1>     .bank_size                 resb 1    ; Bank size in KB
   205 0000001D ??                  <1>     .number_of_image_pages     resb 1    ; Number of images
   206 0000001E ??                  <1>     .reserved1                 resb 1    ; Reserved
   207                              <1> 
   208                              <1>     ; Direct Color fields (VBE 1.2+)
   209 0000001F ??                  <1>     .red_mask_size             resb 1    ; Size of direct color red mask
   210 00000020 ??                  <1>     .red_field_position        resb 1    ; Bit position of red mask
   211 00000021 ??                  <1>     .green_mask_size           resb 1    ; Size of direct color green mask
   212 00000022 ??                  <1>     .green_field_position      resb 1    ; Bit position of green mask
   213 00000023 ??                  <1>     .blue_mask_size            resb 1    ; Size of direct color blue mask
   214 00000024 ??                  <1>     .blue_field_position       resb 1    ; Bit position of blue mask
   215 00000025 ??                  <1>     .reserved_mask_size        resb 1    ; Size of direct color reserved mask
   216 00000026 ??                  <1>     .reserved_field_position   resb 1    ; Bit position of reserved mask
   217 00000027 ??                  <1>     .direct_color_mode_info    resb 1    ; Direct color mode attributes
   218                              <1> 
   219                              <1>     ; VBE 2.0+ fields
   220 00000028 ????????            <1>     .phys_base_ptr             resd 1    ; Physical address for flat memory frame buffer
   221 0000002C ????????            <1>     .reserved2                 resd 1    ; Reserved
   222 00000030 ????                <1>     .reserved3                 resw 1    ; Reserved
   223                              <1> 
   224                              <1>     ; VBE 3.0+ fields
   225 00000032 ????                <1>     .lin_bytes_per_scanline    resw 1    ; Bytes per scanline for linear modes
   226 00000034 ??                  <1>     .bnk_number_of_image_pages resb 1    ; Number of images for banked modes
   227 00000035 ??                  <1>     .lin_number_of_image_pages resb 1    ; Number of images for linear modes
   228 00000036 ??                  <1>     .lin_red_mask_size         resb 1    ; Size of direct color red mask (linear modes)
   229 00000037 ??                  <1>     .lin_red_field_position    resb 1    ; Bit position of red mask (linear modes)
   230 00000038 ??                  <1>     .lin_green_mask_size       resb 1    ; Size of direct color green mask (linear modes)
   231 00000039 ??                  <1>     .lin_green_field_position  resb 1    ; Bit position of green mask (linear modes)
   232 0000003A ??                  <1>     .lin_blue_mask_size        resb 1    ; Size of direct color blue mask (linear modes)
   233 0000003B ??                  <1>     .lin_blue_field_position   resb 1    ; Bit position of blue mask (linear modes)
   234 0000003C ??                  <1>     .lin_reserved_mask_size    resb 1    ; Size of direct color reserved mask (linear modes)
   235 0000003D ??                  <1>     .lin_reserved_field_position resb 1  ; Bit position of reserved mask (linear modes)
   236 0000003E ????????            <1>     .max_pixel_clock           resd 1    ; Maximum pixel clock (Hz)
   237 00000042 <res BEh>           <1>     .reserved4                 resb 190  ; Reserved for future expansion
   238                              <1> endstruc
   239                              <1> 
   240                              <1> struc e820_memory_entry
   241 00000000 ????????            <1>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   242 00000004 ????????            <1>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   243 00000008 ????????            <1>     .length_low               resd 1    ; Lower 32 bits of the length
   244 0000000C ????????            <1>     .length_high              resd 1    ; Upper 32 bits of the length
   245 00000010 ????????            <1>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   246                              <1>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   247                              <1> endstruc
   248                              <1> 
   249                              <1> %endif
     2                                  %include "../kernel/stddef.asm"
     1                              <1> %ifndef STDDEF_ASM
     2                              <1> %define STDDEF_ASM
     3                              <1> 
     4                              <1> ;-----------Calling Conventions Standard------------;
     5                              <1> %define USE_CC_STANDARD
     6                              <1> %ifdef USE_CC_STANDARD
     7                              <1> ;caller maintain the stack balance 
     8                              <1>     ; debug_times: db 0
     9                              <1>     ; cmp byte [rel debug_times],3
    10                              <1>     ; je debug_stop
    11                              <1>     ; add byte [rel debug_times],1
    12                              <1> ; -------------------------------
    13                              <1> ; 栈帧结构定义
    14                              <1> ; -------------------------------
    15                              <1> ; 调用后的栈布局:
    16                              <1> ; [rsp+0x00] 返回地址 (8字节)
    17                              <1> ; [rsp+0x08] 旧RBP     (8字节) <- rbp指向这里
    18                              <1> ; [rsp+0x10] 参数1     (8字节)
    19                              <1> ; [rsp+0x18] 参数2
    20                              <1> ; ...
    21                              <1> ; [rsp+X]    局部变量区
    22                              <1> ; -------------------------------
    23                              <1> 
    24                              <1> %define PARAM_OFFSET   16      ; 第一个参数的偏移量(返回地址8 + 旧RBP8)
    25                              <1> %macro function 1-* ; 1=函数名, 2=返回参数数量, 3=参数列表
    26                              <1>     %assign param_count %0 - 2 ; 参数数量
    27                              <1>     
    28                              <1>     %if param_count < 0
    29                              <1>         %assign param_count 0 ; 如果没有参数，设置为 0
    30                              <1>     %endif
    31                              <1>     %if param_count < 1
    32                              <1>         %assign ret_param_count 0 ; 返回参数数量
    33                              <1>     %else
    34                              <1>         %assign ret_param_count %2 ; 返回参数数量
    35                              <1>     %endif
    36                              <1> 
    37                              <1>     ; 准备调用
    38                              <1>     prepare_call param_count, ret_param_count
    39                              <1> 
    40                              <1>     ; 如果有参数，将参数压入栈
    41                              <1>     %if param_count > 0
    42                              <1>         %assign i 0
    43                              <1>         mov [rsp-8], rax ; 保存返回地址
    44                              <1>         %rep param_count
    45                              <1>             %rotate 1
    46                              <1>             mov rax, %2
    47                              <1>             mov [rsp + 8*i], rax ; 将参数压入栈
    48                              <1>             %assign i i+1
    49                              <1>         %endrep
    50                              <1>         ; mov rax,
    51                              <1>         %rotate 1
    52                              <1>         %rotate 1
    53                              <1>         mov rax,[rsp-8]; 保存返回地址
    54                              <1>     %endif
    55                              <1> 
    56                              <1>     ; 调用函数
    57                              <1>     call %1
    58                              <1> 
    59                              <1>     ; 清理栈空间
    60                              <1>     cleanup_call param_count, ret_param_count
    61                              <1> 
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro prolog 1;local var size(bytes)
    65                              <1>     push rbp
    66                              <1>     mov rbp, rsp
    67                              <1>     mov [rbp-8],rax
    68                              <1>     mov rax, %1
    69                              <1>     add rax, 15
    70                              <1>     and rax, ~15
    71                              <1>     sub rsp, rax
    72                              <1>     mov rax,[rbp-8]
    73                              <1>     pushallq
    74                              <1>     
    75                              <1>     
    76                              <1>     ; 调试信息可以放在这里
    77                              <1>     ; %ifdef DEBUG
    78                              <1>     ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
    79                              <1>     ; %endif
    80                              <1> %endmacro
    81                              <1> 
    82                              <1> %macro epilog 0
    83                              <1>     popallq
    84                              <1> 
    85                              <1>     mov rsp, rbp
    86                              <1>     pop rbp
    87                              <1>     ret
    88                              <1> %endmacro
    89                              <1> 
    90                              <1> %macro get_param 2;1=register, 2=param index(from 1)
    91                              <1>     mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    92                              <1> %endmacro
    93                              <1> 
    94                              <1> %macro set_ret_param 2;1=register, 2=param index(from 1)
    95                              <1>     mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
    96                              <1> %endmacro
    97                              <1> 
    98                              <1> %macro prepare_call 2;1=param count, 2=return param count
    99                              <1>     %assign total_space ((%1 + %2) * 8)
   100                              <1>     
   101                              <1>     %if (total_space % 16) != 0
   102                              <1>         %assign total_space total_space + 8  ; 添加填充
   103                              <1>     %endif
   104                              <1>     
   105                              <1>     sub rsp, total_space
   106                              <1> %endmacro
   107                              <1> 
   108                              <1> %macro cleanup_call 2;1=param count, 2=return param count
   109                              <1>     %assign total_space ((%1 + %2) * 8)
   110                              <1>     %if (total_space % 16) != 0
   111                              <1>         %assign total_space total_space + 8
   112                              <1>     %endif
   113                              <1>     add rsp, total_space
   114                              <1> %endmacro
   115                              <1> 
   116                              <1> %macro pushallq 0
   117                              <1>     push rax
   118                              <1>     push rbx
   119                              <1>     push rcx
   120                              <1>     push rdx
   121                              <1>     push rsi
   122                              <1>     push rdi
   123                              <1>     push r8
   124                              <1>     push r9
   125                              <1>     push r10
   126                              <1>     push r11
   127                              <1>     push r12
   128                              <1>     push r13
   129                              <1>     push r14
   130                              <1>     push r15
   131                              <1> %endmacro
   132                              <1> 
   133                              <1> %macro popallq 0
   134                              <1>     pop r15
   135                              <1>     pop r14
   136                              <1>     pop r13
   137                              <1>     pop r12
   138                              <1>     pop r11
   139                              <1>     pop r10
   140                              <1>     pop r9
   141                              <1>     pop r8
   142                              <1>     pop rdi
   143                              <1>     pop rsi
   144                              <1>     pop rdx
   145                              <1>     pop rcx
   146                              <1>     pop rbx
   147                              <1>     pop rax
   148                              <1> %endmacro
   149                              <1> 
   150                              <1> %endif
   151                              <1> ;---------------------ABI Standard------------------;
   152                              <1> %define USE_ABI_STANDARD
   153                              <1> %ifdef USE_ABI_STANDARD
   154                              <1> 
   155                              <1> 
   156                              <1>     %define ABI_File_None   0       ; 无文件类型
   157                              <1>     %define ABI_File_REL    1       ; 可重定位文件
   158                              <1>     %define ABI_File_EXEC   2       ; 可执行文件
   159                              <1>     %define ABI_File_DYN    3       ; 共享目标文件
   160                              <1>     %define ABI_File_CORE   4       ; 核心文件
   161                              <1> 
   162                              <1>     %define Section_Type_NULL    0      ; 未使用
   163                              <1>     %define Section_Type_LOAD    1      ; 可加载段
   164                              <1>     %define Section_Type_DYNAMIC 2      ; 动态链接信息
   165                              <1>     %define Section_Type_INTERP  3      ; 解释器路径
   166                              <1>     %define Section_Type_NOTE    4      ; 辅助信息
   167                              <1>     %define Section_Type_SHLIB   5      ; 保留
   168                              <1> 
   169                              <1>     %macro ABI_HEADER 4 ;1=File Type, 2=Entry Point Address, 3=Section Header Offset, 4=Section Header Count
   170                              <1>         db 0xA5, 'A', 'B', 'I'     ; ABI Magic Number
   171                              <1>         db 1                       ; Encode Type
   172                              <1>         db 1                       ; ABI Version
   173                              <1> 
   174                              <1>         dw %1                      ; ABI File Type
   175                              <1>         dq %2                      ; Entry Point Address
   176                              <1>         dw 32                      ; ABI Headers Size
   177                              <1> 
   178                              <1>         dq %3                      ; Section Header Offset
   179                              <1>         dw 32                      ; Section Header Size
   180                              <1>         dw %4                      ; Section Header Count
   181                              <1>         dw 0                       ; Symble Table Entry Size
   182                              <1>     %endmacro
   183                              <1>     STRUC struct_ABI_HEADER
   184 00000000 ????????            <1>         .magic:         resb 4    ; ABI Magic Number (4 bytes)
   185 00000004 ??                  <1>         .encode_type:   resb 1    ; Encode Type (1 byte)
   186 00000005 ??                  <1>         .abi_version:   resb 1    ; ABI Version (1 byte)
   187 00000006 ????                <1>         .file_type:     resw 1    ; ABI File Type (2 bytes)
   188 00000008 ????????????????    <1>         .entry_point:   resq 1    ; Entry Point Address (8 bytes)
   189 00000010 ????                <1>         .header_size:   resw 1    ; ABI Headers Size (2 bytes)
   190 00000012 ????????????????    <1>         .section_offset: resq 1   ; Section Header Offset (8 bytes)
   191 0000001A ????                <1>         .section_size:  resw 1    ; Section Header Size (2 bytes)
   192 0000001C ????                <1>         .section_count: resw 1    ; Section Header Count (2 bytes)
   193 0000001E ????                <1>         .sym_table_size: resw 1   ; Symbol Table Entry Size (2 bytes)
   194                              <1>     ENDSTRUC
   195                              <1> 
   196                              <1>     %macro SECTION_HEADER 4 ;1=Section Type, 2=Virtual Address, 3=Section Offset, 4=Section Size
   197                              <1>         dq %1                  ; Section Type
   198                              <1>         dq %2                  ; Virtual Address
   199                              <1>         dq %3                  ; Section Offset
   200                              <1>         dq %4                  ; Section Size
   201                              <1>     %endmacro
   202                              <1>     STRUC struct_SECTION_HEADER
   203 00000000 ????????????????    <1>         .type:      resq 1    ; Section Type (8 bytes)
   204 00000008 ????????????????    <1>         .vaddr:     resq 1    ; Virtual Address (8 bytes)
   205 00000010 ????????????????    <1>         .offset:    resq 1    ; Section Offset (8 bytes)
   206 00000018 ????????????????    <1>         .size:      resq 1    ; Section Size (8 bytes)
   207                              <1>     ENDSTRUC
   208                              <1> %endif
   209                              <1> 
   210                              <1> %endif
     3                                  [BITS 64]          ; 0xFFFF800000106200
     4                                  ehdr:
     5                                      ABI_HEADER ABI_File_CORE, kernel_start, shdr,1
   170 00000000 A5414249            <1>  db 0xA5, 'A', 'B', 'I'
   171 00000004 01                  <1>  db 1
   172 00000005 01                  <1>  db 1
   173                              <1> 
   174 00000006 0400                <1>  dw %1
   175 00000008 [4000000000000000]  <1>  dq %2
   176 00000010 2000                <1>  dw 32
   177                              <1> 
   178 00000012 [2000000000000000]  <1>  dq %3
   179 0000001A 2000                <1>  dw 32
   180 0000001C 0100                <1>  dw %4
   181 0000001E 0000                <1>  dw 0
     6                                  shdr:
     7                                      SECTION_HEADER Section_Type_LOAD, 0, kernel_start,section_end-section_start
   197 00000020 0100000000000000    <1>  dq %1
   198 00000028 0000000000000000    <1>  dq %2
   199 00000030 [4000000000000000]  <1>  dq %3
   200 00000038 D21C000000000000    <1>  dq %4
     8                                  section_start:
     9                                  kernel_start:
    10                                  
    11                                      function init_sys_vector
    26                              <1>  %assign param_count %0 - 2
    27                              <1> 
    28                              <1>  %if param_count < 0
    29                              <1>  %assign param_count 0
    30                              <1>  %endif
    31                              <1>  %if param_count < 1
    32                              <1>  %assign ret_param_count 0
    33                              <1>  %else
    34                              <1>  %assign ret_param_count %2
    35                              <1>  %endif
    36                              <1> 
    37                              <1> 
    38                              <1>  prepare_call param_count, ret_param_count
    99                              <2>  %assign total_space ((%1 + %2) * 8)
   100                              <2> 
   101                              <2>  %if (total_space % 16) != 0
   102                              <2>  %assign total_space total_space + 8
   103                              <2>  %endif
   104                              <2> 
   105 00000040 4883EC00            <2>  sub rsp, total_space
    39                              <1> 
    40                              <1> 
    41                              <1>  %if param_count > 0
    42                              <1>  %assign i 0
    43                              <1>  mov [rsp-8], rax
    44                              <1>  %rep param_count
    45                              <1>  %rotate 1
    46                              <1>  mov rax, %2
    47                              <1>  mov [rsp + 8*i], rax
    48                              <1>  %assign i i+1
    49                              <1>  %endrep
    50                              <1> 
    51                              <1>  %rotate 1
    52                              <1>  %rotate 1
    53                              <1>  mov rax,[rsp-8]
    54                              <1>  %endif
    55                              <1> 
    56                              <1> 
    57 00000044 E889140000          <1>  call %1
    58                              <1> 
    59                              <1> 
    60                              <1>  cleanup_call param_count, ret_param_count
   109                              <2>  %assign total_space ((%1 + %2) * 8)
   110                              <2>  %if (total_space % 16) != 0
   111                              <2>  %assign total_space total_space + 8
   112                              <2>  %endif
   113 00000049 4883C400            <2>  add rsp, total_space
    61                              <1> 
    12                                  
    13                                      function video_init
    26                              <1>  %assign param_count %0 - 2
    27                              <1> 
    28                              <1>  %if param_count < 0
    29                              <1>  %assign param_count 0
    30                              <1>  %endif
    31                              <1>  %if param_count < 1
    32                              <1>  %assign ret_param_count 0
    33                              <1>  %else
    34                              <1>  %assign ret_param_count %2
    35                              <1>  %endif
    36                              <1> 
    37                              <1> 
    38                              <1>  prepare_call param_count, ret_param_count
    99                              <2>  %assign total_space ((%1 + %2) * 8)
   100                              <2> 
   101                              <2>  %if (total_space % 16) != 0
   102                              <2>  %assign total_space total_space + 8
   103                              <2>  %endif
   104                              <2> 
   105 0000004D 4883EC00            <2>  sub rsp, total_space
    39                              <1> 
    40                              <1> 
    41                              <1>  %if param_count > 0
    42                              <1>  %assign i 0
    43                              <1>  mov [rsp-8], rax
    44                              <1>  %rep param_count
    45                              <1>  %rotate 1
    46                              <1>  mov rax, %2
    47                              <1>  mov [rsp + 8*i], rax
    48                              <1>  %assign i i+1
    49                              <1>  %endrep
    50                              <1> 
    51                              <1>  %rotate 1
    52                              <1>  %rotate 1
    53                              <1>  mov rax,[rsp-8]
    54                              <1>  %endif
    55                              <1> 
    56                              <1> 
    57 00000051 E8EC030000          <1>  call %1
    58                              <1> 
    59                              <1> 
    60                              <1>  cleanup_call param_count, ret_param_count
   109                              <2>  %assign total_space ((%1 + %2) * 8)
   110                              <2>  %if (total_space % 16) != 0
   111                              <2>  %assign total_space total_space + 8
   112                              <2>  %endif
   113 00000056 4883C400            <2>  add rsp, total_space
    61                              <1> 
    14                                      function printk_init
    26                              <1>  %assign param_count %0 - 2
    27                              <1> 
    28                              <1>  %if param_count < 0
    29                              <1>  %assign param_count 0
    30                              <1>  %endif
    31                              <1>  %if param_count < 1
    32                              <1>  %assign ret_param_count 0
    33                              <1>  %else
    34                              <1>  %assign ret_param_count %2
    35                              <1>  %endif
    36                              <1> 
    37                              <1> 
    38                              <1>  prepare_call param_count, ret_param_count
    99                              <2>  %assign total_space ((%1 + %2) * 8)
   100                              <2> 
   101                              <2>  %if (total_space % 16) != 0
   102                              <2>  %assign total_space total_space + 8
   103                              <2>  %endif
   104                              <2> 
   105 0000005A 4883EC00            <2>  sub rsp, total_space
    39                              <1> 
    40                              <1> 
    41                              <1>  %if param_count > 0
    42                              <1>  %assign i 0
    43                              <1>  mov [rsp-8], rax
    44                              <1>  %rep param_count
    45                              <1>  %rotate 1
    46                              <1>  mov rax, %2
    47                              <1>  mov [rsp + 8*i], rax
    48                              <1>  %assign i i+1
    49                              <1>  %endrep
    50                              <1> 
    51                              <1>  %rotate 1
    52                              <1>  %rotate 1
    53                              <1>  mov rax,[rsp-8]
    54                              <1>  %endif
    55                              <1> 
    56                              <1> 
    57 0000005E E8090B0000          <1>  call %1
    58                              <1> 
    59                              <1> 
    60                              <1>  cleanup_call param_count, ret_param_count
   109                              <2>  %assign total_space ((%1 + %2) * 8)
   110                              <2>  %if (total_space % 16) != 0
   111                              <2>  %assign total_space total_space + 8
   112                              <2>  %endif
   113 00000063 4883C400            <2>  add rsp, total_space
    61                              <1> 
    15                                  
    16                                  
    17                                      function test_printk
    26                              <1>  %assign param_count %0 - 2
    27                              <1> 
    28                              <1>  %if param_count < 0
    29                              <1>  %assign param_count 0
    30                              <1>  %endif
    31                              <1>  %if param_count < 1
    32                              <1>  %assign ret_param_count 0
    33                              <1>  %else
    34                              <1>  %assign ret_param_count %2
    35                              <1>  %endif
    36                              <1> 
    37                              <1> 
    38                              <1>  prepare_call param_count, ret_param_count
    99                              <2>  %assign total_space ((%1 + %2) * 8)
   100                              <2> 
   101                              <2>  %if (total_space % 16) != 0
   102                              <2>  %assign total_space total_space + 8
   103                              <2>  %endif
   104                              <2> 
   105 00000067 4883EC00            <2>  sub rsp, total_space
    39                              <1> 
    40                              <1> 
    41                              <1>  %if param_count > 0
    42                              <1>  %assign i 0
    43                              <1>  mov [rsp-8], rax
    44                              <1>  %rep param_count
    45                              <1>  %rotate 1
    46                              <1>  mov rax, %2
    47                              <1>  mov [rsp + 8*i], rax
    48                              <1>  %assign i i+1
    49                              <1>  %endrep
    50                              <1> 
    51                              <1>  %rotate 1
    52                              <1>  %rotate 1
    53                              <1>  mov rax,[rsp-8]
    54                              <1>  %endif
    55                              <1> 
    56                              <1> 
    57 0000006B E806000000          <1>  call %1
    58                              <1> 
    59                              <1> 
    60                              <1>  cleanup_call param_count, ret_param_count
   109                              <2>  %assign total_space ((%1 + %2) * 8)
   110                              <2>  %if (total_space % 16) != 0
   111                              <2>  %assign total_space total_space + 8
   112                              <2>  %endif
   113 00000070 4883C400            <2>  add rsp, total_space
    61                              <1> 
    18                                      ; function test_video
    19                                  
    20                                  
    21                                  
    22                                  
    23                                      .endofkernel:
    24 00000074 EBFE                            jmp $
    25                                  test_printk:;test printk
    26                                      prolog 2;
    65 00000076 55                  <1>  push rbp
    66 00000077 4889E5              <1>  mov rbp, rsp
    67 0000007A 488945F8            <1>  mov [rbp-8],rax
    68 0000007E B802000000          <1>  mov rax, %1
    69 00000083 4883C00F            <1>  add rax, 15
    70 00000087 4883E0F0            <1>  and rax, ~15
    71 0000008B 4829C4              <1>  sub rsp, rax
    72 0000008E 488B45F8            <1>  mov rax,[rbp-8]
    73                              <1>  pushallq
   117 00000092 50                  <2>  push rax
   118 00000093 53                  <2>  push rbx
   119 00000094 51                  <2>  push rcx
   120 00000095 52                  <2>  push rdx
   121 00000096 56                  <2>  push rsi
   122 00000097 57                  <2>  push rdi
   123 00000098 4150                <2>  push r8
   124 0000009A 4151                <2>  push r9
   125 0000009C 4152                <2>  push r10
   126 0000009E 4153                <2>  push r11
   127 000000A0 4154                <2>  push r12
   128 000000A2 4155                <2>  push r13
   129 000000A4 4156                <2>  push r14
   130 000000A6 4157                <2>  push r15
    74                              <1> 
    75                              <1> 
    76                              <1> 
    77                              <1> 
    78                              <1> 
    79                              <1> 
    27                                  
    28                                      ; function draw_char,1,0,0,'A'
    29                                      ; function print_char,1,'a'
    30                                      ; function print_char,1,'b'
    31                                  
    32                                      ; function print_char,1,'a'
    33                                      ; function print_char,1,'b'
    34                                      ;     function print_char,1,'a'
    35                                      ; function print_char,1,'b'
    36                                  
    37                                      ;     function print_char,1,'a'
    38                                      ; function print_char,1,'b'
    39                                  
    40                                  
    41 000000A8 488D35311A0000              lea rsi,[rel messages2]    
    42                                     function print_string,1,rsi
    26                              <1>  %assign param_count %0 - 2
    27                              <1> 
    28                              <1>  %if param_count < 0
    29                              <1>  %assign param_count 0
    30                              <1>  %endif
    31                              <1>  %if param_count < 1
    32                              <1>  %assign ret_param_count 0
    33                              <1>  %else
    34                              <1>  %assign ret_param_count %2
    35                              <1>  %endif
    36                              <1> 
    37                              <1> 
    38                              <1>  prepare_call param_count, ret_param_count
    99                              <2>  %assign total_space ((%1 + %2) * 8)
   100                              <2> 
   101                              <2>  %if (total_space % 16) != 0
   102                              <2>  %assign total_space total_space + 8
   103                              <2>  %endif
   104                              <2> 
   105 000000AF 4883EC10            <2>  sub rsp, total_space
    39                              <1> 
    40                              <1> 
    41                              <1>  %if param_count > 0
    42                              <1>  %assign i 0
    43 000000B3 48894424F8          <1>  mov [rsp-8], rax
    44                              <1>  %rep param_count
    45                              <1>  %rotate 1
    46                              <1>  mov rax, %2
    47                              <1>  mov [rsp + 8*i], rax
    48                              <1>  %assign i i+1
    49                              <1>  %endrep
    45                              <2>  %rotate 1
    46 000000B8 4889F0              <2>  mov rax, %2
    47 000000BB 48890424            <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    50                              <1> 
    51                              <1>  %rotate 1
    52                              <1>  %rotate 1
    53 000000BF 488B4424F8          <1>  mov rax,[rsp-8]
    54                              <1>  %endif
    55                              <1> 
    56                              <1> 
    57 000000C4 E8600F0000          <1>  call %1
    58                              <1> 
    59                              <1> 
    60                              <1>  cleanup_call param_count, ret_param_count
   109                              <2>  %assign total_space ((%1 + %2) * 8)
   110                              <2>  %if (total_space % 16) != 0
   111                              <2>  %assign total_space total_space + 8
   112                              <2>  %endif
   113 000000C9 4883C410            <2>  add rsp, total_space
    61                              <1> 
    43                                  
    44 000000CD 488D35D6190000              lea rsi,[rel messages1]
    45                                      function print_string,1,rsi
    26                              <1>  %assign param_count %0 - 2
    27                              <1> 
    28                              <1>  %if param_count < 0
    29                              <1>  %assign param_count 0
    30                              <1>  %endif
    31                              <1>  %if param_count < 1
    32                              <1>  %assign ret_param_count 0
    33                              <1>  %else
    34                              <1>  %assign ret_param_count %2
    35                              <1>  %endif
    36                              <1> 
    37                              <1> 
    38                              <1>  prepare_call param_count, ret_param_count
    99                              <2>  %assign total_space ((%1 + %2) * 8)
   100                              <2> 
   101                              <2>  %if (total_space % 16) != 0
   102                              <2>  %assign total_space total_space + 8
   103                              <2>  %endif
   104                              <2> 
   105 000000D4 4883EC10            <2>  sub rsp, total_space
    39                              <1> 
    40                              <1> 
    41                              <1>  %if param_count > 0
    42                              <1>  %assign i 0
    43 000000D8 48894424F8          <1>  mov [rsp-8], rax
    44                              <1>  %rep param_count
    45                              <1>  %rotate 1
    46                              <1>  mov rax, %2
    47                              <1>  mov [rsp + 8*i], rax
    48                              <1>  %assign i i+1
    49                              <1>  %endrep
    45                              <2>  %rotate 1
    46 000000DD 4889F0              <2>  mov rax, %2
    47 000000E0 48890424            <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    50                              <1> 
    51                              <1>  %rotate 1
    52                              <1>  %rotate 1
    53 000000E4 488B4424F8          <1>  mov rax,[rsp-8]
    54                              <1>  %endif
    55                              <1> 
    56                              <1> 
    57 000000E9 E83B0F0000          <1>  call %1
    58                              <1> 
    59                              <1> 
    60                              <1>  cleanup_call param_count, ret_param_count
   109                              <2>  %assign total_space ((%1 + %2) * 8)
   110                              <2>  %if (total_space % 16) != 0
   111                              <2>  %assign total_space total_space + 8
   112                              <2>  %endif
   113 000000EE 4883C410            <2>  add rsp, total_space
    61                              <1> 
    46                                  
    47 000000F2 488D35E7190000              lea rsi,[rel messages2]    
    48                                     function print_string,1,rsi
    26                              <1>  %assign param_count %0 - 2
    27                              <1> 
    28                              <1>  %if param_count < 0
    29                              <1>  %assign param_count 0
    30                              <1>  %endif
    31                              <1>  %if param_count < 1
    32                              <1>  %assign ret_param_count 0
    33                              <1>  %else
    34                              <1>  %assign ret_param_count %2
    35                              <1>  %endif
    36                              <1> 
    37                              <1> 
    38                              <1>  prepare_call param_count, ret_param_count
    99                              <2>  %assign total_space ((%1 + %2) * 8)
   100                              <2> 
   101                              <2>  %if (total_space % 16) != 0
   102                              <2>  %assign total_space total_space + 8
   103                              <2>  %endif
   104                              <2> 
   105 000000F9 4883EC10            <2>  sub rsp, total_space
    39                              <1> 
    40                              <1> 
    41                              <1>  %if param_count > 0
    42                              <1>  %assign i 0
    43 000000FD 48894424F8          <1>  mov [rsp-8], rax
    44                              <1>  %rep param_count
    45                              <1>  %rotate 1
    46                              <1>  mov rax, %2
    47                              <1>  mov [rsp + 8*i], rax
    48                              <1>  %assign i i+1
    49                              <1>  %endrep
    45                              <2>  %rotate 1
    46 00000102 4889F0              <2>  mov rax, %2
    47 00000105 48890424            <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    50                              <1> 
    51                              <1>  %rotate 1
    52                              <1>  %rotate 1
    53 00000109 488B4424F8          <1>  mov rax,[rsp-8]
    54                              <1>  %endif
    55                              <1> 
    56                              <1> 
    57 0000010E E8160F0000          <1>  call %1
    58                              <1> 
    59                              <1> 
    60                              <1>  cleanup_call param_count, ret_param_count
   109                              <2>  %assign total_space ((%1 + %2) * 8)
   110                              <2>  %if (total_space % 16) != 0
   111                              <2>  %assign total_space total_space + 8
   112                              <2>  %endif
   113 00000113 4883C410            <2>  add rsp, total_space
    61                              <1> 
    49                                  
    50 00000117 488D358C190000              lea rsi,[rel messages1]
    51                                      function print_string,1,rsi
    26                              <1>  %assign param_count %0 - 2
    27                              <1> 
    28                              <1>  %if param_count < 0
    29                              <1>  %assign param_count 0
    30                              <1>  %endif
    31                              <1>  %if param_count < 1
    32                              <1>  %assign ret_param_count 0
    33                              <1>  %else
    34                              <1>  %assign ret_param_count %2
    35                              <1>  %endif
    36                              <1> 
    37                              <1> 
    38                              <1>  prepare_call param_count, ret_param_count
    99                              <2>  %assign total_space ((%1 + %2) * 8)
   100                              <2> 
   101                              <2>  %if (total_space % 16) != 0
   102                              <2>  %assign total_space total_space + 8
   103                              <2>  %endif
   104                              <2> 
   105 0000011E 4883EC10            <2>  sub rsp, total_space
    39                              <1> 
    40                              <1> 
    41                              <1>  %if param_count > 0
    42                              <1>  %assign i 0
    43 00000122 48894424F8          <1>  mov [rsp-8], rax
    44                              <1>  %rep param_count
    45                              <1>  %rotate 1
    46                              <1>  mov rax, %2
    47                              <1>  mov [rsp + 8*i], rax
    48                              <1>  %assign i i+1
    49                              <1>  %endrep
    45                              <2>  %rotate 1
    46 00000127 4889F0              <2>  mov rax, %2
    47 0000012A 48890424            <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    50                              <1> 
    51                              <1>  %rotate 1
    52                              <1>  %rotate 1
    53 0000012E 488B4424F8          <1>  mov rax,[rsp-8]
    54                              <1>  %endif
    55                              <1> 
    56                              <1> 
    57 00000133 E8F10E0000          <1>  call %1
    58                              <1> 
    59                              <1> 
    60                              <1>  cleanup_call param_count, ret_param_count
   109                              <2>  %assign total_space ((%1 + %2) * 8)
   110                              <2>  %if (total_space % 16) != 0
   111                              <2>  %assign total_space total_space + 8
   112                              <2>  %endif
   113 00000138 4883C410            <2>  add rsp, total_space
    61                              <1> 
    52                                  
    53 0000013C 488D359D190000              lea rsi,[rel messages2]    
    54                                     function print_string,1,rsi
    26                              <1>  %assign param_count %0 - 2
    27                              <1> 
    28                              <1>  %if param_count < 0
    29                              <1>  %assign param_count 0
    30                              <1>  %endif
    31                              <1>  %if param_count < 1
    32                              <1>  %assign ret_param_count 0
    33                              <1>  %else
    34                              <1>  %assign ret_param_count %2
    35                              <1>  %endif
    36                              <1> 
    37                              <1> 
    38                              <1>  prepare_call param_count, ret_param_count
    99                              <2>  %assign total_space ((%1 + %2) * 8)
   100                              <2> 
   101                              <2>  %if (total_space % 16) != 0
   102                              <2>  %assign total_space total_space + 8
   103                              <2>  %endif
   104                              <2> 
   105 00000143 4883EC10            <2>  sub rsp, total_space
    39                              <1> 
    40                              <1> 
    41                              <1>  %if param_count > 0
    42                              <1>  %assign i 0
    43 00000147 48894424F8          <1>  mov [rsp-8], rax
    44                              <1>  %rep param_count
    45                              <1>  %rotate 1
    46                              <1>  mov rax, %2
    47                              <1>  mov [rsp + 8*i], rax
    48                              <1>  %assign i i+1
    49                              <1>  %endrep
    45                              <2>  %rotate 1
    46 0000014C 4889F0              <2>  mov rax, %2
    47 0000014F 48890424            <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    50                              <1> 
    51                              <1>  %rotate 1
    52                              <1>  %rotate 1
    53 00000153 488B4424F8          <1>  mov rax,[rsp-8]
    54                              <1>  %endif
    55                              <1> 
    56                              <1> 
    57 00000158 E8CC0E0000          <1>  call %1
    58                              <1> 
    59                              <1> 
    60                              <1>  cleanup_call param_count, ret_param_count
   109                              <2>  %assign total_space ((%1 + %2) * 8)
   110                              <2>  %if (total_space % 16) != 0
   111                              <2>  %assign total_space total_space + 8
   112                              <2>  %endif
   113 0000015D 4883C410            <2>  add rsp, total_space
    61                              <1> 
    55                                  
    56 00000161 488D3542190000              lea rsi,[rel messages1]
    57                                      function print_string,1,rsi
    26                              <1>  %assign param_count %0 - 2
    27                              <1> 
    28                              <1>  %if param_count < 0
    29                              <1>  %assign param_count 0
    30                              <1>  %endif
    31                              <1>  %if param_count < 1
    32                              <1>  %assign ret_param_count 0
    33                              <1>  %else
    34                              <1>  %assign ret_param_count %2
    35                              <1>  %endif
    36                              <1> 
    37                              <1> 
    38                              <1>  prepare_call param_count, ret_param_count
    99                              <2>  %assign total_space ((%1 + %2) * 8)
   100                              <2> 
   101                              <2>  %if (total_space % 16) != 0
   102                              <2>  %assign total_space total_space + 8
   103                              <2>  %endif
   104                              <2> 
   105 00000168 4883EC10            <2>  sub rsp, total_space
    39                              <1> 
    40                              <1> 
    41                              <1>  %if param_count > 0
    42                              <1>  %assign i 0
    43 0000016C 48894424F8          <1>  mov [rsp-8], rax
    44                              <1>  %rep param_count
    45                              <1>  %rotate 1
    46                              <1>  mov rax, %2
    47                              <1>  mov [rsp + 8*i], rax
    48                              <1>  %assign i i+1
    49                              <1>  %endrep
    45                              <2>  %rotate 1
    46 00000171 4889F0              <2>  mov rax, %2
    47 00000174 48890424            <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    50                              <1> 
    51                              <1>  %rotate 1
    52                              <1>  %rotate 1
    53 00000178 488B4424F8          <1>  mov rax,[rsp-8]
    54                              <1>  %endif
    55                              <1> 
    56                              <1> 
    57 0000017D E8A70E0000          <1>  call %1
    58                              <1> 
    59                              <1> 
    60                              <1>  cleanup_call param_count, ret_param_count
   109                              <2>  %assign total_space ((%1 + %2) * 8)
   110                              <2>  %if (total_space % 16) != 0
   111                              <2>  %assign total_space total_space + 8
   112                              <2>  %endif
   113 00000182 4883C410            <2>  add rsp, total_space
    61                              <1> 
    58                                  
    59                                      ; lea rsi,[rel decimal_messages]    
    60                                      ; function print_decimal,1,rsi
    61                                  
    62                                      ; lea rsi,[rel hex_messages]    
    63                                      ; function print_hex,1,rsi
    64                                  
    65                                      ; lea rsi,[rel hex_messages]    
    66                                      ; function print_hex,1,rsi
    67                                  
    68 00000186 488D35F21A0000              lea rsi, [rel format1]
    69 0000018D 488D150E1B0000              lea rdx, [rel string1]
    70                                      function printk,1,rsi,rdx
    26                              <1>  %assign param_count %0 - 2
    27                              <1> 
    28                              <1>  %if param_count < 0
    29                              <1>  %assign param_count 0
    30                              <1>  %endif
    31                              <1>  %if param_count < 1
    32                              <1>  %assign ret_param_count 0
    33                              <1>  %else
    34                              <1>  %assign ret_param_count %2
    35                              <1>  %endif
    36                              <1> 
    37                              <1> 
    38                              <1>  prepare_call param_count, ret_param_count
    99                              <2>  %assign total_space ((%1 + %2) * 8)
   100                              <2> 
   101                              <2>  %if (total_space % 16) != 0
   102                              <2>  %assign total_space total_space + 8
   103                              <2>  %endif
   104                              <2> 
   105 00000194 4883EC20            <2>  sub rsp, total_space
    39                              <1> 
    40                              <1> 
    41                              <1>  %if param_count > 0
    42                              <1>  %assign i 0
    43 00000198 48894424F8          <1>  mov [rsp-8], rax
    44                              <1>  %rep param_count
    45                              <1>  %rotate 1
    46                              <1>  mov rax, %2
    47                              <1>  mov [rsp + 8*i], rax
    48                              <1>  %assign i i+1
    49                              <1>  %endrep
    45                              <2>  %rotate 1
    46 0000019D 4889F0              <2>  mov rax, %2
    47 000001A0 48890424            <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    45                              <2>  %rotate 1
    46 000001A4 4889D0              <2>  mov rax, %2
    47 000001A7 4889442408          <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    50                              <1> 
    51                              <1>  %rotate 1
    52                              <1>  %rotate 1
    53 000001AC 488B4424F8          <1>  mov rax,[rsp-8]
    54                              <1>  %endif
    55                              <1> 
    56                              <1> 
    57 000001B1 E8A80A0000          <1>  call %1
    58                              <1> 
    59                              <1> 
    60                              <1>  cleanup_call param_count, ret_param_count
   109                              <2>  %assign total_space ((%1 + %2) * 8)
   110                              <2>  %if (total_space % 16) != 0
   111                              <2>  %assign total_space total_space + 8
   112                              <2>  %endif
   113 000001B6 4883C420            <2>  add rsp, total_space
    61                              <1> 
    71                                  
    72 000001BA 488D35CB1A0000                  lea rsi, [rel format2]
    73 000001C1 488D15E81A0000              lea rdx, [rel decimal_messages]
    74                                      function printk,1,rsi,rdx
    26                              <1>  %assign param_count %0 - 2
    27                              <1> 
    28                              <1>  %if param_count < 0
    29                              <1>  %assign param_count 0
    30                              <1>  %endif
    31                              <1>  %if param_count < 1
    32                              <1>  %assign ret_param_count 0
    33                              <1>  %else
    34                              <1>  %assign ret_param_count %2
    35                              <1>  %endif
    36                              <1> 
    37                              <1> 
    38                              <1>  prepare_call param_count, ret_param_count
    99                              <2>  %assign total_space ((%1 + %2) * 8)
   100                              <2> 
   101                              <2>  %if (total_space % 16) != 0
   102                              <2>  %assign total_space total_space + 8
   103                              <2>  %endif
   104                              <2> 
   105 000001C8 4883EC20            <2>  sub rsp, total_space
    39                              <1> 
    40                              <1> 
    41                              <1>  %if param_count > 0
    42                              <1>  %assign i 0
    43 000001CC 48894424F8          <1>  mov [rsp-8], rax
    44                              <1>  %rep param_count
    45                              <1>  %rotate 1
    46                              <1>  mov rax, %2
    47                              <1>  mov [rsp + 8*i], rax
    48                              <1>  %assign i i+1
    49                              <1>  %endrep
    45                              <2>  %rotate 1
    46 000001D1 4889F0              <2>  mov rax, %2
    47 000001D4 48890424            <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    45                              <2>  %rotate 1
    46 000001D8 4889D0              <2>  mov rax, %2
    47 000001DB 4889442408          <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    50                              <1> 
    51                              <1>  %rotate 1
    52                              <1>  %rotate 1
    53 000001E0 488B4424F8          <1>  mov rax,[rsp-8]
    54                              <1>  %endif
    55                              <1> 
    56                              <1> 
    57 000001E5 E8740A0000          <1>  call %1
    58                              <1> 
    59                              <1> 
    60                              <1>  cleanup_call param_count, ret_param_count
   109                              <2>  %assign total_space ((%1 + %2) * 8)
   110                              <2>  %if (total_space % 16) != 0
   111                              <2>  %assign total_space total_space + 8
   112                              <2>  %endif
   113 000001EA 4883C420            <2>  add rsp, total_space
    61                              <1> 
    75                                  
    76 000001EE 488D35A31A0000                  lea rsi, [rel format3]
    77 000001F5 488D15AC1A0000              lea rdx, [rel hex_messages]
    78                                      function printk,1,rsi,rdx
    26                              <1>  %assign param_count %0 - 2
    27                              <1> 
    28                              <1>  %if param_count < 0
    29                              <1>  %assign param_count 0
    30                              <1>  %endif
    31                              <1>  %if param_count < 1
    32                              <1>  %assign ret_param_count 0
    33                              <1>  %else
    34                              <1>  %assign ret_param_count %2
    35                              <1>  %endif
    36                              <1> 
    37                              <1> 
    38                              <1>  prepare_call param_count, ret_param_count
    99                              <2>  %assign total_space ((%1 + %2) * 8)
   100                              <2> 
   101                              <2>  %if (total_space % 16) != 0
   102                              <2>  %assign total_space total_space + 8
   103                              <2>  %endif
   104                              <2> 
   105 000001FC 4883EC20            <2>  sub rsp, total_space
    39                              <1> 
    40                              <1> 
    41                              <1>  %if param_count > 0
    42                              <1>  %assign i 0
    43 00000200 48894424F8          <1>  mov [rsp-8], rax
    44                              <1>  %rep param_count
    45                              <1>  %rotate 1
    46                              <1>  mov rax, %2
    47                              <1>  mov [rsp + 8*i], rax
    48                              <1>  %assign i i+1
    49                              <1>  %endrep
    45                              <2>  %rotate 1
    46 00000205 4889F0              <2>  mov rax, %2
    47 00000208 48890424            <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    45                              <2>  %rotate 1
    46 0000020C 4889D0              <2>  mov rax, %2
    47 0000020F 4889442408          <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    50                              <1> 
    51                              <1>  %rotate 1
    52                              <1>  %rotate 1
    53 00000214 488B4424F8          <1>  mov rax,[rsp-8]
    54                              <1>  %endif
    55                              <1> 
    56                              <1> 
    57 00000219 E8400A0000          <1>  call %1
    58                              <1> 
    59                              <1> 
    60                              <1>  cleanup_call param_count, ret_param_count
   109                              <2>  %assign total_space ((%1 + %2) * 8)
   110                              <2>  %if (total_space % 16) != 0
   111                              <2>  %assign total_space total_space + 8
   112                              <2>  %endif
   113 0000021E 4883C420            <2>  add rsp, total_space
    61                              <1> 
    79                                      ;     lea rsi,[rel decimal_messages]    
    80                                      ; function print_decimal,1,rsi
    81                                  
    82                                      ;     lea rsi,[rel decimal_messages]    
    83                                      ; function print_decimal,1,rsi
    84                                  
    85                                      ; lea rsi,[rel messages1]
    86                                      ; function draw_string,1,0,20,rsi
    87                                  
    88                                      ; lea rsi,[rel messages2]
    89                                      ; function draw_string,1,0,40,rsi
    90                                  
    91                                      ; lea rsi,[rel messages3]
    92                                      ; function draw_string,1,0,60,rsi
    93                                  
    94                                      ; lea rsi,[rel messages4]
    95                                      ; function draw_string,1,0,80,rsi
    96                                  
    97                                      ; lea rsi,[rel hex_messages]
    98                                      ; function draw_hex,1,0,100,rsi
    99                                  
   100                                      ; lea rsi,[rel decimal_messages]
   101                                      ; function draw_decimal,1,0,120,rsi
   102                                  
   103                                  
   104                                  
   105                                      epilog
    83                              <1>  popallq
   134 00000222 415F                <2>  pop r15
   135 00000224 415E                <2>  pop r14
   136 00000226 415D                <2>  pop r13
   137 00000228 415C                <2>  pop r12
   138 0000022A 415B                <2>  pop r11
   139 0000022C 415A                <2>  pop r10
   140 0000022E 4159                <2>  pop r9
   141 00000230 4158                <2>  pop r8
   142 00000232 5F                  <2>  pop rdi
   143 00000233 5E                  <2>  pop rsi
   144 00000234 5A                  <2>  pop rdx
   145 00000235 59                  <2>  pop rcx
   146 00000236 5B                  <2>  pop rbx
   147 00000237 58                  <2>  pop rax
    84                              <1> 
    85 00000238 4889EC              <1>  mov rsp, rbp
    86 0000023B 5D                  <1>  pop rbp
    87 0000023C C3                  <1>  ret
   106                                  
   107                                  test_video:;test video
   108                                      prolog 2;
    65 0000023D 55                  <1>  push rbp
    66 0000023E 4889E5              <1>  mov rbp, rsp
    67 00000241 488945F8            <1>  mov [rbp-8],rax
    68 00000245 B802000000          <1>  mov rax, %1
    69 0000024A 4883C00F            <1>  add rax, 15
    70 0000024E 4883E0F0            <1>  and rax, ~15
    71 00000252 4829C4              <1>  sub rsp, rax
    72 00000255 488B45F8            <1>  mov rax,[rbp-8]
    73                              <1>  pushallq
   117 00000259 50                  <2>  push rax
   118 0000025A 53                  <2>  push rbx
   119 0000025B 51                  <2>  push rcx
   120 0000025C 52                  <2>  push rdx
   121 0000025D 56                  <2>  push rsi
   122 0000025E 57                  <2>  push rdi
   123 0000025F 4150                <2>  push r8
   124 00000261 4151                <2>  push r9
   125 00000263 4152                <2>  push r10
   126 00000265 4153                <2>  push r11
   127 00000267 4154                <2>  push r12
   128 00000269 4155                <2>  push r13
   129 0000026B 4156                <2>  push r14
   130 0000026D 4157                <2>  push r15
    74                              <1> 
    75                              <1> 
    76                              <1> 
    77                              <1> 
    78                              <1> 
    79                              <1> 
   109                                  
   110                                      ; function draw_screen,0,0x00000000
   111                                      function draw_pixel,1,100,200,0x00FFFFFF
    26                              <1>  %assign param_count %0 - 2
    27                              <1> 
    28                              <1>  %if param_count < 0
    29                              <1>  %assign param_count 0
    30                              <1>  %endif
    31                              <1>  %if param_count < 1
    32                              <1>  %assign ret_param_count 0
    33                              <1>  %else
    34                              <1>  %assign ret_param_count %2
    35                              <1>  %endif
    36                              <1> 
    37                              <1> 
    38                              <1>  prepare_call param_count, ret_param_count
    99                              <2>  %assign total_space ((%1 + %2) * 8)
   100                              <2> 
   101                              <2>  %if (total_space % 16) != 0
   102                              <2>  %assign total_space total_space + 8
   103                              <2>  %endif
   104                              <2> 
   105 0000026F 4883EC20            <2>  sub rsp, total_space
    39                              <1> 
    40                              <1> 
    41                              <1>  %if param_count > 0
    42                              <1>  %assign i 0
    43 00000273 48894424F8          <1>  mov [rsp-8], rax
    44                              <1>  %rep param_count
    45                              <1>  %rotate 1
    46                              <1>  mov rax, %2
    47                              <1>  mov [rsp + 8*i], rax
    48                              <1>  %assign i i+1
    49                              <1>  %endrep
    45                              <2>  %rotate 1
    46 00000278 B864000000          <2>  mov rax, %2
    47 0000027D 48890424            <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    45                              <2>  %rotate 1
    46 00000281 B8C8000000          <2>  mov rax, %2
    47 00000286 4889442408          <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    45                              <2>  %rotate 1
    46 0000028B B8FFFFFF00          <2>  mov rax, %2
    47 00000290 4889442410          <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    50                              <1> 
    51                              <1>  %rotate 1
    52                              <1>  %rotate 1
    53 00000295 488B4424F8          <1>  mov rax,[rsp-8]
    54                              <1>  %endif
    55                              <1> 
    56                              <1> 
    57 0000029A E84D020000          <1>  call %1
    58                              <1> 
    59                              <1> 
    60                              <1>  cleanup_call param_count, ret_param_count
   109                              <2>  %assign total_space ((%1 + %2) * 8)
   110                              <2>  %if (total_space % 16) != 0
   111                              <2>  %assign total_space total_space + 8
   112                              <2>  %endif
   113 0000029F 4883C420            <2>  add rsp, total_space
    61                              <1> 
   112                                      function draw_line,1,100,200,300,400,0x00FFFFFF
    26                              <1>  %assign param_count %0 - 2
    27                              <1> 
    28                              <1>  %if param_count < 0
    29                              <1>  %assign param_count 0
    30                              <1>  %endif
    31                              <1>  %if param_count < 1
    32                              <1>  %assign ret_param_count 0
    33                              <1>  %else
    34                              <1>  %assign ret_param_count %2
    35                              <1>  %endif
    36                              <1> 
    37                              <1> 
    38                              <1>  prepare_call param_count, ret_param_count
    99                              <2>  %assign total_space ((%1 + %2) * 8)
   100                              <2> 
   101                              <2>  %if (total_space % 16) != 0
   102                              <2>  %assign total_space total_space + 8
   103                              <2>  %endif
   104                              <2> 
   105 000002A3 4883EC30            <2>  sub rsp, total_space
    39                              <1> 
    40                              <1> 
    41                              <1>  %if param_count > 0
    42                              <1>  %assign i 0
    43 000002A7 48894424F8          <1>  mov [rsp-8], rax
    44                              <1>  %rep param_count
    45                              <1>  %rotate 1
    46                              <1>  mov rax, %2
    47                              <1>  mov [rsp + 8*i], rax
    48                              <1>  %assign i i+1
    49                              <1>  %endrep
    45                              <2>  %rotate 1
    46 000002AC B864000000          <2>  mov rax, %2
    47 000002B1 48890424            <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    45                              <2>  %rotate 1
    46 000002B5 B8C8000000          <2>  mov rax, %2
    47 000002BA 4889442408          <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    45                              <2>  %rotate 1
    46 000002BF B82C010000          <2>  mov rax, %2
    47 000002C4 4889442410          <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    45                              <2>  %rotate 1
    46 000002C9 B890010000          <2>  mov rax, %2
    47 000002CE 4889442418          <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    45                              <2>  %rotate 1
    46 000002D3 B8FFFFFF00          <2>  mov rax, %2
    47 000002D8 4889442420          <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    50                              <1> 
    51                              <1>  %rotate 1
    52                              <1>  %rotate 1
    53 000002DD 488B4424F8          <1>  mov rax,[rsp-8]
    54                              <1>  %endif
    55                              <1> 
    56                              <1> 
    57 000002E2 E88C020000          <1>  call %1
    58                              <1> 
    59                              <1> 
    60                              <1>  cleanup_call param_count, ret_param_count
   109                              <2>  %assign total_space ((%1 + %2) * 8)
   110                              <2>  %if (total_space % 16) != 0
   111                              <2>  %assign total_space total_space + 8
   112                              <2>  %endif
   113 000002E7 4883C430            <2>  add rsp, total_space
    61                              <1> 
   113                                      function draw_rect,1,200,300,400,500,0x00FFFFFF
    26                              <1>  %assign param_count %0 - 2
    27                              <1> 
    28                              <1>  %if param_count < 0
    29                              <1>  %assign param_count 0
    30                              <1>  %endif
    31                              <1>  %if param_count < 1
    32                              <1>  %assign ret_param_count 0
    33                              <1>  %else
    34                              <1>  %assign ret_param_count %2
    35                              <1>  %endif
    36                              <1> 
    37                              <1> 
    38                              <1>  prepare_call param_count, ret_param_count
    99                              <2>  %assign total_space ((%1 + %2) * 8)
   100                              <2> 
   101                              <2>  %if (total_space % 16) != 0
   102                              <2>  %assign total_space total_space + 8
   103                              <2>  %endif
   104                              <2> 
   105 000002EB 4883EC30            <2>  sub rsp, total_space
    39                              <1> 
    40                              <1> 
    41                              <1>  %if param_count > 0
    42                              <1>  %assign i 0
    43 000002EF 48894424F8          <1>  mov [rsp-8], rax
    44                              <1>  %rep param_count
    45                              <1>  %rotate 1
    46                              <1>  mov rax, %2
    47                              <1>  mov [rsp + 8*i], rax
    48                              <1>  %assign i i+1
    49                              <1>  %endrep
    45                              <2>  %rotate 1
    46 000002F4 B8C8000000          <2>  mov rax, %2
    47 000002F9 48890424            <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    45                              <2>  %rotate 1
    46 000002FD B82C010000          <2>  mov rax, %2
    47 00000302 4889442408          <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    45                              <2>  %rotate 1
    46 00000307 B890010000          <2>  mov rax, %2
    47 0000030C 4889442410          <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    45                              <2>  %rotate 1
    46 00000311 B8F4010000          <2>  mov rax, %2
    47 00000316 4889442418          <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    45                              <2>  %rotate 1
    46 0000031B B8FFFFFF00          <2>  mov rax, %2
    47 00000320 4889442420          <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    50                              <1> 
    51                              <1>  %rotate 1
    52                              <1>  %rotate 1
    53 00000325 488B4424F8          <1>  mov rax,[rsp-8]
    54                              <1>  %endif
    55                              <1> 
    56                              <1> 
    57 0000032A E8A8030000          <1>  call %1
    58                              <1> 
    59                              <1> 
    60                              <1>  cleanup_call param_count, ret_param_count
   109                              <2>  %assign total_space ((%1 + %2) * 8)
   110                              <2>  %if (total_space % 16) != 0
   111                              <2>  %assign total_space total_space + 8
   112                              <2>  %endif
   113 0000032F 4883C430            <2>  add rsp, total_space
    61                              <1> 
   114                                      function draw_circle,1,300,400,100,0x00FFFFFF
    26                              <1>  %assign param_count %0 - 2
    27                              <1> 
    28                              <1>  %if param_count < 0
    29                              <1>  %assign param_count 0
    30                              <1>  %endif
    31                              <1>  %if param_count < 1
    32                              <1>  %assign ret_param_count 0
    33                              <1>  %else
    34                              <1>  %assign ret_param_count %2
    35                              <1>  %endif
    36                              <1> 
    37                              <1> 
    38                              <1>  prepare_call param_count, ret_param_count
    99                              <2>  %assign total_space ((%1 + %2) * 8)
   100                              <2> 
   101                              <2>  %if (total_space % 16) != 0
   102                              <2>  %assign total_space total_space + 8
   103                              <2>  %endif
   104                              <2> 
   105 00000333 4883EC30            <2>  sub rsp, total_space
    39                              <1> 
    40                              <1> 
    41                              <1>  %if param_count > 0
    42                              <1>  %assign i 0
    43 00000337 48894424F8          <1>  mov [rsp-8], rax
    44                              <1>  %rep param_count
    45                              <1>  %rotate 1
    46                              <1>  mov rax, %2
    47                              <1>  mov [rsp + 8*i], rax
    48                              <1>  %assign i i+1
    49                              <1>  %endrep
    45                              <2>  %rotate 1
    46 0000033C B82C010000          <2>  mov rax, %2
    47 00000341 48890424            <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    45                              <2>  %rotate 1
    46 00000345 B890010000          <2>  mov rax, %2
    47 0000034A 4889442408          <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    45                              <2>  %rotate 1
    46 0000034F B864000000          <2>  mov rax, %2
    47 00000354 4889442410          <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    45                              <2>  %rotate 1
    46 00000359 B8FFFFFF00          <2>  mov rax, %2
    47 0000035E 4889442418          <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    50                              <1> 
    51                              <1>  %rotate 1
    52                              <1>  %rotate 1
    53 00000363 488B4424F8          <1>  mov rax,[rsp-8]
    54                              <1>  %endif
    55                              <1> 
    56                              <1> 
    57 00000368 E8EF050000          <1>  call %1
    58                              <1> 
    59                              <1> 
    60                              <1>  cleanup_call param_count, ret_param_count
   109                              <2>  %assign total_space ((%1 + %2) * 8)
   110                              <2>  %if (total_space % 16) != 0
   111                              <2>  %assign total_space total_space + 8
   112                              <2>  %endif
   113 0000036D 4883C430            <2>  add rsp, total_space
    61                              <1> 
   115                                      function draw_triangle,1,100,100,200,100,100,200,0x00FFFFFF
    26                              <1>  %assign param_count %0 - 2
    27                              <1> 
    28                              <1>  %if param_count < 0
    29                              <1>  %assign param_count 0
    30                              <1>  %endif
    31                              <1>  %if param_count < 1
    32                              <1>  %assign ret_param_count 0
    33                              <1>  %else
    34                              <1>  %assign ret_param_count %2
    35                              <1>  %endif
    36                              <1> 
    37                              <1> 
    38                              <1>  prepare_call param_count, ret_param_count
    99                              <2>  %assign total_space ((%1 + %2) * 8)
   100                              <2> 
   101                              <2>  %if (total_space % 16) != 0
   102                              <2>  %assign total_space total_space + 8
   103                              <2>  %endif
   104                              <2> 
   105 00000371 4883EC40            <2>  sub rsp, total_space
    39                              <1> 
    40                              <1> 
    41                              <1>  %if param_count > 0
    42                              <1>  %assign i 0
    43 00000375 48894424F8          <1>  mov [rsp-8], rax
    44                              <1>  %rep param_count
    45                              <1>  %rotate 1
    46                              <1>  mov rax, %2
    47                              <1>  mov [rsp + 8*i], rax
    48                              <1>  %assign i i+1
    49                              <1>  %endrep
    45                              <2>  %rotate 1
    46 0000037A B864000000          <2>  mov rax, %2
    47 0000037F 48890424            <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    45                              <2>  %rotate 1
    46 00000383 B864000000          <2>  mov rax, %2
    47 00000388 4889442408          <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    45                              <2>  %rotate 1
    46 0000038D B8C8000000          <2>  mov rax, %2
    47 00000392 4889442410          <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    45                              <2>  %rotate 1
    46 00000397 B864000000          <2>  mov rax, %2
    47 0000039C 4889442418          <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    45                              <2>  %rotate 1
    46 000003A1 B864000000          <2>  mov rax, %2
    47 000003A6 4889442420          <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    45                              <2>  %rotate 1
    46 000003AB B8C8000000          <2>  mov rax, %2
    47 000003B0 4889442428          <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    45                              <2>  %rotate 1
    46 000003B5 B8FFFFFF00          <2>  mov rax, %2
    47 000003BA 4889442430          <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    50                              <1> 
    51                              <1>  %rotate 1
    52                              <1>  %rotate 1
    53 000003BF 488B4424F8          <1>  mov rax,[rsp-8]
    54                              <1>  %endif
    55                              <1> 
    56                              <1> 
    57 000003C4 E8B7040000          <1>  call %1
    58                              <1> 
    59                              <1> 
    60                              <1>  cleanup_call param_count, ret_param_count
   109                              <2>  %assign total_space ((%1 + %2) * 8)
   110                              <2>  %if (total_space % 16) != 0
   111                              <2>  %assign total_space total_space + 8
   112                              <2>  %endif
   113 000003C9 4883C440            <2>  add rsp, total_space
    61                              <1> 
   116                                  
   117                                      epilog    
    83                              <1>  popallq
   134 000003CD 415F                <2>  pop r15
   135 000003CF 415E                <2>  pop r14
   136 000003D1 415D                <2>  pop r13
   137 000003D3 415C                <2>  pop r12
   138 000003D5 415B                <2>  pop r11
   139 000003D7 415A                <2>  pop r10
   140 000003D9 4159                <2>  pop r9
   141 000003DB 4158                <2>  pop r8
   142 000003DD 5F                  <2>  pop rdi
   143 000003DE 5E                  <2>  pop rsi
   144 000003DF 5A                  <2>  pop rdx
   145 000003E0 59                  <2>  pop rcx
   146 000003E1 5B                  <2>  pop rbx
   147 000003E2 58                  <2>  pop rax
    84                              <1> 
    85 000003E3 4889EC              <1>  mov rsp, rbp
    86 000003E6 5D                  <1>  pop rbp
    87 000003E7 C3                  <1>  ret
   118                                  
   119                                  parse_system_params:
   120                                      prolog 2;
    65 000003E8 55                  <1>  push rbp
    66 000003E9 4889E5              <1>  mov rbp, rsp
    67 000003EC 488945F8            <1>  mov [rbp-8],rax
    68 000003F0 B802000000          <1>  mov rax, %1
    69 000003F5 4883C00F            <1>  add rax, 15
    70 000003F9 4883E0F0            <1>  and rax, ~15
    71 000003FD 4829C4              <1>  sub rsp, rax
    72 00000400 488B45F8            <1>  mov rax,[rbp-8]
    73                              <1>  pushallq
   117 00000404 50                  <2>  push rax
   118 00000405 53                  <2>  push rbx
   119 00000406 51                  <2>  push rcx
   120 00000407 52                  <2>  push rdx
   121 00000408 56                  <2>  push rsi
   122 00000409 57                  <2>  push rdi
   123 0000040A 4150                <2>  push r8
   124 0000040C 4151                <2>  push r9
   125 0000040E 4152                <2>  push r10
   126 00000410 4153                <2>  push r11
   127 00000412 4154                <2>  push r12
   128 00000414 4155                <2>  push r13
   129 00000416 4156                <2>  push r14
   130 00000418 4157                <2>  push r15
    74                              <1> 
    75                              <1> 
    76                              <1> 
    77                              <1> 
    78                              <1> 
    79                              <1> 
   121                                  
   122                                  
   123                                      epilog
    83                              <1>  popallq
   134 0000041A 415F                <2>  pop r15
   135 0000041C 415E                <2>  pop r14
   136 0000041E 415D                <2>  pop r13
   137 00000420 415C                <2>  pop r12
   138 00000422 415B                <2>  pop r11
   139 00000424 415A                <2>  pop r10
   140 00000426 4159                <2>  pop r9
   141 00000428 4158                <2>  pop r8
   142 0000042A 5F                  <2>  pop rdi
   143 0000042B 5E                  <2>  pop rsi
   144 0000042C 5A                  <2>  pop rdx
   145 0000042D 59                  <2>  pop rcx
   146 0000042E 5B                  <2>  pop rbx
   147 0000042F 58                  <2>  pop rax
    84                              <1> 
    85 00000430 4889EC              <1>  mov rsp, rbp
    86 00000433 5D                  <1>  pop rbp
    87 00000434 C3                  <1>  ret
   124                                      
   125                                  %include "../kernel/printk.asm"
     1                              <1> %ifndef PRINTK_ASM
     2                              <1> %define PRINTK_ASM
     3                              <1> 
     4                              <1> %include "../bootloader/global_def.asm"
     1                              <2> %ifndef GLOBAL_DEF_ASM
     2                              <2> %define GLOBAL_DEF_ASM
     3                              <2> 
     4                              <2> 
     5                              <2> ;|----------------------|
     6                              <2> ;|	100000 ~ END	|
     7                              <2> ;|	   KERNEL	|
     8                              <2> ;|----------------------|
     9                              <2> ;|	E0000 ~ 100000	|
    10                              <2> ;| Extended System BIOS |
    11                              <2> ;|----------------------|
    12                              <2> ;|	C0000 ~ Dffff	|
    13                              <2> ;|     Expansion Area   |
    14                              <2> ;|----------------------|
    15                              <2> ;|	A0000 ~ bffff	|
    16                              <2> ;|   Legacy Video Area  |
    17                              <2> ;|----------------------|
    18                              <2> ;|	9f000 ~ A0000	|
    19                              <2> ;|	 BIOS reserve	|
    20                              <2> ;|----------------------|
    21                              <2> ;|	90000 ~ 9f000	|
    22                              <2> ;|	 kernel tmpbuf	|
    23                              <2> ;|----------------------|
    24                              <2> ;|	10000 ~ 90000	|
    25                              <2> ;|	   LOADER	|
    26                              <2> ;|----------------------|
    27                              <2> ;|	8000 ~ 10000	|
    28                              <2> ;|	  VBE info	|
    29                              <2> ;|----------------------|
    30                              <2> ;|	7e00 ~ 8000	|
    31                              <2> ;|	  mem info	|
    32                              <2> ;|----------------------|
    33                              <2> ;|	7c00 ~ 7e00	|
    34                              <2> ;|	 MBR (BOOT)	|
    35                              <2> ;|----------------------|
    36                              <2> ;|	0000 ~ 7c00	|
    37                              <2> ;|	 BIOS Code	|
    38                              <2> ;|----------------------|
    39                              <2> 
    40                              <2> 
    41                              <2> ;_______________________________________________________
    42                              <2> ; START	END	    SIZE	        USED
    43                              <2> ; FFFF0	FFFFF	16B	        BIOS System Entry
    44                              <2> ; F0000	FFFEF	64KB-16B	BIOS System Code
    45                              <2> ; C8000	EFFFF	160KB	    ROM/Mapped IO
    46                              <2> ; C0000	C7FFF	32KB	    Graphic Adapter BIOS
    47                              <2> ; B8000	BFFFF	32KB	    Chroma Text Video Buffer
    48                              <2> ; B0000	B7FFF	32KB	    Mono Text Video Buffer
    49                              <2> ; A0000	AFFFF	64KB	    Graphic Video Buffer
    50                              <2> ; 9FC00	9FFFF	1KB	        Extended BIOS Data Area
    51                              <2> ; 7E00	9FBFF	622080B     Useable 608KB	
    52                              <2> ; 7C00	7DFF	512B	    MBR
    53                              <2> ; 500	7BFF	30464B      Useable 30KB	
    54                              <2> ; 400	4FF	    256B	    BIOS Data Area
    55                              <2> ; 000	3FF	    1KB	        IVT
    56                              <2> ; _____________________________________________________
    57                              <2> 
    58                              <2> 
    59                              <2> 
    60                              <2> 
    61                              <2> 
    62                              <2> 
    63                              <2> 
    64                              <2> 
    65                              <2> 
    66                              <2> 
    67                              <2> 
    68                              <2> ;|----------------------|
    69                              <2> ;|	100000 ~ END	|
    70                              <2> ;|	   KERNEL	|
    71                              <2> ;|----------------------|
    72                              <2> ;|	E0000 ~ 100000	|
    73                              <2> ;| Extended System BIOS |
    74                              <2> ;|----------------------|
    75                              <2> ;|	C0000 ~ Dffff	|
    76                              <2> ;|     Expansion Area   |
    77                              <2> ;|----------------------|
    78                              <2> ;|	A0000 ~ bffff	|
    79                              <2> ;|   Legacy Video Area  |
    80                              <2> ;|----------------------|
    81                              <2> ;|	9F000 ~ A0000	|
    82                              <2> ;|	 BIOS reserve	|
    83                              <2> ;|----------------------|
    84                              <2> ;|	90000 ~ 9F000	|
    85                              <2> ;|	 kernel tmpbuf	|
    86                              <2> ;|----------------------|
    87                              <2> ;|	10000 ~ 90000	|
    88                              <2> ;|	   LOADER	|
    89                              <2> ;|----------------------|
    90                              <2> ;|	8000 ~ 10000	|
    91                              <2> ;|	  VBE info	|
    92                              <2> ;|----------------------|
    93                              <2> ;|	7E00 ~ 8000	|
    94                              <2> ;|	  mem info	|
    95                              <2> ;|----------------------|
    96                              <2> ;|	7C00 ~ 7E00	|
    97                              <2> ;|	 MBR (BOOT)	|
    98                              <2> ;|----------------------|
    99                              <2> ;|	0000 ~ 7C00	|
   100                              <2> ;|	 BIOS Code	|
   101                              <2> ;|----------------------|
   102                              <2> 
   103                              <2> 
   104                              <2> 
   105                              <2> 
   106                              <2> 
   107                              <2> 
   108                              <2> 
   109                              <2> 
   110                              <2> 
   111                              <2> 
   112                              <2> ;______________________________________________
   113                              <2> ; ----------------Vbe Info Block------------
   114                              <2> ; typedef struct {
   115                              <2> ;     unsigned char       vbe_signature;
   116                              <2> ;     unsigned short      vbe_version;
   117                              <2> ;     unsigned long       oem_string_ptr;
   118                              <2> ;     unsigned char       capabilities;
   119                              <2> ;     unsigned long       video_mode_ptr;
   120                              <2> ;     unsigned short      total_memory;
   121                              <2> ;     unsigned short      oem_software_rev;
   122                              <2> ;     unsigned long       oem_vendor_name_ptr;
   123                              <2> ;     unsigned long       oem_product_name_ptr;
   124                              <2> ;     unsigned long       oem_product_rev_ptr;
   125                              <2> ;     unsigned char       reserved[222];
   126                              <2> ;     unsigned char       oem_data[256];  
   127                              <2> ; } VbeInfoBlock;
   128                              <2> ;______________________________________________
   129                              <2> 
   130                              <2> 
   131                              <2> BaseOfKernelFile	equ	0x00
   132                              <2> OffsetOfKernelFile	equ	0x100000
   133                              <2> BaseTmpOfKernelAddr	equ	0x9000
   134                              <2> OffsetTmpOfKernelFile	equ	0x0000
   135                              <2> VBEStructBufferAddr	equ	0x8000
   136                              <2> VBEModeStructBufferAddr	equ	0x8200
   137                              <2> MemoryStructBufferAddr	equ	0x8800
   138                              <2> 
   139                              <2> 
   140                              <2> 
   141                              <2> KernelSpaceUpperAddress equ 0xFFFF800000000000
   142                              <2> 
   143                              <2> GDTPointerUpperAddr equ 0xFFFF800000104000
   144                              <2> IDTPointerUpperAddr equ 0xFFFF80000010400a
   145                              <2> TSSPointerUpperAddr equ 0xFFFF800000104014
   146                              <2> 
   147                              <2> VideoFrameBufferAddress equ 0xFFFF800003000000
   148                              <2> KernelStartSectorNum	equ	16
   149                              <2> 
   150                              <2> 
   151                              <2> %define PLATFORM_QEMU_X64 1
   152                              <2> %define PLATFORM_X64 2
   153                              <2> 
   154                              <2> %define DEBUG_PLATFORM PLATFORM_QEMU_X64
   155                              <2> %define DEBUG_MODE 1
   156                              <2> 
   157                              <2> 
   158                              <2> MasterSectorReadNumPort    equ	0x1F2
   159                              <2> MasterSectorReadPort    equ	0x1F0
   160                              <2> 
   161                              <2> SlaveReadNumPort    equ	0x172
   162                              <2> SlaveSectorReadPort    equ	0x170
   163                              <2> 
   164                              <2> SectorReadNumPort    equ	MasterSectorReadNumPort
   165                              <2> SectorReadPort    equ	MasterSectorReadPort
   166                              <2> 
   167                              <2> struc vbe_info_block
   168                              <2>     .signature                 resb 4    ; 'VESA' signature (must be "VESA")
   169                              <2>     .version                   resw 1    ; VBE version (e.g., 0x0300 for VBE 3.0)
   170                              <2>     .oem_string_ptr            resd 1    ; Pointer to OEM string
   171                              <2>     .capabilities              resd 1    ; Capabilities of the video card
   172                              <2>     .video_mode_ptr            resd 1    ; Pointer to supported video modes
   173                              <2>     .total_memory              resw 1    ; Total memory in 64KB blocks
   174                              <2> 
   175                              <2>     ; VBE 2.0+ fields
   176                              <2>     .oem_software_rev          resw 1    ; OEM software revision
   177                              <2>     .oem_vendor_name_ptr       resd 1    ; Pointer to OEM vendor name string
   178                              <2>     .oem_product_name_ptr      resd 1    ; Pointer to OEM product name string
   179                              <2>     .oem_product_rev_ptr       resd 1    ; Pointer to OEM product revision string
   180                              <2>     .reserved                  resb 222  ; Reserved for VBE implementation
   181                              <2>     .oem_data                  resb 256  ; Data area for OEM-specific information
   182                              <2> endstruc
   183                              <2> 
   184                              <2> struc vbe_mode_info_block
   185                              <2>     .attributes                resw 1    ; Mode attributes
   186                              <2>     .winA_attributes           resb 1    ; Window A attributes
   187                              <2>     .winB_attributes           resb 1    ; Window B attributes
   188                              <2>     .win_granularity           resw 1    ; Window granularity in KB
   189                              <2>     .win_size                  resw 1    ; Window size in KB
   190                              <2>     .winA_segment              resw 1    ; Window A segment
   191                              <2>     .winB_segment              resw 1    ; Window B segment
   192                              <2>     .win_func_ptr              resd 1    ; Pointer to window function
   193                              <2>     .bytes_per_scanline        resw 1    ; Bytes per scanline
   194                              <2> 
   195                              <2>     ; VBE 1.2+ fields
   196                              <2>     .x_resolution              resw 1    ; Horizontal resolution in pixels
   197                              <2>     .y_resolution              resw 1    ; Vertical resolution in pixels
   198                              <2>     .x_char_size               resb 1    ; Character cell width in pixels
   199                              <2>     .y_char_size               resb 1    ; Character cell height in pixels
   200                              <2>     .number_of_planes          resb 1    ; Number of memory planes
   201                              <2>     .bits_per_pixel            resb 1    ; Bits per pixel
   202                              <2>     .number_of_banks           resb 1    ; Number of banks
   203                              <2>     .memory_model              resb 1    ; Memory model type
   204                              <2>     .bank_size                 resb 1    ; Bank size in KB
   205                              <2>     .number_of_image_pages     resb 1    ; Number of images
   206                              <2>     .reserved1                 resb 1    ; Reserved
   207                              <2> 
   208                              <2>     ; Direct Color fields (VBE 1.2+)
   209                              <2>     .red_mask_size             resb 1    ; Size of direct color red mask
   210                              <2>     .red_field_position        resb 1    ; Bit position of red mask
   211                              <2>     .green_mask_size           resb 1    ; Size of direct color green mask
   212                              <2>     .green_field_position      resb 1    ; Bit position of green mask
   213                              <2>     .blue_mask_size            resb 1    ; Size of direct color blue mask
   214                              <2>     .blue_field_position       resb 1    ; Bit position of blue mask
   215                              <2>     .reserved_mask_size        resb 1    ; Size of direct color reserved mask
   216                              <2>     .reserved_field_position   resb 1    ; Bit position of reserved mask
   217                              <2>     .direct_color_mode_info    resb 1    ; Direct color mode attributes
   218                              <2> 
   219                              <2>     ; VBE 2.0+ fields
   220                              <2>     .phys_base_ptr             resd 1    ; Physical address for flat memory frame buffer
   221                              <2>     .reserved2                 resd 1    ; Reserved
   222                              <2>     .reserved3                 resw 1    ; Reserved
   223                              <2> 
   224                              <2>     ; VBE 3.0+ fields
   225                              <2>     .lin_bytes_per_scanline    resw 1    ; Bytes per scanline for linear modes
   226                              <2>     .bnk_number_of_image_pages resb 1    ; Number of images for banked modes
   227                              <2>     .lin_number_of_image_pages resb 1    ; Number of images for linear modes
   228                              <2>     .lin_red_mask_size         resb 1    ; Size of direct color red mask (linear modes)
   229                              <2>     .lin_red_field_position    resb 1    ; Bit position of red mask (linear modes)
   230                              <2>     .lin_green_mask_size       resb 1    ; Size of direct color green mask (linear modes)
   231                              <2>     .lin_green_field_position  resb 1    ; Bit position of green mask (linear modes)
   232                              <2>     .lin_blue_mask_size        resb 1    ; Size of direct color blue mask (linear modes)
   233                              <2>     .lin_blue_field_position   resb 1    ; Bit position of blue mask (linear modes)
   234                              <2>     .lin_reserved_mask_size    resb 1    ; Size of direct color reserved mask (linear modes)
   235                              <2>     .lin_reserved_field_position resb 1  ; Bit position of reserved mask (linear modes)
   236                              <2>     .max_pixel_clock           resd 1    ; Maximum pixel clock (Hz)
   237                              <2>     .reserved4                 resb 190  ; Reserved for future expansion
   238                              <2> endstruc
   239                              <2> 
   240                              <2> struc e820_memory_entry
   241                              <2>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   242                              <2>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   243                              <2>     .length_low               resd 1    ; Lower 32 bits of the length
   244                              <2>     .length_high              resd 1    ; Upper 32 bits of the length
   245                              <2>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   246                              <2>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   247                              <2> endstruc
   248                              <2> 
   249                              <2> %endif
     5                              <1> %include "../kernel/video.asm"
     1                              <2> %ifndef VIDEO_ASM
     2                              <2> %define VIDEO_ASM
     3                              <2> %include "../bootloader/global_def.asm"
     1                              <3> %ifndef GLOBAL_DEF_ASM
     2                              <3> %define GLOBAL_DEF_ASM
     3                              <3> 
     4                              <3> 
     5                              <3> ;|----------------------|
     6                              <3> ;|	100000 ~ END	|
     7                              <3> ;|	   KERNEL	|
     8                              <3> ;|----------------------|
     9                              <3> ;|	E0000 ~ 100000	|
    10                              <3> ;| Extended System BIOS |
    11                              <3> ;|----------------------|
    12                              <3> ;|	C0000 ~ Dffff	|
    13                              <3> ;|     Expansion Area   |
    14                              <3> ;|----------------------|
    15                              <3> ;|	A0000 ~ bffff	|
    16                              <3> ;|   Legacy Video Area  |
    17                              <3> ;|----------------------|
    18                              <3> ;|	9f000 ~ A0000	|
    19                              <3> ;|	 BIOS reserve	|
    20                              <3> ;|----------------------|
    21                              <3> ;|	90000 ~ 9f000	|
    22                              <3> ;|	 kernel tmpbuf	|
    23                              <3> ;|----------------------|
    24                              <3> ;|	10000 ~ 90000	|
    25                              <3> ;|	   LOADER	|
    26                              <3> ;|----------------------|
    27                              <3> ;|	8000 ~ 10000	|
    28                              <3> ;|	  VBE info	|
    29                              <3> ;|----------------------|
    30                              <3> ;|	7e00 ~ 8000	|
    31                              <3> ;|	  mem info	|
    32                              <3> ;|----------------------|
    33                              <3> ;|	7c00 ~ 7e00	|
    34                              <3> ;|	 MBR (BOOT)	|
    35                              <3> ;|----------------------|
    36                              <3> ;|	0000 ~ 7c00	|
    37                              <3> ;|	 BIOS Code	|
    38                              <3> ;|----------------------|
    39                              <3> 
    40                              <3> 
    41                              <3> ;_______________________________________________________
    42                              <3> ; START	END	    SIZE	        USED
    43                              <3> ; FFFF0	FFFFF	16B	        BIOS System Entry
    44                              <3> ; F0000	FFFEF	64KB-16B	BIOS System Code
    45                              <3> ; C8000	EFFFF	160KB	    ROM/Mapped IO
    46                              <3> ; C0000	C7FFF	32KB	    Graphic Adapter BIOS
    47                              <3> ; B8000	BFFFF	32KB	    Chroma Text Video Buffer
    48                              <3> ; B0000	B7FFF	32KB	    Mono Text Video Buffer
    49                              <3> ; A0000	AFFFF	64KB	    Graphic Video Buffer
    50                              <3> ; 9FC00	9FFFF	1KB	        Extended BIOS Data Area
    51                              <3> ; 7E00	9FBFF	622080B     Useable 608KB	
    52                              <3> ; 7C00	7DFF	512B	    MBR
    53                              <3> ; 500	7BFF	30464B      Useable 30KB	
    54                              <3> ; 400	4FF	    256B	    BIOS Data Area
    55                              <3> ; 000	3FF	    1KB	        IVT
    56                              <3> ; _____________________________________________________
    57                              <3> 
    58                              <3> 
    59                              <3> 
    60                              <3> 
    61                              <3> 
    62                              <3> 
    63                              <3> 
    64                              <3> 
    65                              <3> 
    66                              <3> 
    67                              <3> 
    68                              <3> ;|----------------------|
    69                              <3> ;|	100000 ~ END	|
    70                              <3> ;|	   KERNEL	|
    71                              <3> ;|----------------------|
    72                              <3> ;|	E0000 ~ 100000	|
    73                              <3> ;| Extended System BIOS |
    74                              <3> ;|----------------------|
    75                              <3> ;|	C0000 ~ Dffff	|
    76                              <3> ;|     Expansion Area   |
    77                              <3> ;|----------------------|
    78                              <3> ;|	A0000 ~ bffff	|
    79                              <3> ;|   Legacy Video Area  |
    80                              <3> ;|----------------------|
    81                              <3> ;|	9F000 ~ A0000	|
    82                              <3> ;|	 BIOS reserve	|
    83                              <3> ;|----------------------|
    84                              <3> ;|	90000 ~ 9F000	|
    85                              <3> ;|	 kernel tmpbuf	|
    86                              <3> ;|----------------------|
    87                              <3> ;|	10000 ~ 90000	|
    88                              <3> ;|	   LOADER	|
    89                              <3> ;|----------------------|
    90                              <3> ;|	8000 ~ 10000	|
    91                              <3> ;|	  VBE info	|
    92                              <3> ;|----------------------|
    93                              <3> ;|	7E00 ~ 8000	|
    94                              <3> ;|	  mem info	|
    95                              <3> ;|----------------------|
    96                              <3> ;|	7C00 ~ 7E00	|
    97                              <3> ;|	 MBR (BOOT)	|
    98                              <3> ;|----------------------|
    99                              <3> ;|	0000 ~ 7C00	|
   100                              <3> ;|	 BIOS Code	|
   101                              <3> ;|----------------------|
   102                              <3> 
   103                              <3> 
   104                              <3> 
   105                              <3> 
   106                              <3> 
   107                              <3> 
   108                              <3> 
   109                              <3> 
   110                              <3> 
   111                              <3> 
   112                              <3> ;______________________________________________
   113                              <3> ; ----------------Vbe Info Block------------
   114                              <3> ; typedef struct {
   115                              <3> ;     unsigned char       vbe_signature;
   116                              <3> ;     unsigned short      vbe_version;
   117                              <3> ;     unsigned long       oem_string_ptr;
   118                              <3> ;     unsigned char       capabilities;
   119                              <3> ;     unsigned long       video_mode_ptr;
   120                              <3> ;     unsigned short      total_memory;
   121                              <3> ;     unsigned short      oem_software_rev;
   122                              <3> ;     unsigned long       oem_vendor_name_ptr;
   123                              <3> ;     unsigned long       oem_product_name_ptr;
   124                              <3> ;     unsigned long       oem_product_rev_ptr;
   125                              <3> ;     unsigned char       reserved[222];
   126                              <3> ;     unsigned char       oem_data[256];  
   127                              <3> ; } VbeInfoBlock;
   128                              <3> ;______________________________________________
   129                              <3> 
   130                              <3> 
   131                              <3> BaseOfKernelFile	equ	0x00
   132                              <3> OffsetOfKernelFile	equ	0x100000
   133                              <3> BaseTmpOfKernelAddr	equ	0x9000
   134                              <3> OffsetTmpOfKernelFile	equ	0x0000
   135                              <3> VBEStructBufferAddr	equ	0x8000
   136                              <3> VBEModeStructBufferAddr	equ	0x8200
   137                              <3> MemoryStructBufferAddr	equ	0x8800
   138                              <3> 
   139                              <3> 
   140                              <3> 
   141                              <3> KernelSpaceUpperAddress equ 0xFFFF800000000000
   142                              <3> 
   143                              <3> GDTPointerUpperAddr equ 0xFFFF800000104000
   144                              <3> IDTPointerUpperAddr equ 0xFFFF80000010400a
   145                              <3> TSSPointerUpperAddr equ 0xFFFF800000104014
   146                              <3> 
   147                              <3> VideoFrameBufferAddress equ 0xFFFF800003000000
   148                              <3> KernelStartSectorNum	equ	16
   149                              <3> 
   150                              <3> 
   151                              <3> %define PLATFORM_QEMU_X64 1
   152                              <3> %define PLATFORM_X64 2
   153                              <3> 
   154                              <3> %define DEBUG_PLATFORM PLATFORM_QEMU_X64
   155                              <3> %define DEBUG_MODE 1
   156                              <3> 
   157                              <3> 
   158                              <3> MasterSectorReadNumPort    equ	0x1F2
   159                              <3> MasterSectorReadPort    equ	0x1F0
   160                              <3> 
   161                              <3> SlaveReadNumPort    equ	0x172
   162                              <3> SlaveSectorReadPort    equ	0x170
   163                              <3> 
   164                              <3> SectorReadNumPort    equ	MasterSectorReadNumPort
   165                              <3> SectorReadPort    equ	MasterSectorReadPort
   166                              <3> 
   167                              <3> struc vbe_info_block
   168                              <3>     .signature                 resb 4    ; 'VESA' signature (must be "VESA")
   169                              <3>     .version                   resw 1    ; VBE version (e.g., 0x0300 for VBE 3.0)
   170                              <3>     .oem_string_ptr            resd 1    ; Pointer to OEM string
   171                              <3>     .capabilities              resd 1    ; Capabilities of the video card
   172                              <3>     .video_mode_ptr            resd 1    ; Pointer to supported video modes
   173                              <3>     .total_memory              resw 1    ; Total memory in 64KB blocks
   174                              <3> 
   175                              <3>     ; VBE 2.0+ fields
   176                              <3>     .oem_software_rev          resw 1    ; OEM software revision
   177                              <3>     .oem_vendor_name_ptr       resd 1    ; Pointer to OEM vendor name string
   178                              <3>     .oem_product_name_ptr      resd 1    ; Pointer to OEM product name string
   179                              <3>     .oem_product_rev_ptr       resd 1    ; Pointer to OEM product revision string
   180                              <3>     .reserved                  resb 222  ; Reserved for VBE implementation
   181                              <3>     .oem_data                  resb 256  ; Data area for OEM-specific information
   182                              <3> endstruc
   183                              <3> 
   184                              <3> struc vbe_mode_info_block
   185                              <3>     .attributes                resw 1    ; Mode attributes
   186                              <3>     .winA_attributes           resb 1    ; Window A attributes
   187                              <3>     .winB_attributes           resb 1    ; Window B attributes
   188                              <3>     .win_granularity           resw 1    ; Window granularity in KB
   189                              <3>     .win_size                  resw 1    ; Window size in KB
   190                              <3>     .winA_segment              resw 1    ; Window A segment
   191                              <3>     .winB_segment              resw 1    ; Window B segment
   192                              <3>     .win_func_ptr              resd 1    ; Pointer to window function
   193                              <3>     .bytes_per_scanline        resw 1    ; Bytes per scanline
   194                              <3> 
   195                              <3>     ; VBE 1.2+ fields
   196                              <3>     .x_resolution              resw 1    ; Horizontal resolution in pixels
   197                              <3>     .y_resolution              resw 1    ; Vertical resolution in pixels
   198                              <3>     .x_char_size               resb 1    ; Character cell width in pixels
   199                              <3>     .y_char_size               resb 1    ; Character cell height in pixels
   200                              <3>     .number_of_planes          resb 1    ; Number of memory planes
   201                              <3>     .bits_per_pixel            resb 1    ; Bits per pixel
   202                              <3>     .number_of_banks           resb 1    ; Number of banks
   203                              <3>     .memory_model              resb 1    ; Memory model type
   204                              <3>     .bank_size                 resb 1    ; Bank size in KB
   205                              <3>     .number_of_image_pages     resb 1    ; Number of images
   206                              <3>     .reserved1                 resb 1    ; Reserved
   207                              <3> 
   208                              <3>     ; Direct Color fields (VBE 1.2+)
   209                              <3>     .red_mask_size             resb 1    ; Size of direct color red mask
   210                              <3>     .red_field_position        resb 1    ; Bit position of red mask
   211                              <3>     .green_mask_size           resb 1    ; Size of direct color green mask
   212                              <3>     .green_field_position      resb 1    ; Bit position of green mask
   213                              <3>     .blue_mask_size            resb 1    ; Size of direct color blue mask
   214                              <3>     .blue_field_position       resb 1    ; Bit position of blue mask
   215                              <3>     .reserved_mask_size        resb 1    ; Size of direct color reserved mask
   216                              <3>     .reserved_field_position   resb 1    ; Bit position of reserved mask
   217                              <3>     .direct_color_mode_info    resb 1    ; Direct color mode attributes
   218                              <3> 
   219                              <3>     ; VBE 2.0+ fields
   220                              <3>     .phys_base_ptr             resd 1    ; Physical address for flat memory frame buffer
   221                              <3>     .reserved2                 resd 1    ; Reserved
   222                              <3>     .reserved3                 resw 1    ; Reserved
   223                              <3> 
   224                              <3>     ; VBE 3.0+ fields
   225                              <3>     .lin_bytes_per_scanline    resw 1    ; Bytes per scanline for linear modes
   226                              <3>     .bnk_number_of_image_pages resb 1    ; Number of images for banked modes
   227                              <3>     .lin_number_of_image_pages resb 1    ; Number of images for linear modes
   228                              <3>     .lin_red_mask_size         resb 1    ; Size of direct color red mask (linear modes)
   229                              <3>     .lin_red_field_position    resb 1    ; Bit position of red mask (linear modes)
   230                              <3>     .lin_green_mask_size       resb 1    ; Size of direct color green mask (linear modes)
   231                              <3>     .lin_green_field_position  resb 1    ; Bit position of green mask (linear modes)
   232                              <3>     .lin_blue_mask_size        resb 1    ; Size of direct color blue mask (linear modes)
   233                              <3>     .lin_blue_field_position   resb 1    ; Bit position of blue mask (linear modes)
   234                              <3>     .lin_reserved_mask_size    resb 1    ; Size of direct color reserved mask (linear modes)
   235                              <3>     .lin_reserved_field_position resb 1  ; Bit position of reserved mask (linear modes)
   236                              <3>     .max_pixel_clock           resd 1    ; Maximum pixel clock (Hz)
   237                              <3>     .reserved4                 resb 190  ; Reserved for future expansion
   238                              <3> endstruc
   239                              <3> 
   240                              <3> struc e820_memory_entry
   241                              <3>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   242                              <3>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   243                              <3>     .length_low               resd 1    ; Lower 32 bits of the length
   244                              <3>     .length_high              resd 1    ; Upper 32 bits of the length
   245                              <3>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   246                              <3>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   247                              <3> endstruc
   248                              <3> 
   249                              <3> %endif
     4                              <2> %include "../kernel/stddef.asm"
     1                              <3> %ifndef STDDEF_ASM
     2                              <3> %define STDDEF_ASM
     3                              <3> 
     4                              <3> ;-----------Calling Conventions Standard------------;
     5                              <3> %define USE_CC_STANDARD
     6                              <3> %ifdef USE_CC_STANDARD
     7                              <3> ;caller maintain the stack balance 
     8                              <3>     ; debug_times: db 0
     9                              <3>     ; cmp byte [rel debug_times],3
    10                              <3>     ; je debug_stop
    11                              <3>     ; add byte [rel debug_times],1
    12                              <3> ; -------------------------------
    13                              <3> ; 栈帧结构定义
    14                              <3> ; -------------------------------
    15                              <3> ; 调用后的栈布局:
    16                              <3> ; [rsp+0x00] 返回地址 (8字节)
    17                              <3> ; [rsp+0x08] 旧RBP     (8字节) <- rbp指向这里
    18                              <3> ; [rsp+0x10] 参数1     (8字节)
    19                              <3> ; [rsp+0x18] 参数2
    20                              <3> ; ...
    21                              <3> ; [rsp+X]    局部变量区
    22                              <3> ; -------------------------------
    23                              <3> 
    24                              <3> %define PARAM_OFFSET   16      ; 第一个参数的偏移量(返回地址8 + 旧RBP8)
    25                              <3> %macro function 1-* ; 1=函数名, 2=返回参数数量, 3=参数列表
    26                              <3>     %assign param_count %0 - 2 ; 参数数量
    27                              <3>     
    28                              <3>     %if param_count < 0
    29                              <3>         %assign param_count 0 ; 如果没有参数，设置为 0
    30                              <3>     %endif
    31                              <3>     %if param_count < 1
    32                              <3>         %assign ret_param_count 0 ; 返回参数数量
    33                              <3>     %else
    34                              <3>         %assign ret_param_count %2 ; 返回参数数量
    35                              <3>     %endif
    36                              <3> 
    37                              <3>     ; 准备调用
    38                              <3>     prepare_call param_count, ret_param_count
    39                              <3> 
    40                              <3>     ; 如果有参数，将参数压入栈
    41                              <3>     %if param_count > 0
    42                              <3>         %assign i 0
    43                              <3>         mov [rsp-8], rax ; 保存返回地址
    44                              <3>         %rep param_count
    45                              <3>             %rotate 1
    46                              <3>             mov rax, %2
    47                              <3>             mov [rsp + 8*i], rax ; 将参数压入栈
    48                              <3>             %assign i i+1
    49                              <3>         %endrep
    50                              <3>         ; mov rax,
    51                              <3>         %rotate 1
    52                              <3>         %rotate 1
    53                              <3>         mov rax,[rsp-8]; 保存返回地址
    54                              <3>     %endif
    55                              <3> 
    56                              <3>     ; 调用函数
    57                              <3>     call %1
    58                              <3> 
    59                              <3>     ; 清理栈空间
    60                              <3>     cleanup_call param_count, ret_param_count
    61                              <3> 
    62                              <3> %endmacro
    63                              <3> 
    64                              <3> %macro prolog 1;local var size(bytes)
    65                              <3>     push rbp
    66                              <3>     mov rbp, rsp
    67                              <3>     mov [rbp-8],rax
    68                              <3>     mov rax, %1
    69                              <3>     add rax, 15
    70                              <3>     and rax, ~15
    71                              <3>     sub rsp, rax
    72                              <3>     mov rax,[rbp-8]
    73                              <3>     pushallq
    74                              <3>     
    75                              <3>     
    76                              <3>     ; 调试信息可以放在这里
    77                              <3>     ; %ifdef DEBUG
    78                              <3>     ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
    79                              <3>     ; %endif
    80                              <3> %endmacro
    81                              <3> 
    82                              <3> %macro epilog 0
    83                              <3>     popallq
    84                              <3> 
    85                              <3>     mov rsp, rbp
    86                              <3>     pop rbp
    87                              <3>     ret
    88                              <3> %endmacro
    89                              <3> 
    90                              <3> %macro get_param 2;1=register, 2=param index(from 1)
    91                              <3>     mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    92                              <3> %endmacro
    93                              <3> 
    94                              <3> %macro set_ret_param 2;1=register, 2=param index(from 1)
    95                              <3>     mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
    96                              <3> %endmacro
    97                              <3> 
    98                              <3> %macro prepare_call 2;1=param count, 2=return param count
    99                              <3>     %assign total_space ((%1 + %2) * 8)
   100                              <3>     
   101                              <3>     %if (total_space % 16) != 0
   102                              <3>         %assign total_space total_space + 8  ; 添加填充
   103                              <3>     %endif
   104                              <3>     
   105                              <3>     sub rsp, total_space
   106                              <3> %endmacro
   107                              <3> 
   108                              <3> %macro cleanup_call 2;1=param count, 2=return param count
   109                              <3>     %assign total_space ((%1 + %2) * 8)
   110                              <3>     %if (total_space % 16) != 0
   111                              <3>         %assign total_space total_space + 8
   112                              <3>     %endif
   113                              <3>     add rsp, total_space
   114                              <3> %endmacro
   115                              <3> 
   116                              <3> %macro pushallq 0
   117                              <3>     push rax
   118                              <3>     push rbx
   119                              <3>     push rcx
   120                              <3>     push rdx
   121                              <3>     push rsi
   122                              <3>     push rdi
   123                              <3>     push r8
   124                              <3>     push r9
   125                              <3>     push r10
   126                              <3>     push r11
   127                              <3>     push r12
   128                              <3>     push r13
   129                              <3>     push r14
   130                              <3>     push r15
   131                              <3> %endmacro
   132                              <3> 
   133                              <3> %macro popallq 0
   134                              <3>     pop r15
   135                              <3>     pop r14
   136                              <3>     pop r13
   137                              <3>     pop r12
   138                              <3>     pop r11
   139                              <3>     pop r10
   140                              <3>     pop r9
   141                              <3>     pop r8
   142                              <3>     pop rdi
   143                              <3>     pop rsi
   144                              <3>     pop rdx
   145                              <3>     pop rcx
   146                              <3>     pop rbx
   147                              <3>     pop rax
   148                              <3> %endmacro
   149                              <3> 
   150                              <3> %endif
   151                              <3> ;---------------------ABI Standard------------------;
   152                              <3> %define USE_ABI_STANDARD
   153                              <3> %ifdef USE_ABI_STANDARD
   154                              <3> 
   155                              <3> 
   156                              <3>     %define ABI_File_None   0       ; 无文件类型
   157                              <3>     %define ABI_File_REL    1       ; 可重定位文件
   158                              <3>     %define ABI_File_EXEC   2       ; 可执行文件
   159                              <3>     %define ABI_File_DYN    3       ; 共享目标文件
   160                              <3>     %define ABI_File_CORE   4       ; 核心文件
   161                              <3> 
   162                              <3>     %define Section_Type_NULL    0      ; 未使用
   163                              <3>     %define Section_Type_LOAD    1      ; 可加载段
   164                              <3>     %define Section_Type_DYNAMIC 2      ; 动态链接信息
   165                              <3>     %define Section_Type_INTERP  3      ; 解释器路径
   166                              <3>     %define Section_Type_NOTE    4      ; 辅助信息
   167                              <3>     %define Section_Type_SHLIB   5      ; 保留
   168                              <3> 
   169                              <3>     %macro ABI_HEADER 4 ;1=File Type, 2=Entry Point Address, 3=Section Header Offset, 4=Section Header Count
   170                              <3>         db 0xA5, 'A', 'B', 'I'     ; ABI Magic Number
   171                              <3>         db 1                       ; Encode Type
   172                              <3>         db 1                       ; ABI Version
   173                              <3> 
   174                              <3>         dw %1                      ; ABI File Type
   175                              <3>         dq %2                      ; Entry Point Address
   176                              <3>         dw 32                      ; ABI Headers Size
   177                              <3> 
   178                              <3>         dq %3                      ; Section Header Offset
   179                              <3>         dw 32                      ; Section Header Size
   180                              <3>         dw %4                      ; Section Header Count
   181                              <3>         dw 0                       ; Symble Table Entry Size
   182                              <3>     %endmacro
   183                              <3>     STRUC struct_ABI_HEADER
   184                              <3>         .magic:         resb 4    ; ABI Magic Number (4 bytes)
   185                              <3>         .encode_type:   resb 1    ; Encode Type (1 byte)
   186                              <3>         .abi_version:   resb 1    ; ABI Version (1 byte)
   187                              <3>         .file_type:     resw 1    ; ABI File Type (2 bytes)
   188                              <3>         .entry_point:   resq 1    ; Entry Point Address (8 bytes)
   189                              <3>         .header_size:   resw 1    ; ABI Headers Size (2 bytes)
   190                              <3>         .section_offset: resq 1   ; Section Header Offset (8 bytes)
   191                              <3>         .section_size:  resw 1    ; Section Header Size (2 bytes)
   192                              <3>         .section_count: resw 1    ; Section Header Count (2 bytes)
   193                              <3>         .sym_table_size: resw 1   ; Symbol Table Entry Size (2 bytes)
   194                              <3>     ENDSTRUC
   195                              <3> 
   196                              <3>     %macro SECTION_HEADER 4 ;1=Section Type, 2=Virtual Address, 3=Section Offset, 4=Section Size
   197                              <3>         dq %1                  ; Section Type
   198                              <3>         dq %2                  ; Virtual Address
   199                              <3>         dq %3                  ; Section Offset
   200                              <3>         dq %4                  ; Section Size
   201                              <3>     %endmacro
   202                              <3>     STRUC struct_SECTION_HEADER
   203                              <3>         .type:      resq 1    ; Section Type (8 bytes)
   204                              <3>         .vaddr:     resq 1    ; Virtual Address (8 bytes)
   205                              <3>         .offset:    resq 1    ; Section Offset (8 bytes)
   206                              <3>         .size:      resq 1    ; Section Size (8 bytes)
   207                              <3>     ENDSTRUC
   208                              <3> %endif
   209                              <3> 
   210                              <3> %endif
     5                              <2> [BITS 64]
     6                              <2> struc video_info
     7                              <2>     .start:
     8 00000000 ????                <2>     .xpixel:            resw 1      
     9 00000002 ????                <2>     .ypixel:            resw 1       
    10 00000004 ??                  <2>     .byte_per_pixel:    resb 1     
    11 00000005 ????????????????    <2>     .video_framebuffer: resq 1
    12                              <2>     .end:
    13                              <2>     endstruc
    14                              <2> video_info_ptr:
    15                              <2>     istruc video_info
    16 00000435 0000                <2>         at video_info.xpixel, dw 0
    17 00000437 0000                <2>         at video_info.ypixel, dw 0
    18 00000439 00                  <2>         at video_info.byte_per_pixel, db 0
    19 0000043A 0000000000000000    <2>         at video_info.video_framebuffer, dq 0
    20                              <2>     iend
    21                              <2> 
    22                              <2> video_init:;ARGB
    23                              <2>     prolog 0;
    65 00000442 55                  <3>  push rbp
    66 00000443 4889E5              <3>  mov rbp, rsp
    67 00000446 488945F8            <3>  mov [rbp-8],rax
    68 0000044A B800000000          <3>  mov rax, %1
    69 0000044F 4883C00F            <3>  add rax, 15
    70 00000453 4883E0F0            <3>  and rax, ~15
    71 00000457 4829C4              <3>  sub rsp, rax
    72 0000045A 488B45F8            <3>  mov rax,[rbp-8]
    73                              <3>  pushallq
   117 0000045E 50                  <4>  push rax
   118 0000045F 53                  <4>  push rbx
   119 00000460 51                  <4>  push rcx
   120 00000461 52                  <4>  push rdx
   121 00000462 56                  <4>  push rsi
   122 00000463 57                  <4>  push rdi
   123 00000464 4150                <4>  push r8
   124 00000466 4151                <4>  push r9
   125 00000468 4152                <4>  push r10
   126 0000046A 4153                <4>  push r11
   127 0000046C 4154                <4>  push r12
   128 0000046E 4155                <4>  push r13
   129 00000470 4156                <4>  push r14
   130 00000472 4157                <4>  push r15
    74                              <3> 
    75                              <3> 
    76                              <3> 
    77                              <3> 
    78                              <3> 
    79                              <3> 
    24 00000474 48BE128200000080FF- <2>     mov rsi,KernelSpaceUpperAddress + VBEModeStructBufferAddr + vbe_mode_info_block.x_resolution
    24 0000047D FF                  <2>
    25 0000047E BB00000000          <2>     mov rbx,0
    26 00000483 668B1E              <2>     mov  bx, word [rsi]
    27 00000486 66891DA8FFFFFF      <2>     mov word [rel video_info_ptr + video_info.xpixel],bx
    28                              <2> 
    29 0000048D 48BE148200000080FF- <2>     mov rsi,KernelSpaceUpperAddress + VBEModeStructBufferAddr + vbe_mode_info_block.y_resolution
    29 00000496 FF                  <2>
    30 00000497 BB00000000          <2>     mov rbx,0
    31 0000049C 668B1E              <2>     mov  bx, word [rsi]
    32 0000049F 66891D91FFFFFF      <2>     mov word [rel video_info_ptr + video_info.ypixel],bx
    33                              <2> 
    34 000004A6 48BE198200000080FF- <2>     mov rsi,KernelSpaceUpperAddress + VBEModeStructBufferAddr + vbe_mode_info_block.bits_per_pixel
    34 000004AF FF                  <2>
    35 000004B0 BB00000000          <2>     mov rbx,0
    36 000004B5 8A1E                <2>     mov bl, byte [rsi]
    37 000004B7 C0EB03              <2>     shr bl,3
    38 000004BA 881D79FFFFFF        <2>     mov byte [rel video_info_ptr + video_info.byte_per_pixel],bl
    39                              <2> 
    40                              <2>     ; mov rsi,KernelSpaceUpperAddress + VBEModeStructBufferAddr + vbe_mode_info_block.y_resolution
    41                              <2>     ; mov rbx,0
    42                              <2>     ; mov  bx, word [rsi]
    43 000004C0 48BE000000030080FF- <2>     mov rsi,VideoFrameBufferAddress
    43 000004C9 FF                  <2>
    44 000004CA 48893569FFFFFF      <2>     mov qword [rel video_info_ptr + video_info.video_framebuffer],rsi
    45                              <2> 
    46                              <2>     epilog
    83                              <3>  popallq
   134 000004D1 415F                <4>  pop r15
   135 000004D3 415E                <4>  pop r14
   136 000004D5 415D                <4>  pop r13
   137 000004D7 415C                <4>  pop r12
   138 000004D9 415B                <4>  pop r11
   139 000004DB 415A                <4>  pop r10
   140 000004DD 4159                <4>  pop r9
   141 000004DF 4158                <4>  pop r8
   142 000004E1 5F                  <4>  pop rdi
   143 000004E2 5E                  <4>  pop rsi
   144 000004E3 5A                  <4>  pop rdx
   145 000004E4 59                  <4>  pop rcx
   146 000004E5 5B                  <4>  pop rbx
   147 000004E6 58                  <4>  pop rax
    84                              <3> 
    85 000004E7 4889EC              <3>  mov rsp, rbp
    86 000004EA 5D                  <3>  pop rbp
    87 000004EB C3                  <3>  ret
    47                              <2> 
    48                              <2> draw_pixel:; Input: x,y,color
    49                              <2>     prolog 2;
    65 000004EC 55                  <3>  push rbp
    66 000004ED 4889E5              <3>  mov rbp, rsp
    67 000004F0 488945F8            <3>  mov [rbp-8],rax
    68 000004F4 B802000000          <3>  mov rax, %1
    69 000004F9 4883C00F            <3>  add rax, 15
    70 000004FD 4883E0F0            <3>  and rax, ~15
    71 00000501 4829C4              <3>  sub rsp, rax
    72 00000504 488B45F8            <3>  mov rax,[rbp-8]
    73                              <3>  pushallq
   117 00000508 50                  <4>  push rax
   118 00000509 53                  <4>  push rbx
   119 0000050A 51                  <4>  push rcx
   120 0000050B 52                  <4>  push rdx
   121 0000050C 56                  <4>  push rsi
   122 0000050D 57                  <4>  push rdi
   123 0000050E 4150                <4>  push r8
   124 00000510 4151                <4>  push r9
   125 00000512 4152                <4>  push r10
   126 00000514 4153                <4>  push r11
   127 00000516 4154                <4>  push r12
   128 00000518 4155                <4>  push r13
   129 0000051A 4156                <4>  push r14
   130 0000051C 4157                <4>  push r15
    74                              <3> 
    75                              <3> 
    76                              <3> 
    77                              <3> 
    78                              <3> 
    79                              <3> 
    50                              <2>     get_param rdi, 1   ; x
    91 0000051E 488B7D10            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    51                              <2>     get_param rsi, 2   ; y
    91 00000522 488B7518            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    52                              <2>     get_param rdx, 3   ; c
    91 00000526 488B5520            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    53 0000052A 52                  <2>     push rdx
    54                              <2>     ; mov []
    55 0000052B 488D1D03FFFFFF      <2>     lea rbx, [rel video_info_ptr] ; Load video info structure address
    56                              <2> 
    57                              <2> 
    58                              <2> 
    59                              <2>     ; Calculate pixel offset
    60 00000532 B800000000          <2>     mov rax,0
    61 00000537 480FB703            <2>     movzx rax, word [rbx + video_info.xpixel] ; Screen width
    62                              <2> 
    63 0000053B 48F7E6              <2>     mul rsi                                 ; y * screen width
    64                              <2>         ; jmp $
    65 0000053E 4801F8              <2>     add rax, rdi                             ; Add x
    66 00000541 480FB64B04          <2>     movzx rcx, byte [rbx + video_info.byte_per_pixel] ; Bytes per pixel
    67 00000546 480FAFC1            <2>     imul rax, rcx                          ; Offset = (y * width + x) * bytes_per_pixel
    68                              <2> 
    69                              <2>     ; Write color to framebuffer
    70 0000054A 488B5B05            <2>     mov rbx, qword [rbx + video_info.video_framebuffer] ; Framebuffer address
    71 0000054E 4801C3              <2>     add rbx, rax                          ; rbx = framebuffer + offset
    72                              <2> 
    73 00000551 5A                  <2>     pop rdx
    74 00000552 8913                <2>     mov dword [rbx], edx                        ; Write color (assumes 32-bit color)
    75                              <2> 
    76                              <2>         ; jmp $
    77                              <2>     set_ret_param rax,4
    95 00000554 48894528            <3>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
    78                              <2>     epilog
    83                              <3>  popallq
   134 00000558 415F                <4>  pop r15
   135 0000055A 415E                <4>  pop r14
   136 0000055C 415D                <4>  pop r13
   137 0000055E 415C                <4>  pop r12
   138 00000560 415B                <4>  pop r11
   139 00000562 415A                <4>  pop r10
   140 00000564 4159                <4>  pop r9
   141 00000566 4158                <4>  pop r8
   142 00000568 5F                  <4>  pop rdi
   143 00000569 5E                  <4>  pop rsi
   144 0000056A 5A                  <4>  pop rdx
   145 0000056B 59                  <4>  pop rcx
   146 0000056C 5B                  <4>  pop rbx
   147 0000056D 58                  <4>  pop rax
    84                              <3> 
    85 0000056E 4889EC              <3>  mov rsp, rbp
    86 00000571 5D                  <3>  pop rbp
    87 00000572 C3                  <3>  ret
    79                              <2> 
    80                              <2> draw_line:; Bresenham's line algorithm Input: x1,y1,x2,y2,color
    81                              <2>     prolog 2;
    65 00000573 55                  <3>  push rbp
    66 00000574 4889E5              <3>  mov rbp, rsp
    67 00000577 488945F8            <3>  mov [rbp-8],rax
    68 0000057B B802000000          <3>  mov rax, %1
    69 00000580 4883C00F            <3>  add rax, 15
    70 00000584 4883E0F0            <3>  and rax, ~15
    71 00000588 4829C4              <3>  sub rsp, rax
    72 0000058B 488B45F8            <3>  mov rax,[rbp-8]
    73                              <3>  pushallq
   117 0000058F 50                  <4>  push rax
   118 00000590 53                  <4>  push rbx
   119 00000591 51                  <4>  push rcx
   120 00000592 52                  <4>  push rdx
   121 00000593 56                  <4>  push rsi
   122 00000594 57                  <4>  push rdi
   123 00000595 4150                <4>  push r8
   124 00000597 4151                <4>  push r9
   125 00000599 4152                <4>  push r10
   126 0000059B 4153                <4>  push r11
   127 0000059D 4154                <4>  push r12
   128 0000059F 4155                <4>  push r13
   129 000005A1 4156                <4>  push r14
   130 000005A3 4157                <4>  push r15
    74                              <3> 
    75                              <3> 
    76                              <3> 
    77                              <3> 
    78                              <3> 
    79                              <3> 
    82                              <2>     get_param rdi, 1    ; x1
    91 000005A5 488B7D10            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    83                              <2>     get_param rsi, 2    ; y1
    91 000005A9 488B7518            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    84                              <2>     get_param rdx, 3    ; x2
    91 000005AD 488B5520            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    85                              <2>     get_param rcx, 4    ; y2
    91 000005B1 488B4D28            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    86                              <2>     get_param r8,  5    ; color
    91 000005B5 4C8B4530            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    87                              <2> 
    88                              <2>     ; Calculate dx and dy
    89 000005B9 4989D1              <2>     mov r9, rdx         ; r9 = x2
    90 000005BC 4929F9              <2>     sub r9, rdi         ; dx = x2 - x1
    91 000005BF 4989CA              <2>     mov r10, rcx        ; r10 = y2
    92 000005C2 4929F2              <2>     sub r10, rsi        ; dy = y2 - y1
    93                              <2> 
    94                              <2>     ; Determine the absolute values of dx and dy
    95 000005C5 4D89CB              <2>     mov r11, r9         ; r11 = dx
    96 000005C8 4D85DB              <2>     test r11, r11
    97 000005CB 7903                <2>     jns .dx_positive
    98 000005CD 49F7DB              <2>     neg r11             ; r11 = abs(dx)
    99                              <2>     .dx_positive:
   100 000005D0 4D89D4              <2>         mov r12, r10        ; r12 = dy
   101 000005D3 4D85E4              <2>         test r12, r12
   102 000005D6 7903                <2>         jns .dy_positive
   103 000005D8 49F7DC              <2>         neg r12             ; r12 = abs(dy)
   104                              <2>     .dy_positive:
   105                              <2> 
   106                              <2>         ; Determine the direction of the line
   107 000005DB 41BD01000000        <2>         mov r13, 1          ; x_step = 1
   108 000005E1 4D85C9              <2>         test r9, r9
   109 000005E4 7907                <2>         jns .x_step_positive
   110 000005E6 49C7C5FFFFFFFF      <2>         mov r13, -1         ; x_step = -1
   111                              <2>     .x_step_positive:
   112 000005ED 41BE01000000        <2>         mov r14, 1          ; y_step = 1
   113 000005F3 4D85D2              <2>         test r10, r10
   114 000005F6 7907                <2>         jns .y_step_positive
   115 000005F8 49C7C6FFFFFFFF      <2>         mov r14, -1         ; y_step = -1
   116                              <2>     .y_step_positive:
   117                              <2> 
   118 000005FF 4D39E3              <2>     cmp r11, r12        ; Compare abs(dx) and abs(dy)
   119 00000602 7D21                <2>     jge .steep_x        ; If abs(dx) >= abs(dy), use x-major line
   120 00000604 4D89DF              <2>     mov r15, r11        ; error = abs(dx)
   121 00000607 49D1E7              <2>     shl r15, 1          ; error = 2 * abs(dx)
   122 0000060A 4D29E7              <2>     sub r15, r12         ; error = 2 * abs(dx) - abs(dy)
   123                              <2> 
   124 0000060D 4D89D9              <2>     mov r9, r11         ; r9 = abs(dx)
   125 00000610 49D1E1              <2>     shl r9, 1           ; delta_error = 2 * abs(dx)
   126                              <2> 
   127 00000613 4D89CA              <2>     mov r10,r9
   128 00000616 4157                <2>     push r15
   129 00000618 4D89E7              <2>     mov r15, r12
   130 0000061B 49D1E7              <2>     shl r15, 1           ; delta_error = 2 * abs(dy)
   131 0000061E 4D29FA              <2>     sub r10,r15
   132 00000621 415F                <2>     pop r15
   133 00000623 EB21                <2>     jmp .draw_loop_dy
   134                              <2>     .steep_x:
   135 00000625 4D89E7              <2>         mov r15, r12        ; error = abs(dy)
   136 00000628 49D1E7              <2>         shl r15, 1          ; error = 2 * abs(dy)
   137 0000062B 4D29DF              <2>         sub r15, r11         ; error = 2 * abs(dy) - abs(dx)
   138                              <2> 
   139 0000062E 4D89E1              <2>         mov r9, r12         ; r9 = abs(dy)
   140 00000631 49D1E1              <2>         shl r9, 1           ; delta_error = 2 * abs(dy)
   141                              <2> 
   142 00000634 4D89CA              <2>         mov r10,r9
   143 00000637 4157                <2>         push r15
   144 00000639 4D89DF              <2>         mov r15, r11
   145 0000063C 49D1E7              <2>         shl r15, 1           ; delta_error = 2 * abs(dx)
   146 0000063F 4D29FA              <2>         sub r10,r15
   147 00000642 415F                <2>         pop r15
   148 00000644 EB39                <2>         jmp .draw_loop_dx
   149                              <2>     .draw_loop_dy:
   150 00000646 4839CE              <2>         cmp rsi, rcx        ; Compare y1 with y2
   151 00000649 746D                <2>         je .done            ; If both match, we're done
   152                              <2> 
   153 0000064B 4983FF00            <2>         cmp r15,0
   154 0000064F 7D08                <2>         jge .yup1
   155 00000651 4C01F6              <2>         add rsi, r14        ; y += y_step
   156 00000654 4D01CF              <2>         add r15,r9
   157 00000657 EB09                <2>         jmp .ydrawloop
   158                              <2>         .yup1:
   159 00000659 4C01EF              <2>             add rdi, r13        ; x += x_step
   160 0000065C 4C01F6              <2>             add rsi, r14        ; y += y_step
   161 0000065F 4D01D7              <2>             add r15,r10
   162                              <2>         .ydrawloop:
   163                              <2>             ; Draw the current pixel
   164                              <2>             prepare_call 3,1
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 00000662 4883EC20            <3>  sub rsp, total_space
   165 00000666 4C89442410          <2>             mov qword [rsp+16], r8
   166 0000066B 4889742408          <2>             mov qword [rsp+8], rsi
   167 00000670 48893C24            <2>             mov qword [rsp], rdi
   168 00000674 E873FEFFFF          <2>             call draw_pixel
   169                              <2>             cleanup_call 3,1
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 00000679 4883C420            <3>  add rsp, total_space
   170                              <2>             ; mov rax, [rsp-8]
   171 0000067D EBC7                <2>             jmp .draw_loop_dy            ; If both match, we're done
   172                              <2> 
   173                              <2>     .draw_loop_dx:
   174 0000067F 4839D7              <2>         cmp rdi, rdx        ; Compare y1 with y2
   175 00000682 7434                <2>         je .done            ; If both match, we're done
   176                              <2> 
   177 00000684 4983FF00            <2>         cmp r15,0
   178 00000688 7D08                <2>         jge .xup1
   179 0000068A 4C01EF              <2>         add rdi, r13        ; y += y_step
   180 0000068D 4D01CF              <2>         add r15,r9
   181 00000690 EB09                <2>         jmp .xdrawloop
   182                              <2>         .xup1:
   183 00000692 4C01EF              <2>             add rdi, r13        ; x += x_step
   184 00000695 4C01F6              <2>             add rsi, r14        ; y += y_step
   185 00000698 4D01D7              <2>             add r15,r10
   186                              <2>         .xdrawloop:
   187                              <2>             ; Draw the current pixel
   188                              <2>             prepare_call 3,1
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 0000069B 4883EC20            <3>  sub rsp, total_space
   189 0000069F 4C89442410          <2>             mov qword [rsp+16], r8
   190 000006A4 4889742408          <2>             mov qword [rsp+8], rsi
   191 000006A9 48893C24            <2>             mov qword [rsp], rdi
   192 000006AD E83AFEFFFF          <2>             call draw_pixel
   193                              <2>             cleanup_call 3,1
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 000006B2 4883C420            <3>  add rsp, total_space
   194                              <2>             ; mov rax, [rsp-8]
   195 000006B6 EBC7                <2>             jmp .draw_loop_dx            ; If both match, we're done
   196                              <2>         
   197                              <2>     .done:
   198                              <2>         set_ret_param rcx,6
    95 000006B8 48894D38            <3>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   199                              <2>         epilog
    83                              <3>  popallq
   134 000006BC 415F                <4>  pop r15
   135 000006BE 415E                <4>  pop r14
   136 000006C0 415D                <4>  pop r13
   137 000006C2 415C                <4>  pop r12
   138 000006C4 415B                <4>  pop r11
   139 000006C6 415A                <4>  pop r10
   140 000006C8 4159                <4>  pop r9
   141 000006CA 4158                <4>  pop r8
   142 000006CC 5F                  <4>  pop rdi
   143 000006CD 5E                  <4>  pop rsi
   144 000006CE 5A                  <4>  pop rdx
   145 000006CF 59                  <4>  pop rcx
   146 000006D0 5B                  <4>  pop rbx
   147 000006D1 58                  <4>  pop rax
    84                              <3> 
    85 000006D2 4889EC              <3>  mov rsp, rbp
    86 000006D5 5D                  <3>  pop rbp
    87 000006D6 C3                  <3>  ret
   200                              <2> 
   201                              <2> draw_rect:; Input: x1,y1,x2,y2,color
   202                              <2>     prolog 2;
    65 000006D7 55                  <3>  push rbp
    66 000006D8 4889E5              <3>  mov rbp, rsp
    67 000006DB 488945F8            <3>  mov [rbp-8],rax
    68 000006DF B802000000          <3>  mov rax, %1
    69 000006E4 4883C00F            <3>  add rax, 15
    70 000006E8 4883E0F0            <3>  and rax, ~15
    71 000006EC 4829C4              <3>  sub rsp, rax
    72 000006EF 488B45F8            <3>  mov rax,[rbp-8]
    73                              <3>  pushallq
   117 000006F3 50                  <4>  push rax
   118 000006F4 53                  <4>  push rbx
   119 000006F5 51                  <4>  push rcx
   120 000006F6 52                  <4>  push rdx
   121 000006F7 56                  <4>  push rsi
   122 000006F8 57                  <4>  push rdi
   123 000006F9 4150                <4>  push r8
   124 000006FB 4151                <4>  push r9
   125 000006FD 4152                <4>  push r10
   126 000006FF 4153                <4>  push r11
   127 00000701 4154                <4>  push r12
   128 00000703 4155                <4>  push r13
   129 00000705 4156                <4>  push r14
   130 00000707 4157                <4>  push r15
    74                              <3> 
    75                              <3> 
    76                              <3> 
    77                              <3> 
    78                              <3> 
    79                              <3> 
   203                              <2>     get_param rdi, 1    ; x1
    91 00000709 488B7D10            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   204                              <2>     get_param rsi, 2    ; y1
    91 0000070D 488B7518            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   205                              <2>     get_param rdx, 3    ; x2
    91 00000711 488B5520            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   206                              <2>     get_param rcx, 4    ; y2
    91 00000715 488B4D28            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   207                              <2>     get_param r8,  5    ; color
    91 00000719 4C8B4530            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   208                              <2>     ; jmp $
   209                              <2>     .line1:
   210                              <2>         prepare_call 5,1
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 0000071D 4883EC30            <3>  sub rsp, total_space
   211 00000721 48C7442420FFFFFF00  <2>         mov qword [rsp+32], 0x00FFFFFF
   212 0000072A 4889742418          <2>         mov qword [rsp+24], rsi
   213 0000072F 4889542410          <2>         mov qword [rsp+16], rdx
   214                              <2> 
   215 00000734 4889742408          <2>         mov qword [rsp+8], rsi
   216 00000739 48893C24            <2>         mov qword [rsp], rdi
   217 0000073D E831FEFFFF          <2>         call draw_line
   218                              <2>         cleanup_call 5,1
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 00000742 4883C430            <3>  add rsp, total_space
   219 00000746 488B4424F8          <2>         mov rax, [rsp-8]
   220                              <2>     .line2:
   221                              <2>         prepare_call 5,1
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 0000074B 4883EC30            <3>  sub rsp, total_space
   222 0000074F 48C7442420FFFFFF00  <2>         mov qword [rsp+32], 0x00FFFFFF
   223 00000758 48894C2418          <2>         mov qword [rsp+24], rcx
   224 0000075D 4889542410          <2>         mov qword [rsp+16], rdx
   225                              <2> 
   226 00000762 4889742408          <2>         mov qword [rsp+8], rsi
   227 00000767 48891424            <2>         mov qword [rsp], rdx
   228 0000076B E803FEFFFF          <2>         call draw_line
   229                              <2>         cleanup_call 5,1
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 00000770 4883C430            <3>  add rsp, total_space
   230 00000774 488B4424F8          <2>         mov rax, [rsp-8]
   231                              <2>     .line3:
   232                              <2>         prepare_call 5,1
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 00000779 4883EC30            <3>  sub rsp, total_space
   233 0000077D 48C7442420FFFFFF00  <2>         mov qword [rsp+32], 0x00FFFFFF
   234 00000786 48894C2418          <2>         mov qword [rsp+24], rcx
   235 0000078B 48897C2410          <2>         mov qword [rsp+16], rdi
   236                              <2> 
   237 00000790 48894C2408          <2>         mov qword [rsp+8], rcx
   238 00000795 48891424            <2>         mov qword [rsp], rdx
   239 00000799 E8D5FDFFFF          <2>         call draw_line
   240                              <2>         cleanup_call 5,1
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 0000079E 4883C430            <3>  add rsp, total_space
   241 000007A2 488B4424F8          <2>         mov rax, [rsp-8]
   242                              <2>     .line4:
   243                              <2>         prepare_call 5,1
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 000007A7 4883EC30            <3>  sub rsp, total_space
   244 000007AB 48C7442420FFFFFF00  <2>         mov qword [rsp+32], 0x00FFFFFF
   245 000007B4 4889742418          <2>         mov qword [rsp+24], rsi
   246 000007B9 48897C2410          <2>         mov qword [rsp+16], rdi
   247                              <2> 
   248 000007BE 48894C2408          <2>         mov qword [rsp+8], rcx
   249 000007C3 48893C24            <2>         mov qword [rsp], rdi
   250 000007C7 E8A7FDFFFF          <2>         call draw_line
   251                              <2>         cleanup_call 5,1
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 000007CC 4883C430            <3>  add rsp, total_space
   252 000007D0 488B4424F8          <2>         mov rax, [rsp-8]
   253                              <2>     .done:
   254                              <2>         set_ret_param rcx,6
    95 000007D5 48894D38            <3>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   255                              <2>         epilog
    83                              <3>  popallq
   134 000007D9 415F                <4>  pop r15
   135 000007DB 415E                <4>  pop r14
   136 000007DD 415D                <4>  pop r13
   137 000007DF 415C                <4>  pop r12
   138 000007E1 415B                <4>  pop r11
   139 000007E3 415A                <4>  pop r10
   140 000007E5 4159                <4>  pop r9
   141 000007E7 4158                <4>  pop r8
   142 000007E9 5F                  <4>  pop rdi
   143 000007EA 5E                  <4>  pop rsi
   144 000007EB 5A                  <4>  pop rdx
   145 000007EC 59                  <4>  pop rcx
   146 000007ED 5B                  <4>  pop rbx
   147 000007EE 58                  <4>  pop rax
    84                              <3> 
    85 000007EF 4889EC              <3>  mov rsp, rbp
    86 000007F2 5D                  <3>  pop rbp
    87 000007F3 C3                  <3>  ret
   256                              <2> 
   257                              <2> draw_screen:;Input:color
   258                              <2>     prolog 2;
    65 000007F4 55                  <3>  push rbp
    66 000007F5 4889E5              <3>  mov rbp, rsp
    67 000007F8 488945F8            <3>  mov [rbp-8],rax
    68 000007FC B802000000          <3>  mov rax, %1
    69 00000801 4883C00F            <3>  add rax, 15
    70 00000805 4883E0F0            <3>  and rax, ~15
    71 00000809 4829C4              <3>  sub rsp, rax
    72 0000080C 488B45F8            <3>  mov rax,[rbp-8]
    73                              <3>  pushallq
   117 00000810 50                  <4>  push rax
   118 00000811 53                  <4>  push rbx
   119 00000812 51                  <4>  push rcx
   120 00000813 52                  <4>  push rdx
   121 00000814 56                  <4>  push rsi
   122 00000815 57                  <4>  push rdi
   123 00000816 4150                <4>  push r8
   124 00000818 4151                <4>  push r9
   125 0000081A 4152                <4>  push r10
   126 0000081C 4153                <4>  push r11
   127 0000081E 4154                <4>  push r12
   128 00000820 4155                <4>  push r13
   129 00000822 4156                <4>  push r14
   130 00000824 4157                <4>  push r15
    74                              <3> 
    75                              <3> 
    76                              <3> 
    77                              <3> 
    78                              <3> 
    79                              <3> 
   259                              <2> 
   260                              <2>     get_param rdi, 1   ; x
    91 00000826 488B7D10            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   261                              <2> 
   262 0000082A 488D1D04FCFFFF      <2>     lea rbx, [rel video_info_ptr] ; Load video info structure address
   263                              <2>     ; Calculate pixel offset
   264 00000831 B800000000          <2>     mov rax,0
   265 00000836 480FB703            <2>     movzx rax, word [rbx + video_info.xpixel] ; Screen width
   266                              <2> 
   267 0000083A B900000000          <2>     mov rcx,0
   268 0000083F 480FB74B02          <2>     movzx rcx, word [rbx + video_info.ypixel] ; Screen height
   269                              <2> 
   270 00000844 48F7E1              <2>     mul rcx
   271                              <2> 
   272 00000847 4889C1              <2>     mov rcx,rax
   273 0000084A 480FB65304          <2>     movzx rdx, byte [rbx + video_info.byte_per_pixel] ; Bytes per pixel
   274 0000084F 48F7E2              <2>     mul rdx                          ; Offset = (y * width + x) * bytes_per_pixel
   275                              <2> 
   276 00000852 488B5B05            <2>     mov rbx, qword [rbx + video_info.video_framebuffer] ; Framebuffer address
   277 00000856 4801C3              <2>     add rbx,rax
   278                              <2>     .write_color:
   279                              <2>         ; Write color to framebuffer
   280                              <2>         
   281 00000859 893B                <2>         mov dword [rbx], edi                        ; Write color (assumes 32-bit color)
   282 0000085B 4883EB04            <2>         sub rbx,4                          ; rbx = framebuffer + offset
   283 0000085F E2F8                <2>         loop .write_color
   284                              <2> 
   285                              <2>         ; jmp $
   286                              <2>     set_ret_param rax,2
    95 00000861 48894518            <3>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   287                              <2> 
   288                              <2>     epilog
    83                              <3>  popallq
   134 00000865 415F                <4>  pop r15
   135 00000867 415E                <4>  pop r14
   136 00000869 415D                <4>  pop r13
   137 0000086B 415C                <4>  pop r12
   138 0000086D 415B                <4>  pop r11
   139 0000086F 415A                <4>  pop r10
   140 00000871 4159                <4>  pop r9
   141 00000873 4158                <4>  pop r8
   142 00000875 5F                  <4>  pop rdi
   143 00000876 5E                  <4>  pop rsi
   144 00000877 5A                  <4>  pop rdx
   145 00000878 59                  <4>  pop rcx
   146 00000879 5B                  <4>  pop rbx
   147 0000087A 58                  <4>  pop rax
    84                              <3> 
    85 0000087B 4889EC              <3>  mov rsp, rbp
    86 0000087E 5D                  <3>  pop rbp
    87 0000087F C3                  <3>  ret
   289                              <2> 
   290                              <2> 
   291                              <2> draw_triangle: ; Input: x1, y1, x2, y2, x3, y3, color
   292                              <2>     prolog 2;
    65 00000880 55                  <3>  push rbp
    66 00000881 4889E5              <3>  mov rbp, rsp
    67 00000884 488945F8            <3>  mov [rbp-8],rax
    68 00000888 B802000000          <3>  mov rax, %1
    69 0000088D 4883C00F            <3>  add rax, 15
    70 00000891 4883E0F0            <3>  and rax, ~15
    71 00000895 4829C4              <3>  sub rsp, rax
    72 00000898 488B45F8            <3>  mov rax,[rbp-8]
    73                              <3>  pushallq
   117 0000089C 50                  <4>  push rax
   118 0000089D 53                  <4>  push rbx
   119 0000089E 51                  <4>  push rcx
   120 0000089F 52                  <4>  push rdx
   121 000008A0 56                  <4>  push rsi
   122 000008A1 57                  <4>  push rdi
   123 000008A2 4150                <4>  push r8
   124 000008A4 4151                <4>  push r9
   125 000008A6 4152                <4>  push r10
   126 000008A8 4153                <4>  push r11
   127 000008AA 4154                <4>  push r12
   128 000008AC 4155                <4>  push r13
   129 000008AE 4156                <4>  push r14
   130 000008B0 4157                <4>  push r15
    74                              <3> 
    75                              <3> 
    76                              <3> 
    77                              <3> 
    78                              <3> 
    79                              <3> 
   293                              <2>     get_param rdi, 1    ; x1
    91 000008B2 488B7D10            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   294                              <2>     get_param rsi, 2    ; y1
    91 000008B6 488B7518            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   295                              <2>     get_param rdx, 3    ; x2
    91 000008BA 488B5520            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   296                              <2>     get_param rcx, 4    ; y2
    91 000008BE 488B4D28            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   297                              <2>     get_param r8,  5    ; x3
    91 000008C2 4C8B4530            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   298                              <2>     get_param r9,  6    ; y3
    91 000008C6 4C8B4D38            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   299                              <2>     get_param r10, 7    ; color
    91 000008CA 4C8B5540            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   300                              <2> 
   301                              <2>     ; Draw line from (x1, y1) to (x2, y2)
   302                              <2>     prepare_call 5, 1
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 000008CE 4883EC30            <3>  sub rsp, total_space
   303 000008D2 4C89542420          <2>     mov qword [rsp+32], r10 ; color
   304 000008D7 48894C2418          <2>     mov qword [rsp+24], rcx ; y2
   305 000008DC 4889542410          <2>     mov qword [rsp+16], rdx ; x2
   306 000008E1 4889742408          <2>     mov qword [rsp+8], rsi  ; y1
   307 000008E6 48893C24            <2>     mov qword [rsp], rdi    ; x1
   308 000008EA E884FCFFFF          <2>     call draw_line
   309                              <2>     cleanup_call 5, 1
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 000008EF 4883C430            <3>  add rsp, total_space
   310                              <2> 
   311                              <2>     ; Draw line from (x2, y2) to (x3, y3)
   312                              <2>     prepare_call 5, 1
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 000008F3 4883EC30            <3>  sub rsp, total_space
   313 000008F7 4C89542420          <2>     mov qword [rsp+32], r10 ; color
   314 000008FC 4C894C2418          <2>     mov qword [rsp+24], r9  ; y3
   315 00000901 4C89442410          <2>     mov qword [rsp+16], r8  ; x3
   316 00000906 48894C2408          <2>     mov qword [rsp+8], rcx  ; y2
   317 0000090B 48891424            <2>     mov qword [rsp], rdx    ; x2
   318 0000090F E85FFCFFFF          <2>     call draw_line
   319                              <2>     cleanup_call 5, 1
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 00000914 4883C430            <3>  add rsp, total_space
   320                              <2> 
   321                              <2>     ; Draw line from (x3, y3) to (x1, y1)
   322                              <2>     prepare_call 5, 1
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 00000918 4883EC30            <3>  sub rsp, total_space
   323 0000091C 4C89542420          <2>     mov qword [rsp+32], r10 ; color
   324 00000921 4889742418          <2>     mov qword [rsp+24], rsi ; y1
   325 00000926 48897C2410          <2>     mov qword [rsp+16], rdi ; x1
   326 0000092B 4C894C2408          <2>     mov qword [rsp+8], r9   ; y3
   327 00000930 4C890424            <2>     mov qword [rsp], r8     ; x3
   328 00000934 E83AFCFFFF          <2>     call draw_line
   329                              <2>     cleanup_call 5, 1
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 00000939 4883C430            <3>  add rsp, total_space
   330                              <2> 
   331                              <2>     set_ret_param rax, 8
    95 0000093D 48894548            <3>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   332                              <2>     epilog
    83                              <3>  popallq
   134 00000941 415F                <4>  pop r15
   135 00000943 415E                <4>  pop r14
   136 00000945 415D                <4>  pop r13
   137 00000947 415C                <4>  pop r12
   138 00000949 415B                <4>  pop r11
   139 0000094B 415A                <4>  pop r10
   140 0000094D 4159                <4>  pop r9
   141 0000094F 4158                <4>  pop r8
   142 00000951 5F                  <4>  pop rdi
   143 00000952 5E                  <4>  pop rsi
   144 00000953 5A                  <4>  pop rdx
   145 00000954 59                  <4>  pop rcx
   146 00000955 5B                  <4>  pop rbx
   147 00000956 58                  <4>  pop rax
    84                              <3> 
    85 00000957 4889EC              <3>  mov rsp, rbp
    86 0000095A 5D                  <3>  pop rbp
    87 0000095B C3                  <3>  ret
   333                              <2> 
   334                              <2> draw_circle: ; Input: x_center, y_center, radius, color
   335                              <2>     prolog 2;
    65 0000095C 55                  <3>  push rbp
    66 0000095D 4889E5              <3>  mov rbp, rsp
    67 00000960 488945F8            <3>  mov [rbp-8],rax
    68 00000964 B802000000          <3>  mov rax, %1
    69 00000969 4883C00F            <3>  add rax, 15
    70 0000096D 4883E0F0            <3>  and rax, ~15
    71 00000971 4829C4              <3>  sub rsp, rax
    72 00000974 488B45F8            <3>  mov rax,[rbp-8]
    73                              <3>  pushallq
   117 00000978 50                  <4>  push rax
   118 00000979 53                  <4>  push rbx
   119 0000097A 51                  <4>  push rcx
   120 0000097B 52                  <4>  push rdx
   121 0000097C 56                  <4>  push rsi
   122 0000097D 57                  <4>  push rdi
   123 0000097E 4150                <4>  push r8
   124 00000980 4151                <4>  push r9
   125 00000982 4152                <4>  push r10
   126 00000984 4153                <4>  push r11
   127 00000986 4154                <4>  push r12
   128 00000988 4155                <4>  push r13
   129 0000098A 4156                <4>  push r14
   130 0000098C 4157                <4>  push r15
    74                              <3> 
    75                              <3> 
    76                              <3> 
    77                              <3> 
    78                              <3> 
    79                              <3> 
   336                              <2>     get_param rdi, 1    ; x_center
    91 0000098E 488B7D10            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   337                              <2>     get_param rsi, 2    ; y_center
    91 00000992 488B7518            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   338                              <2>     get_param rdx, 3    ; radius
    91 00000996 488B5520            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   339                              <2>     get_param rcx, 4    ; color
    91 0000099A 488B4D28            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   340                              <2> 
   341                              <2>     ; Initialize variables
   342 0000099E 41B800000000        <2>     mov r8, 0           ; x = 0
   343 000009A4 4989D1              <2>     mov r9, rdx         ; y = radius
   344 000009A7 41BA03000000        <2>     mov r10, 3          ; decision = 1 - radius
   345 000009AD 4889D0              <2>     mov rax, rdx         ; r = radius
   346 000009B0 BB02000000          <2>     mov rbx,2
   347 000009B5 48F7E3              <2>     mul rbx
   348 000009B8 4929C2              <2>     sub r10,rax
   349                              <2>     ; d = 3 - 2 * r;
   350                              <2> 
   351                              <2>     .circle_loop:
   352                              <2>         ; Draw the 8 symmetric points of the circle
   353                              <2>         prepare_call 3, 1
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 000009BB 4883EC20            <3>  sub rsp, total_space
   354 000009BF 48894C2410          <2>         mov qword [rsp+16], rcx
   355 000009C4 4889742408          <2>         mov qword [rsp+8], rsi
   356 000009C9 48893C24            <2>         mov qword [rsp], rdi
   357 000009CD 4C010424            <2>         add qword [rsp], r8
   358 000009D1 4C014C2408          <2>         add qword [rsp+8], r9
   359 000009D6 E811FBFFFF          <2>         call draw_pixel
   360                              <2>         cleanup_call 3, 1
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 000009DB 4883C420            <3>  add rsp, total_space
   361                              <2> 
   362                              <2>         prepare_call 3, 1
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 000009DF 4883EC20            <3>  sub rsp, total_space
   363 000009E3 48894C2410          <2>         mov qword [rsp+16], rcx
   364 000009E8 4889742408          <2>         mov qword [rsp+8], rsi
   365 000009ED 48893C24            <2>         mov qword [rsp], rdi
   366 000009F1 4C290424            <2>         sub qword [rsp], r8
   367 000009F5 4C014C2408          <2>         add qword [rsp+8], r9
   368 000009FA E8EDFAFFFF          <2>         call draw_pixel
   369                              <2>         cleanup_call 3, 1
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 000009FF 4883C420            <3>  add rsp, total_space
   370                              <2> 
   371                              <2>         prepare_call 3, 1
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 00000A03 4883EC20            <3>  sub rsp, total_space
   372 00000A07 48894C2410          <2>         mov qword [rsp+16], rcx
   373 00000A0C 4889742408          <2>         mov qword [rsp+8], rsi
   374 00000A11 48893C24            <2>         mov qword [rsp], rdi
   375 00000A15 4C010424            <2>         add qword [rsp], r8
   376 00000A19 4C294C2408          <2>         sub qword [rsp+8], r9
   377 00000A1E E8C9FAFFFF          <2>         call draw_pixel
   378                              <2>         cleanup_call 3, 1
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 00000A23 4883C420            <3>  add rsp, total_space
   379                              <2> 
   380                              <2>         prepare_call 3, 1
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 00000A27 4883EC20            <3>  sub rsp, total_space
   381 00000A2B 48894C2410          <2>         mov qword [rsp+16], rcx
   382 00000A30 4889742408          <2>         mov qword [rsp+8], rsi
   383 00000A35 48893C24            <2>         mov qword [rsp], rdi
   384 00000A39 4C290424            <2>         sub qword [rsp], r8
   385 00000A3D 4C294C2408          <2>         sub qword [rsp+8], r9
   386 00000A42 E8A5FAFFFF          <2>         call draw_pixel
   387                              <2>         cleanup_call 3, 1
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 00000A47 4883C420            <3>  add rsp, total_space
   388                              <2> 
   389                              <2>         prepare_call 3, 1
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 00000A4B 4883EC20            <3>  sub rsp, total_space
   390 00000A4F 48894C2410          <2>         mov qword [rsp+16], rcx
   391 00000A54 4889742408          <2>         mov qword [rsp+8], rsi
   392 00000A59 48893C24            <2>         mov qword [rsp], rdi
   393 00000A5D 4C010C24            <2>         add qword [rsp], r9
   394 00000A61 4C01442408          <2>         add qword [rsp+8], r8
   395 00000A66 E881FAFFFF          <2>         call draw_pixel
   396                              <2>         cleanup_call 3, 1
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 00000A6B 4883C420            <3>  add rsp, total_space
   397                              <2> 
   398                              <2>         prepare_call 3, 1
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 00000A6F 4883EC20            <3>  sub rsp, total_space
   399 00000A73 48894C2410          <2>         mov qword [rsp+16], rcx
   400 00000A78 4889742408          <2>         mov qword [rsp+8], rsi
   401 00000A7D 48893C24            <2>         mov qword [rsp], rdi
   402 00000A81 4C290C24            <2>         sub qword [rsp], r9
   403 00000A85 4C01442408          <2>         add qword [rsp+8], r8
   404 00000A8A E85DFAFFFF          <2>         call draw_pixel
   405                              <2>         cleanup_call 3, 1
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 00000A8F 4883C420            <3>  add rsp, total_space
   406                              <2> 
   407                              <2>         prepare_call 3, 1
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 00000A93 4883EC20            <3>  sub rsp, total_space
   408 00000A97 48894C2410          <2>         mov qword [rsp+16], rcx
   409 00000A9C 4889742408          <2>         mov qword [rsp+8], rsi
   410 00000AA1 48893C24            <2>         mov qword [rsp], rdi
   411 00000AA5 4C010C24            <2>         add qword [rsp], r9
   412 00000AA9 4C29442408          <2>         sub qword [rsp+8], r8
   413 00000AAE E839FAFFFF          <2>         call draw_pixel
   414                              <2>         cleanup_call 3, 1
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 00000AB3 4883C420            <3>  add rsp, total_space
   415                              <2> 
   416                              <2>         prepare_call 3, 1
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 00000AB7 4883EC20            <3>  sub rsp, total_space
   417 00000ABB 48894C2410          <2>         mov qword [rsp+16], rcx
   418 00000AC0 4889742408          <2>         mov qword [rsp+8], rsi
   419 00000AC5 48893C24            <2>         mov qword [rsp], rdi
   420 00000AC9 4C290C24            <2>         sub qword [rsp], r9
   421 00000ACD 4C29442408          <2>         sub qword [rsp+8], r8
   422 00000AD2 E815FAFFFF          <2>         call draw_pixel
   423                              <2>         cleanup_call 3, 1
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 00000AD7 4883C420            <3>  add rsp, total_space
   424                              <2> 
   425                              <2>         ; Update decision parameter and coordinates
   426                              <2> 
   427                              <2> 
   428                              <2>         ;     if (d < 0) {
   429                              <2>         ;         d = d + 4 * x + 6;
   430                              <2>         ;     } else {
   431                              <2>         ;         d = d + 4 * (x - y) + 10;
   432                              <2>         ;         y --;
   433                              <2>         ;     }
   434                              <2>         ;     x ++;
   435                              <2>         ; }
   436                              <2>         ; r10
   437 00000ADB 4983FA00            <2>         cmp r10, 0
   438 00000ADF 7C1B                <2>         jl .update_y
   439 00000AE1 4C89C0              <2>         mov rax, r8
   440 00000AE4 4C29C8              <2>         sub rax, r9
   441                              <2>         
   442 00000AE7 BB04000000          <2>         mov rbx,4
   443 00000AEC 48F7E3              <2>         mul rbx
   444 00000AEF 4883C00A            <2>         add rax,10
   445 00000AF3 4901C2              <2>         add r10, rax         ; d = d + 4 * (x - y) + 10;
   446                              <2> 
   447 00000AF6 4983E901            <2>         sub r9, 1           ; y--
   448 00000AFA EB12                <2>         jmp .update_x
   449                              <2>         .update_y:
   450 00000AFC 4C89C0              <2>             mov rax, r8
   451                              <2> 
   452 00000AFF BB04000000          <2>             mov rbx,4
   453 00000B04 48F7E3              <2>             mul rbx
   454                              <2> 
   455 00000B07 4883C006            <2>             add rax,6
   456 00000B0B 4901C2              <2>             add r10, rax         ;d = d + 4 * x + 6;
   457                              <2>         .update_x:
   458 00000B0E 4983C001            <2>             add r8, 1           ; x++
   459 00000B12 4D39C8              <2>             cmp r8, r9
   460 00000B15 0F8EA0FEFFFF        <2>             jle .circle_loop
   461                              <2> 
   462                              <2>         set_ret_param rax, 5
    95 00000B1B 48894530            <3>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   463                              <2>         epilog
    83                              <3>  popallq
   134 00000B1F 415F                <4>  pop r15
   135 00000B21 415E                <4>  pop r14
   136 00000B23 415D                <4>  pop r13
   137 00000B25 415C                <4>  pop r12
   138 00000B27 415B                <4>  pop r11
   139 00000B29 415A                <4>  pop r10
   140 00000B2B 4159                <4>  pop r9
   141 00000B2D 4158                <4>  pop r8
   142 00000B2F 5F                  <4>  pop rdi
   143 00000B30 5E                  <4>  pop rsi
   144 00000B31 5A                  <4>  pop rdx
   145 00000B32 59                  <4>  pop rcx
   146 00000B33 5B                  <4>  pop rbx
   147 00000B34 58                  <4>  pop rax
    84                              <3> 
    85 00000B35 4889EC              <3>  mov rsp, rbp
    86 00000B38 5D                  <3>  pop rbp
    87 00000B39 C3                  <3>  ret
   464                              <2> 
   465                              <2> %endif
     6                              <1>     
     7                              <1> [BITS 64]
     8                              <1> 
     9                              <1> %define COLOR_WHITE 	0x00ffffff		;WHITE
    10                              <1> %define COLOR_BLACK 	0x00000000		;BLACK
    11                              <1> %define COLOR_RED	    0x00ff0000		;RED
    12                              <1> %define COLOR_ORANGE	0x00ff8000		;ORANGE
    13                              <1> %define COLOR_YELLOW	0x00ffff00		;YELLOW
    14                              <1> %define COLOR_GREEN	    0x0000ff00		;GREEN
    15                              <1> %define COLOR_BLUE	    0x000000ff		;BLUE
    16                              <1> %define COLOR_INDIGO	0x0000ffff		;INDIGO
    17                              <1> %define COLOR_PURPLE	0x008000ff		;PURPLE
    18                              <1> 
    19                              <1> struc print_info
    20 00000000 ????                <1>     .cursor_xposition:     resw 1
    21 00000002 ????                <1>     .cursor_yposition:     resw 1
    22 00000004 ????                <1>     .cursor_line:          resw 1
    23                              <1> 
    24 00000006 ????                <1>     .print_xposition:      resw 1
    25 00000008 ????                <1>     .print_yposition:      resw 1
    26 0000000A ????                <1>     .print_line:           resw 1
    27 0000000C ????????????????    <1>     .print_address:        resq 1
    28                              <1> 
    29 00000014 ????                <1>     .screen_xmax:          resw 1
    30 00000016 ????                <1>     .screen_ymax:          resw 1
    31                              <1> 
    32 00000018 ????????????????    <1>     .font_base_address:    resq 1
    33 00000020 ????                <1>     .font_size:            resw 1
    34 00000022 ????                <1>     .font_width:           resw 1
    35 00000024 ????                <1>     .font_height:          resw 1
    36                              <1> 
    37 00000026 ????                <1>     .pixel_line_start:     resw 1
    38 00000028 ????                <1>     .pixel_line_height:       resw 1 
    39                              <1> 
    40 0000002A ????????            <1>     .default_color:        resd 1
    41 0000002E ????????            <1>     .current_color:        resd 1
    42                              <1>  endstruc
    43                              <1> print_info_ptr:
    44                              <1>     istruc print_info
    45 00000B3A 0000                <1>         at print_info.cursor_xposition, dw 0
    46 00000B3C 0000                <1>         at print_info.cursor_yposition, dw 0
    47 00000B3E 0000                <1>         at print_info.cursor_line, dw 0
    48                              <1> 
    49 00000B40 0000                <1>         at print_info.print_xposition, dw 0
    50 00000B42 0000                <1>         at print_info.print_yposition, dw 0
    51 00000B44 0000                <1>         at print_info.print_line, dw 0
    52 00000B46 0000000000000000    <1>         at print_info.print_address, dq 0
    53                              <1> 
    54 00000B4E 0000                <1>         at print_info.screen_xmax, dw 0
    55 00000B50 0000                <1>         at print_info.screen_ymax, dw 0
    56                              <1> 
    57 00000B52 0000000000000000    <1>         at print_info.font_base_address, dq 0
    58 00000B5A 0000                <1>         at print_info.font_size, dw 0
    59 00000B5C 0000                <1>         at print_info.font_width, dw 0
    60 00000B5E 0000                <1>         at print_info.font_height, dw 0
    61                              <1> 
    62 00000B60 0000                <1>         at print_info.pixel_line_start, dw 0
    63 00000B62 0000                <1>         at print_info.pixel_line_height, dw 0
    64                              <1> 
    65 00000B64 00000000            <1>         at print_info.default_color, dd 0
    66 00000B68 00000000            <1>         at print_info.current_color, dd 0
    67                              <1>     iend
    68                              <1> 
    69                              <1> printk_init:;init printk
    70                              <1>     prolog 0;
    65 00000B6C 55                  <2>  push rbp
    66 00000B6D 4889E5              <2>  mov rbp, rsp
    67 00000B70 488945F8            <2>  mov [rbp-8],rax
    68 00000B74 B800000000          <2>  mov rax, %1
    69 00000B79 4883C00F            <2>  add rax, 15
    70 00000B7D 4883E0F0            <2>  and rax, ~15
    71 00000B81 4829C4              <2>  sub rsp, rax
    72 00000B84 488B45F8            <2>  mov rax,[rbp-8]
    73                              <2>  pushallq
   117 00000B88 50                  <3>  push rax
   118 00000B89 53                  <3>  push rbx
   119 00000B8A 51                  <3>  push rcx
   120 00000B8B 52                  <3>  push rdx
   121 00000B8C 56                  <3>  push rsi
   122 00000B8D 57                  <3>  push rdi
   123 00000B8E 4150                <3>  push r8
   124 00000B90 4151                <3>  push r9
   125 00000B92 4152                <3>  push r10
   126 00000B94 4153                <3>  push r11
   127 00000B96 4154                <3>  push r12
   128 00000B98 4155                <3>  push r13
   129 00000B9A 4156                <3>  push r14
   130 00000B9C 4157                <3>  push r15
    74                              <2> 
    75                              <2> 
    76                              <2> 
    77                              <2> 
    78                              <2> 
    79                              <2> 
    71                              <1> 
    72 00000B9E 66C70593FFFFFF0000  <1>     mov word [rel print_info_ptr + print_info.cursor_xposition],0
    73 00000BA7 66C7058CFFFFFF0000  <1>     mov word [rel print_info_ptr + print_info.cursor_yposition],0
    74 00000BB0 66C70585FFFFFF0000  <1>     mov word [rel print_info_ptr + print_info.cursor_line],0
    75                              <1> 
    76                              <1> 
    77 00000BB9 66C7057EFFFFFF0000  <1>     mov word [rel print_info_ptr + print_info.print_xposition],0
    78 00000BC2 66C70577FFFFFF0000  <1>     mov word [rel print_info_ptr + print_info.print_yposition],0    
    79 00000BCB 66C70570FFFFFF0000  <1>     mov word [rel print_info_ptr + print_info.print_line],0
    80 00000BD4 48C70567FFFFFF0000- <1>     mov qword [rel print_info_ptr + print_info.print_address],0
    80 00000BDD 0000                <1>
    81                              <1> 
    82 00000BDF 66C70566FFFFFFF000  <1>     mov word [rel print_info_ptr + print_info.screen_xmax],240
    83 00000BE8 66C7055FFFFFFF3600  <1>     mov word [rel print_info_ptr + print_info.screen_ymax],54    
    84                              <1> 
    85 00000BF1 48BE005210000080FF- <1>     mov rsi,0xFFFF800000105200
    85 00000BFA FF                  <1>
    86 00000BFB 48893550FFFFFF      <1>     mov qword [rel print_info_ptr + print_info.font_base_address],rsi
    87 00000C02 66C7054FFFFFFF1000  <1>     mov word [rel print_info_ptr + print_info.font_size],16
    88 00000C0B 66C70548FFFFFF0800  <1>     mov word [rel print_info_ptr + print_info.font_width],8
    89 00000C14 66C70541FFFFFF1000  <1>     mov word [rel print_info_ptr + print_info.font_height],16
    90                              <1> 
    91 00000C1D 66C7053AFFFFFF0400  <1>     mov word [rel print_info_ptr + print_info.pixel_line_start],4
    92 00000C26 66C70533FFFFFF1400  <1>     mov word [rel print_info_ptr + print_info.pixel_line_height],20
    93                              <1> 
    94 00000C2F C7052BFFFFFFFFFFFF- <1>     mov dword [rel print_info_ptr + print_info.default_color],COLOR_WHITE
    94 00000C38 00                  <1>
    95 00000C39 C70525FFFFFFFFFFFF- <1>     mov dword [rel print_info_ptr + print_info.current_color],COLOR_WHITE
    95 00000C42 00                  <1>
    96                              <1> 
    97                              <1>     epilog
    83                              <2>  popallq
   134 00000C43 415F                <3>  pop r15
   135 00000C45 415E                <3>  pop r14
   136 00000C47 415D                <3>  pop r13
   137 00000C49 415C                <3>  pop r12
   138 00000C4B 415B                <3>  pop r11
   139 00000C4D 415A                <3>  pop r10
   140 00000C4F 4159                <3>  pop r9
   141 00000C51 4158                <3>  pop r8
   142 00000C53 5F                  <3>  pop rdi
   143 00000C54 5E                  <3>  pop rsi
   144 00000C55 5A                  <3>  pop rdx
   145 00000C56 59                  <3>  pop rcx
   146 00000C57 5B                  <3>  pop rbx
   147 00000C58 58                  <3>  pop rax
    84                              <2> 
    85 00000C59 4889EC              <2>  mov rsp, rbp
    86 00000C5C 5D                  <2>  pop rbp
    87 00000C5D C3                  <2>  ret
    98                              <1> 
    99                              <1> printk:; input: format string,pointer to arguments
   100                              <1> 
   101                              <1>     prolog 2
    65 00000C5E 55                  <2>  push rbp
    66 00000C5F 4889E5              <2>  mov rbp, rsp
    67 00000C62 488945F8            <2>  mov [rbp-8],rax
    68 00000C66 B802000000          <2>  mov rax, %1
    69 00000C6B 4883C00F            <2>  add rax, 15
    70 00000C6F 4883E0F0            <2>  and rax, ~15
    71 00000C73 4829C4              <2>  sub rsp, rax
    72 00000C76 488B45F8            <2>  mov rax,[rbp-8]
    73                              <2>  pushallq
   117 00000C7A 50                  <3>  push rax
   118 00000C7B 53                  <3>  push rbx
   119 00000C7C 51                  <3>  push rcx
   120 00000C7D 52                  <3>  push rdx
   121 00000C7E 56                  <3>  push rsi
   122 00000C7F 57                  <3>  push rdi
   123 00000C80 4150                <3>  push r8
   124 00000C82 4151                <3>  push r9
   125 00000C84 4152                <3>  push r10
   126 00000C86 4153                <3>  push r11
   127 00000C88 4154                <3>  push r12
   128 00000C8A 4155                <3>  push r13
   129 00000C8C 4156                <3>  push r14
   130 00000C8E 4157                <3>  push r15
    74                              <2> 
    75                              <2> 
    76                              <2> 
    77                              <2> 
    78                              <2> 
    79                              <2> 
   102                              <1>     get_param rsi, 1   ; rsi = format string
    91 00000C90 488B7510            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   103                              <1>     get_param rdx, 2   ; rdx = pointer to arguments
    91 00000C94 488B5518            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   104                              <1> 
   105 00000C98 B800000000          <1>     mov rax,0
   106                              <1> 
   107                              <1>     .next_char:
   108 00000C9D AC                  <1>         lodsb                  ; Load next character from format string into AL
   109 00000C9E 84C0                <1>         test al, al            ; Check if end of string
   110 00000CA0 0F84BE000000        <1>         jz .done
   111                              <1> 
   112 00000CA6 3C5C                <1>         cmp al, '\'           ; Check for escape character
   113 00000CA8 0F8499000000        <1>         je .escape_character
   114                              <1> 
   115 00000CAE 3C25                <1>         cmp al, '%'            ; Check for format specifier
   116 00000CB0 750F                <1>         jne .print_char
   117 00000CB2 AC                  <1>         lodsb                  ; Load format specifier
   118 00000CB3 3C64                <1>         cmp al, 'd'            ; Check for %d
   119 00000CB5 742A                <1>         je .print_decimal
   120 00000CB7 3C78                <1>         cmp al, 'x'            ; Check for %x
   121 00000CB9 7446                <1>         je .print_hex
   122 00000CBB 3C73                <1>         cmp al, 's'            ; Check for %s
   123 00000CBD 7465                <1>         je .print_string
   124 00000CBF EBDC                <1>         jmp .next_char         ; Skip unknown specifier
   125                              <1> 
   126                              <1>     .print_char:
   127                              <1>         function print_char,1,rax
    26                              <2>  %assign param_count %0 - 2
    27                              <2> 
    28                              <2>  %if param_count < 0
    29                              <2>  %assign param_count 0
    30                              <2>  %endif
    31                              <2>  %if param_count < 1
    32                              <2>  %assign ret_param_count 0
    33                              <2>  %else
    34                              <2>  %assign ret_param_count %2
    35                              <2>  %endif
    36                              <2> 
    37                              <2> 
    38                              <2>  prepare_call param_count, ret_param_count
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 00000CC1 4883EC10            <3>  sub rsp, total_space
    39                              <2> 
    40                              <2> 
    41                              <2>  %if param_count > 0
    42                              <2>  %assign i 0
    43 00000CC5 48894424F8          <2>  mov [rsp-8], rax
    44                              <2>  %rep param_count
    45                              <2>  %rotate 1
    46                              <2>  mov rax, %2
    47                              <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    49                              <2>  %endrep
    45                              <3>  %rotate 1
    46 00000CCA 4889C0              <3>  mov rax, %2
    47 00000CCD 48890424            <3>  mov [rsp + 8*i], rax
    48                              <3>  %assign i i+1
    50                              <2> 
    51                              <2>  %rotate 1
    52                              <2>  %rotate 1
    53 00000CD1 488B4424F8          <2>  mov rax,[rsp-8]
    54                              <2>  %endif
    55                              <2> 
    56                              <2> 
    57 00000CD6 E8A4000000          <2>  call %1
    58                              <2> 
    59                              <2> 
    60                              <2>  cleanup_call param_count, ret_param_count
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 00000CDB 4883C410            <3>  add rsp, total_space
    61                              <2> 
   128 00000CDF EBBC                <1>         jmp .next_char
   129                              <1> 
   130                              <1>     .print_decimal:
   131                              <1>         function print_decimal,1,rdx
    26                              <2>  %assign param_count %0 - 2
    27                              <2> 
    28                              <2>  %if param_count < 0
    29                              <2>  %assign param_count 0
    30                              <2>  %endif
    31                              <2>  %if param_count < 1
    32                              <2>  %assign ret_param_count 0
    33                              <2>  %else
    34                              <2>  %assign ret_param_count %2
    35                              <2>  %endif
    36                              <2> 
    37                              <2> 
    38                              <2>  prepare_call param_count, ret_param_count
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 00000CE1 4883EC10            <3>  sub rsp, total_space
    39                              <2> 
    40                              <2> 
    41                              <2>  %if param_count > 0
    42                              <2>  %assign i 0
    43 00000CE5 48894424F8          <2>  mov [rsp-8], rax
    44                              <2>  %rep param_count
    45                              <2>  %rotate 1
    46                              <2>  mov rax, %2
    47                              <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    49                              <2>  %endrep
    45                              <3>  %rotate 1
    46 00000CEA 4889D0              <3>  mov rax, %2
    47 00000CED 48890424            <3>  mov [rsp + 8*i], rax
    48                              <3>  %assign i i+1
    50                              <2> 
    51                              <2>  %rotate 1
    52                              <2>  %rotate 1
    53 00000CF1 488B4424F8          <2>  mov rax,[rsp-8]
    54                              <2>  %endif
    55                              <2> 
    56                              <2> 
    57 00000CF6 E8AF010000          <2>  call %1
    58                              <2> 
    59                              <2> 
    60                              <2>  cleanup_call param_count, ret_param_count
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 00000CFB 4883C410            <3>  add rsp, total_space
    61                              <2> 
   132 00000CFF EB9C                <1>         jmp .next_char
   133                              <1> 
   134                              <1>     .print_hex:
   135                              <1>         function print_hex,1,rdx
    26                              <2>  %assign param_count %0 - 2
    27                              <2> 
    28                              <2>  %if param_count < 0
    29                              <2>  %assign param_count 0
    30                              <2>  %endif
    31                              <2>  %if param_count < 1
    32                              <2>  %assign ret_param_count 0
    33                              <2>  %else
    34                              <2>  %assign ret_param_count %2
    35                              <2>  %endif
    36                              <2> 
    37                              <2> 
    38                              <2>  prepare_call param_count, ret_param_count
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 00000D01 4883EC10            <3>  sub rsp, total_space
    39                              <2> 
    40                              <2> 
    41                              <2>  %if param_count > 0
    42                              <2>  %assign i 0
    43 00000D05 48894424F8          <2>  mov [rsp-8], rax
    44                              <2>  %rep param_count
    45                              <2>  %rotate 1
    46                              <2>  mov rax, %2
    47                              <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    49                              <2>  %endrep
    45                              <3>  %rotate 1
    46 00000D0A 4889D0              <3>  mov rax, %2
    47 00000D0D 48890424            <3>  mov [rsp + 8*i], rax
    48                              <3>  %assign i i+1
    50                              <2> 
    51                              <2>  %rotate 1
    52                              <2>  %rotate 1
    53 00000D11 488B4424F8          <2>  mov rax,[rsp-8]
    54                              <2>  %endif
    55                              <2> 
    56                              <2> 
    57 00000D16 E850020000          <2>  call %1
    58                              <2> 
    59                              <2> 
    60                              <2>  cleanup_call param_count, ret_param_count
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 00000D1B 4883C410            <3>  add rsp, total_space
    61                              <2> 
   136 00000D1F E979FFFFFF          <1>         jmp .next_char
   137                              <1> 
   138                              <1>     .print_string:
   139                              <1> 
   140                              <1>         function print_string,1,rdx
    26                              <2>  %assign param_count %0 - 2
    27                              <2> 
    28                              <2>  %if param_count < 0
    29                              <2>  %assign param_count 0
    30                              <2>  %endif
    31                              <2>  %if param_count < 1
    32                              <2>  %assign ret_param_count 0
    33                              <2>  %else
    34                              <2>  %assign ret_param_count %2
    35                              <2>  %endif
    36                              <2> 
    37                              <2> 
    38                              <2>  prepare_call param_count, ret_param_count
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 00000D24 4883EC10            <3>  sub rsp, total_space
    39                              <2> 
    40                              <2> 
    41                              <2>  %if param_count > 0
    42                              <2>  %assign i 0
    43 00000D28 48894424F8          <2>  mov [rsp-8], rax
    44                              <2>  %rep param_count
    45                              <2>  %rotate 1
    46                              <2>  mov rax, %2
    47                              <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    49                              <2>  %endrep
    45                              <3>  %rotate 1
    46 00000D2D 4889D0              <3>  mov rax, %2
    47 00000D30 48890424            <3>  mov [rsp + 8*i], rax
    48                              <3>  %assign i i+1
    50                              <2> 
    51                              <2>  %rotate 1
    52                              <2>  %rotate 1
    53 00000D34 488B4424F8          <2>  mov rax,[rsp-8]
    54                              <2>  %endif
    55                              <2> 
    56                              <2> 
    57 00000D39 E8EB020000          <2>  call %1
    58                              <2> 
    59                              <2> 
    60                              <2>  cleanup_call param_count, ret_param_count
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 00000D3E 4883C410            <3>  add rsp, total_space
    61                              <2> 
   141 00000D42 E956FFFFFF          <1>         jmp .next_char
   142                              <1> 
   143                              <1>     .escape_character:
   144 00000D47 AC                  <1>         lodsb                  ; Load next character from string into AL
   145 00000D48 3C6E                <1>         cmp al, 'n'            ; Check for %d
   146 00000D4A 7402                <1>         je .new_line
   147 00000D4C EB11                <1>         jmp .escape_done
   148                              <1>         .new_line:
   149 00000D4E 668305ECFDFFFF01    <1>             add word [rel print_info_ptr + print_info.print_yposition],1
   150 00000D56 66C705E1FDFFFF0000  <1>             mov word [rel print_info_ptr + print_info.print_xposition],0
   151                              <1>         .escape_done:
   152 00000D5F E939FFFFFF          <1>             jmp .next_char           
   153                              <1> 
   154                              <1>     .done:
   155                              <1>         epilog
    83                              <2>  popallq
   134 00000D64 415F                <3>  pop r15
   135 00000D66 415E                <3>  pop r14
   136 00000D68 415D                <3>  pop r13
   137 00000D6A 415C                <3>  pop r12
   138 00000D6C 415B                <3>  pop r11
   139 00000D6E 415A                <3>  pop r10
   140 00000D70 4159                <3>  pop r9
   141 00000D72 4158                <3>  pop r8
   142 00000D74 5F                  <3>  pop rdi
   143 00000D75 5E                  <3>  pop rsi
   144 00000D76 5A                  <3>  pop rdx
   145 00000D77 59                  <3>  pop rcx
   146 00000D78 5B                  <3>  pop rbx
   147 00000D79 58                  <3>  pop rax
    84                              <2> 
    85 00000D7A 4889EC              <2>  mov rsp, rbp
    86 00000D7D 5D                  <2>  pop rbp
    87 00000D7E C3                  <2>  ret
   156                              <1> 
   157                              <1> print_char:; input:char
   158                              <1>     prolog 2;
    65 00000D7F 55                  <2>  push rbp
    66 00000D80 4889E5              <2>  mov rbp, rsp
    67 00000D83 488945F8            <2>  mov [rbp-8],rax
    68 00000D87 B802000000          <2>  mov rax, %1
    69 00000D8C 4883C00F            <2>  add rax, 15
    70 00000D90 4883E0F0            <2>  and rax, ~15
    71 00000D94 4829C4              <2>  sub rsp, rax
    72 00000D97 488B45F8            <2>  mov rax,[rbp-8]
    73                              <2>  pushallq
   117 00000D9B 50                  <3>  push rax
   118 00000D9C 53                  <3>  push rbx
   119 00000D9D 51                  <3>  push rcx
   120 00000D9E 52                  <3>  push rdx
   121 00000D9F 56                  <3>  push rsi
   122 00000DA0 57                  <3>  push rdi
   123 00000DA1 4150                <3>  push r8
   124 00000DA3 4151                <3>  push r9
   125 00000DA5 4152                <3>  push r10
   126 00000DA7 4153                <3>  push r11
   127 00000DA9 4154                <3>  push r12
   128 00000DAB 4155                <3>  push r13
   129 00000DAD 4156                <3>  push r14
   130 00000DAF 4157                <3>  push r15
    74                              <2> 
    75                              <2> 
    76                              <2> 
    77                              <2> 
    78                              <2> 
    79                              <2> 
   159                              <1> 
   160                              <1>     get_param rsi, 1   ; char
    91 00000DB1 488B7510            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   161                              <1> 
   162                              <1> 
   163                              <1> 
   164 00000DB5 B800000000          <1>     mov rax, 0
   165 00000DBA 668B0581FDFFFF      <1>     mov ax, word [rel print_info_ptr + print_info.print_yposition]
   166                              <1> 
   167 00000DC1 BB00000000          <1>     mov rbx,0
   168 00000DC6 668B1D68F6FFFF      <1>     mov bx,word [rel video_info_ptr + video_info.xpixel]
   169 00000DCD 48F7E3              <1>     mul rbx
   170                              <1> 
   171                              <1> 
   172 00000DD0 BB00000000          <1>     mov rbx,0
   173 00000DD5 668B1D86FDFFFF      <1>     mov bx,word [rel print_info_ptr + print_info.pixel_line_height]
   174 00000DDC 48F7E3              <1>     mul rbx
   175                              <1> 
   176 00000DDF 50                  <1>     push rax
   177 00000DE0 4831C0              <1>     xor rax,rax
   178 00000DE3 668B0556FDFFFF      <1>     mov ax,word [rel print_info_ptr + print_info.print_xposition]
   179 00000DEA BB00000000          <1>     mov rbx,0
   180 00000DEF 668B1D66FDFFFF      <1>     mov bx,word [rel print_info_ptr + print_info.font_width]
   181 00000DF6 48F7E3              <1>     mul rbx
   182                              <1> 
   183                              <1> 
   184 00000DF9 B900000000          <1>     mov rcx,0
   185 00000DFE 59                  <1>     pop rcx
   186 00000DFF 4801C8              <1>     add rax, rcx
   187                              <1> 
   188 00000E02 BB00000000          <1>     mov rbx,0
   189 00000E07 8A1D2CF6FFFF        <1>     mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   190 00000E0D 48F7E3              <1>     mul rbx
   191                              <1> 
   192 00000E10 488B3D23F6FFFF      <1>     mov rdi, qword [rel video_info_ptr + video_info.video_framebuffer]
   193 00000E17 4801C7              <1>     add rdi, rax        ;rdi=屏幕地址
   194                              <1> 
   195                              <1> 
   196 00000E1A 48C1E604            <1>     shl rsi, 4
   197                              <1> 
   198 00000E1E BB00000000          <1>     mov rbx,0
   199 00000E23 488B1D28FDFFFF      <1>     mov rbx, [rel print_info_ptr + print_info.font_base_address]
   200 00000E2A 4801DE              <1>     add rsi, rbx        ; RSI = 字符数据地址
   201                              <1> 
   202 00000E2D 4831C9              <1>     xor rcx,rcx
   203 00000E30 668B0D27FDFFFF      <1>     mov cx, word [rel print_info_ptr + print_info.font_height]
   204                              <1> 
   205                              <1>     .next_line:
   206 00000E37 57                  <1>         push rdi               ; 保存当前行起始位置
   207                              <1>         
   208                              <1>         ; 处理一行(8像素)
   209 00000E38 8A16                <1>         mov dl, [rsi]          ; 获取字模数据
   210 00000E3A B608                <1>         mov dh, 8              ; 8位/行
   211                              <1>         .next_pixel:
   212 00000E3C 4831C0              <1>             xor rax,rax
   213 00000E3F 8A05F4F5FFFF        <1>             mov al,byte [rel video_info_ptr + video_info.byte_per_pixel]
   214                              <1> 
   215 00000E45 F6C280              <1>             test dl, 0x80       ; 测试最高位
   216 00000E48 7413                <1>             jz .skip_pixel
   217                              <1> 
   218                              <1> 
   219 00000E4A 3C04                <1>             cmp al,4
   220 00000E4C 7208                <1>             jb .pixel_2byte
   221 00000E4E C64702FF            <1>             mov byte [rdi+2], 0xFF ; 绘制像素(白色)
   222 00000E52 C6470300            <1>             mov byte [rdi+3], 0x00 ; 绘制像素(白色)
   223                              <1>             .pixel_2byte:
   224 00000E56 C607FF              <1>                 mov byte [rdi], 0xFF ; 绘制像素(白色)
   225 00000E59 C64701FF            <1>                 mov byte [rdi+1], 0xFF ; 绘制像素(白色)
   226                              <1>             ; jmp $
   227                              <1>         .skip_pixel:
   228 00000E5D D0E2                <1>             shl dl, 1           ; 移到下一位
   229 00000E5F 4801C7              <1>             add rdi,rax
   230 00000E62 FECE                <1>             dec dh
   231 00000E64 75D6                <1>             jnz .next_pixel
   232                              <1>         
   233 00000E66 5F                  <1>         pop rdi                 ; 恢复行起始位置
   234 00000E67 4831C0              <1>         xor rax,rax
   235 00000E6A 668B05C4F5FFFF      <1>         mov ax,word [rel video_info_ptr + video_info.xpixel]
   236                              <1> 
   237 00000E71 BB00000000          <1>         mov rbx,0
   238 00000E76 8A1DBDF5FFFF        <1>         mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   239 00000E7C 48F7E3              <1>         mul rbx
   240                              <1> 
   241 00000E7F 4801C7              <1>         add rdi,rax; 移到下一行(320=屏幕宽度)
   242                              <1> 
   243 00000E82 48FFC6              <1>         inc rsi                 ; 下一个字模字节
   244                              <1> 
   245 00000E85 E2B0                <1>         loop .next_line
   246                              <1>     
   247 00000E87 668305B1FCFFFF01    <1>     add word [rel print_info_ptr + print_info.print_xposition],1
   248                              <1>     epilog
    83                              <2>  popallq
   134 00000E8F 415F                <3>  pop r15
   135 00000E91 415E                <3>  pop r14
   136 00000E93 415D                <3>  pop r13
   137 00000E95 415C                <3>  pop r12
   138 00000E97 415B                <3>  pop r11
   139 00000E99 415A                <3>  pop r10
   140 00000E9B 4159                <3>  pop r9
   141 00000E9D 4158                <3>  pop r8
   142 00000E9F 5F                  <3>  pop rdi
   143 00000EA0 5E                  <3>  pop rsi
   144 00000EA1 5A                  <3>  pop rdx
   145 00000EA2 59                  <3>  pop rcx
   146 00000EA3 5B                  <3>  pop rbx
   147 00000EA4 58                  <3>  pop rax
    84                              <2> 
    85 00000EA5 4889EC              <2>  mov rsp, rbp
    86 00000EA8 5D                  <2>  pop rbp
    87 00000EA9 C3                  <2>  ret
   249                              <1> 
   250                              <1> print_decimal:;input:rsi=decimal number
   251                              <1> 
   252                              <1>     prolog 2;
    65 00000EAA 55                  <2>  push rbp
    66 00000EAB 4889E5              <2>  mov rbp, rsp
    67 00000EAE 488945F8            <2>  mov [rbp-8],rax
    68 00000EB2 B802000000          <2>  mov rax, %1
    69 00000EB7 4883C00F            <2>  add rax, 15
    70 00000EBB 4883E0F0            <2>  and rax, ~15
    71 00000EBF 4829C4              <2>  sub rsp, rax
    72 00000EC2 488B45F8            <2>  mov rax,[rbp-8]
    73                              <2>  pushallq
   117 00000EC6 50                  <3>  push rax
   118 00000EC7 53                  <3>  push rbx
   119 00000EC8 51                  <3>  push rcx
   120 00000EC9 52                  <3>  push rdx
   121 00000ECA 56                  <3>  push rsi
   122 00000ECB 57                  <3>  push rdi
   123 00000ECC 4150                <3>  push r8
   124 00000ECE 4151                <3>  push r9
   125 00000ED0 4152                <3>  push r10
   126 00000ED2 4153                <3>  push r11
   127 00000ED4 4154                <3>  push r12
   128 00000ED6 4155                <3>  push r13
   129 00000ED8 4156                <3>  push r14
   130 00000EDA 4157                <3>  push r15
    74                              <2> 
    75                              <2> 
    76                              <2> 
    77                              <2> 
    78                              <2> 
    79                              <2> 
   253                              <1> 
   254                              <1>     get_param rsi, 1   ; dec
    91 00000EDC 488B7510            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   255                              <1> 
   256 00000EE0 BB44000000          <1>     mov rbx, 'D'
   257                              <1>     function print_char,1,rbx    
    26                              <2>  %assign param_count %0 - 2
    27                              <2> 
    28                              <2>  %if param_count < 0
    29                              <2>  %assign param_count 0
    30                              <2>  %endif
    31                              <2>  %if param_count < 1
    32                              <2>  %assign ret_param_count 0
    33                              <2>  %else
    34                              <2>  %assign ret_param_count %2
    35                              <2>  %endif
    36                              <2> 
    37                              <2> 
    38                              <2>  prepare_call param_count, ret_param_count
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 00000EE5 4883EC10            <3>  sub rsp, total_space
    39                              <2> 
    40                              <2> 
    41                              <2>  %if param_count > 0
    42                              <2>  %assign i 0
    43 00000EE9 48894424F8          <2>  mov [rsp-8], rax
    44                              <2>  %rep param_count
    45                              <2>  %rotate 1
    46                              <2>  mov rax, %2
    47                              <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    49                              <2>  %endrep
    45                              <3>  %rotate 1
    46 00000EEE 4889D8              <3>  mov rax, %2
    47 00000EF1 48890424            <3>  mov [rsp + 8*i], rax
    48                              <3>  %assign i i+1
    50                              <2> 
    51                              <2>  %rotate 1
    52                              <2>  %rotate 1
    53 00000EF5 488B4424F8          <2>  mov rax,[rsp-8]
    54                              <2>  %endif
    55                              <2> 
    56                              <2> 
    57 00000EFA E880FEFFFF          <2>  call %1
    58                              <2> 
    59                              <2> 
    60                              <2>  cleanup_call param_count, ret_param_count
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 00000EFF 4883C410            <3>  add rsp, total_space
    61                              <2> 
   258                              <1> 
   259 00000F03 4831C0              <1>     xor rax, rax
   260 00000F06 4831DB              <1>     xor rbx, rbx
   261 00000F09 4831D2              <1>     xor rdx, rdx
   262 00000F0C 488B06              <1>     mov rax, [rsi]
   263                              <1> 
   264 00000F0F 4831DB              <1>     xor rbx, rbx
   265 00000F12 BB0A000000          <1>     mov rbx, 10              ; Base 10
   266 00000F17 4831C9              <1>     xor rcx, rcx             ; Digit counter
   267                              <1> 
   268                              <1>     .convert_loop:
   269 00000F1A 4831D2              <1>         xor rdx, rdx
   270 00000F1D 48F7F3              <1>         div rbx              ; Divide rax by 10, remainder in rdx
   271 00000F20 52                  <1>         push rdx             ; Save remainder (digit)
   272 00000F21 48FFC1              <1>         inc rcx              ; Increment digit counter
   273 00000F24 4885C0              <1>         test rax, rax
   274 00000F27 75F1                <1>         jnz .convert_loop    ; Repeat until rax == 0
   275                              <1> 
   276                              <1>     .print_digits:
   277 00000F29 5A                  <1>         pop rdx              ; Get digit from stack
   278 00000F2A 80C230              <1>         add dl, '0'          ; Convert to ASCII
   279                              <1> 
   280 00000F2D 4889D3              <1>         mov rbx, rdx
   281                              <1>         function print_char,1,rbx    
    26                              <2>  %assign param_count %0 - 2
    27                              <2> 
    28                              <2>  %if param_count < 0
    29                              <2>  %assign param_count 0
    30                              <2>  %endif
    31                              <2>  %if param_count < 1
    32                              <2>  %assign ret_param_count 0
    33                              <2>  %else
    34                              <2>  %assign ret_param_count %2
    35                              <2>  %endif
    36                              <2> 
    37                              <2> 
    38                              <2>  prepare_call param_count, ret_param_count
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 00000F30 4883EC10            <3>  sub rsp, total_space
    39                              <2> 
    40                              <2> 
    41                              <2>  %if param_count > 0
    42                              <2>  %assign i 0
    43 00000F34 48894424F8          <2>  mov [rsp-8], rax
    44                              <2>  %rep param_count
    45                              <2>  %rotate 1
    46                              <2>  mov rax, %2
    47                              <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    49                              <2>  %endrep
    45                              <3>  %rotate 1
    46 00000F39 4889D8              <3>  mov rax, %2
    47 00000F3C 48890424            <3>  mov [rsp + 8*i], rax
    48                              <3>  %assign i i+1
    50                              <2> 
    51                              <2>  %rotate 1
    52                              <2>  %rotate 1
    53 00000F40 488B4424F8          <2>  mov rax,[rsp-8]
    54                              <2>  %endif
    55                              <2> 
    56                              <2> 
    57 00000F45 E835FEFFFF          <2>  call %1
    58                              <2> 
    59                              <2> 
    60                              <2>  cleanup_call param_count, ret_param_count
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 00000F4A 4883C410            <3>  add rsp, total_space
    61                              <2> 
   282                              <1> 
   283 00000F4E E2D9                <1>         loop .print_digits
   284                              <1> 
   285                              <1>     epilog
    83                              <2>  popallq
   134 00000F50 415F                <3>  pop r15
   135 00000F52 415E                <3>  pop r14
   136 00000F54 415D                <3>  pop r13
   137 00000F56 415C                <3>  pop r12
   138 00000F58 415B                <3>  pop r11
   139 00000F5A 415A                <3>  pop r10
   140 00000F5C 4159                <3>  pop r9
   141 00000F5E 4158                <3>  pop r8
   142 00000F60 5F                  <3>  pop rdi
   143 00000F61 5E                  <3>  pop rsi
   144 00000F62 5A                  <3>  pop rdx
   145 00000F63 59                  <3>  pop rcx
   146 00000F64 5B                  <3>  pop rbx
   147 00000F65 58                  <3>  pop rax
    84                              <2> 
    85 00000F66 4889EC              <2>  mov rsp, rbp
    86 00000F69 5D                  <2>  pop rbp
    87 00000F6A C3                  <2>  ret
   286                              <1> 
   287                              <1> 
   288                              <1> print_hex:;input:rsi=hex number
   289                              <1> 
   290                              <1>     prolog 2;
    65 00000F6B 55                  <2>  push rbp
    66 00000F6C 4889E5              <2>  mov rbp, rsp
    67 00000F6F 488945F8            <2>  mov [rbp-8],rax
    68 00000F73 B802000000          <2>  mov rax, %1
    69 00000F78 4883C00F            <2>  add rax, 15
    70 00000F7C 4883E0F0            <2>  and rax, ~15
    71 00000F80 4829C4              <2>  sub rsp, rax
    72 00000F83 488B45F8            <2>  mov rax,[rbp-8]
    73                              <2>  pushallq
   117 00000F87 50                  <3>  push rax
   118 00000F88 53                  <3>  push rbx
   119 00000F89 51                  <3>  push rcx
   120 00000F8A 52                  <3>  push rdx
   121 00000F8B 56                  <3>  push rsi
   122 00000F8C 57                  <3>  push rdi
   123 00000F8D 4150                <3>  push r8
   124 00000F8F 4151                <3>  push r9
   125 00000F91 4152                <3>  push r10
   126 00000F93 4153                <3>  push r11
   127 00000F95 4154                <3>  push r12
   128 00000F97 4155                <3>  push r13
   129 00000F99 4156                <3>  push r14
   130 00000F9B 4157                <3>  push r15
    74                              <2> 
    75                              <2> 
    76                              <2> 
    77                              <2> 
    78                              <2> 
    79                              <2> 
   291                              <1> 
   292                              <1>     get_param rsi, 1   ; dec
    91 00000F9D 488B7510            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   293                              <1> 
   294 00000FA1 BB58000000          <1>     mov rbx, 'X'
   295                              <1>     function print_char,1,rbx    
    26                              <2>  %assign param_count %0 - 2
    27                              <2> 
    28                              <2>  %if param_count < 0
    29                              <2>  %assign param_count 0
    30                              <2>  %endif
    31                              <2>  %if param_count < 1
    32                              <2>  %assign ret_param_count 0
    33                              <2>  %else
    34                              <2>  %assign ret_param_count %2
    35                              <2>  %endif
    36                              <2> 
    37                              <2> 
    38                              <2>  prepare_call param_count, ret_param_count
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 00000FA6 4883EC10            <3>  sub rsp, total_space
    39                              <2> 
    40                              <2> 
    41                              <2>  %if param_count > 0
    42                              <2>  %assign i 0
    43 00000FAA 48894424F8          <2>  mov [rsp-8], rax
    44                              <2>  %rep param_count
    45                              <2>  %rotate 1
    46                              <2>  mov rax, %2
    47                              <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    49                              <2>  %endrep
    45                              <3>  %rotate 1
    46 00000FAF 4889D8              <3>  mov rax, %2
    47 00000FB2 48890424            <3>  mov [rsp + 8*i], rax
    48                              <3>  %assign i i+1
    50                              <2> 
    51                              <2>  %rotate 1
    52                              <2>  %rotate 1
    53 00000FB6 488B4424F8          <2>  mov rax,[rsp-8]
    54                              <2>  %endif
    55                              <2> 
    56                              <2> 
    57 00000FBB E8BFFDFFFF          <2>  call %1
    58                              <2> 
    59                              <2> 
    60                              <2>  cleanup_call param_count, ret_param_count
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 00000FC0 4883C410            <3>  add rsp, total_space
    61                              <2> 
   296                              <1> 
   297 00000FC4 4831C0              <1>     xor rax, rax
   298 00000FC7 4831DB              <1>     xor rbx, rbx
   299 00000FCA 4831D2              <1>     xor rdx, rdx
   300 00000FCD 488B06              <1>     mov rax, [rsi]
   301                              <1> 
   302 00000FD0 B910000000          <1>     mov rcx, 16              ; Process 16 digits (64-bit number)
   303                              <1>     .convert_loop:
   304 00000FD5 48C1C004            <1>         rol rax, 4           ; Rotate left by 4 bits
   305 00000FD9 88C2                <1>         mov dl, al           ; Extract lower nibble
   306 00000FDB 80E20F              <1>         and dl, 0x0F         ; Mask to get a single hex digit
   307 00000FDE 80FA0A              <1>         cmp dl, 10
   308 00000FE1 7C05                <1>         jl .digit
   309 00000FE3 80C257              <1>         add dl, 'a' - 10     ; Convert to 'A'-'F'
   310 00000FE6 EB03                <1>         jmp .output
   311                              <1>     .digit:
   312 00000FE8 80C230              <1>         add dl, '0'          ; Convert to '0'-'9'
   313                              <1>     .output:
   314 00000FEB 4889D3              <1>         mov rbx, rdx
   315                              <1>         function print_char,1,rbx    
    26                              <2>  %assign param_count %0 - 2
    27                              <2> 
    28                              <2>  %if param_count < 0
    29                              <2>  %assign param_count 0
    30                              <2>  %endif
    31                              <2>  %if param_count < 1
    32                              <2>  %assign ret_param_count 0
    33                              <2>  %else
    34                              <2>  %assign ret_param_count %2
    35                              <2>  %endif
    36                              <2> 
    37                              <2> 
    38                              <2>  prepare_call param_count, ret_param_count
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 00000FEE 4883EC10            <3>  sub rsp, total_space
    39                              <2> 
    40                              <2> 
    41                              <2>  %if param_count > 0
    42                              <2>  %assign i 0
    43 00000FF2 48894424F8          <2>  mov [rsp-8], rax
    44                              <2>  %rep param_count
    45                              <2>  %rotate 1
    46                              <2>  mov rax, %2
    47                              <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    49                              <2>  %endrep
    45                              <3>  %rotate 1
    46 00000FF7 4889D8              <3>  mov rax, %2
    47 00000FFA 48890424            <3>  mov [rsp + 8*i], rax
    48                              <3>  %assign i i+1
    50                              <2> 
    51                              <2>  %rotate 1
    52                              <2>  %rotate 1
    53 00000FFE 488B4424F8          <2>  mov rax,[rsp-8]
    54                              <2>  %endif
    55                              <2> 
    56                              <2> 
    57 00001003 E877FDFFFF          <2>  call %1
    58                              <2> 
    59                              <2> 
    60                              <2>  cleanup_call param_count, ret_param_count
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 00001008 4883C410            <3>  add rsp, total_space
    61                              <2> 
   316 0000100C E2C7                <1>         loop .convert_loop
   317                              <1>     epilog
    83                              <2>  popallq
   134 0000100E 415F                <3>  pop r15
   135 00001010 415E                <3>  pop r14
   136 00001012 415D                <3>  pop r13
   137 00001014 415C                <3>  pop r12
   138 00001016 415B                <3>  pop r11
   139 00001018 415A                <3>  pop r10
   140 0000101A 4159                <3>  pop r9
   141 0000101C 4158                <3>  pop r8
   142 0000101E 5F                  <3>  pop rdi
   143 0000101F 5E                  <3>  pop rsi
   144 00001020 5A                  <3>  pop rdx
   145 00001021 59                  <3>  pop rcx
   146 00001022 5B                  <3>  pop rbx
   147 00001023 58                  <3>  pop rax
    84                              <2> 
    85 00001024 4889EC              <2>  mov rsp, rbp
    86 00001027 5D                  <2>  pop rbp
    87 00001028 C3                  <2>  ret
   318                              <1> 
   319                              <1> 
   320                              <1> 
   321                              <1> print_string:;input: string
   322                              <1>     prolog 2;
    65 00001029 55                  <2>  push rbp
    66 0000102A 4889E5              <2>  mov rbp, rsp
    67 0000102D 488945F8            <2>  mov [rbp-8],rax
    68 00001031 B802000000          <2>  mov rax, %1
    69 00001036 4883C00F            <2>  add rax, 15
    70 0000103A 4883E0F0            <2>  and rax, ~15
    71 0000103E 4829C4              <2>  sub rsp, rax
    72 00001041 488B45F8            <2>  mov rax,[rbp-8]
    73                              <2>  pushallq
   117 00001045 50                  <3>  push rax
   118 00001046 53                  <3>  push rbx
   119 00001047 51                  <3>  push rcx
   120 00001048 52                  <3>  push rdx
   121 00001049 56                  <3>  push rsi
   122 0000104A 57                  <3>  push rdi
   123 0000104B 4150                <3>  push r8
   124 0000104D 4151                <3>  push r9
   125 0000104F 4152                <3>  push r10
   126 00001051 4153                <3>  push r11
   127 00001053 4154                <3>  push r12
   128 00001055 4155                <3>  push r13
   129 00001057 4156                <3>  push r14
   130 00001059 4157                <3>  push r15
    74                              <2> 
    75                              <2> 
    76                              <2> 
    77                              <2> 
    78                              <2> 
    79                              <2> 
   323                              <1>     get_param rsi, 1   ; string
    91 0000105B 488B7510            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   324                              <1> 
   325 0000105F 4831C0              <1>     xor rax,rax
   326                              <1>     .next_char_t:
   327 00001062 AC                  <1>         lodsb                  ; Load next character from string into AL
   328 00001063 84C0                <1>         test al, al            ; Check if end of string
   329 00001065 743E                <1>         jz .done_t
   330                              <1> 
   331 00001067 3C5C                <1>         cmp al, '\'           ; Check for escape character
   332 00001069 7420                <1>         je .escape_character
   333                              <1> 
   334                              <1>         function print_char,1,rax
    26                              <2>  %assign param_count %0 - 2
    27                              <2> 
    28                              <2>  %if param_count < 0
    29                              <2>  %assign param_count 0
    30                              <2>  %endif
    31                              <2>  %if param_count < 1
    32                              <2>  %assign ret_param_count 0
    33                              <2>  %else
    34                              <2>  %assign ret_param_count %2
    35                              <2>  %endif
    36                              <2> 
    37                              <2> 
    38                              <2>  prepare_call param_count, ret_param_count
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 0000106B 4883EC10            <3>  sub rsp, total_space
    39                              <2> 
    40                              <2> 
    41                              <2>  %if param_count > 0
    42                              <2>  %assign i 0
    43 0000106F 48894424F8          <2>  mov [rsp-8], rax
    44                              <2>  %rep param_count
    45                              <2>  %rotate 1
    46                              <2>  mov rax, %2
    47                              <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    49                              <2>  %endrep
    45                              <3>  %rotate 1
    46 00001074 4889C0              <3>  mov rax, %2
    47 00001077 48890424            <3>  mov [rsp + 8*i], rax
    48                              <3>  %assign i i+1
    50                              <2> 
    51                              <2>  %rotate 1
    52                              <2>  %rotate 1
    53 0000107B 488B4424F8          <2>  mov rax,[rsp-8]
    54                              <2>  %endif
    55                              <2> 
    56                              <2> 
    57 00001080 E8FAFCFFFF          <2>  call %1
    58                              <2> 
    59                              <2> 
    60                              <2>  cleanup_call param_count, ret_param_count
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 00001085 4883C410            <3>  add rsp, total_space
    61                              <2> 
   335                              <1> 
   336 00001089 EBD7                <1>         jmp .next_char_t
   337                              <1>         .escape_character:
   338 0000108B AC                  <1>             lodsb                  ; Load next character from string into AL
   339 0000108C 3C6E                <1>             cmp al, 'n'            ; Check for %d
   340 0000108E 7402                <1>             je .new_line
   341 00001090 EB11                <1>             jmp .escape_done
   342                              <1>             .new_line:
   343 00001092 668305A8FAFFFF01    <1>                 add word [rel print_info_ptr + print_info.print_yposition],1
   344 0000109A 66C7059DFAFFFF0000  <1>                 mov word [rel print_info_ptr + print_info.print_xposition],0
   345                              <1>             .escape_done:
   346 000010A3 EBBD                <1>                 jmp .next_char_t            
   347                              <1>     .done_t:
   348                              <1>     epilog
    83                              <2>  popallq
   134 000010A5 415F                <3>  pop r15
   135 000010A7 415E                <3>  pop r14
   136 000010A9 415D                <3>  pop r13
   137 000010AB 415C                <3>  pop r12
   138 000010AD 415B                <3>  pop r11
   139 000010AF 415A                <3>  pop r10
   140 000010B1 4159                <3>  pop r9
   141 000010B3 4158                <3>  pop r8
   142 000010B5 5F                  <3>  pop rdi
   143 000010B6 5E                  <3>  pop rsi
   144 000010B7 5A                  <3>  pop rdx
   145 000010B8 59                  <3>  pop rcx
   146 000010B9 5B                  <3>  pop rbx
   147 000010BA 58                  <3>  pop rax
    84                              <2> 
    85 000010BB 4889EC              <2>  mov rsp, rbp
    86 000010BE 5D                  <2>  pop rbp
    87 000010BF C3                  <2>  ret
   349                              <1> flush_framebuffer:;flush framebuffer
   350                              <1>     prolog 0;
    65 000010C0 55                  <2>  push rbp
    66 000010C1 4889E5              <2>  mov rbp, rsp
    67 000010C4 488945F8            <2>  mov [rbp-8],rax
    68 000010C8 B800000000          <2>  mov rax, %1
    69 000010CD 4883C00F            <2>  add rax, 15
    70 000010D1 4883E0F0            <2>  and rax, ~15
    71 000010D5 4829C4              <2>  sub rsp, rax
    72 000010D8 488B45F8            <2>  mov rax,[rbp-8]
    73                              <2>  pushallq
   117 000010DC 50                  <3>  push rax
   118 000010DD 53                  <3>  push rbx
   119 000010DE 51                  <3>  push rcx
   120 000010DF 52                  <3>  push rdx
   121 000010E0 56                  <3>  push rsi
   122 000010E1 57                  <3>  push rdi
   123 000010E2 4150                <3>  push r8
   124 000010E4 4151                <3>  push r9
   125 000010E6 4152                <3>  push r10
   126 000010E8 4153                <3>  push r11
   127 000010EA 4154                <3>  push r12
   128 000010EC 4155                <3>  push r13
   129 000010EE 4156                <3>  push r14
   130 000010F0 4157                <3>  push r15
    74                              <2> 
    75                              <2> 
    76                              <2> 
    77                              <2> 
    78                              <2> 
    79                              <2> 
   351 000010F2 B800000000          <1>     mov rax, 0
   352 000010F7 668B0544FAFFFF      <1>     mov ax, word [rel print_info_ptr + print_info.print_yposition]
   353 000010FE BB00000000          <1>     mov rbx,0
   354 00001103 668B1D2BF3FFFF      <1>     mov bx,word [rel video_info_ptr + video_info.xpixel]
   355 0000110A 480FAFC3            <1>     imul rax,rbx
   356 0000110E B900000000          <1>     mov rcx,0
   357 00001113 668B0D26FAFFFF      <1>     mov cx,word [rel print_info_ptr + print_info.print_xposition]
   358 0000111A 4801C8              <1>     add rax, rcx
   359 0000111D BB00000000          <1>     mov rbx,0
   360 00001122 8A1D11F3FFFF        <1>     mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   361 00001128 480FAFC3            <1>     imul rax,rbx
   362                              <1>     ; jmp $
   363 0000112C 488B3D07F3FFFF      <1>     mov rdi, qword [rel video_info_ptr + video_info.video_framebuffer]
   364 00001133 4801C7              <1>     add rdi, rax
   365 00001136 B800000000          <1>     mov rax,0
   366                              <1>     epilog
    83                              <2>  popallq
   134 0000113B 415F                <3>  pop r15
   135 0000113D 415E                <3>  pop r14
   136 0000113F 415D                <3>  pop r13
   137 00001141 415C                <3>  pop r12
   138 00001143 415B                <3>  pop r11
   139 00001145 415A                <3>  pop r10
   140 00001147 4159                <3>  pop r9
   141 00001149 4158                <3>  pop r8
   142 0000114B 5F                  <3>  pop rdi
   143 0000114C 5E                  <3>  pop rsi
   144 0000114D 5A                  <3>  pop rdx
   145 0000114E 59                  <3>  pop rcx
   146 0000114F 5B                  <3>  pop rbx
   147 00001150 58                  <3>  pop rax
    84                              <2> 
    85 00001151 4889EC              <2>  mov rsp, rbp
    86 00001154 5D                  <2>  pop rbp
    87 00001155 C3                  <2>  ret
   367                              <1> 
   368                              <1> draw_char:; input: x,y,char; draw a character
   369                              <1>     prolog 2;
    65 00001156 55                  <2>  push rbp
    66 00001157 4889E5              <2>  mov rbp, rsp
    67 0000115A 488945F8            <2>  mov [rbp-8],rax
    68 0000115E B802000000          <2>  mov rax, %1
    69 00001163 4883C00F            <2>  add rax, 15
    70 00001167 4883E0F0            <2>  and rax, ~15
    71 0000116B 4829C4              <2>  sub rsp, rax
    72 0000116E 488B45F8            <2>  mov rax,[rbp-8]
    73                              <2>  pushallq
   117 00001172 50                  <3>  push rax
   118 00001173 53                  <3>  push rbx
   119 00001174 51                  <3>  push rcx
   120 00001175 52                  <3>  push rdx
   121 00001176 56                  <3>  push rsi
   122 00001177 57                  <3>  push rdi
   123 00001178 4150                <3>  push r8
   124 0000117A 4151                <3>  push r9
   125 0000117C 4152                <3>  push r10
   126 0000117E 4153                <3>  push r11
   127 00001180 4154                <3>  push r12
   128 00001182 4155                <3>  push r13
   129 00001184 4156                <3>  push r14
   130 00001186 4157                <3>  push r15
    74                              <2> 
    75                              <2> 
    76                              <2> 
    77                              <2> 
    78                              <2> 
    79                              <2> 
   370                              <1>     get_param r8, 1   ; x
    91 00001188 4C8B4510            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   371                              <1>     get_param r9, 2   ; y
    91 0000118C 4C8B4D18            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   372                              <1>     get_param rsi, 3   ; char
    91 00001190 488B7520            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   373                              <1> 
   374 00001194 B800000000          <1>     mov rax, 0
   375 00001199 4C89C8              <1>     mov rax, r9
   376                              <1> 
   377 0000119C BB00000000          <1>     mov rbx,0
   378 000011A1 668B1D8DF2FFFF      <1>     mov bx,word [rel video_info_ptr + video_info.xpixel]
   379 000011A8 480FAFC3            <1>     imul rax,rbx
   380                              <1> 
   381 000011AC B900000000          <1>     mov rcx,0
   382 000011B1 4C89C1              <1>     mov rcx,r8
   383 000011B4 4801C8              <1>     add rax, rcx
   384                              <1> 
   385 000011B7 BB00000000          <1>     mov rbx,0
   386 000011BC 8A1D77F2FFFF        <1>     mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   387 000011C2 480FAFC3            <1>     imul rax,rbx
   388                              <1>     ; jmp $
   389 000011C6 488B3D6DF2FFFF      <1>     mov rdi, qword [rel video_info_ptr + video_info.video_framebuffer]
   390 000011CD 4801C7              <1>     add rdi, rax        ;rdi=屏幕地址
   391                              <1> 
   392                              <1> 
   393 000011D0 4831C0              <1>     xor rax, rax
   394 000011D3 4889F0              <1>     mov rax,rsi
   395                              <1> 
   396 000011D6 48C1E004            <1>     shl rax, 4                 ; 乘以16(每个字符16字节)
   397 000011DA 488B1D71F9FFFF      <1>     mov rbx, [rel print_info_ptr + print_info.font_base_address]
   398 000011E1 4801C3              <1>     add rbx, rax         ; RSI = 字符数据地址
   399 000011E4 4889DE              <1>     mov rsi,rbx
   400                              <1> 
   401                              <1> 
   402 000011E7 B910000000          <1>     mov rcx, 16                ; 16行高度
   403 000011EC 57                  <1>     push rdi               ; 保存当前行起始位置
   404                              <1>     .next_line:
   405 000011ED 57                  <1>         push rdi               ; 保存当前行起始位置
   406                              <1>         
   407                              <1>         ; 处理一行(8像素)
   408 000011EE 8A16                <1>         mov dl, [rsi]          ; 获取字模数据
   409 000011F0 B608                <1>         mov dh, 8              ; 8位/行
   410                              <1>         .next_pixel:
   411 000011F2 4831C0              <1>             xor rax,rax
   412 000011F5 8A053EF2FFFF        <1>             mov al,byte [rel video_info_ptr + video_info.byte_per_pixel]
   413                              <1> 
   414 000011FB F6C280              <1>             test dl, 0x80       ; 测试最高位
   415 000011FE 7413                <1>             jz .skip_pixel
   416                              <1> 
   417                              <1> 
   418 00001200 3C04                <1>             cmp al,4
   419 00001202 7208                <1>             jb .pixel_2byte
   420 00001204 C64702FF            <1>             mov byte [rdi+2], 0xFF ; 绘制像素(白色)
   421 00001208 C6470300            <1>             mov byte [rdi+3], 0x00 ; 绘制像素(白色)
   422                              <1>             .pixel_2byte:
   423 0000120C C607FF              <1>                 mov byte [rdi], 0xFF ; 绘制像素(白色)
   424 0000120F C64701FF            <1>                 mov byte [rdi+1], 0xFF ; 绘制像素(白色)
   425                              <1>             ; jmp $
   426                              <1>         .skip_pixel:
   427 00001213 D0E2                <1>             shl dl, 1           ; 移到下一位
   428 00001215 4801C7              <1>             add rdi,rax
   429 00001218 FECE                <1>             dec dh
   430 0000121A 75D6                <1>             jnz .next_pixel
   431                              <1>         
   432 0000121C 5F                  <1>         pop rdi                 ; 恢复行起始位置
   433                              <1> 
   434 0000121D 4831C0              <1>         xor rax,rax
   435 00001220 668B050EF2FFFF      <1>         mov ax,word [rel video_info_ptr + video_info.xpixel]
   436                              <1> 
   437 00001227 BB00000000          <1>         mov rbx,0
   438 0000122C 8A1D07F2FFFF        <1>         mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   439 00001232 480FAFC3            <1>         imul rax,rbx
   440 00001236 4801C7              <1>         add rdi,rax
   441 00001239 48FFC6              <1>         inc rsi                 ; next char font
   442 0000123C E2AF                <1>         loop .next_line
   443                              <1>                 ; jmp $
   444 0000123E 5F                  <1>     pop rdi                 ; 恢复行起始位置
   445                              <1>     epilog
    83                              <2>  popallq
   134 0000123F 415F                <3>  pop r15
   135 00001241 415E                <3>  pop r14
   136 00001243 415D                <3>  pop r13
   137 00001245 415C                <3>  pop r12
   138 00001247 415B                <3>  pop r11
   139 00001249 415A                <3>  pop r10
   140 0000124B 4159                <3>  pop r9
   141 0000124D 4158                <3>  pop r8
   142 0000124F 5F                  <3>  pop rdi
   143 00001250 5E                  <3>  pop rsi
   144 00001251 5A                  <3>  pop rdx
   145 00001252 59                  <3>  pop rcx
   146 00001253 5B                  <3>  pop rbx
   147 00001254 58                  <3>  pop rax
    84                              <2> 
    85 00001255 4889EC              <2>  mov rsp, rbp
    86 00001258 5D                  <2>  pop rbp
    87 00001259 C3                  <2>  ret
   446                              <1> 
   447                              <1> 
   448                              <1> 
   449                              <1> draw_string:; input: x,y,string; draw string
   450                              <1>     prolog 2;
    65 0000125A 55                  <2>  push rbp
    66 0000125B 4889E5              <2>  mov rbp, rsp
    67 0000125E 488945F8            <2>  mov [rbp-8],rax
    68 00001262 B802000000          <2>  mov rax, %1
    69 00001267 4883C00F            <2>  add rax, 15
    70 0000126B 4883E0F0            <2>  and rax, ~15
    71 0000126F 4829C4              <2>  sub rsp, rax
    72 00001272 488B45F8            <2>  mov rax,[rbp-8]
    73                              <2>  pushallq
   117 00001276 50                  <3>  push rax
   118 00001277 53                  <3>  push rbx
   119 00001278 51                  <3>  push rcx
   120 00001279 52                  <3>  push rdx
   121 0000127A 56                  <3>  push rsi
   122 0000127B 57                  <3>  push rdi
   123 0000127C 4150                <3>  push r8
   124 0000127E 4151                <3>  push r9
   125 00001280 4152                <3>  push r10
   126 00001282 4153                <3>  push r11
   127 00001284 4154                <3>  push r12
   128 00001286 4155                <3>  push r13
   129 00001288 4156                <3>  push r14
   130 0000128A 4157                <3>  push r15
    74                              <2> 
    75                              <2> 
    76                              <2> 
    77                              <2> 
    78                              <2> 
    79                              <2> 
   451                              <1>     get_param r8, 1   ; x
    91 0000128C 4C8B4510            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   452                              <1>     get_param r9, 2   ; y
    91 00001290 4C8B4D18            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   453                              <1>     get_param rsi, 3   ; string
    91 00001294 488B7520            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   454                              <1> 
   455                              <1>     .next_char:
   456 00001298 AC                  <1>         lodsb                  
   457 00001299 84C0                <1>         test al, al
   458 0000129B 743B                <1>         jz .done
   459 0000129D BB00000000          <1>         mov rbx, 0
   460 000012A2 88C3                <1>         mov bl, al
   461                              <1>         function draw_char,1,r8,r9,rbx
    26                              <2>  %assign param_count %0 - 2
    27                              <2> 
    28                              <2>  %if param_count < 0
    29                              <2>  %assign param_count 0
    30                              <2>  %endif
    31                              <2>  %if param_count < 1
    32                              <2>  %assign ret_param_count 0
    33                              <2>  %else
    34                              <2>  %assign ret_param_count %2
    35                              <2>  %endif
    36                              <2> 
    37                              <2> 
    38                              <2>  prepare_call param_count, ret_param_count
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 000012A4 4883EC20            <3>  sub rsp, total_space
    39                              <2> 
    40                              <2> 
    41                              <2>  %if param_count > 0
    42                              <2>  %assign i 0
    43 000012A8 48894424F8          <2>  mov [rsp-8], rax
    44                              <2>  %rep param_count
    45                              <2>  %rotate 1
    46                              <2>  mov rax, %2
    47                              <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    49                              <2>  %endrep
    45                              <3>  %rotate 1
    46 000012AD 4C89C0              <3>  mov rax, %2
    47 000012B0 48890424            <3>  mov [rsp + 8*i], rax
    48                              <3>  %assign i i+1
    45                              <3>  %rotate 1
    46 000012B4 4C89C8              <3>  mov rax, %2
    47 000012B7 4889442408          <3>  mov [rsp + 8*i], rax
    48                              <3>  %assign i i+1
    45                              <3>  %rotate 1
    46 000012BC 4889D8              <3>  mov rax, %2
    47 000012BF 4889442410          <3>  mov [rsp + 8*i], rax
    48                              <3>  %assign i i+1
    50                              <2> 
    51                              <2>  %rotate 1
    52                              <2>  %rotate 1
    53 000012C4 488B4424F8          <2>  mov rax,[rsp-8]
    54                              <2>  %endif
    55                              <2> 
    56                              <2> 
    57 000012C9 E888FEFFFF          <2>  call %1
    58                              <2> 
    59                              <2> 
    60                              <2>  cleanup_call param_count, ret_param_count
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 000012CE 4883C420            <3>  add rsp, total_space
    61                              <2> 
   462 000012D2 4983C008            <1>         add r8, 8
   463                              <1> 
   464 000012D6 EBC0                <1>         jmp .next_char
   465                              <1>     .done:
   466                              <1>     epilog
    83                              <2>  popallq
   134 000012D8 415F                <3>  pop r15
   135 000012DA 415E                <3>  pop r14
   136 000012DC 415D                <3>  pop r13
   137 000012DE 415C                <3>  pop r12
   138 000012E0 415B                <3>  pop r11
   139 000012E2 415A                <3>  pop r10
   140 000012E4 4159                <3>  pop r9
   141 000012E6 4158                <3>  pop r8
   142 000012E8 5F                  <3>  pop rdi
   143 000012E9 5E                  <3>  pop rsi
   144 000012EA 5A                  <3>  pop rdx
   145 000012EB 59                  <3>  pop rcx
   146 000012EC 5B                  <3>  pop rbx
   147 000012ED 58                  <3>  pop rax
    84                              <2> 
    85 000012EE 4889EC              <2>  mov rsp, rbp
    86 000012F1 5D                  <2>  pop rbp
    87 000012F2 C3                  <2>  ret
   467                              <1> 
   468                              <1> draw_hex:; input: x,y,hex; draw hex
   469                              <1>     prolog 2;
    65 000012F3 55                  <2>  push rbp
    66 000012F4 4889E5              <2>  mov rbp, rsp
    67 000012F7 488945F8            <2>  mov [rbp-8],rax
    68 000012FB B802000000          <2>  mov rax, %1
    69 00001300 4883C00F            <2>  add rax, 15
    70 00001304 4883E0F0            <2>  and rax, ~15
    71 00001308 4829C4              <2>  sub rsp, rax
    72 0000130B 488B45F8            <2>  mov rax,[rbp-8]
    73                              <2>  pushallq
   117 0000130F 50                  <3>  push rax
   118 00001310 53                  <3>  push rbx
   119 00001311 51                  <3>  push rcx
   120 00001312 52                  <3>  push rdx
   121 00001313 56                  <3>  push rsi
   122 00001314 57                  <3>  push rdi
   123 00001315 4150                <3>  push r8
   124 00001317 4151                <3>  push r9
   125 00001319 4152                <3>  push r10
   126 0000131B 4153                <3>  push r11
   127 0000131D 4154                <3>  push r12
   128 0000131F 4155                <3>  push r13
   129 00001321 4156                <3>  push r14
   130 00001323 4157                <3>  push r15
    74                              <2> 
    75                              <2> 
    76                              <2> 
    77                              <2> 
    78                              <2> 
    79                              <2> 
   470                              <1>     get_param r8, 1   ; x
    91 00001325 4C8B4510            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   471                              <1>     get_param r9, 2   ; y
    91 00001329 4C8B4D18            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   472                              <1>     get_param rsi, 3   ; hex
    91 0000132D 488B7520            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   473                              <1> 
   474 00001331 BB58000000          <1>     mov rbx, 'X'
   475                              <1>     function draw_char,1,r8,r9,rbx    
    26                              <2>  %assign param_count %0 - 2
    27                              <2> 
    28                              <2>  %if param_count < 0
    29                              <2>  %assign param_count 0
    30                              <2>  %endif
    31                              <2>  %if param_count < 1
    32                              <2>  %assign ret_param_count 0
    33                              <2>  %else
    34                              <2>  %assign ret_param_count %2
    35                              <2>  %endif
    36                              <2> 
    37                              <2> 
    38                              <2>  prepare_call param_count, ret_param_count
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 00001336 4883EC20            <3>  sub rsp, total_space
    39                              <2> 
    40                              <2> 
    41                              <2>  %if param_count > 0
    42                              <2>  %assign i 0
    43 0000133A 48894424F8          <2>  mov [rsp-8], rax
    44                              <2>  %rep param_count
    45                              <2>  %rotate 1
    46                              <2>  mov rax, %2
    47                              <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    49                              <2>  %endrep
    45                              <3>  %rotate 1
    46 0000133F 4C89C0              <3>  mov rax, %2
    47 00001342 48890424            <3>  mov [rsp + 8*i], rax
    48                              <3>  %assign i i+1
    45                              <3>  %rotate 1
    46 00001346 4C89C8              <3>  mov rax, %2
    47 00001349 4889442408          <3>  mov [rsp + 8*i], rax
    48                              <3>  %assign i i+1
    45                              <3>  %rotate 1
    46 0000134E 4889D8              <3>  mov rax, %2
    47 00001351 4889442410          <3>  mov [rsp + 8*i], rax
    48                              <3>  %assign i i+1
    50                              <2> 
    51                              <2>  %rotate 1
    52                              <2>  %rotate 1
    53 00001356 488B4424F8          <2>  mov rax,[rsp-8]
    54                              <2>  %endif
    55                              <2> 
    56                              <2> 
    57 0000135B E8F6FDFFFF          <2>  call %1
    58                              <2> 
    59                              <2> 
    60                              <2>  cleanup_call param_count, ret_param_count
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 00001360 4883C420            <3>  add rsp, total_space
    61                              <2> 
   476 00001364 4983C008            <1>     add r8, 8
   477                              <1> 
   478                              <1> 
   479 00001368 4831C0              <1>     xor rax, rax
   480 0000136B 4831DB              <1>     xor rbx, rbx
   481 0000136E 4831D2              <1>     xor rdx, rdx
   482 00001371 488B06              <1>     mov rax, [rsi]
   483                              <1> 
   484 00001374 B910000000          <1>     mov rcx, 16              ; Process 16 digits (64-bit number)
   485                              <1>     .convert_loopqq:
   486 00001379 48C1C004            <1>         rol rax, 4           ; Rotate left by 4 bits
   487 0000137D 88C2                <1>         mov dl, al           ; Extract lower nibble
   488                              <1> 
   489 0000137F 80E20F              <1>         and dl, 0x0F         ; Mask to get a single hex digit
   490                              <1> 
   491 00001382 80FA0A              <1>         cmp dl, 10
   492 00001385 7C05                <1>         jl .digitqq
   493 00001387 80C257              <1>         add dl, 'a' - 10     ; Convert to 'A'-'F'
   494 0000138A EB03                <1>         jmp .outputqq
   495                              <1>     .digitqq:
   496 0000138C 80C230              <1>         add dl, '0'          ; Convert to '0'-'9'
   497                              <1>     .outputqq:
   498 0000138F 4889D3              <1>         mov rbx, rdx
   499                              <1> 
   500                              <1>         function draw_char,1,r8,r9,rbx
    26                              <2>  %assign param_count %0 - 2
    27                              <2> 
    28                              <2>  %if param_count < 0
    29                              <2>  %assign param_count 0
    30                              <2>  %endif
    31                              <2>  %if param_count < 1
    32                              <2>  %assign ret_param_count 0
    33                              <2>  %else
    34                              <2>  %assign ret_param_count %2
    35                              <2>  %endif
    36                              <2> 
    37                              <2> 
    38                              <2>  prepare_call param_count, ret_param_count
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 00001392 4883EC20            <3>  sub rsp, total_space
    39                              <2> 
    40                              <2> 
    41                              <2>  %if param_count > 0
    42                              <2>  %assign i 0
    43 00001396 48894424F8          <2>  mov [rsp-8], rax
    44                              <2>  %rep param_count
    45                              <2>  %rotate 1
    46                              <2>  mov rax, %2
    47                              <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    49                              <2>  %endrep
    45                              <3>  %rotate 1
    46 0000139B 4C89C0              <3>  mov rax, %2
    47 0000139E 48890424            <3>  mov [rsp + 8*i], rax
    48                              <3>  %assign i i+1
    45                              <3>  %rotate 1
    46 000013A2 4C89C8              <3>  mov rax, %2
    47 000013A5 4889442408          <3>  mov [rsp + 8*i], rax
    48                              <3>  %assign i i+1
    45                              <3>  %rotate 1
    46 000013AA 4889D8              <3>  mov rax, %2
    47 000013AD 4889442410          <3>  mov [rsp + 8*i], rax
    48                              <3>  %assign i i+1
    50                              <2> 
    51                              <2>  %rotate 1
    52                              <2>  %rotate 1
    53 000013B2 488B4424F8          <2>  mov rax,[rsp-8]
    54                              <2>  %endif
    55                              <2> 
    56                              <2> 
    57 000013B7 E89AFDFFFF          <2>  call %1
    58                              <2> 
    59                              <2> 
    60                              <2>  cleanup_call param_count, ret_param_count
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 000013BC 4883C420            <3>  add rsp, total_space
    61                              <2> 
   501                              <1>         
   502 000013C0 4983C008            <1>         add r8, 8
   503 000013C4 E2B3                <1>         loop .convert_loopqq
   504                              <1> 
   505                              <1>     epilog
    83                              <2>  popallq
   134 000013C6 415F                <3>  pop r15
   135 000013C8 415E                <3>  pop r14
   136 000013CA 415D                <3>  pop r13
   137 000013CC 415C                <3>  pop r12
   138 000013CE 415B                <3>  pop r11
   139 000013D0 415A                <3>  pop r10
   140 000013D2 4159                <3>  pop r9
   141 000013D4 4158                <3>  pop r8
   142 000013D6 5F                  <3>  pop rdi
   143 000013D7 5E                  <3>  pop rsi
   144 000013D8 5A                  <3>  pop rdx
   145 000013D9 59                  <3>  pop rcx
   146 000013DA 5B                  <3>  pop rbx
   147 000013DB 58                  <3>  pop rax
    84                              <2> 
    85 000013DC 4889EC              <2>  mov rsp, rbp
    86 000013DF 5D                  <2>  pop rbp
    87 000013E0 C3                  <2>  ret
   506                              <1> draw_decimal:; input: x,y,decimal address; draw dec
   507                              <1>     prolog 2;
    65 000013E1 55                  <2>  push rbp
    66 000013E2 4889E5              <2>  mov rbp, rsp
    67 000013E5 488945F8            <2>  mov [rbp-8],rax
    68 000013E9 B802000000          <2>  mov rax, %1
    69 000013EE 4883C00F            <2>  add rax, 15
    70 000013F2 4883E0F0            <2>  and rax, ~15
    71 000013F6 4829C4              <2>  sub rsp, rax
    72 000013F9 488B45F8            <2>  mov rax,[rbp-8]
    73                              <2>  pushallq
   117 000013FD 50                  <3>  push rax
   118 000013FE 53                  <3>  push rbx
   119 000013FF 51                  <3>  push rcx
   120 00001400 52                  <3>  push rdx
   121 00001401 56                  <3>  push rsi
   122 00001402 57                  <3>  push rdi
   123 00001403 4150                <3>  push r8
   124 00001405 4151                <3>  push r9
   125 00001407 4152                <3>  push r10
   126 00001409 4153                <3>  push r11
   127 0000140B 4154                <3>  push r12
   128 0000140D 4155                <3>  push r13
   129 0000140F 4156                <3>  push r14
   130 00001411 4157                <3>  push r15
    74                              <2> 
    75                              <2> 
    76                              <2> 
    77                              <2> 
    78                              <2> 
    79                              <2> 
   508                              <1>     get_param r8, 1   ; x
    91 00001413 4C8B4510            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   509                              <1>     get_param r9, 2   ; y
    91 00001417 4C8B4D18            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   510                              <1>     get_param rsi, 3   ; dec
    91 0000141B 488B7520            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   511                              <1> 
   512 0000141F BB44000000          <1>     mov rbx, 'D'
   513                              <1>     function draw_char,1,r8,r9,rbx    
    26                              <2>  %assign param_count %0 - 2
    27                              <2> 
    28                              <2>  %if param_count < 0
    29                              <2>  %assign param_count 0
    30                              <2>  %endif
    31                              <2>  %if param_count < 1
    32                              <2>  %assign ret_param_count 0
    33                              <2>  %else
    34                              <2>  %assign ret_param_count %2
    35                              <2>  %endif
    36                              <2> 
    37                              <2> 
    38                              <2>  prepare_call param_count, ret_param_count
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 00001424 4883EC20            <3>  sub rsp, total_space
    39                              <2> 
    40                              <2> 
    41                              <2>  %if param_count > 0
    42                              <2>  %assign i 0
    43 00001428 48894424F8          <2>  mov [rsp-8], rax
    44                              <2>  %rep param_count
    45                              <2>  %rotate 1
    46                              <2>  mov rax, %2
    47                              <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    49                              <2>  %endrep
    45                              <3>  %rotate 1
    46 0000142D 4C89C0              <3>  mov rax, %2
    47 00001430 48890424            <3>  mov [rsp + 8*i], rax
    48                              <3>  %assign i i+1
    45                              <3>  %rotate 1
    46 00001434 4C89C8              <3>  mov rax, %2
    47 00001437 4889442408          <3>  mov [rsp + 8*i], rax
    48                              <3>  %assign i i+1
    45                              <3>  %rotate 1
    46 0000143C 4889D8              <3>  mov rax, %2
    47 0000143F 4889442410          <3>  mov [rsp + 8*i], rax
    48                              <3>  %assign i i+1
    50                              <2> 
    51                              <2>  %rotate 1
    52                              <2>  %rotate 1
    53 00001444 488B4424F8          <2>  mov rax,[rsp-8]
    54                              <2>  %endif
    55                              <2> 
    56                              <2> 
    57 00001449 E808FDFFFF          <2>  call %1
    58                              <2> 
    59                              <2> 
    60                              <2>  cleanup_call param_count, ret_param_count
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 0000144E 4883C420            <3>  add rsp, total_space
    61                              <2> 
   514 00001452 4983C008            <1>     add r8, 8
   515                              <1> 
   516 00001456 4831C0              <1>     xor rax, rax
   517 00001459 4831DB              <1>     xor rbx, rbx
   518 0000145C 4831D2              <1>     xor rdx, rdx
   519 0000145F 488B06              <1>     mov rax, [rsi]
   520                              <1> 
   521 00001462 4831DB              <1>     xor rbx, rbx
   522 00001465 BB0A000000          <1>     mov rbx, 10              ; Base 10
   523 0000146A 4831C9              <1>     xor rcx, rcx             ; Digit counter
   524                              <1> 
   525                              <1>     .convert_loop:
   526 0000146D 4831D2              <1>         xor rdx, rdx
   527 00001470 48F7F3              <1>         div rbx              ; Divide rax by 10, remainder in rdx
   528 00001473 52                  <1>         push rdx             ; Save remainder (digit)
   529 00001474 48FFC1              <1>         inc rcx              ; Increment digit counter
   530 00001477 4885C0              <1>         test rax, rax
   531 0000147A 75F1                <1>         jnz .convert_loop    ; Repeat until rax == 0
   532                              <1> 
   533                              <1>     .print_digits:
   534 0000147C 5A                  <1>         pop rdx              ; Get digit from stack
   535 0000147D 80C230              <1>         add dl, '0'          ; Convert to ASCII
   536                              <1> 
   537 00001480 4889D3              <1>         mov rbx, rdx
   538                              <1>         function draw_char,1,r8,r9,rbx    
    26                              <2>  %assign param_count %0 - 2
    27                              <2> 
    28                              <2>  %if param_count < 0
    29                              <2>  %assign param_count 0
    30                              <2>  %endif
    31                              <2>  %if param_count < 1
    32                              <2>  %assign ret_param_count 0
    33                              <2>  %else
    34                              <2>  %assign ret_param_count %2
    35                              <2>  %endif
    36                              <2> 
    37                              <2> 
    38                              <2>  prepare_call param_count, ret_param_count
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 00001483 4883EC20            <3>  sub rsp, total_space
    39                              <2> 
    40                              <2> 
    41                              <2>  %if param_count > 0
    42                              <2>  %assign i 0
    43 00001487 48894424F8          <2>  mov [rsp-8], rax
    44                              <2>  %rep param_count
    45                              <2>  %rotate 1
    46                              <2>  mov rax, %2
    47                              <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    49                              <2>  %endrep
    45                              <3>  %rotate 1
    46 0000148C 4C89C0              <3>  mov rax, %2
    47 0000148F 48890424            <3>  mov [rsp + 8*i], rax
    48                              <3>  %assign i i+1
    45                              <3>  %rotate 1
    46 00001493 4C89C8              <3>  mov rax, %2
    47 00001496 4889442408          <3>  mov [rsp + 8*i], rax
    48                              <3>  %assign i i+1
    45                              <3>  %rotate 1
    46 0000149B 4889D8              <3>  mov rax, %2
    47 0000149E 4889442410          <3>  mov [rsp + 8*i], rax
    48                              <3>  %assign i i+1
    50                              <2> 
    51                              <2>  %rotate 1
    52                              <2>  %rotate 1
    53 000014A3 488B4424F8          <2>  mov rax,[rsp-8]
    54                              <2>  %endif
    55                              <2> 
    56                              <2> 
    57 000014A8 E8A9FCFFFF          <2>  call %1
    58                              <2> 
    59                              <2> 
    60                              <2>  cleanup_call param_count, ret_param_count
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 000014AD 4883C420            <3>  add rsp, total_space
    61                              <2> 
   539 000014B1 4983C008            <1>         add r8, 8
   540                              <1> 
   541 000014B5 E2C5                <1>         loop .print_digits
   542                              <1> 
   543                              <1>     epilog
    83                              <2>  popallq
   134 000014B7 415F                <3>  pop r15
   135 000014B9 415E                <3>  pop r14
   136 000014BB 415D                <3>  pop r13
   137 000014BD 415C                <3>  pop r12
   138 000014BF 415B                <3>  pop r11
   139 000014C1 415A                <3>  pop r10
   140 000014C3 4159                <3>  pop r9
   141 000014C5 4158                <3>  pop r8
   142 000014C7 5F                  <3>  pop rdi
   143 000014C8 5E                  <3>  pop rsi
   144 000014C9 5A                  <3>  pop rdx
   145 000014CA 59                  <3>  pop rcx
   146 000014CB 5B                  <3>  pop rbx
   147 000014CC 58                  <3>  pop rax
    84                              <2> 
    85 000014CD 4889EC              <2>  mov rsp, rbp
    86 000014D0 5D                  <2>  pop rbp
    87 000014D1 C3                  <2>  ret
   544                              <1> ; debug_stop:
   545                              <1> ;     mov r15,0x99999
   546                              <1> ;     jmp $
   547                              <1> %endif
   126                                  ; %include "../kernel/expection.asm"
   127                                  ; %include "../kernel/interrupt.asm"
   128                                  %include "../kernel/init.asm"
     1                              <1> %ifndef INIT_ASM
     2                              <1> %define INIT_ASM
     3                              <1> 
     4                              <1> %include "../bootloader/global_def.asm"
     1                              <2> %ifndef GLOBAL_DEF_ASM
     2                              <2> %define GLOBAL_DEF_ASM
     3                              <2> 
     4                              <2> 
     5                              <2> ;|----------------------|
     6                              <2> ;|	100000 ~ END	|
     7                              <2> ;|	   KERNEL	|
     8                              <2> ;|----------------------|
     9                              <2> ;|	E0000 ~ 100000	|
    10                              <2> ;| Extended System BIOS |
    11                              <2> ;|----------------------|
    12                              <2> ;|	C0000 ~ Dffff	|
    13                              <2> ;|     Expansion Area   |
    14                              <2> ;|----------------------|
    15                              <2> ;|	A0000 ~ bffff	|
    16                              <2> ;|   Legacy Video Area  |
    17                              <2> ;|----------------------|
    18                              <2> ;|	9f000 ~ A0000	|
    19                              <2> ;|	 BIOS reserve	|
    20                              <2> ;|----------------------|
    21                              <2> ;|	90000 ~ 9f000	|
    22                              <2> ;|	 kernel tmpbuf	|
    23                              <2> ;|----------------------|
    24                              <2> ;|	10000 ~ 90000	|
    25                              <2> ;|	   LOADER	|
    26                              <2> ;|----------------------|
    27                              <2> ;|	8000 ~ 10000	|
    28                              <2> ;|	  VBE info	|
    29                              <2> ;|----------------------|
    30                              <2> ;|	7e00 ~ 8000	|
    31                              <2> ;|	  mem info	|
    32                              <2> ;|----------------------|
    33                              <2> ;|	7c00 ~ 7e00	|
    34                              <2> ;|	 MBR (BOOT)	|
    35                              <2> ;|----------------------|
    36                              <2> ;|	0000 ~ 7c00	|
    37                              <2> ;|	 BIOS Code	|
    38                              <2> ;|----------------------|
    39                              <2> 
    40                              <2> 
    41                              <2> ;_______________________________________________________
    42                              <2> ; START	END	    SIZE	        USED
    43                              <2> ; FFFF0	FFFFF	16B	        BIOS System Entry
    44                              <2> ; F0000	FFFEF	64KB-16B	BIOS System Code
    45                              <2> ; C8000	EFFFF	160KB	    ROM/Mapped IO
    46                              <2> ; C0000	C7FFF	32KB	    Graphic Adapter BIOS
    47                              <2> ; B8000	BFFFF	32KB	    Chroma Text Video Buffer
    48                              <2> ; B0000	B7FFF	32KB	    Mono Text Video Buffer
    49                              <2> ; A0000	AFFFF	64KB	    Graphic Video Buffer
    50                              <2> ; 9FC00	9FFFF	1KB	        Extended BIOS Data Area
    51                              <2> ; 7E00	9FBFF	622080B     Useable 608KB	
    52                              <2> ; 7C00	7DFF	512B	    MBR
    53                              <2> ; 500	7BFF	30464B      Useable 30KB	
    54                              <2> ; 400	4FF	    256B	    BIOS Data Area
    55                              <2> ; 000	3FF	    1KB	        IVT
    56                              <2> ; _____________________________________________________
    57                              <2> 
    58                              <2> 
    59                              <2> 
    60                              <2> 
    61                              <2> 
    62                              <2> 
    63                              <2> 
    64                              <2> 
    65                              <2> 
    66                              <2> 
    67                              <2> 
    68                              <2> ;|----------------------|
    69                              <2> ;|	100000 ~ END	|
    70                              <2> ;|	   KERNEL	|
    71                              <2> ;|----------------------|
    72                              <2> ;|	E0000 ~ 100000	|
    73                              <2> ;| Extended System BIOS |
    74                              <2> ;|----------------------|
    75                              <2> ;|	C0000 ~ Dffff	|
    76                              <2> ;|     Expansion Area   |
    77                              <2> ;|----------------------|
    78                              <2> ;|	A0000 ~ bffff	|
    79                              <2> ;|   Legacy Video Area  |
    80                              <2> ;|----------------------|
    81                              <2> ;|	9F000 ~ A0000	|
    82                              <2> ;|	 BIOS reserve	|
    83                              <2> ;|----------------------|
    84                              <2> ;|	90000 ~ 9F000	|
    85                              <2> ;|	 kernel tmpbuf	|
    86                              <2> ;|----------------------|
    87                              <2> ;|	10000 ~ 90000	|
    88                              <2> ;|	   LOADER	|
    89                              <2> ;|----------------------|
    90                              <2> ;|	8000 ~ 10000	|
    91                              <2> ;|	  VBE info	|
    92                              <2> ;|----------------------|
    93                              <2> ;|	7E00 ~ 8000	|
    94                              <2> ;|	  mem info	|
    95                              <2> ;|----------------------|
    96                              <2> ;|	7C00 ~ 7E00	|
    97                              <2> ;|	 MBR (BOOT)	|
    98                              <2> ;|----------------------|
    99                              <2> ;|	0000 ~ 7C00	|
   100                              <2> ;|	 BIOS Code	|
   101                              <2> ;|----------------------|
   102                              <2> 
   103                              <2> 
   104                              <2> 
   105                              <2> 
   106                              <2> 
   107                              <2> 
   108                              <2> 
   109                              <2> 
   110                              <2> 
   111                              <2> 
   112                              <2> ;______________________________________________
   113                              <2> ; ----------------Vbe Info Block------------
   114                              <2> ; typedef struct {
   115                              <2> ;     unsigned char       vbe_signature;
   116                              <2> ;     unsigned short      vbe_version;
   117                              <2> ;     unsigned long       oem_string_ptr;
   118                              <2> ;     unsigned char       capabilities;
   119                              <2> ;     unsigned long       video_mode_ptr;
   120                              <2> ;     unsigned short      total_memory;
   121                              <2> ;     unsigned short      oem_software_rev;
   122                              <2> ;     unsigned long       oem_vendor_name_ptr;
   123                              <2> ;     unsigned long       oem_product_name_ptr;
   124                              <2> ;     unsigned long       oem_product_rev_ptr;
   125                              <2> ;     unsigned char       reserved[222];
   126                              <2> ;     unsigned char       oem_data[256];  
   127                              <2> ; } VbeInfoBlock;
   128                              <2> ;______________________________________________
   129                              <2> 
   130                              <2> 
   131                              <2> BaseOfKernelFile	equ	0x00
   132                              <2> OffsetOfKernelFile	equ	0x100000
   133                              <2> BaseTmpOfKernelAddr	equ	0x9000
   134                              <2> OffsetTmpOfKernelFile	equ	0x0000
   135                              <2> VBEStructBufferAddr	equ	0x8000
   136                              <2> VBEModeStructBufferAddr	equ	0x8200
   137                              <2> MemoryStructBufferAddr	equ	0x8800
   138                              <2> 
   139                              <2> 
   140                              <2> 
   141                              <2> KernelSpaceUpperAddress equ 0xFFFF800000000000
   142                              <2> 
   143                              <2> GDTPointerUpperAddr equ 0xFFFF800000104000
   144                              <2> IDTPointerUpperAddr equ 0xFFFF80000010400a
   145                              <2> TSSPointerUpperAddr equ 0xFFFF800000104014
   146                              <2> 
   147                              <2> VideoFrameBufferAddress equ 0xFFFF800003000000
   148                              <2> KernelStartSectorNum	equ	16
   149                              <2> 
   150                              <2> 
   151                              <2> %define PLATFORM_QEMU_X64 1
   152                              <2> %define PLATFORM_X64 2
   153                              <2> 
   154                              <2> %define DEBUG_PLATFORM PLATFORM_QEMU_X64
   155                              <2> %define DEBUG_MODE 1
   156                              <2> 
   157                              <2> 
   158                              <2> MasterSectorReadNumPort    equ	0x1F2
   159                              <2> MasterSectorReadPort    equ	0x1F0
   160                              <2> 
   161                              <2> SlaveReadNumPort    equ	0x172
   162                              <2> SlaveSectorReadPort    equ	0x170
   163                              <2> 
   164                              <2> SectorReadNumPort    equ	MasterSectorReadNumPort
   165                              <2> SectorReadPort    equ	MasterSectorReadPort
   166                              <2> 
   167                              <2> struc vbe_info_block
   168                              <2>     .signature                 resb 4    ; 'VESA' signature (must be "VESA")
   169                              <2>     .version                   resw 1    ; VBE version (e.g., 0x0300 for VBE 3.0)
   170                              <2>     .oem_string_ptr            resd 1    ; Pointer to OEM string
   171                              <2>     .capabilities              resd 1    ; Capabilities of the video card
   172                              <2>     .video_mode_ptr            resd 1    ; Pointer to supported video modes
   173                              <2>     .total_memory              resw 1    ; Total memory in 64KB blocks
   174                              <2> 
   175                              <2>     ; VBE 2.0+ fields
   176                              <2>     .oem_software_rev          resw 1    ; OEM software revision
   177                              <2>     .oem_vendor_name_ptr       resd 1    ; Pointer to OEM vendor name string
   178                              <2>     .oem_product_name_ptr      resd 1    ; Pointer to OEM product name string
   179                              <2>     .oem_product_rev_ptr       resd 1    ; Pointer to OEM product revision string
   180                              <2>     .reserved                  resb 222  ; Reserved for VBE implementation
   181                              <2>     .oem_data                  resb 256  ; Data area for OEM-specific information
   182                              <2> endstruc
   183                              <2> 
   184                              <2> struc vbe_mode_info_block
   185                              <2>     .attributes                resw 1    ; Mode attributes
   186                              <2>     .winA_attributes           resb 1    ; Window A attributes
   187                              <2>     .winB_attributes           resb 1    ; Window B attributes
   188                              <2>     .win_granularity           resw 1    ; Window granularity in KB
   189                              <2>     .win_size                  resw 1    ; Window size in KB
   190                              <2>     .winA_segment              resw 1    ; Window A segment
   191                              <2>     .winB_segment              resw 1    ; Window B segment
   192                              <2>     .win_func_ptr              resd 1    ; Pointer to window function
   193                              <2>     .bytes_per_scanline        resw 1    ; Bytes per scanline
   194                              <2> 
   195                              <2>     ; VBE 1.2+ fields
   196                              <2>     .x_resolution              resw 1    ; Horizontal resolution in pixels
   197                              <2>     .y_resolution              resw 1    ; Vertical resolution in pixels
   198                              <2>     .x_char_size               resb 1    ; Character cell width in pixels
   199                              <2>     .y_char_size               resb 1    ; Character cell height in pixels
   200                              <2>     .number_of_planes          resb 1    ; Number of memory planes
   201                              <2>     .bits_per_pixel            resb 1    ; Bits per pixel
   202                              <2>     .number_of_banks           resb 1    ; Number of banks
   203                              <2>     .memory_model              resb 1    ; Memory model type
   204                              <2>     .bank_size                 resb 1    ; Bank size in KB
   205                              <2>     .number_of_image_pages     resb 1    ; Number of images
   206                              <2>     .reserved1                 resb 1    ; Reserved
   207                              <2> 
   208                              <2>     ; Direct Color fields (VBE 1.2+)
   209                              <2>     .red_mask_size             resb 1    ; Size of direct color red mask
   210                              <2>     .red_field_position        resb 1    ; Bit position of red mask
   211                              <2>     .green_mask_size           resb 1    ; Size of direct color green mask
   212                              <2>     .green_field_position      resb 1    ; Bit position of green mask
   213                              <2>     .blue_mask_size            resb 1    ; Size of direct color blue mask
   214                              <2>     .blue_field_position       resb 1    ; Bit position of blue mask
   215                              <2>     .reserved_mask_size        resb 1    ; Size of direct color reserved mask
   216                              <2>     .reserved_field_position   resb 1    ; Bit position of reserved mask
   217                              <2>     .direct_color_mode_info    resb 1    ; Direct color mode attributes
   218                              <2> 
   219                              <2>     ; VBE 2.0+ fields
   220                              <2>     .phys_base_ptr             resd 1    ; Physical address for flat memory frame buffer
   221                              <2>     .reserved2                 resd 1    ; Reserved
   222                              <2>     .reserved3                 resw 1    ; Reserved
   223                              <2> 
   224                              <2>     ; VBE 3.0+ fields
   225                              <2>     .lin_bytes_per_scanline    resw 1    ; Bytes per scanline for linear modes
   226                              <2>     .bnk_number_of_image_pages resb 1    ; Number of images for banked modes
   227                              <2>     .lin_number_of_image_pages resb 1    ; Number of images for linear modes
   228                              <2>     .lin_red_mask_size         resb 1    ; Size of direct color red mask (linear modes)
   229                              <2>     .lin_red_field_position    resb 1    ; Bit position of red mask (linear modes)
   230                              <2>     .lin_green_mask_size       resb 1    ; Size of direct color green mask (linear modes)
   231                              <2>     .lin_green_field_position  resb 1    ; Bit position of green mask (linear modes)
   232                              <2>     .lin_blue_mask_size        resb 1    ; Size of direct color blue mask (linear modes)
   233                              <2>     .lin_blue_field_position   resb 1    ; Bit position of blue mask (linear modes)
   234                              <2>     .lin_reserved_mask_size    resb 1    ; Size of direct color reserved mask (linear modes)
   235                              <2>     .lin_reserved_field_position resb 1  ; Bit position of reserved mask (linear modes)
   236                              <2>     .max_pixel_clock           resd 1    ; Maximum pixel clock (Hz)
   237                              <2>     .reserved4                 resb 190  ; Reserved for future expansion
   238                              <2> endstruc
   239                              <2> 
   240                              <2> struc e820_memory_entry
   241                              <2>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   242                              <2>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   243                              <2>     .length_low               resd 1    ; Lower 32 bits of the length
   244                              <2>     .length_high              resd 1    ; Upper 32 bits of the length
   245                              <2>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   246                              <2>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   247                              <2> endstruc
   248                              <2> 
   249                              <2> %endif
     5                              <1> %include "../kernel/stddef.asm"
     1                              <2> %ifndef STDDEF_ASM
     2                              <2> %define STDDEF_ASM
     3                              <2> 
     4                              <2> ;-----------Calling Conventions Standard------------;
     5                              <2> %define USE_CC_STANDARD
     6                              <2> %ifdef USE_CC_STANDARD
     7                              <2> ;caller maintain the stack balance 
     8                              <2>     ; debug_times: db 0
     9                              <2>     ; cmp byte [rel debug_times],3
    10                              <2>     ; je debug_stop
    11                              <2>     ; add byte [rel debug_times],1
    12                              <2> ; -------------------------------
    13                              <2> ; 栈帧结构定义
    14                              <2> ; -------------------------------
    15                              <2> ; 调用后的栈布局:
    16                              <2> ; [rsp+0x00] 返回地址 (8字节)
    17                              <2> ; [rsp+0x08] 旧RBP     (8字节) <- rbp指向这里
    18                              <2> ; [rsp+0x10] 参数1     (8字节)
    19                              <2> ; [rsp+0x18] 参数2
    20                              <2> ; ...
    21                              <2> ; [rsp+X]    局部变量区
    22                              <2> ; -------------------------------
    23                              <2> 
    24                              <2> %define PARAM_OFFSET   16      ; 第一个参数的偏移量(返回地址8 + 旧RBP8)
    25                              <2> %macro function 1-* ; 1=函数名, 2=返回参数数量, 3=参数列表
    26                              <2>     %assign param_count %0 - 2 ; 参数数量
    27                              <2>     
    28                              <2>     %if param_count < 0
    29                              <2>         %assign param_count 0 ; 如果没有参数，设置为 0
    30                              <2>     %endif
    31                              <2>     %if param_count < 1
    32                              <2>         %assign ret_param_count 0 ; 返回参数数量
    33                              <2>     %else
    34                              <2>         %assign ret_param_count %2 ; 返回参数数量
    35                              <2>     %endif
    36                              <2> 
    37                              <2>     ; 准备调用
    38                              <2>     prepare_call param_count, ret_param_count
    39                              <2> 
    40                              <2>     ; 如果有参数，将参数压入栈
    41                              <2>     %if param_count > 0
    42                              <2>         %assign i 0
    43                              <2>         mov [rsp-8], rax ; 保存返回地址
    44                              <2>         %rep param_count
    45                              <2>             %rotate 1
    46                              <2>             mov rax, %2
    47                              <2>             mov [rsp + 8*i], rax ; 将参数压入栈
    48                              <2>             %assign i i+1
    49                              <2>         %endrep
    50                              <2>         ; mov rax,
    51                              <2>         %rotate 1
    52                              <2>         %rotate 1
    53                              <2>         mov rax,[rsp-8]; 保存返回地址
    54                              <2>     %endif
    55                              <2> 
    56                              <2>     ; 调用函数
    57                              <2>     call %1
    58                              <2> 
    59                              <2>     ; 清理栈空间
    60                              <2>     cleanup_call param_count, ret_param_count
    61                              <2> 
    62                              <2> %endmacro
    63                              <2> 
    64                              <2> %macro prolog 1;local var size(bytes)
    65                              <2>     push rbp
    66                              <2>     mov rbp, rsp
    67                              <2>     mov [rbp-8],rax
    68                              <2>     mov rax, %1
    69                              <2>     add rax, 15
    70                              <2>     and rax, ~15
    71                              <2>     sub rsp, rax
    72                              <2>     mov rax,[rbp-8]
    73                              <2>     pushallq
    74                              <2>     
    75                              <2>     
    76                              <2>     ; 调试信息可以放在这里
    77                              <2>     ; %ifdef DEBUG
    78                              <2>     ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
    79                              <2>     ; %endif
    80                              <2> %endmacro
    81                              <2> 
    82                              <2> %macro epilog 0
    83                              <2>     popallq
    84                              <2> 
    85                              <2>     mov rsp, rbp
    86                              <2>     pop rbp
    87                              <2>     ret
    88                              <2> %endmacro
    89                              <2> 
    90                              <2> %macro get_param 2;1=register, 2=param index(from 1)
    91                              <2>     mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    92                              <2> %endmacro
    93                              <2> 
    94                              <2> %macro set_ret_param 2;1=register, 2=param index(from 1)
    95                              <2>     mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
    96                              <2> %endmacro
    97                              <2> 
    98                              <2> %macro prepare_call 2;1=param count, 2=return param count
    99                              <2>     %assign total_space ((%1 + %2) * 8)
   100                              <2>     
   101                              <2>     %if (total_space % 16) != 0
   102                              <2>         %assign total_space total_space + 8  ; 添加填充
   103                              <2>     %endif
   104                              <2>     
   105                              <2>     sub rsp, total_space
   106                              <2> %endmacro
   107                              <2> 
   108                              <2> %macro cleanup_call 2;1=param count, 2=return param count
   109                              <2>     %assign total_space ((%1 + %2) * 8)
   110                              <2>     %if (total_space % 16) != 0
   111                              <2>         %assign total_space total_space + 8
   112                              <2>     %endif
   113                              <2>     add rsp, total_space
   114                              <2> %endmacro
   115                              <2> 
   116                              <2> %macro pushallq 0
   117                              <2>     push rax
   118                              <2>     push rbx
   119                              <2>     push rcx
   120                              <2>     push rdx
   121                              <2>     push rsi
   122                              <2>     push rdi
   123                              <2>     push r8
   124                              <2>     push r9
   125                              <2>     push r10
   126                              <2>     push r11
   127                              <2>     push r12
   128                              <2>     push r13
   129                              <2>     push r14
   130                              <2>     push r15
   131                              <2> %endmacro
   132                              <2> 
   133                              <2> %macro popallq 0
   134                              <2>     pop r15
   135                              <2>     pop r14
   136                              <2>     pop r13
   137                              <2>     pop r12
   138                              <2>     pop r11
   139                              <2>     pop r10
   140                              <2>     pop r9
   141                              <2>     pop r8
   142                              <2>     pop rdi
   143                              <2>     pop rsi
   144                              <2>     pop rdx
   145                              <2>     pop rcx
   146                              <2>     pop rbx
   147                              <2>     pop rax
   148                              <2> %endmacro
   149                              <2> 
   150                              <2> %endif
   151                              <2> ;---------------------ABI Standard------------------;
   152                              <2> %define USE_ABI_STANDARD
   153                              <2> %ifdef USE_ABI_STANDARD
   154                              <2> 
   155                              <2> 
   156                              <2>     %define ABI_File_None   0       ; 无文件类型
   157                              <2>     %define ABI_File_REL    1       ; 可重定位文件
   158                              <2>     %define ABI_File_EXEC   2       ; 可执行文件
   159                              <2>     %define ABI_File_DYN    3       ; 共享目标文件
   160                              <2>     %define ABI_File_CORE   4       ; 核心文件
   161                              <2> 
   162                              <2>     %define Section_Type_NULL    0      ; 未使用
   163                              <2>     %define Section_Type_LOAD    1      ; 可加载段
   164                              <2>     %define Section_Type_DYNAMIC 2      ; 动态链接信息
   165                              <2>     %define Section_Type_INTERP  3      ; 解释器路径
   166                              <2>     %define Section_Type_NOTE    4      ; 辅助信息
   167                              <2>     %define Section_Type_SHLIB   5      ; 保留
   168                              <2> 
   169                              <2>     %macro ABI_HEADER 4 ;1=File Type, 2=Entry Point Address, 3=Section Header Offset, 4=Section Header Count
   170                              <2>         db 0xA5, 'A', 'B', 'I'     ; ABI Magic Number
   171                              <2>         db 1                       ; Encode Type
   172                              <2>         db 1                       ; ABI Version
   173                              <2> 
   174                              <2>         dw %1                      ; ABI File Type
   175                              <2>         dq %2                      ; Entry Point Address
   176                              <2>         dw 32                      ; ABI Headers Size
   177                              <2> 
   178                              <2>         dq %3                      ; Section Header Offset
   179                              <2>         dw 32                      ; Section Header Size
   180                              <2>         dw %4                      ; Section Header Count
   181                              <2>         dw 0                       ; Symble Table Entry Size
   182                              <2>     %endmacro
   183                              <2>     STRUC struct_ABI_HEADER
   184                              <2>         .magic:         resb 4    ; ABI Magic Number (4 bytes)
   185                              <2>         .encode_type:   resb 1    ; Encode Type (1 byte)
   186                              <2>         .abi_version:   resb 1    ; ABI Version (1 byte)
   187                              <2>         .file_type:     resw 1    ; ABI File Type (2 bytes)
   188                              <2>         .entry_point:   resq 1    ; Entry Point Address (8 bytes)
   189                              <2>         .header_size:   resw 1    ; ABI Headers Size (2 bytes)
   190                              <2>         .section_offset: resq 1   ; Section Header Offset (8 bytes)
   191                              <2>         .section_size:  resw 1    ; Section Header Size (2 bytes)
   192                              <2>         .section_count: resw 1    ; Section Header Count (2 bytes)
   193                              <2>         .sym_table_size: resw 1   ; Symbol Table Entry Size (2 bytes)
   194                              <2>     ENDSTRUC
   195                              <2> 
   196                              <2>     %macro SECTION_HEADER 4 ;1=Section Type, 2=Virtual Address, 3=Section Offset, 4=Section Size
   197                              <2>         dq %1                  ; Section Type
   198                              <2>         dq %2                  ; Virtual Address
   199                              <2>         dq %3                  ; Section Offset
   200                              <2>         dq %4                  ; Section Size
   201                              <2>     %endmacro
   202                              <2>     STRUC struct_SECTION_HEADER
   203                              <2>         .type:      resq 1    ; Section Type (8 bytes)
   204                              <2>         .vaddr:     resq 1    ; Virtual Address (8 bytes)
   205                              <2>         .offset:    resq 1    ; Section Offset (8 bytes)
   206                              <2>         .size:      resq 1    ; Section Size (8 bytes)
   207                              <2>     ENDSTRUC
   208                              <2> %endif
   209                              <2> 
   210                              <2> %endif
     6                              <1> 
     7                              <1> [BITS 64]
     8                              <1> 
     9                              <1> struc tss_table_info
    10 00000000 ????????            <1>     .reserved1:      resd 1
    11 00000004 ????????????????    <1>     .rsp0:           resq 1
    12 0000000C ????????????????    <1>     .rsp1:           resq 1
    13 00000014 ????????????????    <1>     .rsp2:           resq 1
    14 0000001C ????????????????    <1>     .reserved2:      resq 1
    15 00000024 ????????????????    <1>     .ist1:           resq 1
    16 0000002C ????????????????    <1>     .ist2:           resq 1
    17 00000034 ????????????????    <1>     .ist3:           resq 1
    18 0000003C ????????????????    <1>     .ist4:           resq 1
    19 00000044 ????????????????    <1>     .ist5:           resq 1
    20 0000004C ????????????????    <1>     .ist6:           resq 1
    21 00000054 ????????????????    <1>     .ist7:           resq 1
    22 0000005C ????????            <1>     .reserved3:      resd 1
    23 00000060 ????????            <1>     .reserved4:      resd 1
    24 00000064 ????????            <1>     .io_map_base:    resd 1
    25                              <1> endstruc
    26                              <1> struc tss_descriptor
    27 00000000 ????                <1>     .limit_low:      resw 1    ; 段界限的低 16 位
    28 00000002 ????                <1>     .base_low:       resw 1    ; 基地址的低 16 位
    29                              <1> 
    30 00000004 ??                  <1>     .base_mid:       resb 1    ; 基地址的中间 8 位
    31 00000005 ??                  <1>     .type:           resb 1    ; 类型和属性（包括 P 位、DPL、TYPE）
    32 00000006 ??                  <1>     .limit_high:     resb 1    ; 段界限的高 4 位和标志（G、AVL 等）
    33 00000007 ??                  <1>     .base_high:      resb 1    ; 基地址的高 8 位
    34                              <1> 
    35 00000008 ????????            <1>     .base_upper:     resd 1    ; 基地址的高 32 位（64 位地址支持）
    36 0000000C ????????            <1>     .reserved:       resd 1    ; 保留字段
    37                              <1> endstruc
    38                              <1> 
    39                              <1> init_sys_vector:;init system interrupt vector
    40                              <1>     prolog 0;
    65 000014D2 55                  <2>  push rbp
    66 000014D3 4889E5              <2>  mov rbp, rsp
    67 000014D6 488945F8            <2>  mov [rbp-8],rax
    68 000014DA B800000000          <2>  mov rax, %1
    69 000014DF 4883C00F            <2>  add rax, 15
    70 000014E3 4883E0F0            <2>  and rax, ~15
    71 000014E7 4829C4              <2>  sub rsp, rax
    72 000014EA 488B45F8            <2>  mov rax,[rbp-8]
    73                              <2>  pushallq
   117 000014EE 50                  <3>  push rax
   118 000014EF 53                  <3>  push rbx
   119 000014F0 51                  <3>  push rcx
   120 000014F1 52                  <3>  push rdx
   121 000014F2 56                  <3>  push rsi
   122 000014F3 57                  <3>  push rdi
   123 000014F4 4150                <3>  push r8
   124 000014F6 4151                <3>  push r9
   125 000014F8 4152                <3>  push r10
   126 000014FA 4153                <3>  push r11
   127 000014FC 4154                <3>  push r12
   128 000014FE 4155                <3>  push r13
   129 00001500 4156                <3>  push r14
   130 00001502 4157                <3>  push r15
    74                              <2> 
    75                              <2> 
    76                              <2> 
    77                              <2> 
    78                              <2> 
    79                              <2> 
    41                              <1>     ; jmp $
    42                              <1>     function setup_default_tss
    26                              <2>  %assign param_count %0 - 2
    27                              <2> 
    28                              <2>  %if param_count < 0
    29                              <2>  %assign param_count 0
    30                              <2>  %endif
    31                              <2>  %if param_count < 1
    32                              <2>  %assign ret_param_count 0
    33                              <2>  %else
    34                              <2>  %assign ret_param_count %2
    35                              <2>  %endif
    36                              <2> 
    37                              <2> 
    38                              <2>  prepare_call param_count, ret_param_count
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 00001504 4883EC00            <3>  sub rsp, total_space
    39                              <2> 
    40                              <2> 
    41                              <2>  %if param_count > 0
    42                              <2>  %assign i 0
    43                              <2>  mov [rsp-8], rax
    44                              <2>  %rep param_count
    45                              <2>  %rotate 1
    46                              <2>  mov rax, %2
    47                              <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    49                              <2>  %endrep
    50                              <2> 
    51                              <2>  %rotate 1
    52                              <2>  %rotate 1
    53                              <2>  mov rax,[rsp-8]
    54                              <2>  %endif
    55                              <2> 
    56                              <2> 
    57 00001508 E839000000          <2>  call %1
    58                              <2> 
    59                              <2> 
    60                              <2>  cleanup_call param_count, ret_param_count
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 0000150D 4883C400            <3>  add rsp, total_space
    61                              <2> 
    43                              <1>         ; jmp $
    44                              <1>     function init_expection
    26                              <2>  %assign param_count %0 - 2
    27                              <2> 
    28                              <2>  %if param_count < 0
    29                              <2>  %assign param_count 0
    30                              <2>  %endif
    31                              <2>  %if param_count < 1
    32                              <2>  %assign ret_param_count 0
    33                              <2>  %else
    34                              <2>  %assign ret_param_count %2
    35                              <2>  %endif
    36                              <2> 
    37                              <2> 
    38                              <2>  prepare_call param_count, ret_param_count
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 00001511 4883EC00            <3>  sub rsp, total_space
    39                              <2> 
    40                              <2> 
    41                              <2>  %if param_count > 0
    42                              <2>  %assign i 0
    43                              <2>  mov [rsp-8], rax
    44                              <2>  %rep param_count
    45                              <2>  %rotate 1
    46                              <2>  mov rax, %2
    47                              <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    49                              <2>  %endrep
    50                              <2> 
    51                              <2>  %rotate 1
    52                              <2>  %rotate 1
    53                              <2>  mov rax,[rsp-8]
    54                              <2>  %endif
    55                              <2> 
    56                              <2> 
    57 00001515 E827010000          <2>  call %1
    58                              <2> 
    59                              <2> 
    60                              <2>  cleanup_call param_count, ret_param_count
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 0000151A 4883C400            <3>  add rsp, total_space
    61                              <2> 
    45                              <1>     ; jmp $
    46                              <1>     function init_interrupt
    26                              <2>  %assign param_count %0 - 2
    27                              <2> 
    28                              <2>  %if param_count < 0
    29                              <2>  %assign param_count 0
    30                              <2>  %endif
    31                              <2>  %if param_count < 1
    32                              <2>  %assign ret_param_count 0
    33                              <2>  %else
    34                              <2>  %assign ret_param_count %2
    35                              <2>  %endif
    36                              <2> 
    37                              <2> 
    38                              <2>  prepare_call param_count, ret_param_count
    99                              <3>  %assign total_space ((%1 + %2) * 8)
   100                              <3> 
   101                              <3>  %if (total_space % 16) != 0
   102                              <3>  %assign total_space total_space + 8
   103                              <3>  %endif
   104                              <3> 
   105 0000151E 4883EC00            <3>  sub rsp, total_space
    39                              <2> 
    40                              <2> 
    41                              <2>  %if param_count > 0
    42                              <2>  %assign i 0
    43                              <2>  mov [rsp-8], rax
    44                              <2>  %rep param_count
    45                              <2>  %rotate 1
    46                              <2>  mov rax, %2
    47                              <2>  mov [rsp + 8*i], rax
    48                              <2>  %assign i i+1
    49                              <2>  %endrep
    50                              <2> 
    51                              <2>  %rotate 1
    52                              <2>  %rotate 1
    53                              <2>  mov rax,[rsp-8]
    54                              <2>  %endif
    55                              <2> 
    56                              <2> 
    57 00001522 E826040000          <2>  call %1
    58                              <2> 
    59                              <2> 
    60                              <2>  cleanup_call param_count, ret_param_count
   109                              <3>  %assign total_space ((%1 + %2) * 8)
   110                              <3>  %if (total_space % 16) != 0
   111                              <3>  %assign total_space total_space + 8
   112                              <3>  %endif
   113 00001527 4883C400            <3>  add rsp, total_space
    61                              <2> 
    47                              <1>     ; jmp $
    48                              <1> 
    49                              <1> 
    50                              <1>     epilog
    83                              <2>  popallq
   134 0000152B 415F                <3>  pop r15
   135 0000152D 415E                <3>  pop r14
   136 0000152F 415D                <3>  pop r13
   137 00001531 415C                <3>  pop r12
   138 00001533 415B                <3>  pop r11
   139 00001535 415A                <3>  pop r10
   140 00001537 4159                <3>  pop r9
   141 00001539 4158                <3>  pop r8
   142 0000153B 5F                  <3>  pop rdi
   143 0000153C 5E                  <3>  pop rsi
   144 0000153D 5A                  <3>  pop rdx
   145 0000153E 59                  <3>  pop rcx
   146 0000153F 5B                  <3>  pop rbx
   147 00001540 58                  <3>  pop rax
    84                              <2> 
    85 00001541 4889EC              <2>  mov rsp, rbp
    86 00001544 5D                  <2>  pop rbp
    87 00001545 C3                  <2>  ret
    51                              <1> setup_default_tss:;setup tss
    52                              <1>     prolog 0;
    65 00001546 55                  <2>  push rbp
    66 00001547 4889E5              <2>  mov rbp, rsp
    67 0000154A 488945F8            <2>  mov [rbp-8],rax
    68 0000154E B800000000          <2>  mov rax, %1
    69 00001553 4883C00F            <2>  add rax, 15
    70 00001557 4883E0F0            <2>  and rax, ~15
    71 0000155B 4829C4              <2>  sub rsp, rax
    72 0000155E 488B45F8            <2>  mov rax,[rbp-8]
    73                              <2>  pushallq
   117 00001562 50                  <3>  push rax
   118 00001563 53                  <3>  push rbx
   119 00001564 51                  <3>  push rcx
   120 00001565 52                  <3>  push rdx
   121 00001566 56                  <3>  push rsi
   122 00001567 57                  <3>  push rdi
   123 00001568 4150                <3>  push r8
   124 0000156A 4151                <3>  push r9
   125 0000156C 4152                <3>  push r10
   126 0000156E 4153                <3>  push r11
   127 00001570 4154                <3>  push r12
   128 00001572 4155                <3>  push r13
   129 00001574 4156                <3>  push r14
   130 00001576 4157                <3>  push r15
    74                              <2> 
    75                              <2> 
    76                              <2> 
    77                              <2> 
    78                              <2> 
    79                              <2> 
    53                              <1> 
    54 00001578 48BB004010000080FF- <1>     mov rbx, GDTPointerUpperAddr
    54 00001581 FF                  <1>
    55 00001582 488B5B02            <1>     mov rbx, [rbx + 2]
    56 00001586 4883C340            <1>     add rbx, 0x40
    57                              <1> 
    58 0000158A 48B8144010000080FF- <1>     mov rax, TSSPointerUpperAddr
    58 00001593 FF                  <1>
    59 00001594 668B10              <1>     mov  dx,word [rax]
    60 00001597 488B4002            <1>     mov rax, [rax + 2]
    61                              <1>     ; jmp $
    62 0000159B 668913              <1>     mov word [rbx + tss_descriptor.limit_low], dx
    63 0000159E 66894302            <1>     mov word [rbx + tss_descriptor.base_low], ax
    64 000015A2 48C1E810            <1>     shr rax, 16
    65                              <1> 
    66 000015A6 884304              <1>     mov byte [rbx + tss_descriptor.base_mid], al
    67 000015A9 C6430589            <1>     mov byte [rbx + tss_descriptor.type], 0x89
    68 000015AD C6430600            <1>     mov byte [rbx + tss_descriptor.limit_high], 0x00
    69 000015B1 48C1E808            <1>     shr rax, 8
    70                              <1> 
    71 000015B5 884307              <1>     mov byte [rbx + tss_descriptor.base_high], al
    72 000015B8 48C1E808            <1>     shr rax, 8
    73                              <1> 
    74 000015BC 894308              <1>     mov dword [rbx + tss_descriptor.base_upper], eax
    75 000015BF C7430C00000000      <1>     mov dword [rbx + tss_descriptor.reserved], 0x00
    76                              <1> 
    77                              <1> 
    78 000015C6 48B8144010000080FF- <1>     mov rax, TSSPointerUpperAddr
    78 000015CF FF                  <1>
    79 000015D0 488B5802            <1>     mov rbx, [rax + 2]
    80                              <1> 
    81 000015D4 48B8007C00000080FF- <1>     mov rax, 0xffff800000007c00
    81 000015DD FF                  <1>
    82                              <1>     ; mov qword [rbx + tss_table_info.reserved1], 0x00
    83 000015DE 48894304            <1>     mov qword [rbx + tss_table_info.rsp0], rax
    84 000015E2 4889430C            <1>     mov qword [rbx + tss_table_info.rsp1], rax
    85 000015E6 48894314            <1>     mov qword [rbx + tss_table_info.rsp2], rax
    86                              <1>     ; mov qword [rbx + tss_table_info.reserved2], 0x00
    87 000015EA 48894324            <1>     mov qword [rbx + tss_table_info.ist1], rax
    88 000015EE 4889432C            <1>     mov qword [rbx + tss_table_info.ist2], rax
    89 000015F2 48894334            <1>     mov qword [rbx + tss_table_info.ist3], rax
    90 000015F6 4889433C            <1>     mov qword [rbx + tss_table_info.ist4], rax
    91 000015FA 48894344            <1>     mov qword [rbx + tss_table_info.ist5], rax
    92 000015FE 4889434C            <1>     mov qword [rbx + tss_table_info.ist6], rax
    93 00001602 48894354            <1>     mov qword [rbx + tss_table_info.ist7], rax
    94                              <1> 
    95                              <1>     ; mov qword [rbx + tss_table_info.reserved3], 0x00
    96                              <1>     ; mov qword [rbx + tss_table_info.reserved4], 0x00
    97                              <1> 
    98 00001606 C7436468000000      <1>     mov dword [rbx + tss_table_info.io_map_base], 104
    99                              <1>     
   100 0000160D 66B94000            <1>     mov cx, 0x0040
   101 00001611 0F00D9              <1>     ltr cx
   102                              <1>     
   103                              <1>     epilog
    83                              <2>  popallq
   134 00001614 415F                <3>  pop r15
   135 00001616 415E                <3>  pop r14
   136 00001618 415D                <3>  pop r13
   137 0000161A 415C                <3>  pop r12
   138 0000161C 415B                <3>  pop r11
   139 0000161E 415A                <3>  pop r10
   140 00001620 4159                <3>  pop r9
   141 00001622 4158                <3>  pop r8
   142 00001624 5F                  <3>  pop rdi
   143 00001625 5E                  <3>  pop rsi
   144 00001626 5A                  <3>  pop rdx
   145 00001627 59                  <3>  pop rcx
   146 00001628 5B                  <3>  pop rbx
   147 00001629 58                  <3>  pop rax
    84                              <2> 
    85 0000162A 4889EC              <2>  mov rsp, rbp
    86 0000162D 5D                  <2>  pop rbp
    87 0000162E C3                  <2>  ret
   104                              <1> 
   105                              <1> %include "../kernel/expection.asm"
     1                              <2> %ifndef EXPECTION_ASM
     2                              <2> %define EXPECTION_ASM
     3                              <2> 
     4                              <2> %include "../bootloader/global_def.asm"
     1                              <3> %ifndef GLOBAL_DEF_ASM
     2                              <3> %define GLOBAL_DEF_ASM
     3                              <3> 
     4                              <3> 
     5                              <3> ;|----------------------|
     6                              <3> ;|	100000 ~ END	|
     7                              <3> ;|	   KERNEL	|
     8                              <3> ;|----------------------|
     9                              <3> ;|	E0000 ~ 100000	|
    10                              <3> ;| Extended System BIOS |
    11                              <3> ;|----------------------|
    12                              <3> ;|	C0000 ~ Dffff	|
    13                              <3> ;|     Expansion Area   |
    14                              <3> ;|----------------------|
    15                              <3> ;|	A0000 ~ bffff	|
    16                              <3> ;|   Legacy Video Area  |
    17                              <3> ;|----------------------|
    18                              <3> ;|	9f000 ~ A0000	|
    19                              <3> ;|	 BIOS reserve	|
    20                              <3> ;|----------------------|
    21                              <3> ;|	90000 ~ 9f000	|
    22                              <3> ;|	 kernel tmpbuf	|
    23                              <3> ;|----------------------|
    24                              <3> ;|	10000 ~ 90000	|
    25                              <3> ;|	   LOADER	|
    26                              <3> ;|----------------------|
    27                              <3> ;|	8000 ~ 10000	|
    28                              <3> ;|	  VBE info	|
    29                              <3> ;|----------------------|
    30                              <3> ;|	7e00 ~ 8000	|
    31                              <3> ;|	  mem info	|
    32                              <3> ;|----------------------|
    33                              <3> ;|	7c00 ~ 7e00	|
    34                              <3> ;|	 MBR (BOOT)	|
    35                              <3> ;|----------------------|
    36                              <3> ;|	0000 ~ 7c00	|
    37                              <3> ;|	 BIOS Code	|
    38                              <3> ;|----------------------|
    39                              <3> 
    40                              <3> 
    41                              <3> ;_______________________________________________________
    42                              <3> ; START	END	    SIZE	        USED
    43                              <3> ; FFFF0	FFFFF	16B	        BIOS System Entry
    44                              <3> ; F0000	FFFEF	64KB-16B	BIOS System Code
    45                              <3> ; C8000	EFFFF	160KB	    ROM/Mapped IO
    46                              <3> ; C0000	C7FFF	32KB	    Graphic Adapter BIOS
    47                              <3> ; B8000	BFFFF	32KB	    Chroma Text Video Buffer
    48                              <3> ; B0000	B7FFF	32KB	    Mono Text Video Buffer
    49                              <3> ; A0000	AFFFF	64KB	    Graphic Video Buffer
    50                              <3> ; 9FC00	9FFFF	1KB	        Extended BIOS Data Area
    51                              <3> ; 7E00	9FBFF	622080B     Useable 608KB	
    52                              <3> ; 7C00	7DFF	512B	    MBR
    53                              <3> ; 500	7BFF	30464B      Useable 30KB	
    54                              <3> ; 400	4FF	    256B	    BIOS Data Area
    55                              <3> ; 000	3FF	    1KB	        IVT
    56                              <3> ; _____________________________________________________
    57                              <3> 
    58                              <3> 
    59                              <3> 
    60                              <3> 
    61                              <3> 
    62                              <3> 
    63                              <3> 
    64                              <3> 
    65                              <3> 
    66                              <3> 
    67                              <3> 
    68                              <3> ;|----------------------|
    69                              <3> ;|	100000 ~ END	|
    70                              <3> ;|	   KERNEL	|
    71                              <3> ;|----------------------|
    72                              <3> ;|	E0000 ~ 100000	|
    73                              <3> ;| Extended System BIOS |
    74                              <3> ;|----------------------|
    75                              <3> ;|	C0000 ~ Dffff	|
    76                              <3> ;|     Expansion Area   |
    77                              <3> ;|----------------------|
    78                              <3> ;|	A0000 ~ bffff	|
    79                              <3> ;|   Legacy Video Area  |
    80                              <3> ;|----------------------|
    81                              <3> ;|	9F000 ~ A0000	|
    82                              <3> ;|	 BIOS reserve	|
    83                              <3> ;|----------------------|
    84                              <3> ;|	90000 ~ 9F000	|
    85                              <3> ;|	 kernel tmpbuf	|
    86                              <3> ;|----------------------|
    87                              <3> ;|	10000 ~ 90000	|
    88                              <3> ;|	   LOADER	|
    89                              <3> ;|----------------------|
    90                              <3> ;|	8000 ~ 10000	|
    91                              <3> ;|	  VBE info	|
    92                              <3> ;|----------------------|
    93                              <3> ;|	7E00 ~ 8000	|
    94                              <3> ;|	  mem info	|
    95                              <3> ;|----------------------|
    96                              <3> ;|	7C00 ~ 7E00	|
    97                              <3> ;|	 MBR (BOOT)	|
    98                              <3> ;|----------------------|
    99                              <3> ;|	0000 ~ 7C00	|
   100                              <3> ;|	 BIOS Code	|
   101                              <3> ;|----------------------|
   102                              <3> 
   103                              <3> 
   104                              <3> 
   105                              <3> 
   106                              <3> 
   107                              <3> 
   108                              <3> 
   109                              <3> 
   110                              <3> 
   111                              <3> 
   112                              <3> ;______________________________________________
   113                              <3> ; ----------------Vbe Info Block------------
   114                              <3> ; typedef struct {
   115                              <3> ;     unsigned char       vbe_signature;
   116                              <3> ;     unsigned short      vbe_version;
   117                              <3> ;     unsigned long       oem_string_ptr;
   118                              <3> ;     unsigned char       capabilities;
   119                              <3> ;     unsigned long       video_mode_ptr;
   120                              <3> ;     unsigned short      total_memory;
   121                              <3> ;     unsigned short      oem_software_rev;
   122                              <3> ;     unsigned long       oem_vendor_name_ptr;
   123                              <3> ;     unsigned long       oem_product_name_ptr;
   124                              <3> ;     unsigned long       oem_product_rev_ptr;
   125                              <3> ;     unsigned char       reserved[222];
   126                              <3> ;     unsigned char       oem_data[256];  
   127                              <3> ; } VbeInfoBlock;
   128                              <3> ;______________________________________________
   129                              <3> 
   130                              <3> 
   131                              <3> BaseOfKernelFile	equ	0x00
   132                              <3> OffsetOfKernelFile	equ	0x100000
   133                              <3> BaseTmpOfKernelAddr	equ	0x9000
   134                              <3> OffsetTmpOfKernelFile	equ	0x0000
   135                              <3> VBEStructBufferAddr	equ	0x8000
   136                              <3> VBEModeStructBufferAddr	equ	0x8200
   137                              <3> MemoryStructBufferAddr	equ	0x8800
   138                              <3> 
   139                              <3> 
   140                              <3> 
   141                              <3> KernelSpaceUpperAddress equ 0xFFFF800000000000
   142                              <3> 
   143                              <3> GDTPointerUpperAddr equ 0xFFFF800000104000
   144                              <3> IDTPointerUpperAddr equ 0xFFFF80000010400a
   145                              <3> TSSPointerUpperAddr equ 0xFFFF800000104014
   146                              <3> 
   147                              <3> VideoFrameBufferAddress equ 0xFFFF800003000000
   148                              <3> KernelStartSectorNum	equ	16
   149                              <3> 
   150                              <3> 
   151                              <3> %define PLATFORM_QEMU_X64 1
   152                              <3> %define PLATFORM_X64 2
   153                              <3> 
   154                              <3> %define DEBUG_PLATFORM PLATFORM_QEMU_X64
   155                              <3> %define DEBUG_MODE 1
   156                              <3> 
   157                              <3> 
   158                              <3> MasterSectorReadNumPort    equ	0x1F2
   159                              <3> MasterSectorReadPort    equ	0x1F0
   160                              <3> 
   161                              <3> SlaveReadNumPort    equ	0x172
   162                              <3> SlaveSectorReadPort    equ	0x170
   163                              <3> 
   164                              <3> SectorReadNumPort    equ	MasterSectorReadNumPort
   165                              <3> SectorReadPort    equ	MasterSectorReadPort
   166                              <3> 
   167                              <3> struc vbe_info_block
   168                              <3>     .signature                 resb 4    ; 'VESA' signature (must be "VESA")
   169                              <3>     .version                   resw 1    ; VBE version (e.g., 0x0300 for VBE 3.0)
   170                              <3>     .oem_string_ptr            resd 1    ; Pointer to OEM string
   171                              <3>     .capabilities              resd 1    ; Capabilities of the video card
   172                              <3>     .video_mode_ptr            resd 1    ; Pointer to supported video modes
   173                              <3>     .total_memory              resw 1    ; Total memory in 64KB blocks
   174                              <3> 
   175                              <3>     ; VBE 2.0+ fields
   176                              <3>     .oem_software_rev          resw 1    ; OEM software revision
   177                              <3>     .oem_vendor_name_ptr       resd 1    ; Pointer to OEM vendor name string
   178                              <3>     .oem_product_name_ptr      resd 1    ; Pointer to OEM product name string
   179                              <3>     .oem_product_rev_ptr       resd 1    ; Pointer to OEM product revision string
   180                              <3>     .reserved                  resb 222  ; Reserved for VBE implementation
   181                              <3>     .oem_data                  resb 256  ; Data area for OEM-specific information
   182                              <3> endstruc
   183                              <3> 
   184                              <3> struc vbe_mode_info_block
   185                              <3>     .attributes                resw 1    ; Mode attributes
   186                              <3>     .winA_attributes           resb 1    ; Window A attributes
   187                              <3>     .winB_attributes           resb 1    ; Window B attributes
   188                              <3>     .win_granularity           resw 1    ; Window granularity in KB
   189                              <3>     .win_size                  resw 1    ; Window size in KB
   190                              <3>     .winA_segment              resw 1    ; Window A segment
   191                              <3>     .winB_segment              resw 1    ; Window B segment
   192                              <3>     .win_func_ptr              resd 1    ; Pointer to window function
   193                              <3>     .bytes_per_scanline        resw 1    ; Bytes per scanline
   194                              <3> 
   195                              <3>     ; VBE 1.2+ fields
   196                              <3>     .x_resolution              resw 1    ; Horizontal resolution in pixels
   197                              <3>     .y_resolution              resw 1    ; Vertical resolution in pixels
   198                              <3>     .x_char_size               resb 1    ; Character cell width in pixels
   199                              <3>     .y_char_size               resb 1    ; Character cell height in pixels
   200                              <3>     .number_of_planes          resb 1    ; Number of memory planes
   201                              <3>     .bits_per_pixel            resb 1    ; Bits per pixel
   202                              <3>     .number_of_banks           resb 1    ; Number of banks
   203                              <3>     .memory_model              resb 1    ; Memory model type
   204                              <3>     .bank_size                 resb 1    ; Bank size in KB
   205                              <3>     .number_of_image_pages     resb 1    ; Number of images
   206                              <3>     .reserved1                 resb 1    ; Reserved
   207                              <3> 
   208                              <3>     ; Direct Color fields (VBE 1.2+)
   209                              <3>     .red_mask_size             resb 1    ; Size of direct color red mask
   210                              <3>     .red_field_position        resb 1    ; Bit position of red mask
   211                              <3>     .green_mask_size           resb 1    ; Size of direct color green mask
   212                              <3>     .green_field_position      resb 1    ; Bit position of green mask
   213                              <3>     .blue_mask_size            resb 1    ; Size of direct color blue mask
   214                              <3>     .blue_field_position       resb 1    ; Bit position of blue mask
   215                              <3>     .reserved_mask_size        resb 1    ; Size of direct color reserved mask
   216                              <3>     .reserved_field_position   resb 1    ; Bit position of reserved mask
   217                              <3>     .direct_color_mode_info    resb 1    ; Direct color mode attributes
   218                              <3> 
   219                              <3>     ; VBE 2.0+ fields
   220                              <3>     .phys_base_ptr             resd 1    ; Physical address for flat memory frame buffer
   221                              <3>     .reserved2                 resd 1    ; Reserved
   222                              <3>     .reserved3                 resw 1    ; Reserved
   223                              <3> 
   224                              <3>     ; VBE 3.0+ fields
   225                              <3>     .lin_bytes_per_scanline    resw 1    ; Bytes per scanline for linear modes
   226                              <3>     .bnk_number_of_image_pages resb 1    ; Number of images for banked modes
   227                              <3>     .lin_number_of_image_pages resb 1    ; Number of images for linear modes
   228                              <3>     .lin_red_mask_size         resb 1    ; Size of direct color red mask (linear modes)
   229                              <3>     .lin_red_field_position    resb 1    ; Bit position of red mask (linear modes)
   230                              <3>     .lin_green_mask_size       resb 1    ; Size of direct color green mask (linear modes)
   231                              <3>     .lin_green_field_position  resb 1    ; Bit position of green mask (linear modes)
   232                              <3>     .lin_blue_mask_size        resb 1    ; Size of direct color blue mask (linear modes)
   233                              <3>     .lin_blue_field_position   resb 1    ; Bit position of blue mask (linear modes)
   234                              <3>     .lin_reserved_mask_size    resb 1    ; Size of direct color reserved mask (linear modes)
   235                              <3>     .lin_reserved_field_position resb 1  ; Bit position of reserved mask (linear modes)
   236                              <3>     .max_pixel_clock           resd 1    ; Maximum pixel clock (Hz)
   237                              <3>     .reserved4                 resb 190  ; Reserved for future expansion
   238                              <3> endstruc
   239                              <3> 
   240                              <3> struc e820_memory_entry
   241                              <3>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   242                              <3>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   243                              <3>     .length_low               resd 1    ; Lower 32 bits of the length
   244                              <3>     .length_high              resd 1    ; Upper 32 bits of the length
   245                              <3>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   246                              <3>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   247                              <3> endstruc
   248                              <3> 
   249                              <3> %endif
     5                              <2> %include "../kernel/stddef.asm"
     1                              <3> %ifndef STDDEF_ASM
     2                              <3> %define STDDEF_ASM
     3                              <3> 
     4                              <3> ;-----------Calling Conventions Standard------------;
     5                              <3> %define USE_CC_STANDARD
     6                              <3> %ifdef USE_CC_STANDARD
     7                              <3> ;caller maintain the stack balance 
     8                              <3>     ; debug_times: db 0
     9                              <3>     ; cmp byte [rel debug_times],3
    10                              <3>     ; je debug_stop
    11                              <3>     ; add byte [rel debug_times],1
    12                              <3> ; -------------------------------
    13                              <3> ; 栈帧结构定义
    14                              <3> ; -------------------------------
    15                              <3> ; 调用后的栈布局:
    16                              <3> ; [rsp+0x00] 返回地址 (8字节)
    17                              <3> ; [rsp+0x08] 旧RBP     (8字节) <- rbp指向这里
    18                              <3> ; [rsp+0x10] 参数1     (8字节)
    19                              <3> ; [rsp+0x18] 参数2
    20                              <3> ; ...
    21                              <3> ; [rsp+X]    局部变量区
    22                              <3> ; -------------------------------
    23                              <3> 
    24                              <3> %define PARAM_OFFSET   16      ; 第一个参数的偏移量(返回地址8 + 旧RBP8)
    25                              <3> %macro function 1-* ; 1=函数名, 2=返回参数数量, 3=参数列表
    26                              <3>     %assign param_count %0 - 2 ; 参数数量
    27                              <3>     
    28                              <3>     %if param_count < 0
    29                              <3>         %assign param_count 0 ; 如果没有参数，设置为 0
    30                              <3>     %endif
    31                              <3>     %if param_count < 1
    32                              <3>         %assign ret_param_count 0 ; 返回参数数量
    33                              <3>     %else
    34                              <3>         %assign ret_param_count %2 ; 返回参数数量
    35                              <3>     %endif
    36                              <3> 
    37                              <3>     ; 准备调用
    38                              <3>     prepare_call param_count, ret_param_count
    39                              <3> 
    40                              <3>     ; 如果有参数，将参数压入栈
    41                              <3>     %if param_count > 0
    42                              <3>         %assign i 0
    43                              <3>         mov [rsp-8], rax ; 保存返回地址
    44                              <3>         %rep param_count
    45                              <3>             %rotate 1
    46                              <3>             mov rax, %2
    47                              <3>             mov [rsp + 8*i], rax ; 将参数压入栈
    48                              <3>             %assign i i+1
    49                              <3>         %endrep
    50                              <3>         ; mov rax,
    51                              <3>         %rotate 1
    52                              <3>         %rotate 1
    53                              <3>         mov rax,[rsp-8]; 保存返回地址
    54                              <3>     %endif
    55                              <3> 
    56                              <3>     ; 调用函数
    57                              <3>     call %1
    58                              <3> 
    59                              <3>     ; 清理栈空间
    60                              <3>     cleanup_call param_count, ret_param_count
    61                              <3> 
    62                              <3> %endmacro
    63                              <3> 
    64                              <3> %macro prolog 1;local var size(bytes)
    65                              <3>     push rbp
    66                              <3>     mov rbp, rsp
    67                              <3>     mov [rbp-8],rax
    68                              <3>     mov rax, %1
    69                              <3>     add rax, 15
    70                              <3>     and rax, ~15
    71                              <3>     sub rsp, rax
    72                              <3>     mov rax,[rbp-8]
    73                              <3>     pushallq
    74                              <3>     
    75                              <3>     
    76                              <3>     ; 调试信息可以放在这里
    77                              <3>     ; %ifdef DEBUG
    78                              <3>     ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
    79                              <3>     ; %endif
    80                              <3> %endmacro
    81                              <3> 
    82                              <3> %macro epilog 0
    83                              <3>     popallq
    84                              <3> 
    85                              <3>     mov rsp, rbp
    86                              <3>     pop rbp
    87                              <3>     ret
    88                              <3> %endmacro
    89                              <3> 
    90                              <3> %macro get_param 2;1=register, 2=param index(from 1)
    91                              <3>     mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    92                              <3> %endmacro
    93                              <3> 
    94                              <3> %macro set_ret_param 2;1=register, 2=param index(from 1)
    95                              <3>     mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
    96                              <3> %endmacro
    97                              <3> 
    98                              <3> %macro prepare_call 2;1=param count, 2=return param count
    99                              <3>     %assign total_space ((%1 + %2) * 8)
   100                              <3>     
   101                              <3>     %if (total_space % 16) != 0
   102                              <3>         %assign total_space total_space + 8  ; 添加填充
   103                              <3>     %endif
   104                              <3>     
   105                              <3>     sub rsp, total_space
   106                              <3> %endmacro
   107                              <3> 
   108                              <3> %macro cleanup_call 2;1=param count, 2=return param count
   109                              <3>     %assign total_space ((%1 + %2) * 8)
   110                              <3>     %if (total_space % 16) != 0
   111                              <3>         %assign total_space total_space + 8
   112                              <3>     %endif
   113                              <3>     add rsp, total_space
   114                              <3> %endmacro
   115                              <3> 
   116                              <3> %macro pushallq 0
   117                              <3>     push rax
   118                              <3>     push rbx
   119                              <3>     push rcx
   120                              <3>     push rdx
   121                              <3>     push rsi
   122                              <3>     push rdi
   123                              <3>     push r8
   124                              <3>     push r9
   125                              <3>     push r10
   126                              <3>     push r11
   127                              <3>     push r12
   128                              <3>     push r13
   129                              <3>     push r14
   130                              <3>     push r15
   131                              <3> %endmacro
   132                              <3> 
   133                              <3> %macro popallq 0
   134                              <3>     pop r15
   135                              <3>     pop r14
   136                              <3>     pop r13
   137                              <3>     pop r12
   138                              <3>     pop r11
   139                              <3>     pop r10
   140                              <3>     pop r9
   141                              <3>     pop r8
   142                              <3>     pop rdi
   143                              <3>     pop rsi
   144                              <3>     pop rdx
   145                              <3>     pop rcx
   146                              <3>     pop rbx
   147                              <3>     pop rax
   148                              <3> %endmacro
   149                              <3> 
   150                              <3> %endif
   151                              <3> ;---------------------ABI Standard------------------;
   152                              <3> %define USE_ABI_STANDARD
   153                              <3> %ifdef USE_ABI_STANDARD
   154                              <3> 
   155                              <3> 
   156                              <3>     %define ABI_File_None   0       ; 无文件类型
   157                              <3>     %define ABI_File_REL    1       ; 可重定位文件
   158                              <3>     %define ABI_File_EXEC   2       ; 可执行文件
   159                              <3>     %define ABI_File_DYN    3       ; 共享目标文件
   160                              <3>     %define ABI_File_CORE   4       ; 核心文件
   161                              <3> 
   162                              <3>     %define Section_Type_NULL    0      ; 未使用
   163                              <3>     %define Section_Type_LOAD    1      ; 可加载段
   164                              <3>     %define Section_Type_DYNAMIC 2      ; 动态链接信息
   165                              <3>     %define Section_Type_INTERP  3      ; 解释器路径
   166                              <3>     %define Section_Type_NOTE    4      ; 辅助信息
   167                              <3>     %define Section_Type_SHLIB   5      ; 保留
   168                              <3> 
   169                              <3>     %macro ABI_HEADER 4 ;1=File Type, 2=Entry Point Address, 3=Section Header Offset, 4=Section Header Count
   170                              <3>         db 0xA5, 'A', 'B', 'I'     ; ABI Magic Number
   171                              <3>         db 1                       ; Encode Type
   172                              <3>         db 1                       ; ABI Version
   173                              <3> 
   174                              <3>         dw %1                      ; ABI File Type
   175                              <3>         dq %2                      ; Entry Point Address
   176                              <3>         dw 32                      ; ABI Headers Size
   177                              <3> 
   178                              <3>         dq %3                      ; Section Header Offset
   179                              <3>         dw 32                      ; Section Header Size
   180                              <3>         dw %4                      ; Section Header Count
   181                              <3>         dw 0                       ; Symble Table Entry Size
   182                              <3>     %endmacro
   183                              <3>     STRUC struct_ABI_HEADER
   184                              <3>         .magic:         resb 4    ; ABI Magic Number (4 bytes)
   185                              <3>         .encode_type:   resb 1    ; Encode Type (1 byte)
   186                              <3>         .abi_version:   resb 1    ; ABI Version (1 byte)
   187                              <3>         .file_type:     resw 1    ; ABI File Type (2 bytes)
   188                              <3>         .entry_point:   resq 1    ; Entry Point Address (8 bytes)
   189                              <3>         .header_size:   resw 1    ; ABI Headers Size (2 bytes)
   190                              <3>         .section_offset: resq 1   ; Section Header Offset (8 bytes)
   191                              <3>         .section_size:  resw 1    ; Section Header Size (2 bytes)
   192                              <3>         .section_count: resw 1    ; Section Header Count (2 bytes)
   193                              <3>         .sym_table_size: resw 1   ; Symbol Table Entry Size (2 bytes)
   194                              <3>     ENDSTRUC
   195                              <3> 
   196                              <3>     %macro SECTION_HEADER 4 ;1=Section Type, 2=Virtual Address, 3=Section Offset, 4=Section Size
   197                              <3>         dq %1                  ; Section Type
   198                              <3>         dq %2                  ; Virtual Address
   199                              <3>         dq %3                  ; Section Offset
   200                              <3>         dq %4                  ; Section Size
   201                              <3>     %endmacro
   202                              <3>     STRUC struct_SECTION_HEADER
   203                              <3>         .type:      resq 1    ; Section Type (8 bytes)
   204                              <3>         .vaddr:     resq 1    ; Virtual Address (8 bytes)
   205                              <3>         .offset:    resq 1    ; Section Offset (8 bytes)
   206                              <3>         .size:      resq 1    ; Section Size (8 bytes)
   207                              <3>     ENDSTRUC
   208                              <3> %endif
   209                              <3> 
   210                              <3> %endif
     6                              <2> 
     7                              <2> [BITS 64]
     8                              <2> ; GDTPointerUpperAddr equ 0xFFFF800000104000
     9                              <2> ; IDTPointerUpperAddr equ 0xFFFF80000010400a
    10                              <2> ; TSSPointerUpperAddr equ 0xFFFF800000104004
    11                              <2> 
    12 0000162F 646976696465206578- <2> expection_div_messige: db 'divide expection', 0
    12 00001638 70656374696F6E00    <2>
    13 00001640 00                  <2> expection_error_code: db 0
    14                              <2> ; ; 描述符类型常量
    15                              <2> %define INTGATE 0x8E    ; 64位中断门(P=1, DPL=00, 类型=1110)
    16                              <2> %define TRAPGATE 0x8F   ; 64位陷阱门(P=1, DPL=00, 类型=1111)
    17                              <2> 
    18                              <2> ; ; 64位IDT条目结构(16字节)
    19                              <2> struc idt_info
    20 00000000 ????                <2>     .offset_low:   resw 1  ; 0  偏移低16位(0..15)
    21 00000002 ????                <2>     .selector:     resw 1  ; 16 代码段选择子
    22                              <2> 
    23 00000004 ??                  <2>     .ist:          resb 1  ; 32 IST索引(0表示不使用)
    24 00000005 ??                  <2>     .type_attr:    resb 1  ; 40 类型属性
    25                              <2> 
    26 00000006 ????                <2>     .offset_mid:   resw 1  ; 48 偏移中16位(16..31)
    27                              <2> 
    28 00000008 ????????            <2>     .offset_high:  resd 1  ; 64 偏移高32位(32..63)
    29                              <2> 
    30 0000000C ????????            <2>     .reserved:     resd 1  ; 96 保留
    31                              <2> endstruc
    32                              <2> init_expection:;init expection idt
    33                              <2>     prolog 0;
    65 00001641 55                  <3>  push rbp
    66 00001642 4889E5              <3>  mov rbp, rsp
    67 00001645 488945F8            <3>  mov [rbp-8],rax
    68 00001649 B800000000          <3>  mov rax, %1
    69 0000164E 4883C00F            <3>  add rax, 15
    70 00001652 4883E0F0            <3>  and rax, ~15
    71 00001656 4829C4              <3>  sub rsp, rax
    72 00001659 488B45F8            <3>  mov rax,[rbp-8]
    73                              <3>  pushallq
   117 0000165D 50                  <4>  push rax
   118 0000165E 53                  <4>  push rbx
   119 0000165F 51                  <4>  push rcx
   120 00001660 52                  <4>  push rdx
   121 00001661 56                  <4>  push rsi
   122 00001662 57                  <4>  push rdi
   123 00001663 4150                <4>  push r8
   124 00001665 4151                <4>  push r9
   125 00001667 4152                <4>  push r10
   126 00001669 4153                <4>  push r11
   127 0000166B 4154                <4>  push r12
   128 0000166D 4155                <4>  push r13
   129 0000166F 4156                <4>  push r14
   130 00001671 4157                <4>  push r15
    74                              <3> 
    75                              <3> 
    76                              <3> 
    77                              <3> 
    78                              <3> 
    79                              <3> 
    34 00001673 488D35F8010000      <2>     lea rsi,[rel default_exception_handler]
    35                              <2>     function setup_default_expection_idt,1,rsi
    26                              <3>  %assign param_count %0 - 2
    27                              <3> 
    28                              <3>  %if param_count < 0
    29                              <3>  %assign param_count 0
    30                              <3>  %endif
    31                              <3>  %if param_count < 1
    32                              <3>  %assign ret_param_count 0
    33                              <3>  %else
    34                              <3>  %assign ret_param_count %2
    35                              <3>  %endif
    36                              <3> 
    37                              <3> 
    38                              <3>  prepare_call param_count, ret_param_count
    99                              <4>  %assign total_space ((%1 + %2) * 8)
   100                              <4> 
   101                              <4>  %if (total_space % 16) != 0
   102                              <4>  %assign total_space total_space + 8
   103                              <4>  %endif
   104                              <4> 
   105 0000167A 4883EC10            <4>  sub rsp, total_space
    39                              <3> 
    40                              <3> 
    41                              <3>  %if param_count > 0
    42                              <3>  %assign i 0
    43 0000167E 48894424F8          <3>  mov [rsp-8], rax
    44                              <3>  %rep param_count
    45                              <3>  %rotate 1
    46                              <3>  mov rax, %2
    47                              <3>  mov [rsp + 8*i], rax
    48                              <3>  %assign i i+1
    49                              <3>  %endrep
    45                              <4>  %rotate 1
    46 00001683 4889F0              <4>  mov rax, %2
    47 00001686 48890424            <4>  mov [rsp + 8*i], rax
    48                              <4>  %assign i i+1
    50                              <3> 
    51                              <3>  %rotate 1
    52                              <3>  %rotate 1
    53 0000168A 488B4424F8          <3>  mov rax,[rsp-8]
    54                              <3>  %endif
    55                              <3> 
    56                              <3> 
    57 0000168F E83B010000          <3>  call %1
    58                              <3> 
    59                              <3> 
    60                              <3>  cleanup_call param_count, ret_param_count
   109                              <4>  %assign total_space ((%1 + %2) * 8)
   110                              <4>  %if (total_space % 16) != 0
   111                              <4>  %assign total_space total_space + 8
   112                              <4>  %endif
   113 00001694 4883C410            <4>  add rsp, total_space
    61                              <3> 
    36                              <2>     ; jmp $
    37 00001698 488D35D7010000      <2>     lea rsi,[rel div0_exception_handler]
    38                              <2>     function register_expection_idt,1,0,1,rsi
    26                              <3>  %assign param_count %0 - 2
    27                              <3> 
    28                              <3>  %if param_count < 0
    29                              <3>  %assign param_count 0
    30                              <3>  %endif
    31                              <3>  %if param_count < 1
    32                              <3>  %assign ret_param_count 0
    33                              <3>  %else
    34                              <3>  %assign ret_param_count %2
    35                              <3>  %endif
    36                              <3> 
    37                              <3> 
    38                              <3>  prepare_call param_count, ret_param_count
    99                              <4>  %assign total_space ((%1 + %2) * 8)
   100                              <4> 
   101                              <4>  %if (total_space % 16) != 0
   102                              <4>  %assign total_space total_space + 8
   103                              <4>  %endif
   104                              <4> 
   105 0000169F 4883EC20            <4>  sub rsp, total_space
    39                              <3> 
    40                              <3> 
    41                              <3>  %if param_count > 0
    42                              <3>  %assign i 0
    43 000016A3 48894424F8          <3>  mov [rsp-8], rax
    44                              <3>  %rep param_count
    45                              <3>  %rotate 1
    46                              <3>  mov rax, %2
    47                              <3>  mov [rsp + 8*i], rax
    48                              <3>  %assign i i+1
    49                              <3>  %endrep
    45                              <4>  %rotate 1
    46 000016A8 B800000000          <4>  mov rax, %2
    47 000016AD 48890424            <4>  mov [rsp + 8*i], rax
    48                              <4>  %assign i i+1
    45                              <4>  %rotate 1
    46 000016B1 B801000000          <4>  mov rax, %2
    47 000016B6 4889442408          <4>  mov [rsp + 8*i], rax
    48                              <4>  %assign i i+1
    45                              <4>  %rotate 1
    46 000016BB 4889F0              <4>  mov rax, %2
    47 000016BE 4889442410          <4>  mov [rsp + 8*i], rax
    48                              <4>  %assign i i+1
    50                              <3> 
    51                              <3>  %rotate 1
    52                              <3>  %rotate 1
    53 000016C3 488B4424F8          <3>  mov rax,[rsp-8]
    54                              <3>  %endif
    55                              <3> 
    56                              <3> 
    57 000016C8 E858000000          <3>  call %1
    58                              <3> 
    59                              <3> 
    60                              <3>  cleanup_call param_count, ret_param_count
   109                              <4>  %assign total_space ((%1 + %2) * 8)
   110                              <4>  %if (total_space % 16) != 0
   111                              <4>  %assign total_space total_space + 8
   112                              <4>  %endif
   113 000016CD 4883C420            <4>  add rsp, total_space
    61                              <3> 
    39                              <2> 
    40 000016D1 488D3509020000      <2>     lea rsi,[rel debug_exception_handler]
    41                              <2>     function register_expection_idt,1,1,1,rsi
    26                              <3>  %assign param_count %0 - 2
    27                              <3> 
    28                              <3>  %if param_count < 0
    29                              <3>  %assign param_count 0
    30                              <3>  %endif
    31                              <3>  %if param_count < 1
    32                              <3>  %assign ret_param_count 0
    33                              <3>  %else
    34                              <3>  %assign ret_param_count %2
    35                              <3>  %endif
    36                              <3> 
    37                              <3> 
    38                              <3>  prepare_call param_count, ret_param_count
    99                              <4>  %assign total_space ((%1 + %2) * 8)
   100                              <4> 
   101                              <4>  %if (total_space % 16) != 0
   102                              <4>  %assign total_space total_space + 8
   103                              <4>  %endif
   104                              <4> 
   105 000016D8 4883EC20            <4>  sub rsp, total_space
    39                              <3> 
    40                              <3> 
    41                              <3>  %if param_count > 0
    42                              <3>  %assign i 0
    43 000016DC 48894424F8          <3>  mov [rsp-8], rax
    44                              <3>  %rep param_count
    45                              <3>  %rotate 1
    46                              <3>  mov rax, %2
    47                              <3>  mov [rsp + 8*i], rax
    48                              <3>  %assign i i+1
    49                              <3>  %endrep
    45                              <4>  %rotate 1
    46 000016E1 B801000000          <4>  mov rax, %2
    47 000016E6 48890424            <4>  mov [rsp + 8*i], rax
    48                              <4>  %assign i i+1
    45                              <4>  %rotate 1
    46 000016EA B801000000          <4>  mov rax, %2
    47 000016EF 4889442408          <4>  mov [rsp + 8*i], rax
    48                              <4>  %assign i i+1
    45                              <4>  %rotate 1
    46 000016F4 4889F0              <4>  mov rax, %2
    47 000016F7 4889442410          <4>  mov [rsp + 8*i], rax
    48                              <4>  %assign i i+1
    50                              <3> 
    51                              <3>  %rotate 1
    52                              <3>  %rotate 1
    53 000016FC 488B4424F8          <3>  mov rax,[rsp-8]
    54                              <3>  %endif
    55                              <3> 
    56                              <3> 
    57 00001701 E81F000000          <3>  call %1
    58                              <3> 
    59                              <3> 
    60                              <3>  cleanup_call param_count, ret_param_count
   109                              <4>  %assign total_space ((%1 + %2) * 8)
   110                              <4>  %if (total_space % 16) != 0
   111                              <4>  %assign total_space total_space + 8
   112                              <4>  %endif
   113 00001706 4883C420            <4>  add rsp, total_space
    61                              <3> 
    42                              <2> 
    43                              <2>     ; mov rax,0x123123
    44                              <2>     ; jmp $
    45                              <2> 
    46                              <2>     epilog
    83                              <3>  popallq
   134 0000170A 415F                <4>  pop r15
   135 0000170C 415E                <4>  pop r14
   136 0000170E 415D                <4>  pop r13
   137 00001710 415C                <4>  pop r12
   138 00001712 415B                <4>  pop r11
   139 00001714 415A                <4>  pop r10
   140 00001716 4159                <4>  pop r9
   141 00001718 4158                <4>  pop r8
   142 0000171A 5F                  <4>  pop rdi
   143 0000171B 5E                  <4>  pop rsi
   144 0000171C 5A                  <4>  pop rdx
   145 0000171D 59                  <4>  pop rcx
   146 0000171E 5B                  <4>  pop rbx
   147 0000171F 58                  <4>  pop rax
    84                              <3> 
    85 00001720 4889EC              <3>  mov rsp, rbp
    86 00001723 5D                  <3>  pop rbp
    87 00001724 C3                  <3>  ret
    47                              <2> register_expection_idt:;vector_num,rsp,handler
    48                              <2>     prolog 0;
    65 00001725 55                  <3>  push rbp
    66 00001726 4889E5              <3>  mov rbp, rsp
    67 00001729 488945F8            <3>  mov [rbp-8],rax
    68 0000172D B800000000          <3>  mov rax, %1
    69 00001732 4883C00F            <3>  add rax, 15
    70 00001736 4883E0F0            <3>  and rax, ~15
    71 0000173A 4829C4              <3>  sub rsp, rax
    72 0000173D 488B45F8            <3>  mov rax,[rbp-8]
    73                              <3>  pushallq
   117 00001741 50                  <4>  push rax
   118 00001742 53                  <4>  push rbx
   119 00001743 51                  <4>  push rcx
   120 00001744 52                  <4>  push rdx
   121 00001745 56                  <4>  push rsi
   122 00001746 57                  <4>  push rdi
   123 00001747 4150                <4>  push r8
   124 00001749 4151                <4>  push r9
   125 0000174B 4152                <4>  push r10
   126 0000174D 4153                <4>  push r11
   127 0000174F 4154                <4>  push r12
   128 00001751 4155                <4>  push r13
   129 00001753 4156                <4>  push r14
   130 00001755 4157                <4>  push r15
    74                              <3> 
    75                              <3> 
    76                              <3> 
    77                              <3> 
    78                              <3> 
    79                              <3> 
    49                              <2>     get_param rsi, 1
    91 00001757 488B7510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    50                              <2>     get_param r15, 2
    91 0000175B 4C8B7D18            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    51                              <2>     get_param rdi, 3
    91 0000175F 488B7D20            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    52 00001763 48BB0A4010000080FF- <2>     mov rbx,IDTPointerUpperAddr
    52 0000176C FF                  <2>
    53 0000176D 488B4302            <2>     mov rax,[rbx + 2]
    54                              <2> 
    55 00001771 4989F0              <2>     mov r8,rsi
    56 00001774 49C1E004            <2>     shl r8, 4
    57 00001778 4C01C0              <2>     add rax, r8
    58                              <2> 
    59                              <2>     ; jmp $
    60                              <2> 
    61 0000177B 4989F8              <2>     mov r8,rdi
    62 0000177E 49C1E820            <2>     shr r8,32
    63                              <2> 
    64 00001782 4989F9              <2>     mov r9,rdi
    65 00001785 49C1E910            <2>     shr r9,16
    66 00001789 4981E1FFFF0000      <2>     and r9,0xFFFF
    67                              <2> 
    68 00001790 B900000000          <2>     mov rcx,0
    69 00001795 4C89F9              <2>     mov rcx, r15
    70                              <2>     ; jmp $
    71 00001798 668938              <2>     mov word [rax + idt_info.offset_low], di
    72                              <2>         ; mov ax,di
    73                              <2>     ; jmp $
    74 0000179B 66C740020800        <2>     mov word [rax + idt_info.selector], 0x08
    75 000017A1 884804              <2>     mov byte [rax + idt_info.ist], cl
    76 000017A4 C640058F            <2>     mov byte [rax + idt_info.type_attr], TRAPGATE
    77 000017A8 6644894806          <2>     mov word [rax + idt_info.offset_mid], r9w
    78 000017AD 4C894008            <2>     mov qword [rax + idt_info.offset_high], r8
    79                              <2> 
    80 000017B1 0F011B              <2>     lidt	[rbx]
    81                              <2>     epilog
    83                              <3>  popallq
   134 000017B4 415F                <4>  pop r15
   135 000017B6 415E                <4>  pop r14
   136 000017B8 415D                <4>  pop r13
   137 000017BA 415C                <4>  pop r12
   138 000017BC 415B                <4>  pop r11
   139 000017BE 415A                <4>  pop r10
   140 000017C0 4159                <4>  pop r9
   141 000017C2 4158                <4>  pop r8
   142 000017C4 5F                  <4>  pop rdi
   143 000017C5 5E                  <4>  pop rsi
   144 000017C6 5A                  <4>  pop rdx
   145 000017C7 59                  <4>  pop rcx
   146 000017C8 5B                  <4>  pop rbx
   147 000017C9 58                  <4>  pop rax
    84                              <3> 
    85 000017CA 4889EC              <3>  mov rsp, rbp
    86 000017CD 5D                  <3>  pop rbp
    87 000017CE C3                  <3>  ret
    82                              <2> 
    83                              <2> setup_default_expection_idt:;setup expection idt 0~31
    84                              <2>     prolog 0;
    65 000017CF 55                  <3>  push rbp
    66 000017D0 4889E5              <3>  mov rbp, rsp
    67 000017D3 488945F8            <3>  mov [rbp-8],rax
    68 000017D7 B800000000          <3>  mov rax, %1
    69 000017DC 4883C00F            <3>  add rax, 15
    70 000017E0 4883E0F0            <3>  and rax, ~15
    71 000017E4 4829C4              <3>  sub rsp, rax
    72 000017E7 488B45F8            <3>  mov rax,[rbp-8]
    73                              <3>  pushallq
   117 000017EB 50                  <4>  push rax
   118 000017EC 53                  <4>  push rbx
   119 000017ED 51                  <4>  push rcx
   120 000017EE 52                  <4>  push rdx
   121 000017EF 56                  <4>  push rsi
   122 000017F0 57                  <4>  push rdi
   123 000017F1 4150                <4>  push r8
   124 000017F3 4151                <4>  push r9
   125 000017F5 4152                <4>  push r10
   126 000017F7 4153                <4>  push r11
   127 000017F9 4154                <4>  push r12
   128 000017FB 4155                <4>  push r13
   129 000017FD 4156                <4>  push r14
   130 000017FF 4157                <4>  push r15
    74                              <3> 
    75                              <3> 
    76                              <3> 
    77                              <3> 
    78                              <3> 
    79                              <3> 
    85                              <2>     get_param rsi, 1
    91 00001801 488B7510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    86 00001805 4989F0              <2>     mov r8,rsi
    87 00001808 49C1E820            <2>     shr r8,32
    88 0000180C 4989F1              <2>     mov r9,rsi
    89 0000180F 49C1E910            <2>     shr r9,16
    90 00001813 4981E1FFFF0000      <2>     and r9,0xFFFF
    91                              <2> 
    92 0000181A B900000000          <2>     mov rcx,0
    93 0000181F 48BB0A4010000080FF- <2>     mov rbx,IDTPointerUpperAddr
    93 00001828 FF                  <2>
    94 00001829 488B4302            <2>     mov rax,[rbx + 2]
    95                              <2> 
    96                              <2>     .expection_idt:
    97 0000182D 668930              <2>         mov word [rax + idt_info.offset_low], si
    98 00001830 66C740020800        <2>         mov word [rax + idt_info.selector], 0x08
    99                              <2> 
   100 00001836 C6400401            <2>         mov byte [rax + idt_info.ist], 0x01
   101 0000183A C640058F            <2>         mov byte [rax + idt_info.type_attr], TRAPGATE
   102                              <2> 
   103 0000183E 6644894806          <2>         mov word [rax + idt_info.offset_mid], r9w
   104                              <2> 
   105 00001843 4C894008            <2>         mov qword [rax + idt_info.offset_high], r8
   106                              <2> 
   107 00001847 4883C010            <2>         add rax, 16
   108 0000184B 48FFC1              <2>         inc rcx
   109 0000184E 4883F920            <2>         cmp rcx, 32
   110 00001852 7ED9                <2>         jle .expection_idt
   111                              <2> 
   112 00001854 0F011B              <2>     lidt	[rbx]
   113                              <2>     epilog
    83                              <3>  popallq
   134 00001857 415F                <4>  pop r15
   135 00001859 415E                <4>  pop r14
   136 0000185B 415D                <4>  pop r13
   137 0000185D 415C                <4>  pop r12
   138 0000185F 415B                <4>  pop r11
   139 00001861 415A                <4>  pop r10
   140 00001863 4159                <4>  pop r9
   141 00001865 4158                <4>  pop r8
   142 00001867 5F                  <4>  pop rdi
   143 00001868 5E                  <4>  pop rsi
   144 00001869 5A                  <4>  pop rdx
   145 0000186A 59                  <4>  pop rcx
   146 0000186B 5B                  <4>  pop rbx
   147 0000186C 58                  <4>  pop rax
    84                              <3> 
    85 0000186D 4889EC              <3>  mov rsp, rbp
    86 00001870 5D                  <3>  pop rbp
    87 00001871 C3                  <3>  ret
   114                              <2> 
   115                              <2> 
   116                              <2> default_exception_handler:;
   117                              <2>     ; mov rax,0xffff
   118 00001872 EBFE                <2>     jmp $
   119 00001874 48CF                <2>     iretq
   120                              <2> div0_exception_handler:;
   121                              <2>     ; mov rbx,0x1111
   122 00001876 EBFE                <2>     jmp $
   123 00001878 50                  <2>     push rax
   124 00001879 53                  <2>     push rbx
   125 0000187A 51                  <2>     push rcx
   126 0000187B 52                  <2>     push rdx
   127 0000187C 56                  <2>     push rsi
   128 0000187D 57                  <2>     push rdi
   129 0000187E 55                  <2>     push rbp
   130 0000187F 4150                <2>     push r8
   131 00001881 4151                <2>     push r9
   132 00001883 4152                <2>     push r10
   133 00001885 4153                <2>     push r11
   134 00001887 4154                <2>     push r12
   135 00001889 4155                <2>     push r13
   136 0000188B 4156                <2>     push r14
   137 0000188D 4157                <2>     push r15
   138                              <2> 
   139                              <2> 
   140 0000188F 488D3599FDFFFF      <2>     lea rsi, [rel expection_div_messige]
   141                              <2>     ; mov rax,rsi
   142                              <2>     ; jmp $
   143                              <2>     function draw_string, 1, 0, 0, rsi
    26                              <3>  %assign param_count %0 - 2
    27                              <3> 
    28                              <3>  %if param_count < 0
    29                              <3>  %assign param_count 0
    30                              <3>  %endif
    31                              <3>  %if param_count < 1
    32                              <3>  %assign ret_param_count 0
    33                              <3>  %else
    34                              <3>  %assign ret_param_count %2
    35                              <3>  %endif
    36                              <3> 
    37                              <3> 
    38                              <3>  prepare_call param_count, ret_param_count
    99                              <4>  %assign total_space ((%1 + %2) * 8)
   100                              <4> 
   101                              <4>  %if (total_space % 16) != 0
   102                              <4>  %assign total_space total_space + 8
   103                              <4>  %endif
   104                              <4> 
   105 00001896 4883EC20            <4>  sub rsp, total_space
    39                              <3> 
    40                              <3> 
    41                              <3>  %if param_count > 0
    42                              <3>  %assign i 0
    43 0000189A 48894424F8          <3>  mov [rsp-8], rax
    44                              <3>  %rep param_count
    45                              <3>  %rotate 1
    46                              <3>  mov rax, %2
    47                              <3>  mov [rsp + 8*i], rax
    48                              <3>  %assign i i+1
    49                              <3>  %endrep
    45                              <4>  %rotate 1
    46 0000189F B800000000          <4>  mov rax, %2
    47 000018A4 48890424            <4>  mov [rsp + 8*i], rax
    48                              <4>  %assign i i+1
    45                              <4>  %rotate 1
    46 000018A8 B800000000          <4>  mov rax, %2
    47 000018AD 4889442408          <4>  mov [rsp + 8*i], rax
    48                              <4>  %assign i i+1
    45                              <4>  %rotate 1
    46 000018B2 4889F0              <4>  mov rax, %2
    47 000018B5 4889442410          <4>  mov [rsp + 8*i], rax
    48                              <4>  %assign i i+1
    50                              <3> 
    51                              <3>  %rotate 1
    52                              <3>  %rotate 1
    53 000018BA 488B4424F8          <3>  mov rax,[rsp-8]
    54                              <3>  %endif
    55                              <3> 
    56                              <3> 
    57 000018BF E896F9FFFF          <3>  call %1
    58                              <3> 
    59                              <3> 
    60                              <3>  cleanup_call param_count, ret_param_count
   109                              <4>  %assign total_space ((%1 + %2) * 8)
   110                              <4>  %if (total_space % 16) != 0
   111                              <4>  %assign total_space total_space + 8
   112                              <4>  %endif
   113 000018C4 4883C420            <4>  add rsp, total_space
    61                              <3> 
   144                              <2>     ; mov rax,0x88
   145                              <2>     ; jmp $
   146                              <2>     ; hlt
   147                              <2> 
   148 000018C8 415F                <2>     pop r15
   149 000018CA 415E                <2>     pop r14
   150 000018CC 415D                <2>     pop r13
   151 000018CE 415C                <2>     pop r12
   152 000018D0 415B                <2>     pop r11
   153 000018D2 415A                <2>     pop r10
   154 000018D4 4159                <2>     pop r9
   155 000018D6 4158                <2>     pop r8
   156 000018D8 5D                  <2>     pop rbp
   157 000018D9 5F                  <2>     pop rdi
   158 000018DA 5E                  <2>     pop rsi
   159 000018DB 5A                  <2>     pop rdx
   160 000018DC 59                  <2>     pop rcx
   161 000018DD 5B                  <2>     pop rbx
   162 000018DE 58                  <2>     pop rax
   163                              <2> 
   164 000018DF 48CF                <2>     iretq
   165                              <2> debug_exception_handler:;
   166                              <2>     ; mov rbx,0x2222
   167 000018E1 EBFE                <2>     jmp $
   168 000018E3 50                  <2>     push rax
   169 000018E4 53                  <2>     push rbx
   170 000018E5 51                  <2>     push rcx
   171 000018E6 52                  <2>     push rdx
   172 000018E7 56                  <2>     push rsi
   173 000018E8 57                  <2>     push rdi
   174 000018E9 55                  <2>     push rbp
   175 000018EA 4150                <2>     push r8
   176 000018EC 4151                <2>     push r9
   177 000018EE 4152                <2>     push r10
   178 000018F0 4153                <2>     push r11
   179 000018F2 4154                <2>     push r12
   180 000018F4 4155                <2>     push r13
   181 000018F6 4156                <2>     push r14
   182 000018F8 4157                <2>     push r15
   183                              <2> 
   184                              <2> 
   185 000018FA 488D352EFDFFFF      <2>     lea rsi, [rel expection_div_messige]
   186                              <2>     function draw_string, 1, 0, 0, rsi
    26                              <3>  %assign param_count %0 - 2
    27                              <3> 
    28                              <3>  %if param_count < 0
    29                              <3>  %assign param_count 0
    30                              <3>  %endif
    31                              <3>  %if param_count < 1
    32                              <3>  %assign ret_param_count 0
    33                              <3>  %else
    34                              <3>  %assign ret_param_count %2
    35                              <3>  %endif
    36                              <3> 
    37                              <3> 
    38                              <3>  prepare_call param_count, ret_param_count
    99                              <4>  %assign total_space ((%1 + %2) * 8)
   100                              <4> 
   101                              <4>  %if (total_space % 16) != 0
   102                              <4>  %assign total_space total_space + 8
   103                              <4>  %endif
   104                              <4> 
   105 00001901 4883EC20            <4>  sub rsp, total_space
    39                              <3> 
    40                              <3> 
    41                              <3>  %if param_count > 0
    42                              <3>  %assign i 0
    43 00001905 48894424F8          <3>  mov [rsp-8], rax
    44                              <3>  %rep param_count
    45                              <3>  %rotate 1
    46                              <3>  mov rax, %2
    47                              <3>  mov [rsp + 8*i], rax
    48                              <3>  %assign i i+1
    49                              <3>  %endrep
    45                              <4>  %rotate 1
    46 0000190A B800000000          <4>  mov rax, %2
    47 0000190F 48890424            <4>  mov [rsp + 8*i], rax
    48                              <4>  %assign i i+1
    45                              <4>  %rotate 1
    46 00001913 B800000000          <4>  mov rax, %2
    47 00001918 4889442408          <4>  mov [rsp + 8*i], rax
    48                              <4>  %assign i i+1
    45                              <4>  %rotate 1
    46 0000191D 4889F0              <4>  mov rax, %2
    47 00001920 4889442410          <4>  mov [rsp + 8*i], rax
    48                              <4>  %assign i i+1
    50                              <3> 
    51                              <3>  %rotate 1
    52                              <3>  %rotate 1
    53 00001925 488B4424F8          <3>  mov rax,[rsp-8]
    54                              <3>  %endif
    55                              <3> 
    56                              <3> 
    57 0000192A E82BF9FFFF          <3>  call %1
    58                              <3> 
    59                              <3> 
    60                              <3>  cleanup_call param_count, ret_param_count
   109                              <4>  %assign total_space ((%1 + %2) * 8)
   110                              <4>  %if (total_space % 16) != 0
   111                              <4>  %assign total_space total_space + 8
   112                              <4>  %endif
   113 0000192F 4883C420            <4>  add rsp, total_space
    61                              <3> 
   187                              <2> 
   188 00001933 F4                  <2>     hlt
   189 00001934 415F                <2>     pop r15
   190 00001936 415E                <2>     pop r14
   191 00001938 415D                <2>     pop r13
   192 0000193A 415C                <2>     pop r12
   193 0000193C 415B                <2>     pop r11
   194 0000193E 415A                <2>     pop r10
   195 00001940 4159                <2>     pop r9
   196 00001942 4158                <2>     pop r8
   197 00001944 5D                  <2>     pop rbp
   198 00001945 5F                  <2>     pop rdi
   199 00001946 5E                  <2>     pop rsi
   200 00001947 5A                  <2>     pop rdx
   201 00001948 59                  <2>     pop rcx
   202 00001949 5B                  <2>     pop rbx
   203 0000194A 58                  <2>     pop rax
   204                              <2> 
   205 0000194B 48CF                <2>     iretq
   206                              <2>     ; function draw_screen,0,0x00000000
   207                              <2>     ;  jmp $
   208                              <2>     ; lea rsi,[rel expection_div_messige]
   209                              <2>     ; function draw_string,1,0,0,rsi
   210                              <2>     ; jmp $
   211                              <2>     ; iretq
   212                              <2> ; make_call_gate:                          	;创建64位的调用门
   213                              <2> ;                                           	;输入：RAX=例程的线性地址
   214                              <2> ;                                           	;输出：RDI:RSI=调用门
   215                              <2> ;          mov rdi, rax
   216                              <2> ;          shr rdi, 32                     	;得到门的高64位，在RDI中
   217                              <2> 
   218                              <2> ;          push rax                        	;构造数据结构，并预置线性地址的位15~0
   219                              <2> ;          mov word [rsp + 2], CORE_CODE64_SEL	;预置段选择子部分
   220                              <2> ;          mov [rsp + 4], eax                  	;预置线性地址的位31~16
   221                              <2> ;          mov word [rsp + 4], 0x8c00         	;添加P=1，TYPE=64位调用门
   222                              <2> ;          pop rsi
   223                              <2> 
   224                              <2> ;          ret
   225                              <2> 
   226                              <2> ; ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   227                              <2> ; make_interrupt_gate:                      	;创建64位的中断门
   228                              <2> ;                                             	;输入：RAX=例程的线性地址
   229                              <2> ;                                             	;输出：RDI:RSI=中断门
   230                              <2> ;          mov rdi, rax
   231                              <2> ;          shr rdi, 32                       	;得到门的高64位，在RDI中
   232                              <2> 
   233                              <2> ;          push rax                          	;构造数据结构，并预置线性地址的位15~0
   234                              <2> ;          mov word [rsp + 2], CORE_CODE64_SEL	;预置段选择子部分
   235                              <2> ;          mov [rsp + 4], eax                  	;预置线性地址的位31~16
   236                              <2> ;          mov word [rsp + 4], 0x8e00         	;添加P=1，TYPE=64位中断门
   237                              <2> ;          pop rsi
   238                              <2> 
   239                              <2> ;          ret
   240                              <2> 
   241                              <2> ; ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   242                              <2> ; make_trap_gate:                             	;创建64位的陷阱门
   243                              <2> ;                                              	;输入：RAX=例程的线性地址
   244                              <2> ;                                              	;输出：RDI:RSI=陷阱门
   245                              <2> ;          mov rdi, rax
   246                              <2> ;          shr rdi, 32                        	;得到门的高64位，在RDI中
   247                              <2> 
   248                              <2> ;          push rax                           	;构造数据结构，并预置线性地址的位15~0
   249                              <2> ;          mov word [rsp + 2], CORE_CODE64_SEL	;预置段选择子部分
   250                              <2> ;          mov [rsp + 4], eax                  	;预置线性地址的位31~16
   251                              <2> ;          mov word [rsp + 4], 0x8f00         	;添加P=1，TYPE=64位陷阱门
   252                              <2> ;          pop rsi
   253                              <2> 
   254                              <2> ;          ret
   255                              <2> 
   256                              <2> ; ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   257                              <2> ; make_tss_descriptor:                    	;创建64位的TSS描述符
   258                              <2> ;                                           	;输入：RAX=TSS的线性地址
   259                              <2> ;                                           	;输出：RDI:RSI=TSS描述符
   260                              <2> ;          push rax
   261                              <2> 
   262                              <2> ;          mov rdi, rax
   263                              <2> ;          shr rdi, 32                    	;得到门的高64位，在RDI中
   264                              <2> 
   265                              <2> ;          push rax                       	;先将部分线性地址移到适当位置
   266                              <2> ;          shl qword [rsp], 16           	;将线性地址的位23~00移到正确位置
   267                              <2> ;          mov word [rsp], 104           	;段界限的标准长度
   268                              <2> ;          mov al, [rsp + 5]
   269                              <2> ;          mov [rsp + 7], al             	;将线性地址的位31~24移到正确位置
   270                              <2> ;          mov byte [rsp + 5], 0x89     	;P=1，DPL=00，TYPE=1001（64位TSS）
   271                              <2> ;          mov byte [rsp + 6], 0        	;G、0、0、AVL和limit
   272                              <2> ;          pop rsi                       	;门的低64位
   273                              <2> 
   274                              <2> ;          pop rax
   275                              <2> 
   276                              <2> ;          ret
   277                              <2> 
   278                              <2> ; ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   279                              <2> ; mount_idt_entry:                     	;在中断描述符表IDT中安装门描述符
   280                              <2> ;                                        	;R8=中断向量
   281                              <2> ;                                        	;RDI:RSI=门描述符
   282                              <2> ;          push r8
   283                              <2> ;          push r9
   284                              <2> 
   285                              <2> ;          shl r8, 4                         	;中断号乘以16，得到表内偏移
   286                              <2> ;          mov r9, UPPER_IDT_LINEAR        	;中断描述符表的高端线性地址
   287                              <2> ;          mov [r9 + r8], rsi
   288                              <2> ;          mov [r9 + r8 + 8], rdi
   289                              <2> 
   290                              <2> ;          pop r9
   291                              <2> ;          pop r8
   292                              <2> 
   293                              <2> ;          ret
   294                              <2> %include "../kernel/printk.asm"
     1                              <3> %ifndef PRINTK_ASM
     2                              <3> %define PRINTK_ASM
     3                              <3> 
     4                              <3> %include "../bootloader/global_def.asm"
     5                              <3> %include "../kernel/video.asm"
     6                              <3>     
     7                              <3> [BITS 64]
     8                              <3> 
     9                              <3> %define COLOR_WHITE 	0x00ffffff		;WHITE
    10                              <3> %define COLOR_BLACK 	0x00000000		;BLACK
    11                              <3> %define COLOR_RED	    0x00ff0000		;RED
    12                              <3> %define COLOR_ORANGE	0x00ff8000		;ORANGE
    13                              <3> %define COLOR_YELLOW	0x00ffff00		;YELLOW
    14                              <3> %define COLOR_GREEN	    0x0000ff00		;GREEN
    15                              <3> %define COLOR_BLUE	    0x000000ff		;BLUE
    16                              <3> %define COLOR_INDIGO	0x0000ffff		;INDIGO
    17                              <3> %define COLOR_PURPLE	0x008000ff		;PURPLE
    18                              <3> 
    19                              <3> struc print_info
    20                              <3>     .cursor_xposition:     resw 1
    21                              <3>     .cursor_yposition:     resw 1
    22                              <3>     .cursor_line:          resw 1
    23                              <3> 
    24                              <3>     .print_xposition:      resw 1
    25                              <3>     .print_yposition:      resw 1
    26                              <3>     .print_line:           resw 1
    27                              <3>     .print_address:        resq 1
    28                              <3> 
    29                              <3>     .screen_xmax:          resw 1
    30                              <3>     .screen_ymax:          resw 1
    31                              <3> 
    32                              <3>     .font_base_address:    resq 1
    33                              <3>     .font_size:            resw 1
    34                              <3>     .font_width:           resw 1
    35                              <3>     .font_height:          resw 1
    36                              <3> 
    37                              <3>     .pixel_line_start:     resw 1
    38                              <3>     .pixel_line_height:       resw 1 
    39                              <3> 
    40                              <3>     .default_color:        resd 1
    41                              <3>     .current_color:        resd 1
    42                              <3>  endstruc
    43                              <3> print_info_ptr:
    44                              <3>     istruc print_info
    45                              <3>         at print_info.cursor_xposition, dw 0
    46                              <3>         at print_info.cursor_yposition, dw 0
    47                              <3>         at print_info.cursor_line, dw 0
    48                              <3> 
    49                              <3>         at print_info.print_xposition, dw 0
    50                              <3>         at print_info.print_yposition, dw 0
    51                              <3>         at print_info.print_line, dw 0
    52                              <3>         at print_info.print_address, dq 0
    53                              <3> 
    54                              <3>         at print_info.screen_xmax, dw 0
    55                              <3>         at print_info.screen_ymax, dw 0
    56                              <3> 
    57                              <3>         at print_info.font_base_address, dq 0
    58                              <3>         at print_info.font_size, dw 0
    59                              <3>         at print_info.font_width, dw 0
    60                              <3>         at print_info.font_height, dw 0
    61                              <3> 
    62                              <3>         at print_info.pixel_line_start, dw 0
    63                              <3>         at print_info.pixel_line_height, dw 0
    64                              <3> 
    65                              <3>         at print_info.default_color, dd 0
    66                              <3>         at print_info.current_color, dd 0
    67                              <3>     iend
    68                              <3> 
    69                              <3> printk_init:;init printk
    70                              <3>     prolog 0;
    71                              <3> 
    72                              <3>     mov word [rel print_info_ptr + print_info.cursor_xposition],0
    73                              <3>     mov word [rel print_info_ptr + print_info.cursor_yposition],0
    74                              <3>     mov word [rel print_info_ptr + print_info.cursor_line],0
    75                              <3> 
    76                              <3> 
    77                              <3>     mov word [rel print_info_ptr + print_info.print_xposition],0
    78                              <3>     mov word [rel print_info_ptr + print_info.print_yposition],0    
    79                              <3>     mov word [rel print_info_ptr + print_info.print_line],0
    80                              <3>     mov qword [rel print_info_ptr + print_info.print_address],0
    81                              <3> 
    82                              <3>     mov word [rel print_info_ptr + print_info.screen_xmax],240
    83                              <3>     mov word [rel print_info_ptr + print_info.screen_ymax],54    
    84                              <3> 
    85                              <3>     mov rsi,0xFFFF800000105200
    86                              <3>     mov qword [rel print_info_ptr + print_info.font_base_address],rsi
    87                              <3>     mov word [rel print_info_ptr + print_info.font_size],16
    88                              <3>     mov word [rel print_info_ptr + print_info.font_width],8
    89                              <3>     mov word [rel print_info_ptr + print_info.font_height],16
    90                              <3> 
    91                              <3>     mov word [rel print_info_ptr + print_info.pixel_line_start],4
    92                              <3>     mov word [rel print_info_ptr + print_info.pixel_line_height],20
    93                              <3> 
    94                              <3>     mov dword [rel print_info_ptr + print_info.default_color],COLOR_WHITE
    95                              <3>     mov dword [rel print_info_ptr + print_info.current_color],COLOR_WHITE
    96                              <3> 
    97                              <3>     epilog
    98                              <3> 
    99                              <3> printk:; input: format string,pointer to arguments
   100                              <3> 
   101                              <3>     prolog 2
   102                              <3>     get_param rsi, 1   ; rsi = format string
   103                              <3>     get_param rdx, 2   ; rdx = pointer to arguments
   104                              <3> 
   105                              <3>     mov rax,0
   106                              <3> 
   107                              <3>     .next_char:
   108                              <3>         lodsb                  ; Load next character from format string into AL
   109                              <3>         test al, al            ; Check if end of string
   110                              <3>         jz .done
   111                              <3> 
   112                              <3>         cmp al, '\'           ; Check for escape character
   113                              <3>         je .escape_character
   114                              <3> 
   115                              <3>         cmp al, '%'            ; Check for format specifier
   116                              <3>         jne .print_char
   117                              <3>         lodsb                  ; Load format specifier
   118                              <3>         cmp al, 'd'            ; Check for %d
   119                              <3>         je .print_decimal
   120                              <3>         cmp al, 'x'            ; Check for %x
   121                              <3>         je .print_hex
   122                              <3>         cmp al, 's'            ; Check for %s
   123                              <3>         je .print_string
   124                              <3>         jmp .next_char         ; Skip unknown specifier
   125                              <3> 
   126                              <3>     .print_char:
   127                              <3>         function print_char,1,rax
   128                              <3>         jmp .next_char
   129                              <3> 
   130                              <3>     .print_decimal:
   131                              <3>         function print_decimal,1,rdx
   132                              <3>         jmp .next_char
   133                              <3> 
   134                              <3>     .print_hex:
   135                              <3>         function print_hex,1,rdx
   136                              <3>         jmp .next_char
   137                              <3> 
   138                              <3>     .print_string:
   139                              <3> 
   140                              <3>         function print_string,1,rdx
   141                              <3>         jmp .next_char
   142                              <3> 
   143                              <3>     .escape_character:
   144                              <3>         lodsb                  ; Load next character from string into AL
   145                              <3>         cmp al, 'n'            ; Check for %d
   146                              <3>         je .new_line
   147                              <3>         jmp .escape_done
   148                              <3>         .new_line:
   149                              <3>             add word [rel print_info_ptr + print_info.print_yposition],1
   150                              <3>             mov word [rel print_info_ptr + print_info.print_xposition],0
   151                              <3>         .escape_done:
   152                              <3>             jmp .next_char           
   153                              <3> 
   154                              <3>     .done:
   155                              <3>         epilog
   156                              <3> 
   157                              <3> print_char:; input:char
   158                              <3>     prolog 2;
   159                              <3> 
   160                              <3>     get_param rsi, 1   ; char
   161                              <3> 
   162                              <3> 
   163                              <3> 
   164                              <3>     mov rax, 0
   165                              <3>     mov ax, word [rel print_info_ptr + print_info.print_yposition]
   166                              <3> 
   167                              <3>     mov rbx,0
   168                              <3>     mov bx,word [rel video_info_ptr + video_info.xpixel]
   169                              <3>     mul rbx
   170                              <3> 
   171                              <3> 
   172                              <3>     mov rbx,0
   173                              <3>     mov bx,word [rel print_info_ptr + print_info.pixel_line_height]
   174                              <3>     mul rbx
   175                              <3> 
   176                              <3>     push rax
   177                              <3>     xor rax,rax
   178                              <3>     mov ax,word [rel print_info_ptr + print_info.print_xposition]
   179                              <3>     mov rbx,0
   180                              <3>     mov bx,word [rel print_info_ptr + print_info.font_width]
   181                              <3>     mul rbx
   182                              <3> 
   183                              <3> 
   184                              <3>     mov rcx,0
   185                              <3>     pop rcx
   186                              <3>     add rax, rcx
   187                              <3> 
   188                              <3>     mov rbx,0
   189                              <3>     mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   190                              <3>     mul rbx
   191                              <3> 
   192                              <3>     mov rdi, qword [rel video_info_ptr + video_info.video_framebuffer]
   193                              <3>     add rdi, rax        ;rdi=屏幕地址
   194                              <3> 
   195                              <3> 
   196                              <3>     shl rsi, 4
   197                              <3> 
   198                              <3>     mov rbx,0
   199                              <3>     mov rbx, [rel print_info_ptr + print_info.font_base_address]
   200                              <3>     add rsi, rbx        ; RSI = 字符数据地址
   201                              <3> 
   202                              <3>     xor rcx,rcx
   203                              <3>     mov cx, word [rel print_info_ptr + print_info.font_height]
   204                              <3> 
   205                              <3>     .next_line:
   206                              <3>         push rdi               ; 保存当前行起始位置
   207                              <3>         
   208                              <3>         ; 处理一行(8像素)
   209                              <3>         mov dl, [rsi]          ; 获取字模数据
   210                              <3>         mov dh, 8              ; 8位/行
   211                              <3>         .next_pixel:
   212                              <3>             xor rax,rax
   213                              <3>             mov al,byte [rel video_info_ptr + video_info.byte_per_pixel]
   214                              <3> 
   215                              <3>             test dl, 0x80       ; 测试最高位
   216                              <3>             jz .skip_pixel
   217                              <3> 
   218                              <3> 
   219                              <3>             cmp al,4
   220                              <3>             jb .pixel_2byte
   221                              <3>             mov byte [rdi+2], 0xFF ; 绘制像素(白色)
   222                              <3>             mov byte [rdi+3], 0x00 ; 绘制像素(白色)
   223                              <3>             .pixel_2byte:
   224                              <3>                 mov byte [rdi], 0xFF ; 绘制像素(白色)
   225                              <3>                 mov byte [rdi+1], 0xFF ; 绘制像素(白色)
   226                              <3>             ; jmp $
   227                              <3>         .skip_pixel:
   228                              <3>             shl dl, 1           ; 移到下一位
   229                              <3>             add rdi,rax
   230                              <3>             dec dh
   231                              <3>             jnz .next_pixel
   232                              <3>         
   233                              <3>         pop rdi                 ; 恢复行起始位置
   234                              <3>         xor rax,rax
   235                              <3>         mov ax,word [rel video_info_ptr + video_info.xpixel]
   236                              <3> 
   237                              <3>         mov rbx,0
   238                              <3>         mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   239                              <3>         mul rbx
   240                              <3> 
   241                              <3>         add rdi,rax; 移到下一行(320=屏幕宽度)
   242                              <3> 
   243                              <3>         inc rsi                 ; 下一个字模字节
   244                              <3> 
   245                              <3>         loop .next_line
   246                              <3>     
   247                              <3>     add word [rel print_info_ptr + print_info.print_xposition],1
   248                              <3>     epilog
   249                              <3> 
   250                              <3> print_decimal:;input:rsi=decimal number
   251                              <3> 
   252                              <3>     prolog 2;
   253                              <3> 
   254                              <3>     get_param rsi, 1   ; dec
   255                              <3> 
   256                              <3>     mov rbx, 'D'
   257                              <3>     function print_char,1,rbx    
   258                              <3> 
   259                              <3>     xor rax, rax
   260                              <3>     xor rbx, rbx
   261                              <3>     xor rdx, rdx
   262                              <3>     mov rax, [rsi]
   263                              <3> 
   264                              <3>     xor rbx, rbx
   265                              <3>     mov rbx, 10              ; Base 10
   266                              <3>     xor rcx, rcx             ; Digit counter
   267                              <3> 
   268                              <3>     .convert_loop:
   269                              <3>         xor rdx, rdx
   270                              <3>         div rbx              ; Divide rax by 10, remainder in rdx
   271                              <3>         push rdx             ; Save remainder (digit)
   272                              <3>         inc rcx              ; Increment digit counter
   273                              <3>         test rax, rax
   274                              <3>         jnz .convert_loop    ; Repeat until rax == 0
   275                              <3> 
   276                              <3>     .print_digits:
   277                              <3>         pop rdx              ; Get digit from stack
   278                              <3>         add dl, '0'          ; Convert to ASCII
   279                              <3> 
   280                              <3>         mov rbx, rdx
   281                              <3>         function print_char,1,rbx    
   282                              <3> 
   283                              <3>         loop .print_digits
   284                              <3> 
   285                              <3>     epilog
   286                              <3> 
   287                              <3> 
   288                              <3> print_hex:;input:rsi=hex number
   289                              <3> 
   290                              <3>     prolog 2;
   291                              <3> 
   292                              <3>     get_param rsi, 1   ; dec
   293                              <3> 
   294                              <3>     mov rbx, 'X'
   295                              <3>     function print_char,1,rbx    
   296                              <3> 
   297                              <3>     xor rax, rax
   298                              <3>     xor rbx, rbx
   299                              <3>     xor rdx, rdx
   300                              <3>     mov rax, [rsi]
   301                              <3> 
   302                              <3>     mov rcx, 16              ; Process 16 digits (64-bit number)
   303                              <3>     .convert_loop:
   304                              <3>         rol rax, 4           ; Rotate left by 4 bits
   305                              <3>         mov dl, al           ; Extract lower nibble
   306                              <3>         and dl, 0x0F         ; Mask to get a single hex digit
   307                              <3>         cmp dl, 10
   308                              <3>         jl .digit
   309                              <3>         add dl, 'a' - 10     ; Convert to 'A'-'F'
   310                              <3>         jmp .output
   311                              <3>     .digit:
   312                              <3>         add dl, '0'          ; Convert to '0'-'9'
   313                              <3>     .output:
   314                              <3>         mov rbx, rdx
   315                              <3>         function print_char,1,rbx    
   316                              <3>         loop .convert_loop
   317                              <3>     epilog
   318                              <3> 
   319                              <3> 
   320                              <3> 
   321                              <3> print_string:;input: string
   322                              <3>     prolog 2;
   323                              <3>     get_param rsi, 1   ; string
   324                              <3> 
   325                              <3>     xor rax,rax
   326                              <3>     .next_char_t:
   327                              <3>         lodsb                  ; Load next character from string into AL
   328                              <3>         test al, al            ; Check if end of string
   329                              <3>         jz .done_t
   330                              <3> 
   331                              <3>         cmp al, '\'           ; Check for escape character
   332                              <3>         je .escape_character
   333                              <3> 
   334                              <3>         function print_char,1,rax
   335                              <3> 
   336                              <3>         jmp .next_char_t
   337                              <3>         .escape_character:
   338                              <3>             lodsb                  ; Load next character from string into AL
   339                              <3>             cmp al, 'n'            ; Check for %d
   340                              <3>             je .new_line
   341                              <3>             jmp .escape_done
   342                              <3>             .new_line:
   343                              <3>                 add word [rel print_info_ptr + print_info.print_yposition],1
   344                              <3>                 mov word [rel print_info_ptr + print_info.print_xposition],0
   345                              <3>             .escape_done:
   346                              <3>                 jmp .next_char_t            
   347                              <3>     .done_t:
   348                              <3>     epilog
   349                              <3> flush_framebuffer:;flush framebuffer
   350                              <3>     prolog 0;
   351                              <3>     mov rax, 0
   352                              <3>     mov ax, word [rel print_info_ptr + print_info.print_yposition]
   353                              <3>     mov rbx,0
   354                              <3>     mov bx,word [rel video_info_ptr + video_info.xpixel]
   355                              <3>     imul rax,rbx
   356                              <3>     mov rcx,0
   357                              <3>     mov cx,word [rel print_info_ptr + print_info.print_xposition]
   358                              <3>     add rax, rcx
   359                              <3>     mov rbx,0
   360                              <3>     mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   361                              <3>     imul rax,rbx
   362                              <3>     ; jmp $
   363                              <3>     mov rdi, qword [rel video_info_ptr + video_info.video_framebuffer]
   364                              <3>     add rdi, rax
   365                              <3>     mov rax,0
   366                              <3>     epilog
   367                              <3> 
   368                              <3> draw_char:; input: x,y,char; draw a character
   369                              <3>     prolog 2;
   370                              <3>     get_param r8, 1   ; x
   371                              <3>     get_param r9, 2   ; y
   372                              <3>     get_param rsi, 3   ; char
   373                              <3> 
   374                              <3>     mov rax, 0
   375                              <3>     mov rax, r9
   376                              <3> 
   377                              <3>     mov rbx,0
   378                              <3>     mov bx,word [rel video_info_ptr + video_info.xpixel]
   379                              <3>     imul rax,rbx
   380                              <3> 
   381                              <3>     mov rcx,0
   382                              <3>     mov rcx,r8
   383                              <3>     add rax, rcx
   384                              <3> 
   385                              <3>     mov rbx,0
   386                              <3>     mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   387                              <3>     imul rax,rbx
   388                              <3>     ; jmp $
   389                              <3>     mov rdi, qword [rel video_info_ptr + video_info.video_framebuffer]
   390                              <3>     add rdi, rax        ;rdi=屏幕地址
   391                              <3> 
   392                              <3> 
   393                              <3>     xor rax, rax
   394                              <3>     mov rax,rsi
   395                              <3> 
   396                              <3>     shl rax, 4                 ; 乘以16(每个字符16字节)
   397                              <3>     mov rbx, [rel print_info_ptr + print_info.font_base_address]
   398                              <3>     add rbx, rax         ; RSI = 字符数据地址
   399                              <3>     mov rsi,rbx
   400                              <3> 
   401                              <3> 
   402                              <3>     mov rcx, 16                ; 16行高度
   403                              <3>     push rdi               ; 保存当前行起始位置
   404                              <3>     .next_line:
   405                              <3>         push rdi               ; 保存当前行起始位置
   406                              <3>         
   407                              <3>         ; 处理一行(8像素)
   408                              <3>         mov dl, [rsi]          ; 获取字模数据
   409                              <3>         mov dh, 8              ; 8位/行
   410                              <3>         .next_pixel:
   411                              <3>             xor rax,rax
   412                              <3>             mov al,byte [rel video_info_ptr + video_info.byte_per_pixel]
   413                              <3> 
   414                              <3>             test dl, 0x80       ; 测试最高位
   415                              <3>             jz .skip_pixel
   416                              <3> 
   417                              <3> 
   418                              <3>             cmp al,4
   419                              <3>             jb .pixel_2byte
   420                              <3>             mov byte [rdi+2], 0xFF ; 绘制像素(白色)
   421                              <3>             mov byte [rdi+3], 0x00 ; 绘制像素(白色)
   422                              <3>             .pixel_2byte:
   423                              <3>                 mov byte [rdi], 0xFF ; 绘制像素(白色)
   424                              <3>                 mov byte [rdi+1], 0xFF ; 绘制像素(白色)
   425                              <3>             ; jmp $
   426                              <3>         .skip_pixel:
   427                              <3>             shl dl, 1           ; 移到下一位
   428                              <3>             add rdi,rax
   429                              <3>             dec dh
   430                              <3>             jnz .next_pixel
   431                              <3>         
   432                              <3>         pop rdi                 ; 恢复行起始位置
   433                              <3> 
   434                              <3>         xor rax,rax
   435                              <3>         mov ax,word [rel video_info_ptr + video_info.xpixel]
   436                              <3> 
   437                              <3>         mov rbx,0
   438                              <3>         mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   439                              <3>         imul rax,rbx
   440                              <3>         add rdi,rax
   441                              <3>         inc rsi                 ; next char font
   442                              <3>         loop .next_line
   443                              <3>                 ; jmp $
   444                              <3>     pop rdi                 ; 恢复行起始位置
   445                              <3>     epilog
   446                              <3> 
   447                              <3> 
   448                              <3> 
   449                              <3> draw_string:; input: x,y,string; draw string
   450                              <3>     prolog 2;
   451                              <3>     get_param r8, 1   ; x
   452                              <3>     get_param r9, 2   ; y
   453                              <3>     get_param rsi, 3   ; string
   454                              <3> 
   455                              <3>     .next_char:
   456                              <3>         lodsb                  
   457                              <3>         test al, al
   458                              <3>         jz .done
   459                              <3>         mov rbx, 0
   460                              <3>         mov bl, al
   461                              <3>         function draw_char,1,r8,r9,rbx
   462                              <3>         add r8, 8
   463                              <3> 
   464                              <3>         jmp .next_char
   465                              <3>     .done:
   466                              <3>     epilog
   467                              <3> 
   468                              <3> draw_hex:; input: x,y,hex; draw hex
   469                              <3>     prolog 2;
   470                              <3>     get_param r8, 1   ; x
   471                              <3>     get_param r9, 2   ; y
   472                              <3>     get_param rsi, 3   ; hex
   473                              <3> 
   474                              <3>     mov rbx, 'X'
   475                              <3>     function draw_char,1,r8,r9,rbx    
   476                              <3>     add r8, 8
   477                              <3> 
   478                              <3> 
   479                              <3>     xor rax, rax
   480                              <3>     xor rbx, rbx
   481                              <3>     xor rdx, rdx
   482                              <3>     mov rax, [rsi]
   483                              <3> 
   484                              <3>     mov rcx, 16              ; Process 16 digits (64-bit number)
   485                              <3>     .convert_loopqq:
   486                              <3>         rol rax, 4           ; Rotate left by 4 bits
   487                              <3>         mov dl, al           ; Extract lower nibble
   488                              <3> 
   489                              <3>         and dl, 0x0F         ; Mask to get a single hex digit
   490                              <3> 
   491                              <3>         cmp dl, 10
   492                              <3>         jl .digitqq
   493                              <3>         add dl, 'a' - 10     ; Convert to 'A'-'F'
   494                              <3>         jmp .outputqq
   495                              <3>     .digitqq:
   496                              <3>         add dl, '0'          ; Convert to '0'-'9'
   497                              <3>     .outputqq:
   498                              <3>         mov rbx, rdx
   499                              <3> 
   500                              <3>         function draw_char,1,r8,r9,rbx
   501                              <3>         
   502                              <3>         add r8, 8
   503                              <3>         loop .convert_loopqq
   504                              <3> 
   505                              <3>     epilog
   506                              <3> draw_decimal:; input: x,y,decimal address; draw dec
   507                              <3>     prolog 2;
   508                              <3>     get_param r8, 1   ; x
   509                              <3>     get_param r9, 2   ; y
   510                              <3>     get_param rsi, 3   ; dec
   511                              <3> 
   512                              <3>     mov rbx, 'D'
   513                              <3>     function draw_char,1,r8,r9,rbx    
   514                              <3>     add r8, 8
   515                              <3> 
   516                              <3>     xor rax, rax
   517                              <3>     xor rbx, rbx
   518                              <3>     xor rdx, rdx
   519                              <3>     mov rax, [rsi]
   520                              <3> 
   521                              <3>     xor rbx, rbx
   522                              <3>     mov rbx, 10              ; Base 10
   523                              <3>     xor rcx, rcx             ; Digit counter
   524                              <3> 
   525                              <3>     .convert_loop:
   526                              <3>         xor rdx, rdx
   527                              <3>         div rbx              ; Divide rax by 10, remainder in rdx
   528                              <3>         push rdx             ; Save remainder (digit)
   529                              <3>         inc rcx              ; Increment digit counter
   530                              <3>         test rax, rax
   531                              <3>         jnz .convert_loop    ; Repeat until rax == 0
   532                              <3> 
   533                              <3>     .print_digits:
   534                              <3>         pop rdx              ; Get digit from stack
   535                              <3>         add dl, '0'          ; Convert to ASCII
   536                              <3> 
   537                              <3>         mov rbx, rdx
   538                              <3>         function draw_char,1,r8,r9,rbx    
   539                              <3>         add r8, 8
   540                              <3> 
   541                              <3>         loop .print_digits
   542                              <3> 
   543                              <3>     epilog
   544                              <3> ; debug_stop:
   545                              <3> ;     mov r15,0x99999
   546                              <3> ;     jmp $
   547                              <3> %endif
   295                              <2> %endif
   106                              <1> %include "../kernel/interrupt.asm"
     1                              <2> %ifndef INTERRUPT_ASM
     2                              <2> %define INTERRUPT_ASM
     3                              <2> 
     4                              <2> %include "../bootloader/global_def.asm"
     1                              <3> %ifndef GLOBAL_DEF_ASM
     2                              <3> %define GLOBAL_DEF_ASM
     3                              <3> 
     4                              <3> 
     5                              <3> ;|----------------------|
     6                              <3> ;|	100000 ~ END	|
     7                              <3> ;|	   KERNEL	|
     8                              <3> ;|----------------------|
     9                              <3> ;|	E0000 ~ 100000	|
    10                              <3> ;| Extended System BIOS |
    11                              <3> ;|----------------------|
    12                              <3> ;|	C0000 ~ Dffff	|
    13                              <3> ;|     Expansion Area   |
    14                              <3> ;|----------------------|
    15                              <3> ;|	A0000 ~ bffff	|
    16                              <3> ;|   Legacy Video Area  |
    17                              <3> ;|----------------------|
    18                              <3> ;|	9f000 ~ A0000	|
    19                              <3> ;|	 BIOS reserve	|
    20                              <3> ;|----------------------|
    21                              <3> ;|	90000 ~ 9f000	|
    22                              <3> ;|	 kernel tmpbuf	|
    23                              <3> ;|----------------------|
    24                              <3> ;|	10000 ~ 90000	|
    25                              <3> ;|	   LOADER	|
    26                              <3> ;|----------------------|
    27                              <3> ;|	8000 ~ 10000	|
    28                              <3> ;|	  VBE info	|
    29                              <3> ;|----------------------|
    30                              <3> ;|	7e00 ~ 8000	|
    31                              <3> ;|	  mem info	|
    32                              <3> ;|----------------------|
    33                              <3> ;|	7c00 ~ 7e00	|
    34                              <3> ;|	 MBR (BOOT)	|
    35                              <3> ;|----------------------|
    36                              <3> ;|	0000 ~ 7c00	|
    37                              <3> ;|	 BIOS Code	|
    38                              <3> ;|----------------------|
    39                              <3> 
    40                              <3> 
    41                              <3> ;_______________________________________________________
    42                              <3> ; START	END	    SIZE	        USED
    43                              <3> ; FFFF0	FFFFF	16B	        BIOS System Entry
    44                              <3> ; F0000	FFFEF	64KB-16B	BIOS System Code
    45                              <3> ; C8000	EFFFF	160KB	    ROM/Mapped IO
    46                              <3> ; C0000	C7FFF	32KB	    Graphic Adapter BIOS
    47                              <3> ; B8000	BFFFF	32KB	    Chroma Text Video Buffer
    48                              <3> ; B0000	B7FFF	32KB	    Mono Text Video Buffer
    49                              <3> ; A0000	AFFFF	64KB	    Graphic Video Buffer
    50                              <3> ; 9FC00	9FFFF	1KB	        Extended BIOS Data Area
    51                              <3> ; 7E00	9FBFF	622080B     Useable 608KB	
    52                              <3> ; 7C00	7DFF	512B	    MBR
    53                              <3> ; 500	7BFF	30464B      Useable 30KB	
    54                              <3> ; 400	4FF	    256B	    BIOS Data Area
    55                              <3> ; 000	3FF	    1KB	        IVT
    56                              <3> ; _____________________________________________________
    57                              <3> 
    58                              <3> 
    59                              <3> 
    60                              <3> 
    61                              <3> 
    62                              <3> 
    63                              <3> 
    64                              <3> 
    65                              <3> 
    66                              <3> 
    67                              <3> 
    68                              <3> ;|----------------------|
    69                              <3> ;|	100000 ~ END	|
    70                              <3> ;|	   KERNEL	|
    71                              <3> ;|----------------------|
    72                              <3> ;|	E0000 ~ 100000	|
    73                              <3> ;| Extended System BIOS |
    74                              <3> ;|----------------------|
    75                              <3> ;|	C0000 ~ Dffff	|
    76                              <3> ;|     Expansion Area   |
    77                              <3> ;|----------------------|
    78                              <3> ;|	A0000 ~ bffff	|
    79                              <3> ;|   Legacy Video Area  |
    80                              <3> ;|----------------------|
    81                              <3> ;|	9F000 ~ A0000	|
    82                              <3> ;|	 BIOS reserve	|
    83                              <3> ;|----------------------|
    84                              <3> ;|	90000 ~ 9F000	|
    85                              <3> ;|	 kernel tmpbuf	|
    86                              <3> ;|----------------------|
    87                              <3> ;|	10000 ~ 90000	|
    88                              <3> ;|	   LOADER	|
    89                              <3> ;|----------------------|
    90                              <3> ;|	8000 ~ 10000	|
    91                              <3> ;|	  VBE info	|
    92                              <3> ;|----------------------|
    93                              <3> ;|	7E00 ~ 8000	|
    94                              <3> ;|	  mem info	|
    95                              <3> ;|----------------------|
    96                              <3> ;|	7C00 ~ 7E00	|
    97                              <3> ;|	 MBR (BOOT)	|
    98                              <3> ;|----------------------|
    99                              <3> ;|	0000 ~ 7C00	|
   100                              <3> ;|	 BIOS Code	|
   101                              <3> ;|----------------------|
   102                              <3> 
   103                              <3> 
   104                              <3> 
   105                              <3> 
   106                              <3> 
   107                              <3> 
   108                              <3> 
   109                              <3> 
   110                              <3> 
   111                              <3> 
   112                              <3> ;______________________________________________
   113                              <3> ; ----------------Vbe Info Block------------
   114                              <3> ; typedef struct {
   115                              <3> ;     unsigned char       vbe_signature;
   116                              <3> ;     unsigned short      vbe_version;
   117                              <3> ;     unsigned long       oem_string_ptr;
   118                              <3> ;     unsigned char       capabilities;
   119                              <3> ;     unsigned long       video_mode_ptr;
   120                              <3> ;     unsigned short      total_memory;
   121                              <3> ;     unsigned short      oem_software_rev;
   122                              <3> ;     unsigned long       oem_vendor_name_ptr;
   123                              <3> ;     unsigned long       oem_product_name_ptr;
   124                              <3> ;     unsigned long       oem_product_rev_ptr;
   125                              <3> ;     unsigned char       reserved[222];
   126                              <3> ;     unsigned char       oem_data[256];  
   127                              <3> ; } VbeInfoBlock;
   128                              <3> ;______________________________________________
   129                              <3> 
   130                              <3> 
   131                              <3> BaseOfKernelFile	equ	0x00
   132                              <3> OffsetOfKernelFile	equ	0x100000
   133                              <3> BaseTmpOfKernelAddr	equ	0x9000
   134                              <3> OffsetTmpOfKernelFile	equ	0x0000
   135                              <3> VBEStructBufferAddr	equ	0x8000
   136                              <3> VBEModeStructBufferAddr	equ	0x8200
   137                              <3> MemoryStructBufferAddr	equ	0x8800
   138                              <3> 
   139                              <3> 
   140                              <3> 
   141                              <3> KernelSpaceUpperAddress equ 0xFFFF800000000000
   142                              <3> 
   143                              <3> GDTPointerUpperAddr equ 0xFFFF800000104000
   144                              <3> IDTPointerUpperAddr equ 0xFFFF80000010400a
   145                              <3> TSSPointerUpperAddr equ 0xFFFF800000104014
   146                              <3> 
   147                              <3> VideoFrameBufferAddress equ 0xFFFF800003000000
   148                              <3> KernelStartSectorNum	equ	16
   149                              <3> 
   150                              <3> 
   151                              <3> %define PLATFORM_QEMU_X64 1
   152                              <3> %define PLATFORM_X64 2
   153                              <3> 
   154                              <3> %define DEBUG_PLATFORM PLATFORM_QEMU_X64
   155                              <3> %define DEBUG_MODE 1
   156                              <3> 
   157                              <3> 
   158                              <3> MasterSectorReadNumPort    equ	0x1F2
   159                              <3> MasterSectorReadPort    equ	0x1F0
   160                              <3> 
   161                              <3> SlaveReadNumPort    equ	0x172
   162                              <3> SlaveSectorReadPort    equ	0x170
   163                              <3> 
   164                              <3> SectorReadNumPort    equ	MasterSectorReadNumPort
   165                              <3> SectorReadPort    equ	MasterSectorReadPort
   166                              <3> 
   167                              <3> struc vbe_info_block
   168                              <3>     .signature                 resb 4    ; 'VESA' signature (must be "VESA")
   169                              <3>     .version                   resw 1    ; VBE version (e.g., 0x0300 for VBE 3.0)
   170                              <3>     .oem_string_ptr            resd 1    ; Pointer to OEM string
   171                              <3>     .capabilities              resd 1    ; Capabilities of the video card
   172                              <3>     .video_mode_ptr            resd 1    ; Pointer to supported video modes
   173                              <3>     .total_memory              resw 1    ; Total memory in 64KB blocks
   174                              <3> 
   175                              <3>     ; VBE 2.0+ fields
   176                              <3>     .oem_software_rev          resw 1    ; OEM software revision
   177                              <3>     .oem_vendor_name_ptr       resd 1    ; Pointer to OEM vendor name string
   178                              <3>     .oem_product_name_ptr      resd 1    ; Pointer to OEM product name string
   179                              <3>     .oem_product_rev_ptr       resd 1    ; Pointer to OEM product revision string
   180                              <3>     .reserved                  resb 222  ; Reserved for VBE implementation
   181                              <3>     .oem_data                  resb 256  ; Data area for OEM-specific information
   182                              <3> endstruc
   183                              <3> 
   184                              <3> struc vbe_mode_info_block
   185                              <3>     .attributes                resw 1    ; Mode attributes
   186                              <3>     .winA_attributes           resb 1    ; Window A attributes
   187                              <3>     .winB_attributes           resb 1    ; Window B attributes
   188                              <3>     .win_granularity           resw 1    ; Window granularity in KB
   189                              <3>     .win_size                  resw 1    ; Window size in KB
   190                              <3>     .winA_segment              resw 1    ; Window A segment
   191                              <3>     .winB_segment              resw 1    ; Window B segment
   192                              <3>     .win_func_ptr              resd 1    ; Pointer to window function
   193                              <3>     .bytes_per_scanline        resw 1    ; Bytes per scanline
   194                              <3> 
   195                              <3>     ; VBE 1.2+ fields
   196                              <3>     .x_resolution              resw 1    ; Horizontal resolution in pixels
   197                              <3>     .y_resolution              resw 1    ; Vertical resolution in pixels
   198                              <3>     .x_char_size               resb 1    ; Character cell width in pixels
   199                              <3>     .y_char_size               resb 1    ; Character cell height in pixels
   200                              <3>     .number_of_planes          resb 1    ; Number of memory planes
   201                              <3>     .bits_per_pixel            resb 1    ; Bits per pixel
   202                              <3>     .number_of_banks           resb 1    ; Number of banks
   203                              <3>     .memory_model              resb 1    ; Memory model type
   204                              <3>     .bank_size                 resb 1    ; Bank size in KB
   205                              <3>     .number_of_image_pages     resb 1    ; Number of images
   206                              <3>     .reserved1                 resb 1    ; Reserved
   207                              <3> 
   208                              <3>     ; Direct Color fields (VBE 1.2+)
   209                              <3>     .red_mask_size             resb 1    ; Size of direct color red mask
   210                              <3>     .red_field_position        resb 1    ; Bit position of red mask
   211                              <3>     .green_mask_size           resb 1    ; Size of direct color green mask
   212                              <3>     .green_field_position      resb 1    ; Bit position of green mask
   213                              <3>     .blue_mask_size            resb 1    ; Size of direct color blue mask
   214                              <3>     .blue_field_position       resb 1    ; Bit position of blue mask
   215                              <3>     .reserved_mask_size        resb 1    ; Size of direct color reserved mask
   216                              <3>     .reserved_field_position   resb 1    ; Bit position of reserved mask
   217                              <3>     .direct_color_mode_info    resb 1    ; Direct color mode attributes
   218                              <3> 
   219                              <3>     ; VBE 2.0+ fields
   220                              <3>     .phys_base_ptr             resd 1    ; Physical address for flat memory frame buffer
   221                              <3>     .reserved2                 resd 1    ; Reserved
   222                              <3>     .reserved3                 resw 1    ; Reserved
   223                              <3> 
   224                              <3>     ; VBE 3.0+ fields
   225                              <3>     .lin_bytes_per_scanline    resw 1    ; Bytes per scanline for linear modes
   226                              <3>     .bnk_number_of_image_pages resb 1    ; Number of images for banked modes
   227                              <3>     .lin_number_of_image_pages resb 1    ; Number of images for linear modes
   228                              <3>     .lin_red_mask_size         resb 1    ; Size of direct color red mask (linear modes)
   229                              <3>     .lin_red_field_position    resb 1    ; Bit position of red mask (linear modes)
   230                              <3>     .lin_green_mask_size       resb 1    ; Size of direct color green mask (linear modes)
   231                              <3>     .lin_green_field_position  resb 1    ; Bit position of green mask (linear modes)
   232                              <3>     .lin_blue_mask_size        resb 1    ; Size of direct color blue mask (linear modes)
   233                              <3>     .lin_blue_field_position   resb 1    ; Bit position of blue mask (linear modes)
   234                              <3>     .lin_reserved_mask_size    resb 1    ; Size of direct color reserved mask (linear modes)
   235                              <3>     .lin_reserved_field_position resb 1  ; Bit position of reserved mask (linear modes)
   236                              <3>     .max_pixel_clock           resd 1    ; Maximum pixel clock (Hz)
   237                              <3>     .reserved4                 resb 190  ; Reserved for future expansion
   238                              <3> endstruc
   239                              <3> 
   240                              <3> struc e820_memory_entry
   241                              <3>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   242                              <3>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   243                              <3>     .length_low               resd 1    ; Lower 32 bits of the length
   244                              <3>     .length_high              resd 1    ; Upper 32 bits of the length
   245                              <3>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   246                              <3>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   247                              <3> endstruc
   248                              <3> 
   249                              <3> %endif
     5                              <2> %include "../kernel/stddef.asm"
     1                              <3> %ifndef STDDEF_ASM
     2                              <3> %define STDDEF_ASM
     3                              <3> 
     4                              <3> ;-----------Calling Conventions Standard------------;
     5                              <3> %define USE_CC_STANDARD
     6                              <3> %ifdef USE_CC_STANDARD
     7                              <3> ;caller maintain the stack balance 
     8                              <3>     ; debug_times: db 0
     9                              <3>     ; cmp byte [rel debug_times],3
    10                              <3>     ; je debug_stop
    11                              <3>     ; add byte [rel debug_times],1
    12                              <3> ; -------------------------------
    13                              <3> ; 栈帧结构定义
    14                              <3> ; -------------------------------
    15                              <3> ; 调用后的栈布局:
    16                              <3> ; [rsp+0x00] 返回地址 (8字节)
    17                              <3> ; [rsp+0x08] 旧RBP     (8字节) <- rbp指向这里
    18                              <3> ; [rsp+0x10] 参数1     (8字节)
    19                              <3> ; [rsp+0x18] 参数2
    20                              <3> ; ...
    21                              <3> ; [rsp+X]    局部变量区
    22                              <3> ; -------------------------------
    23                              <3> 
    24                              <3> %define PARAM_OFFSET   16      ; 第一个参数的偏移量(返回地址8 + 旧RBP8)
    25                              <3> %macro function 1-* ; 1=函数名, 2=返回参数数量, 3=参数列表
    26                              <3>     %assign param_count %0 - 2 ; 参数数量
    27                              <3>     
    28                              <3>     %if param_count < 0
    29                              <3>         %assign param_count 0 ; 如果没有参数，设置为 0
    30                              <3>     %endif
    31                              <3>     %if param_count < 1
    32                              <3>         %assign ret_param_count 0 ; 返回参数数量
    33                              <3>     %else
    34                              <3>         %assign ret_param_count %2 ; 返回参数数量
    35                              <3>     %endif
    36                              <3> 
    37                              <3>     ; 准备调用
    38                              <3>     prepare_call param_count, ret_param_count
    39                              <3> 
    40                              <3>     ; 如果有参数，将参数压入栈
    41                              <3>     %if param_count > 0
    42                              <3>         %assign i 0
    43                              <3>         mov [rsp-8], rax ; 保存返回地址
    44                              <3>         %rep param_count
    45                              <3>             %rotate 1
    46                              <3>             mov rax, %2
    47                              <3>             mov [rsp + 8*i], rax ; 将参数压入栈
    48                              <3>             %assign i i+1
    49                              <3>         %endrep
    50                              <3>         ; mov rax,
    51                              <3>         %rotate 1
    52                              <3>         %rotate 1
    53                              <3>         mov rax,[rsp-8]; 保存返回地址
    54                              <3>     %endif
    55                              <3> 
    56                              <3>     ; 调用函数
    57                              <3>     call %1
    58                              <3> 
    59                              <3>     ; 清理栈空间
    60                              <3>     cleanup_call param_count, ret_param_count
    61                              <3> 
    62                              <3> %endmacro
    63                              <3> 
    64                              <3> %macro prolog 1;local var size(bytes)
    65                              <3>     push rbp
    66                              <3>     mov rbp, rsp
    67                              <3>     mov [rbp-8],rax
    68                              <3>     mov rax, %1
    69                              <3>     add rax, 15
    70                              <3>     and rax, ~15
    71                              <3>     sub rsp, rax
    72                              <3>     mov rax,[rbp-8]
    73                              <3>     pushallq
    74                              <3>     
    75                              <3>     
    76                              <3>     ; 调试信息可以放在这里
    77                              <3>     ; %ifdef DEBUG
    78                              <3>     ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
    79                              <3>     ; %endif
    80                              <3> %endmacro
    81                              <3> 
    82                              <3> %macro epilog 0
    83                              <3>     popallq
    84                              <3> 
    85                              <3>     mov rsp, rbp
    86                              <3>     pop rbp
    87                              <3>     ret
    88                              <3> %endmacro
    89                              <3> 
    90                              <3> %macro get_param 2;1=register, 2=param index(from 1)
    91                              <3>     mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    92                              <3> %endmacro
    93                              <3> 
    94                              <3> %macro set_ret_param 2;1=register, 2=param index(from 1)
    95                              <3>     mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
    96                              <3> %endmacro
    97                              <3> 
    98                              <3> %macro prepare_call 2;1=param count, 2=return param count
    99                              <3>     %assign total_space ((%1 + %2) * 8)
   100                              <3>     
   101                              <3>     %if (total_space % 16) != 0
   102                              <3>         %assign total_space total_space + 8  ; 添加填充
   103                              <3>     %endif
   104                              <3>     
   105                              <3>     sub rsp, total_space
   106                              <3> %endmacro
   107                              <3> 
   108                              <3> %macro cleanup_call 2;1=param count, 2=return param count
   109                              <3>     %assign total_space ((%1 + %2) * 8)
   110                              <3>     %if (total_space % 16) != 0
   111                              <3>         %assign total_space total_space + 8
   112                              <3>     %endif
   113                              <3>     add rsp, total_space
   114                              <3> %endmacro
   115                              <3> 
   116                              <3> %macro pushallq 0
   117                              <3>     push rax
   118                              <3>     push rbx
   119                              <3>     push rcx
   120                              <3>     push rdx
   121                              <3>     push rsi
   122                              <3>     push rdi
   123                              <3>     push r8
   124                              <3>     push r9
   125                              <3>     push r10
   126                              <3>     push r11
   127                              <3>     push r12
   128                              <3>     push r13
   129                              <3>     push r14
   130                              <3>     push r15
   131                              <3> %endmacro
   132                              <3> 
   133                              <3> %macro popallq 0
   134                              <3>     pop r15
   135                              <3>     pop r14
   136                              <3>     pop r13
   137                              <3>     pop r12
   138                              <3>     pop r11
   139                              <3>     pop r10
   140                              <3>     pop r9
   141                              <3>     pop r8
   142                              <3>     pop rdi
   143                              <3>     pop rsi
   144                              <3>     pop rdx
   145                              <3>     pop rcx
   146                              <3>     pop rbx
   147                              <3>     pop rax
   148                              <3> %endmacro
   149                              <3> 
   150                              <3> %endif
   151                              <3> ;---------------------ABI Standard------------------;
   152                              <3> %define USE_ABI_STANDARD
   153                              <3> %ifdef USE_ABI_STANDARD
   154                              <3> 
   155                              <3> 
   156                              <3>     %define ABI_File_None   0       ; 无文件类型
   157                              <3>     %define ABI_File_REL    1       ; 可重定位文件
   158                              <3>     %define ABI_File_EXEC   2       ; 可执行文件
   159                              <3>     %define ABI_File_DYN    3       ; 共享目标文件
   160                              <3>     %define ABI_File_CORE   4       ; 核心文件
   161                              <3> 
   162                              <3>     %define Section_Type_NULL    0      ; 未使用
   163                              <3>     %define Section_Type_LOAD    1      ; 可加载段
   164                              <3>     %define Section_Type_DYNAMIC 2      ; 动态链接信息
   165                              <3>     %define Section_Type_INTERP  3      ; 解释器路径
   166                              <3>     %define Section_Type_NOTE    4      ; 辅助信息
   167                              <3>     %define Section_Type_SHLIB   5      ; 保留
   168                              <3> 
   169                              <3>     %macro ABI_HEADER 4 ;1=File Type, 2=Entry Point Address, 3=Section Header Offset, 4=Section Header Count
   170                              <3>         db 0xA5, 'A', 'B', 'I'     ; ABI Magic Number
   171                              <3>         db 1                       ; Encode Type
   172                              <3>         db 1                       ; ABI Version
   173                              <3> 
   174                              <3>         dw %1                      ; ABI File Type
   175                              <3>         dq %2                      ; Entry Point Address
   176                              <3>         dw 32                      ; ABI Headers Size
   177                              <3> 
   178                              <3>         dq %3                      ; Section Header Offset
   179                              <3>         dw 32                      ; Section Header Size
   180                              <3>         dw %4                      ; Section Header Count
   181                              <3>         dw 0                       ; Symble Table Entry Size
   182                              <3>     %endmacro
   183                              <3>     STRUC struct_ABI_HEADER
   184                              <3>         .magic:         resb 4    ; ABI Magic Number (4 bytes)
   185                              <3>         .encode_type:   resb 1    ; Encode Type (1 byte)
   186                              <3>         .abi_version:   resb 1    ; ABI Version (1 byte)
   187                              <3>         .file_type:     resw 1    ; ABI File Type (2 bytes)
   188                              <3>         .entry_point:   resq 1    ; Entry Point Address (8 bytes)
   189                              <3>         .header_size:   resw 1    ; ABI Headers Size (2 bytes)
   190                              <3>         .section_offset: resq 1   ; Section Header Offset (8 bytes)
   191                              <3>         .section_size:  resw 1    ; Section Header Size (2 bytes)
   192                              <3>         .section_count: resw 1    ; Section Header Count (2 bytes)
   193                              <3>         .sym_table_size: resw 1   ; Symbol Table Entry Size (2 bytes)
   194                              <3>     ENDSTRUC
   195                              <3> 
   196                              <3>     %macro SECTION_HEADER 4 ;1=Section Type, 2=Virtual Address, 3=Section Offset, 4=Section Size
   197                              <3>         dq %1                  ; Section Type
   198                              <3>         dq %2                  ; Virtual Address
   199                              <3>         dq %3                  ; Section Offset
   200                              <3>         dq %4                  ; Section Size
   201                              <3>     %endmacro
   202                              <3>     STRUC struct_SECTION_HEADER
   203                              <3>         .type:      resq 1    ; Section Type (8 bytes)
   204                              <3>         .vaddr:     resq 1    ; Virtual Address (8 bytes)
   205                              <3>         .offset:    resq 1    ; Section Offset (8 bytes)
   206                              <3>         .size:      resq 1    ; Section Size (8 bytes)
   207                              <3>     ENDSTRUC
   208                              <3> %endif
   209                              <3> 
   210                              <3> %endif
     6                              <2> 
     7                              <2> [BITS 64]
     8                              <2> ; GDTPointerUpperAddr equ 0xFFFF800000104000
     9                              <2> ; IDTPointerUpperAddr equ 0xFFFF80000010400a
    10                              <2> ; TSSPointerUpperAddr equ 0xFFFF800000104004
    11                              <2> 
    12                              <2> 
    13                              <2> ; ; 描述符类型常量
    14                              <2> %define INTGATE 0x8E    ; 64位中断门(P=1, DPL=00, 类型=1110)
    15                              <2> %define TRAPGATE 0x8F   ; 64位陷阱门(P=1, DPL=00, 类型=1111)
    16                              <2> 
    17                              <2> ; ; 64位IDT条目结构(16字节)
    18                              <2> struc idt_info
    19 00000000 ????                <2>     .offset_low:   resw 1  ; 偏移低16位(0..15)
    20 00000002 ????                <2>     .selector:     resw 1  ; 代码段选择子
    21                              <2> 
    22 00000004 ??                  <2>     .ist:          resb 1  ; IST索引(0表示不使用)
    23 00000005 ??                  <2>     .type_attr:    resb 1  ; 类型属性
    24                              <2> 
    25 00000006 ????                <2>     .offset_mid:   resw 1  ; 偏移中16位(16..31)
    26                              <2> 
    27 00000008 ????????            <2>     .offset_high:  resd 1  ; 偏移高32位(32..63)
    28                              <2> 
    29 0000000C ????????            <2>     .reserved:     resd 1  ; 保留
    30                              <2> endstruc
    31                              <2> init_interrupt:;init expection idt
    32                              <2>     prolog 0;
    65 0000194D 55                  <3>  push rbp
    66 0000194E 4889E5              <3>  mov rbp, rsp
    67 00001951 488945F8            <3>  mov [rbp-8],rax
    68 00001955 B800000000          <3>  mov rax, %1
    69 0000195A 4883C00F            <3>  add rax, 15
    70 0000195E 4883E0F0            <3>  and rax, ~15
    71 00001962 4829C4              <3>  sub rsp, rax
    72 00001965 488B45F8            <3>  mov rax,[rbp-8]
    73                              <3>  pushallq
   117 00001969 50                  <4>  push rax
   118 0000196A 53                  <4>  push rbx
   119 0000196B 51                  <4>  push rcx
   120 0000196C 52                  <4>  push rdx
   121 0000196D 56                  <4>  push rsi
   122 0000196E 57                  <4>  push rdi
   123 0000196F 4150                <4>  push r8
   124 00001971 4151                <4>  push r9
   125 00001973 4152                <4>  push r10
   126 00001975 4153                <4>  push r11
   127 00001977 4154                <4>  push r12
   128 00001979 4155                <4>  push r13
   129 0000197B 4156                <4>  push r14
   130 0000197D 4157                <4>  push r15
    74                              <3> 
    75                              <3> 
    76                              <3> 
    77                              <3> 
    78                              <3> 
    79                              <3> 
    33 0000197F 488D35EB000000      <2>     lea rsi,[rel default_interrupt_handler]
    34                              <2>     function setup_default_interrupt_idt,0,rsi
    26                              <3>  %assign param_count %0 - 2
    27                              <3> 
    28                              <3>  %if param_count < 0
    29                              <3>  %assign param_count 0
    30                              <3>  %endif
    31                              <3>  %if param_count < 1
    32                              <3>  %assign ret_param_count 0
    33                              <3>  %else
    34                              <3>  %assign ret_param_count %2
    35                              <3>  %endif
    36                              <3> 
    37                              <3> 
    38                              <3>  prepare_call param_count, ret_param_count
    99                              <4>  %assign total_space ((%1 + %2) * 8)
   100                              <4> 
   101                              <4>  %if (total_space % 16) != 0
   102                              <4>  %assign total_space total_space + 8
   103                              <4>  %endif
   104                              <4> 
   105 00001986 4883EC10            <4>  sub rsp, total_space
    39                              <3> 
    40                              <3> 
    41                              <3>  %if param_count > 0
    42                              <3>  %assign i 0
    43 0000198A 48894424F8          <3>  mov [rsp-8], rax
    44                              <3>  %rep param_count
    45                              <3>  %rotate 1
    46                              <3>  mov rax, %2
    47                              <3>  mov [rsp + 8*i], rax
    48                              <3>  %assign i i+1
    49                              <3>  %endrep
    45                              <4>  %rotate 1
    46 0000198F 4889F0              <4>  mov rax, %2
    47 00001992 48890424            <4>  mov [rsp + 8*i], rax
    48                              <4>  %assign i i+1
    50                              <3> 
    51                              <3>  %rotate 1
    52                              <3>  %rotate 1
    53 00001996 488B4424F8          <3>  mov rax,[rsp-8]
    54                              <3>  %endif
    55                              <3> 
    56                              <3> 
    57 0000199B E81F000000          <3>  call %1
    58                              <3> 
    59                              <3> 
    60                              <3>  cleanup_call param_count, ret_param_count
   109                              <4>  %assign total_space ((%1 + %2) * 8)
   110                              <4>  %if (total_space % 16) != 0
   111                              <4>  %assign total_space total_space + 8
   112                              <4>  %endif
   113 000019A0 4883C410            <4>  add rsp, total_space
    61                              <3> 
    35                              <2>     epilog
    83                              <3>  popallq
   134 000019A4 415F                <4>  pop r15
   135 000019A6 415E                <4>  pop r14
   136 000019A8 415D                <4>  pop r13
   137 000019AA 415C                <4>  pop r12
   138 000019AC 415B                <4>  pop r11
   139 000019AE 415A                <4>  pop r10
   140 000019B0 4159                <4>  pop r9
   141 000019B2 4158                <4>  pop r8
   142 000019B4 5F                  <4>  pop rdi
   143 000019B5 5E                  <4>  pop rsi
   144 000019B6 5A                  <4>  pop rdx
   145 000019B7 59                  <4>  pop rcx
   146 000019B8 5B                  <4>  pop rbx
   147 000019B9 58                  <4>  pop rax
    84                              <3> 
    85 000019BA 4889EC              <3>  mov rsp, rbp
    86 000019BD 5D                  <3>  pop rbp
    87 000019BE C3                  <3>  ret
    36                              <2>     
    37                              <2> setup_default_interrupt_idt:;setup expection idt 0~31
    38                              <2>     prolog 0;
    65 000019BF 55                  <3>  push rbp
    66 000019C0 4889E5              <3>  mov rbp, rsp
    67 000019C3 488945F8            <3>  mov [rbp-8],rax
    68 000019C7 B800000000          <3>  mov rax, %1
    69 000019CC 4883C00F            <3>  add rax, 15
    70 000019D0 4883E0F0            <3>  and rax, ~15
    71 000019D4 4829C4              <3>  sub rsp, rax
    72 000019D7 488B45F8            <3>  mov rax,[rbp-8]
    73                              <3>  pushallq
   117 000019DB 50                  <4>  push rax
   118 000019DC 53                  <4>  push rbx
   119 000019DD 51                  <4>  push rcx
   120 000019DE 52                  <4>  push rdx
   121 000019DF 56                  <4>  push rsi
   122 000019E0 57                  <4>  push rdi
   123 000019E1 4150                <4>  push r8
   124 000019E3 4151                <4>  push r9
   125 000019E5 4152                <4>  push r10
   126 000019E7 4153                <4>  push r11
   127 000019E9 4154                <4>  push r12
   128 000019EB 4155                <4>  push r13
   129 000019ED 4156                <4>  push r14
   130 000019EF 4157                <4>  push r15
    74                              <3> 
    75                              <3> 
    76                              <3> 
    77                              <3> 
    78                              <3> 
    79                              <3> 
    39                              <2>     get_param rsi, 1
    91 000019F1 488B7510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    40 000019F5 4989F0              <2>     mov r8,rsi
    41 000019F8 49C1E820            <2>     shr r8,32
    42 000019FC 4989F1              <2>     mov r9,rsi
    43 000019FF 49C1E910            <2>     shr r9,16
    44 00001A03 4981E1FFFF0000      <2>     and r9,0xFFFF
    45                              <2> 
    46 00001A0A B920000000          <2>     mov rcx,32
    47 00001A0F 48BB0A4010000080FF- <2>     mov rbx,IDTPointerUpperAddr
    47 00001A18 FF                  <2>
    48 00001A19 488B4302            <2>     mov rax,[rbx + 2]
    49                              <2>     
    50 00001A1D BA20000000          <2>     mov rdx,32
    51 00001A22 48C1E204            <2>     shl rdx, 4
    52 00001A26 4801D0              <2>     add rax, rdx
    53                              <2> 
    54                              <2>     .expection_idt:
    55 00001A29 668930              <2>         mov word [rax + idt_info.offset_low], si
    56 00001A2C 66C740020800        <2>         mov word [rax + idt_info.selector], 0x08
    57                              <2> 
    58 00001A32 C6400400            <2>         mov byte [rax + idt_info.ist], 0x00
    59 00001A36 C640058E            <2>         mov byte [rax + idt_info.type_attr], INTGATE
    60                              <2> 
    61 00001A3A 6644894806          <2>         mov word [rax + idt_info.offset_mid], r9w
    62                              <2> 
    63 00001A3F 4C894008            <2>         mov qword [rax + idt_info.offset_high], r8
    64                              <2> 
    65 00001A43 4883C010            <2>         add rax, 16
    66 00001A47 48FFC1              <2>         inc rcx
    67 00001A4A 4881F900010000      <2>         cmp rcx, 256
    68 00001A51 7ED6                <2>         jle .expection_idt
    69                              <2> 
    70 00001A53 0F011B              <2>     lidt	[rbx]
    71                              <2>     epilog
    83                              <3>  popallq
   134 00001A56 415F                <4>  pop r15
   135 00001A58 415E                <4>  pop r14
   136 00001A5A 415D                <4>  pop r13
   137 00001A5C 415C                <4>  pop r12
   138 00001A5E 415B                <4>  pop r11
   139 00001A60 415A                <4>  pop r10
   140 00001A62 4159                <4>  pop r9
   141 00001A64 4158                <4>  pop r8
   142 00001A66 5F                  <4>  pop rdi
   143 00001A67 5E                  <4>  pop rsi
   144 00001A68 5A                  <4>  pop rdx
   145 00001A69 59                  <4>  pop rcx
   146 00001A6A 5B                  <4>  pop rbx
   147 00001A6B 58                  <4>  pop rax
    84                              <3> 
    85 00001A6C 4889EC              <3>  mov rsp, rbp
    86 00001A6F 5D                  <3>  pop rbp
    87 00001A70 C3                  <3>  ret
    72                              <2> 
    73                              <2> 
    74                              <2> default_interrupt_handler:;
    75 00001A71 48B8ABAAAAAAAAAA00- <2>     mov rax,0xaaaaaaaaaaab
    75 00001A7A 00                  <2>
    76 00001A7B EBFE                <2>     jmp $
    77 00001A7D 48CF                <2>     iretq
    78                              <2> 
    79                              <2> ; make_call_gate:                          	;创建64位的调用门
    80                              <2> ;                                           	;输入：RAX=例程的线性地址
    81                              <2> ;                                           	;输出：RDI:RSI=调用门
    82                              <2> ;          mov rdi, rax
    83                              <2> ;          shr rdi, 32                     	;得到门的高64位，在RDI中
    84                              <2> 
    85                              <2> ;          push rax                        	;构造数据结构，并预置线性地址的位15~0
    86                              <2> ;          mov word [rsp + 2], CORE_CODE64_SEL	;预置段选择子部分
    87                              <2> ;          mov [rsp + 4], eax                  	;预置线性地址的位31~16
    88                              <2> ;          mov word [rsp + 4], 0x8c00         	;添加P=1，TYPE=64位调用门
    89                              <2> ;          pop rsi
    90                              <2> 
    91                              <2> ;          ret
    92                              <2> 
    93                              <2> ; ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    94                              <2> ; make_interrupt_gate:                      	;创建64位的中断门
    95                              <2> ;                                             	;输入：RAX=例程的线性地址
    96                              <2> ;                                             	;输出：RDI:RSI=中断门
    97                              <2> ;          mov rdi, rax
    98                              <2> ;          shr rdi, 32                       	;得到门的高64位，在RDI中
    99                              <2> 
   100                              <2> ;          push rax                          	;构造数据结构，并预置线性地址的位15~0
   101                              <2> ;          mov word [rsp + 2], CORE_CODE64_SEL	;预置段选择子部分
   102                              <2> ;          mov [rsp + 4], eax                  	;预置线性地址的位31~16
   103                              <2> ;          mov word [rsp + 4], 0x8e00         	;添加P=1，TYPE=64位中断门
   104                              <2> ;          pop rsi
   105                              <2> 
   106                              <2> ;          ret
   107                              <2> 
   108                              <2> ; ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   109                              <2> ; make_trap_gate:                             	;创建64位的陷阱门
   110                              <2> ;                                              	;输入：RAX=例程的线性地址
   111                              <2> ;                                              	;输出：RDI:RSI=陷阱门
   112                              <2> ;          mov rdi, rax
   113                              <2> ;          shr rdi, 32                        	;得到门的高64位，在RDI中
   114                              <2> 
   115                              <2> ;          push rax                           	;构造数据结构，并预置线性地址的位15~0
   116                              <2> ;          mov word [rsp + 2], CORE_CODE64_SEL	;预置段选择子部分
   117                              <2> ;          mov [rsp + 4], eax                  	;预置线性地址的位31~16
   118                              <2> ;          mov word [rsp + 4], 0x8f00         	;添加P=1，TYPE=64位陷阱门
   119                              <2> ;          pop rsi
   120                              <2> 
   121                              <2> ;          ret
   122                              <2> 
   123                              <2> ; ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   124                              <2> ; make_tss_descriptor:                    	;创建64位的TSS描述符
   125                              <2> ;                                           	;输入：RAX=TSS的线性地址
   126                              <2> ;                                           	;输出：RDI:RSI=TSS描述符
   127                              <2> ;          push rax
   128                              <2> 
   129                              <2> ;          mov rdi, rax
   130                              <2> ;          shr rdi, 32                    	;得到门的高64位，在RDI中
   131                              <2> 
   132                              <2> ;          push rax                       	;先将部分线性地址移到适当位置
   133                              <2> ;          shl qword [rsp], 16           	;将线性地址的位23~00移到正确位置
   134                              <2> ;          mov word [rsp], 104           	;段界限的标准长度
   135                              <2> ;          mov al, [rsp + 5]
   136                              <2> ;          mov [rsp + 7], al             	;将线性地址的位31~24移到正确位置
   137                              <2> ;          mov byte [rsp + 5], 0x89     	;P=1，DPL=00，TYPE=1001（64位TSS）
   138                              <2> ;          mov byte [rsp + 6], 0        	;G、0、0、AVL和limit
   139                              <2> ;          pop rsi                       	;门的低64位
   140                              <2> 
   141                              <2> ;          pop rax
   142                              <2> 
   143                              <2> ;          ret
   144                              <2> 
   145                              <2> ; ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   146                              <2> ; mount_idt_entry:                     	;在中断描述符表IDT中安装门描述符
   147                              <2> ;                                        	;R8=中断向量
   148                              <2> ;                                        	;RDI:RSI=门描述符
   149                              <2> ;          push r8
   150                              <2> ;          push r9
   151                              <2> 
   152                              <2> ;          shl r8, 4                         	;中断号乘以16，得到表内偏移
   153                              <2> ;          mov r9, UPPER_IDT_LINEAR        	;中断描述符表的高端线性地址
   154                              <2> ;          mov [r9 + r8], rsi
   155                              <2> ;          mov [r9 + r8 + 8], rdi
   156                              <2> 
   157                              <2> ;          pop r9
   158                              <2> ;          pop r8
   159                              <2> 
   160                              <2> ;          ret
   161                              <2> %endif
   107                              <1> %endif
   129 00001A7F 68656C6C6F20776F72-     messages: db 'hello world,here to show printk function\n', 0
   129 00001A88 6C642C686572652074-
   129 00001A91 6F2073686F77207072-
   129 00001A9A 696E746B2066756E63-
   129 00001AA3 74696F6E5C6E00     
   130                                  ; messages1: db 'a\nb\nc\nd\ne\nf\ng\n', 0
   131                                  
   132 00001AAA 617364666768696A6B-     messages1: db 'asdfghijklmnopqrstuvwxyz_ASDFGHJKLZXCVBNM1234567890\n', 0
   132 00001AB3 6C6D6E6F7071727374-
   132 00001ABC 75767778797A5F4153-
   132 00001AC5 444647484A4B4C5A58-
   132 00001ACE 4356424E4D31323334-
   132 00001AD7 3536373839305C6E00 
   133 00001AE0 496D61676520666F72-     messages2: db 'Image format was not specified for ./hd60m.img and probing guessed raw\n', 0
   133 00001AE9 6D617420776173206E-
   133 00001AF2 6F7420737065636966-
   133 00001AFB 69656420666F72202E-
   133 00001B04 2F686436306D2E696D-
   133 00001B0D 6720616E642070726F-
   133 00001B16 62696E672067756573-
   133 00001B1F 736564207261775C6E-
   133 00001B28 00                 
   134 00001B29 4175746F6D61746963-     messages3: db 'Automatically detecting the format is dangerous for raw images, write operations on block 0 will be restricted.\n', 0
   134 00001B32 616C6C792064657465-
   134 00001B3B 6374696E6720746865-
   134 00001B44 20666F726D61742069-
   134 00001B4D 732064616E6765726F-
   134 00001B56 757320666F72207261-
   134 00001B5F 7720696D616765732C-
   134 00001B68 207772697465206F70-
   134 00001B71 65726174696F6E7320-
   134 00001B7A 6F6E20626C6F636B20-
   134 00001B83 302077696C6C206265-
   134 00001B8C 207265737472696374-
   134 00001B95 65642E5C6E00       
   135                                  
   136 00001B9B 2E2E2F6B65726E656C-     messages4: db '../kernel/printk.asm:100: warning: word data exceeds bounds [-w+number-overflow]\n', 0
   136 00001BA4 2F7072696E746B2E61-
   136 00001BAD 736D3A3130303A2077-
   136 00001BB6 61726E696E673A2077-
   136 00001BBF 6F7264206461746120-
   136 00001BC8 657863656564732062-
   136 00001BD1 6F756E6473205B2D77-
   136 00001BDA 2B6E756D6265722D6F-
   136 00001BE3 766572666C6F775D5C-
   136 00001BEC 6E00               
   137 00001BEE 5741524E494E473A20-     messages5: db 'WARNING: Image format was not specified for ./hd60m.img and probing guessed raw.\n', 0
   137 00001BF7 496D61676520666F72-
   137 00001C00 6D617420776173206E-
   137 00001C09 6F7420737065636966-
   137 00001C12 69656420666F72202E-
   137 00001C1B 2F686436306D2E696D-
   137 00001C24 6720616E642070726F-
   137 00001C2D 62696E672067756573-
   137 00001C36 736564207261772E5C-
   137 00001C3F 6E00               
   138 00001C41 323530383820627974-     messages6: db '25088 bytes (25 kB, 24 KiB) copied, 0.000134717 s, 186 MB/s\n', 0
   138 00001C4A 657320283235206B42-
   138 00001C53 2C203234204B694229-
   138 00001C5C 20636F706965642C20-
   138 00001C65 302E30303031333437-
   138 00001C6E 313720732C20313836-
   138 00001C77 204D422F735C6E00   
   139                                  
   140 00001C7F 48656C6C6F2C202573-         format1 db "Hello, %s!\n", 0
   140 00001C88 215C6E00           
   141 00001C8C 56616C75653A202564-         format2 db "Value: %d\n", 0
   141 00001C95 5C6E00             
   142 00001C98 4865783A2025785C6E-         format3 db "Hex: %x\n", 0
   142 00001CA1 00                 
   143 00001CA2 576F726C6400                string1 db "World", 0
   144 00001CA8 F0DEBC9A78563412        hex_messages: dq 0x123456789abcdef0
   145 00001CB0 15CD5B0700000000        decimal_messages: dq 123456789
   146 00001CB8 4523010000000000-       params: times 10 dq 0x12345
   146 00001CB8 <rep Ah>           
   147 00001D08 00<rep Ah>              messagess: times 10 db 0
   148                                  kernel_end:
   149                                  section_end:
