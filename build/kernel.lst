     1                                  %include "../bootloader/global_def.asm"
     1                              <1> %ifndef GLOBAL_DEF_ASM
     2                              <1> %define GLOBAL_DEF_ASM
     3                              <1> %define PLATFORM_QEMU_X64 1
     4                              <1> %define PLATFORM_X64 2
     5                              <1> %define DEBUG_PLATFORM PLATFORM_QEMU_X64
     6                              <1> %define DEBUG_MODE 1
     7                              <1> 
     8                              <1> 
     9                              <1> ;|----------------------|
    10                              <1> ;|	100000 ~ END	|
    11                              <1> ;|	   KERNEL	|
    12                              <1> ;|----------------------|
    13                              <1> ;|	E0000 ~ 100000	|
    14                              <1> ;| Extended System BIOS |
    15                              <1> ;|----------------------|
    16                              <1> ;|	C0000 ~ Dffff	|
    17                              <1> ;|     Expansion Area   |
    18                              <1> ;|----------------------|
    19                              <1> ;|	A0000 ~ bffff	|
    20                              <1> ;|   Legacy Video Area  |
    21                              <1> ;|----------------------|
    22                              <1> ;|	9f000 ~ A0000	|
    23                              <1> ;|	 BIOS reserve	|
    24                              <1> ;|----------------------|
    25                              <1> ;|	90000 ~ 9f000	|
    26                              <1> ;|	 kernel tmpbuf	|
    27                              <1> ;|----------------------|
    28                              <1> ;|	10000 ~ 90000	|
    29                              <1> ;|	   LOADER	|
    30                              <1> ;|----------------------|
    31                              <1> ;|	8000 ~ 10000	|
    32                              <1> ;|	  VBE info	|
    33                              <1> ;|----------------------|
    34                              <1> ;|	7e00 ~ 8000	|
    35                              <1> ;|	  mem info	|
    36                              <1> ;|----------------------|
    37                              <1> ;|	7c00 ~ 7e00	|
    38                              <1> ;|	 MBR (BOOT)	|
    39                              <1> ;|----------------------|
    40                              <1> ;|	0000 ~ 7c00	|
    41                              <1> ;|	 BIOS Code	|
    42                              <1> ;|----------------------|
    43                              <1> 
    44                              <1> 
    45                              <1> ;_______________________________________________________
    46                              <1> ; START	END	    SIZE	        USED
    47                              <1> ; FFFF0	FFFFF	16B	        BIOS System Entry
    48                              <1> ; F0000	FFFEF	64KB-16B	BIOS System Code
    49                              <1> ; C8000	EFFFF	160KB	    ROM/Mapped IO
    50                              <1> ; C0000	C7FFF	32KB	    Graphic Adapter BIOS
    51                              <1> ; B8000	BFFFF	32KB	    Chroma Text Video Buffer
    52                              <1> ; B0000	B7FFF	32KB	    Mono Text Video Buffer
    53                              <1> ; A0000	AFFFF	64KB	    Graphic Video Buffer
    54                              <1> ; 9FC00	9FFFF	1KB	        Extended BIOS Data Area
    55                              <1> ; 7E00	9FBFF	622080B     Useable 608KB	
    56                              <1> ; 7C00	7DFF	512B	    MBR
    57                              <1> ; 500	7BFF	30464B      Useable 30KB	
    58                              <1> ; 400	4FF	    256B	    BIOS Data Area
    59                              <1> ; 000	3FF	    1KB	        IVT
    60                              <1> ; _____________________________________________________
    61                              <1> 
    62                              <1> 
    63                              <1> 
    64                              <1> 
    65                              <1> 
    66                              <1> 
    67                              <1> 
    68                              <1> 
    69                              <1> 
    70                              <1> 
    71                              <1> 
    72                              <1> ;|----------------------|
    73                              <1> ;|	100000 ~ END	|
    74                              <1> ;|	   KERNEL	|
    75                              <1> ;|----------------------|
    76                              <1> ;|	E0000 ~ 100000	|
    77                              <1> ;| Extended System BIOS |
    78                              <1> ;|----------------------|
    79                              <1> ;|	C0000 ~ Dffff	|
    80                              <1> ;|     Expansion Area   |
    81                              <1> ;|----------------------|
    82                              <1> ;|	A0000 ~ bffff	|
    83                              <1> ;|   Legacy Video Area  |
    84                              <1> ;|----------------------|
    85                              <1> ;|	9F000 ~ A0000	|
    86                              <1> ;|	 BIOS reserve	|
    87                              <1> ;|----------------------|
    88                              <1> ;|	90000 ~ 9F000	|
    89                              <1> ;|	 kernel tmpbuf	|
    90                              <1> ;|----------------------|
    91                              <1> ;|	10000 ~ 90000	|
    92                              <1> ;|	   LOADER	|
    93                              <1> ;|----------------------|
    94                              <1> ;|	8000 ~ 10000	|
    95                              <1> ;|	  VBE info	|
    96                              <1> ;|----------------------|
    97                              <1> ;|	7E00 ~ 8000	|
    98                              <1> ;|	  mem info	|
    99                              <1> ;|----------------------|
   100                              <1> ;|	7C00 ~ 7E00	|
   101                              <1> ;|	 MBR (BOOT)	|
   102                              <1> ;|----------------------|
   103                              <1> ;|	0000 ~ 7C00	|
   104                              <1> ;|	 BIOS Code	|
   105                              <1> ;|----------------------|
   106                              <1> 
   107                              <1> 
   108                              <1> 
   109                              <1> 
   110                              <1> 
   111                              <1> 
   112                              <1> 
   113                              <1> 
   114                              <1> 
   115                              <1> 
   116                              <1> ;______________________________________________
   117                              <1> ; ----------------Vbe Info Block------------
   118                              <1> ; typedef struct {
   119                              <1> ;     unsigned char       vbe_signature;
   120                              <1> ;     unsigned short      vbe_version;
   121                              <1> ;     unsigned long       oem_string_ptr;
   122                              <1> ;     unsigned char       capabilities;
   123                              <1> ;     unsigned long       video_mode_ptr;
   124                              <1> ;     unsigned short      total_memory;
   125                              <1> ;     unsigned short      oem_software_rev;
   126                              <1> ;     unsigned long       oem_vendor_name_ptr;
   127                              <1> ;     unsigned long       oem_product_name_ptr;
   128                              <1> ;     unsigned long       oem_product_rev_ptr;
   129                              <1> ;     unsigned char       reserved[222];
   130                              <1> ;     unsigned char       oem_data[256];  
   131                              <1> ; } VbeInfoBlock;
   132                              <1> ;______________________________________________
   133                              <1> 
   134                              <1> 
   135                              <1> BaseOfKernelFile	equ	0x00
   136                              <1> OffsetOfKernelFile	equ	0x100000
   137                              <1> BaseTmpOfKernelAddr	equ	0x9000
   138                              <1> OffsetTmpOfKernelFile	equ	0x0000
   139                              <1> VBEStructBufferAddr	equ	0x8000
   140                              <1> VBEModeStructBufferAddr	equ	0x8200
   141                              <1> MemoryStructBufferAddr	equ	0x8800
   142                              <1> 
   143                              <1> KernelCodeSelector      equ 0x08
   144                              <1> KernelDataSelector      equ 0x10
   145                              <1> UserCodeSelector      equ 0x18
   146                              <1> UserDataSelector      equ 0x20
   147                              <1> 
   148                              <1> KernelSpaceUpperAddress equ 0xFFFF800000000000
   149                              <1> 
   150                              <1> GDTPointerUpperAddr equ 0xFFFF800000104000
   151                              <1> IDTPointerUpperAddr equ 0xFFFF80000010400a
   152                              <1> TSSPointerUpperAddr equ 0xFFFF800000104014
   153                              <1> 
   154                              <1> VideoFrameBufferAddress equ 0xFFFF800003000000
   155                              <1> KernelStartSectorNum	equ	16
   156                              <1> 
   157                              <1> 
   158                              <1> 
   159                              <1> 
   160                              <1> MasterSectorReadNumPort    equ	0x1F2
   161                              <1> MasterSectorReadPort    equ	0x1F0
   162                              <1> 
   163                              <1> SlaveReadNumPort    equ	0x172
   164                              <1> SlaveSectorReadPort    equ	0x170
   165                              <1> 
   166                              <1> SectorReadNumPort    equ	MasterSectorReadNumPort
   167                              <1> SectorReadPort    equ	MasterSectorReadPort
   168                              <1> 
   169                              <1> struc vbe_info_block
   170 00000000 ????????            <1>     .signature                 resb 4    ; 'VESA' signature (must be "VESA")
   171 00000004 ????                <1>     .version                   resw 1    ; VBE version (e.g., 0x0300 for VBE 3.0)
   172 00000006 ????????            <1>     .oem_string_ptr            resd 1    ; Pointer to OEM string
   173 0000000A ????????            <1>     .capabilities              resd 1    ; Capabilities of the video card
   174 0000000E ????????            <1>     .video_mode_ptr            resd 1    ; Pointer to supported video modes
   175 00000012 ????                <1>     .total_memory              resw 1    ; Total memory in 64KB blocks
   176                              <1> 
   177                              <1>     ; VBE 2.0+ fields
   178 00000014 ????                <1>     .oem_software_rev          resw 1    ; OEM software revision
   179 00000016 ????????            <1>     .oem_vendor_name_ptr       resd 1    ; Pointer to OEM vendor name string
   180 0000001A ????????            <1>     .oem_product_name_ptr      resd 1    ; Pointer to OEM product name string
   181 0000001E ????????            <1>     .oem_product_rev_ptr       resd 1    ; Pointer to OEM product revision string
   182 00000022 <res DEh>           <1>     .reserved                  resb 222  ; Reserved for VBE implementation
   183 00000100 <res 100h>          <1>     .oem_data                  resb 256  ; Data area for OEM-specific information
   184                              <1> endstruc
   185                              <1> 
   186                              <1> struc vbe_mode_info_block
   187 00000000 ????                <1>     .attributes                resw 1    ; Mode attributes
   188 00000002 ??                  <1>     .winA_attributes           resb 1    ; Window A attributes
   189 00000003 ??                  <1>     .winB_attributes           resb 1    ; Window B attributes
   190 00000004 ????                <1>     .win_granularity           resw 1    ; Window granularity in KB
   191 00000006 ????                <1>     .win_size                  resw 1    ; Window size in KB
   192 00000008 ????                <1>     .winA_segment              resw 1    ; Window A segment
   193 0000000A ????                <1>     .winB_segment              resw 1    ; Window B segment
   194 0000000C ????????            <1>     .win_func_ptr              resd 1    ; Pointer to window function
   195 00000010 ????                <1>     .bytes_per_scanline        resw 1    ; Bytes per scanline
   196                              <1> 
   197                              <1>     ; VBE 1.2+ fields
   198 00000012 ????                <1>     .x_resolution              resw 1    ; Horizontal resolution in pixels
   199 00000014 ????                <1>     .y_resolution              resw 1    ; Vertical resolution in pixels
   200 00000016 ??                  <1>     .x_char_size               resb 1    ; Character cell width in pixels
   201 00000017 ??                  <1>     .y_char_size               resb 1    ; Character cell height in pixels
   202 00000018 ??                  <1>     .number_of_planes          resb 1    ; Number of memory planes
   203 00000019 ??                  <1>     .bits_per_pixel            resb 1    ; Bits per pixel
   204 0000001A ??                  <1>     .number_of_banks           resb 1    ; Number of banks
   205 0000001B ??                  <1>     .memory_model              resb 1    ; Memory model type
   206 0000001C ??                  <1>     .bank_size                 resb 1    ; Bank size in KB
   207 0000001D ??                  <1>     .number_of_image_pages     resb 1    ; Number of images
   208 0000001E ??                  <1>     .reserved1                 resb 1    ; Reserved
   209                              <1> 
   210                              <1>     ; Direct Color fields (VBE 1.2+)
   211 0000001F ??                  <1>     .red_mask_size             resb 1    ; Size of direct color red mask
   212 00000020 ??                  <1>     .red_field_position        resb 1    ; Bit position of red mask
   213 00000021 ??                  <1>     .green_mask_size           resb 1    ; Size of direct color green mask
   214 00000022 ??                  <1>     .green_field_position      resb 1    ; Bit position of green mask
   215 00000023 ??                  <1>     .blue_mask_size            resb 1    ; Size of direct color blue mask
   216 00000024 ??                  <1>     .blue_field_position       resb 1    ; Bit position of blue mask
   217 00000025 ??                  <1>     .reserved_mask_size        resb 1    ; Size of direct color reserved mask
   218 00000026 ??                  <1>     .reserved_field_position   resb 1    ; Bit position of reserved mask
   219 00000027 ??                  <1>     .direct_color_mode_info    resb 1    ; Direct color mode attributes
   220                              <1> 
   221                              <1>     ; VBE 2.0+ fields
   222 00000028 ????????            <1>     .phys_base_ptr             resd 1    ; Physical address for flat memory frame buffer
   223 0000002C ????????            <1>     .reserved2                 resd 1    ; Reserved
   224 00000030 ????                <1>     .reserved3                 resw 1    ; Reserved
   225                              <1> 
   226                              <1>     ; VBE 3.0+ fields
   227 00000032 ????                <1>     .lin_bytes_per_scanline    resw 1    ; Bytes per scanline for linear modes
   228 00000034 ??                  <1>     .bnk_number_of_image_pages resb 1    ; Number of images for banked modes
   229 00000035 ??                  <1>     .lin_number_of_image_pages resb 1    ; Number of images for linear modes
   230 00000036 ??                  <1>     .lin_red_mask_size         resb 1    ; Size of direct color red mask (linear modes)
   231 00000037 ??                  <1>     .lin_red_field_position    resb 1    ; Bit position of red mask (linear modes)
   232 00000038 ??                  <1>     .lin_green_mask_size       resb 1    ; Size of direct color green mask (linear modes)
   233 00000039 ??                  <1>     .lin_green_field_position  resb 1    ; Bit position of green mask (linear modes)
   234 0000003A ??                  <1>     .lin_blue_mask_size        resb 1    ; Size of direct color blue mask (linear modes)
   235 0000003B ??                  <1>     .lin_blue_field_position   resb 1    ; Bit position of blue mask (linear modes)
   236 0000003C ??                  <1>     .lin_reserved_mask_size    resb 1    ; Size of direct color reserved mask (linear modes)
   237 0000003D ??                  <1>     .lin_reserved_field_position resb 1  ; Bit position of reserved mask (linear modes)
   238 0000003E ????????            <1>     .max_pixel_clock           resd 1    ; Maximum pixel clock (Hz)
   239 00000042 <res BEh>           <1>     .reserved4                 resb 190  ; Reserved for future expansion
   240                              <1> endstruc
   241                              <1> 
   242                              <1> struc e820_memory_entry
   243 00000000 ????????            <1>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   244 00000004 ????????            <1>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   245 00000008 ????????            <1>     .length_low               resd 1    ; Lower 32 bits of the length
   246 0000000C ????????            <1>     .length_high              resd 1    ; Upper 32 bits of the length
   247 00000010 ????????            <1>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   248                              <1>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   249                              <1> endstruc
   250                              <1> 
   251                              <1> %endif
     2                                  %include "../kernel/stddef.asm"
     1                              <1> %ifndef STDDEF_ASM
     2                              <1> %define STDDEF_ASM
     3                              <1> 
     4                              <1> ;-----------Data Type Standard------------;
     5                              <1> %define USE_DT_STANDARD
     6                              <1> %ifdef USE_DT_STANDARD
     7                              <1> ;     %macro gbyte 1 ; 参数1：变量名, 参数2：初始值(1字节)
     8                              <1> ;         %1: db %2
     9                              <1> ;         %endmacro
    10                              <1> 
    11                              <1> ;     %macro g2byte 1 ; 参数1：变量名, 参数2：初始值(4字节)
    12                              <1> ;         %1: dw %2
    13                              <1> ;         %endmacro
    14                              <1> 
    15                              <1> ;     %macro g4byte 1 ; 参数1：变量名, 参数2：初始值(4字节)
    16                              <1> ;         %1: dd %2
    17                              <1> ;         %endmacro
    18                              <1> 
    19                              <1> ;     %macro g8byte 1 ; 参数1：变量名, 参数2：初始值(8字节)
    20                              <1> ;         %1: dq %2
    21                              <1> ;         %endmacro
    22                              <1> 
    23                              <1> ; %define UNIQUE_ID_IMPL(name, line) name %+ _ %+ line
    24                              <1> ; %define UNIQUE_ID(name) UNIQUE_ID_IMPL(name, __LINE__)
    25                              <1> ;     ; %macro lvar 1
    26                              <1> ;     ;     %define %1 qword [rbp - 112-(__local_offset + 8)]
    27                              <1> 
    28                              <1> ;     ;     %assign __local_offset  __local_offset + 8
    29                              <1> 
    30                              <1> ;     ;     sub rsp, 8
    31                              <1> ;     ;     %endmacro
    32                              <1> 
    33                              <1> ;     ; 初始化局部变量追踪
    34                              <1> ;     %macro LOCAL_BEGIN 0
    35                              <1> ;         %push local_ctx              ; 创建新的局部上下文
    36                              <1> ;         %assign %$local_offset 0     ; 初始化局部偏移计数器
    37                              <1> ;     %endmacro
    38                              <1> 
    39                              <1> 
    40                              <1> ;     %macro lvar 1
    41                              <1> ;         %assign %$local_offset %$local_offset+8
    42                              <1> ;         %define %$var_%1 %$local_offset
    43                              <1> ;         %define %1  qword[rbp-%$var_%1]
    44                              <1> ;         sub rsp,8
    45                              <1> ;     %endmacro
    46                              <1> 
    47                              <1>     ; %macro lstr 2
    48                              <1>     ;     %ifstr %2
    49                              <1>     ;         %strlen len %2
    50                              <1>     ;         %assign %$local_offset %$local_offset+len+1   ; 累加偏移
    51                              <1>     ;         %define %$str_%1 %$local_offset               ; 定义变量偏移
    52                              <1>     ;         %define %1  [rbp - %$str_%1]
    53                              <1>     ;         %define %1.size len+1
    54                              <1>     ;         sub rsp,%1.size
    55                              <1>     ;     %endif
    56                              <1>     ;         mov rcx, %3
    57                              <1>     ;         mov rdi, ebp
    58                              <1>     ;         add rdi, %$var_%1
    59                              <1>     ;         lea rsi, [%2]
    60                              <1>     ;         rep movsb
    61                              <1>     ; %endmacro
    62                              <1> 
    63                              <1>     ; %macro lstr_copy 2-3
    64                              <1>     ;     %ifctx local_ctx
    65                              <1>     ;         %if %0 == 3
    66                              <1>     ;             ; 带长度的字符串复制
    67                              <1>     ;             mov ecx, %3
    68                              <1>     ;             mov edi, ebp
    69                              <1>     ;             add edi, %$var_%1
    70                              <1>     ;             lea esi, [%2]
    71                              <1>     ;             rep movsb
    72                              <1>     ;         %else
    73                              <1>     ;             ; 以null结尾的字符串复制
    74                              <1>     ;             mov edi, ebp
    75                              <1>     ;             add edi, %$var_%1
    76                              <1>     ;             lea esi, [%2]
    77                              <1>     ;             %%copy_loop:
    78                              <1>     ;             lodsb
    79                              <1>     ;             stosb
    80                              <1>     ;             test al, al
    81                              <1>     ;             jnz %%copy_loop
    82                              <1>     ;         %endif
    83                              <1>     ;     %else
    84                              <1>     ;         %error "STR_COPY used outside local_ctx block"
    85                              <1>     ;     %endif
    86                              <1>     ; %endmacro
    87                              <1> 
    88                              <1>     ; %macro lstruct 1
    89                              <1>     ;     %assign %$local_offset %$local_offset+8   ; 累加偏移
    90                              <1>     ;     %define %$struct_%1 %$local_offset               ; 定义变量偏移
    91                              <1>     ;     %define %1  rbp - %$struct_%1
    92                              <1>     ;     %define %1.size 5
    93                              <1>     ;     sub rsp,%1.size
    94                              <1>     ; %endmacro
    95                              <1> 
    96                              <1>     ; ; 分配栈空间并保存寄存器
    97                              <1>     ; %macro lalloc 0
    98                              <1>     ;     %if %$local_offset > 0
    99                              <1>     ;         ; 16字节对齐
   100                              <1>     ;         %assign pad (16 - (%$local_offset % 16))
   101                              <1>     ;         %if pad < 16
   102                              <1>     ;             %assign %$local_offset %$local_offset + pad
   103                              <1>     ;         %endif
   104                              <1>     ;         sub rsp, %$local_offset
   105                              <1>     ;     %endif
   106                              <1>     ; %endmacro
   107                              <1> 
   108                              <1> 
   109                              <1>     ; ; 获取局部变量的访问表达式
   110                              <1>     ; %macro locvar 1-*
   111                              <1>     ;     ; [rbp - %$var_%1 ]
   112                              <1> 
   113                              <1>     ;     %ifctx local_ctx
   114                              <1>     ;         ; %ifidn %2, ""
   115                              <1>     ;             qword [rbp - %$var_%1]
   116                              <1>     ;         ; %else
   117                              <1>     ;         ;     [rbp - %$var_%1 - %2]
   118                              <1>     ;         ; %endif
   119                              <1>     ;     %endif
   120                              <1>     ; %endmacro
   121                              <1> 
   122                              <1>     ;     %macro locvar 1-2
   123                              <1>     ;     ; [rbp - %$var_%1 ]
   124                              <1> 
   125                              <1>     ;     %ifctx local_ctx
   126                              <1>     ;         %ifidn %2, ""
   127                              <1>     ;             [rbp - %$var_%1]
   128                              <1>     ;         %else
   129                              <1>     ;             [rbp - %$var_%1 - %2]
   130                              <1>     ;         %endif
   131                              <1>     ;     %endif
   132                              <1>     ; %endmacro
   133                              <1> 
   134                              <1> 
   135                              <1> %endif
   136                              <1> 
   137                              <1> ;-----------Calling Conventions Standard------------;
   138                              <1> %define USE_CC_STANDARD
   139                              <1> %ifdef USE_CC_STANDARD
   140                              <1> 
   141                              <1>     ;caller maintain the stack balance 
   142                              <1>         ; debug_times: db 0
   143                              <1>         ; cmp byte [rel debug_times],3
   144                              <1>         ; je debug_stop
   145                              <1>         ; add byte [rel debug_times],1
   146                              <1>     ; -------------------------------
   147                              <1>     ; 栈帧结构定义
   148                              <1>     ; -------------------------------
   149                              <1>     ; 调用后的栈布局:
   150                              <1>     ; [rsp+0x00] 返回地址 (8字节)
   151                              <1>     ; [rsp+0x08] 旧RBP     (8字节) <- rbp指向这里
   152                              <1>     ; [rsp+0x10] 参数1     (8字节)
   153                              <1>     ; [rsp+0x18] 参数2
   154                              <1>     ; ...
   155                              <1>     ; [rsp+X]    局部变量区
   156                              <1>     ; -------------------------------
   157                              <1> 
   158                              <1>     %define PARAM_OFFSET   16      ; 第一个参数的偏移量(返回地址8 + 旧RBP8)
   159                              <1>     %macro function 1-* ; 1=函数名, 2=返回参数数量, 3=参数列表
   160                              <1>         %assign param_count %0 - 2 ; 参数数量
   161                              <1>         
   162                              <1>         %if param_count < 0
   163                              <1>             %assign param_count 0 ; 如果没有参数，设置为 0
   164                              <1>         %endif
   165                              <1>         %if param_count < 1
   166                              <1>             %assign ret_param_count 0 ; 返回参数数量
   167                              <1>         %else
   168                              <1>             %assign ret_param_count %2 ; 返回参数数量
   169                              <1>         %endif
   170                              <1> 
   171                              <1>         ; 准备调用
   172                              <1>         prepare_call param_count, ret_param_count
   173                              <1> 
   174                              <1>         ; 如果有参数，将参数压入栈
   175                              <1>         %if param_count > 0
   176                              <1>             %assign i 0
   177                              <1>             ; mov [rsp-8], rax ; 保存返回地址
   178                              <1>             %rep param_count
   179                              <1>                 %rotate 1
   180                              <1>                 ; mov rax, %2
   181                              <1>                 ; mov [rsp + 8*i],qword %2 ; 将参数压入栈
   182                              <1>                 push qword %2
   183                              <1>                 pop qword [rsp + 8*i]
   184                              <1>                 %assign i i+1
   185                              <1>             %endrep
   186                              <1>             %rotate 1
   187                              <1>             %rotate 1
   188                              <1>             ; mov rax,[rsp-8]; 保存返回地址
   189                              <1>         %endif
   190                              <1> 
   191                              <1>         ; 调用函数
   192                              <1>         call %1
   193                              <1> 
   194                              <1>         ; 清理栈空间
   195                              <1>         cleanup_call param_count, ret_param_count
   196                              <1> 
   197                              <1>     %endmacro
   198                              <1> 
   199                              <1>     %macro align_stack_16 0
   200                              <1>         test rsp, 0xF
   201                              <1>         jz %%skip_align
   202                              <1>         sub rsp,8
   203                              <1>         %%skip_align:
   204                              <1>     %endmacro
   205                              <1> 
   206                              <1>     ; %macro prologue 0;local var size(bytes)
   207                              <1>     ;     push rbp
   208                              <1>     ;     mov rbp, rsp
   209                              <1> 
   210                              <1> 
   211                              <1>     ;     pushallq
   212                              <1>     ;     LOCAL_BEGIN
   213                              <1>         
   214                              <1> 
   215                              <1>     ;     ; 调试信息可以放在这里
   216                              <1>     ;     ; %ifdef DEBUG
   217                              <1>     ;     ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
   218                              <1>     ;     ; %endif
   219                              <1>     ; %endmacro
   220                              <1>     ; %macro epilogue 0
   221                              <1>     ;     %pop
   222                              <1>     ;     mov rax, rbp
   223                              <1>     ;     sub rax, 8*14
   224                              <1>     ;     mov rsp, rax
   225                              <1> 
   226                              <1>     ;     popallq
   227                              <1> 
   228                              <1>     ;     mov rsp, rbp
   229                              <1>     ;     pop rbp
   230                              <1>     ;     ret
   231                              <1>     ; %endmacro
   232                              <1> 
   233                              <1>     %macro prolog 1;local var size(bytes)
   234                              <1>         push rbp
   235                              <1>         mov rbp, rsp
   236                              <1> 
   237                              <1> 
   238                              <1>         mov [rbp-8],rax
   239                              <1>         mov rax, %1
   240                              <1>         add rax, 15
   241                              <1>         and rax, ~15
   242                              <1>         sub rsp, rax
   243                              <1>         mov rax,[rbp-8]
   244                              <1> 
   245                              <1>         pushallq
   246                              <1>         
   247                              <1>         ; 调试信息可以放在这里
   248                              <1>         ; %ifdef DEBUG
   249                              <1>         ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
   250                              <1>         ; %endif
   251                              <1>     %endmacro
   252                              <1> 
   253                              <1>     %macro epilog 0
   254                              <1>         popallq
   255                              <1> 
   256                              <1>         mov rsp, rbp
   257                              <1>         pop rbp
   258                              <1>         ret
   259                              <1>     %endmacro
   260                              <1> 
   261                              <1>     %macro get_param 2;1=register, 2=param index(from 1)
   262                              <1>         mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   263                              <1>     %endmacro
   264                              <1> 
   265                              <1>     %macro set_ret_param 2;1=register, 2=param index(from 1)
   266                              <1>         mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   267                              <1>     %endmacro
   268                              <1> 
   269                              <1>     %macro prepare_call 2;1=param count, 2=return param count
   270                              <1>         %assign total_space ((%1 + %2) * 8)
   271                              <1>         
   272                              <1>         %if (total_space % 16) != 0
   273                              <1>             %assign total_space total_space + 8  ; 添加填充
   274                              <1>         %endif
   275                              <1>         
   276                              <1>         sub rsp, total_space
   277                              <1>     %endmacro
   278                              <1> 
   279                              <1>     %macro cleanup_call 2;1=param count, 2=return param count
   280                              <1>         %assign total_space ((%1 + %2) * 8)
   281                              <1>         %if (total_space % 16) != 0
   282                              <1>             %assign total_space total_space + 8
   283                              <1>         %endif
   284                              <1>         add rsp, total_space
   285                              <1>     %endmacro
   286                              <1> 
   287                              <1>     %macro pushallq 0
   288                              <1>         push rax
   289                              <1>         push rbx
   290                              <1>         push rcx
   291                              <1>         push rdx
   292                              <1>         push rsi
   293                              <1>         push rdi
   294                              <1>         push r8
   295                              <1>         push r9
   296                              <1>         push r10
   297                              <1>         push r11
   298                              <1>         push r12
   299                              <1>         push r13
   300                              <1>         push r14
   301                              <1>         push r15
   302                              <1>     %endmacro
   303                              <1> 
   304                              <1>     %macro popallq 0
   305                              <1>         pop r15
   306                              <1>         pop r14
   307                              <1>         pop r13
   308                              <1>         pop r12
   309                              <1>         pop r11
   310                              <1>         pop r10
   311                              <1>         pop r9
   312                              <1>         pop r8
   313                              <1>         pop rdi
   314                              <1>         pop rsi
   315                              <1>         pop rdx
   316                              <1>         pop rcx
   317                              <1>         pop rbx
   318                              <1>         pop rax
   319                              <1>     %endmacro
   320                              <1> 
   321                              <1>     %endif
   322                              <1> ;---------------------ABI Standard------------------;
   323                              <1> %define USE_ABI_STANDARD
   324                              <1> %ifdef USE_ABI_STANDARD
   325                              <1> 
   326                              <1> 
   327                              <1>     %define ABI_File_None   0       ; 无文件类型
   328                              <1>     %define ABI_File_REL    1       ; 可重定位文件
   329                              <1>     %define ABI_File_EXEC   2       ; 可执行文件
   330                              <1>     %define ABI_File_DYN    3       ; 共享目标文件
   331                              <1>     %define ABI_File_CORE   4       ; 核心文件
   332                              <1> 
   333                              <1>     %define Section_Type_NULL    0      ; 未使用
   334                              <1>     %define Section_Type_LOAD    1      ; 可加载段
   335                              <1>     %define Section_Type_DYNAMIC 2      ; 动态链接信息
   336                              <1>     %define Section_Type_INTERP  3      ; 解释器路径
   337                              <1>     %define Section_Type_NOTE    4      ; 辅助信息
   338                              <1>     %define Section_Type_SHLIB   5      ; 保留
   339                              <1> 
   340                              <1>     %macro ABI_HEADER 4 ;1=File Type, 2=Entry Point Address, 3=Section Header Offset, 4=Section Header Count
   341                              <1>         db 0xA5, 'A', 'B', 'I'     ; ABI Magic Number
   342                              <1>         db 1                       ; Encode Type
   343                              <1>         db 1                       ; ABI Version
   344                              <1> 
   345                              <1>         dw %1                      ; ABI File Type
   346                              <1>         dq %2                      ; Entry Point Address
   347                              <1>         dw 32                      ; ABI Headers Size
   348                              <1> 
   349                              <1>         dq %3                      ; Section Header Offset
   350                              <1>         dw 32                      ; Section Header Size
   351                              <1>         dw %4                      ; Section Header Count
   352                              <1>         dw 0                       ; Symble Table Entry Size
   353                              <1>     %endmacro
   354                              <1>     STRUC struct_ABI_HEADER
   355 00000000 ????????            <1>         .magic:         resb 4    ; ABI Magic Number (4 bytes)
   356 00000004 ??                  <1>         .encode_type:   resb 1    ; Encode Type (1 byte)
   357 00000005 ??                  <1>         .abi_version:   resb 1    ; ABI Version (1 byte)
   358 00000006 ????                <1>         .file_type:     resw 1    ; ABI File Type (2 bytes)
   359 00000008 ????????????????    <1>         .entry_point:   resq 1    ; Entry Point Address (8 bytes)
   360 00000010 ????                <1>         .header_size:   resw 1    ; ABI Headers Size (2 bytes)
   361 00000012 ????????????????    <1>         .section_offset: resq 1   ; Section Header Offset (8 bytes)
   362 0000001A ????                <1>         .section_size:  resw 1    ; Section Header Size (2 bytes)
   363 0000001C ????                <1>         .section_count: resw 1    ; Section Header Count (2 bytes)
   364 0000001E ????                <1>         .sym_table_size: resw 1   ; Symbol Table Entry Size (2 bytes)
   365                              <1>     ENDSTRUC
   366                              <1> 
   367                              <1>     %macro SECTION_HEADER 4 ;1=Section Type, 2=Virtual Address, 3=Section Offset, 4=Section Size
   368                              <1>         dq %1                  ; Section Type
   369                              <1>         dq %2                  ; Virtual Address
   370                              <1>         dq %3                  ; Section Offset
   371                              <1>         dq %4                  ; Section Size
   372                              <1>     %endmacro
   373                              <1>     STRUC struct_SECTION_HEADER
   374 00000000 ????????????????    <1>         .type:      resq 1    ; Section Type (8 bytes)
   375 00000008 ????????????????    <1>         .vaddr:     resq 1    ; Virtual Address (8 bytes)
   376 00000010 ????????????????    <1>         .offset:    resq 1    ; Section Offset (8 bytes)
   377 00000018 ????????????????    <1>         .size:      resq 1    ; Section Size (8 bytes)
   378                              <1>     ENDSTRUC
   379                              <1>     %endif
   380                              <1> 
   381                              <1> %endif
     3                                  [BITS 64]          ; 0xFFFF800000106200
     4                                  ehdr:
     5                                      ABI_HEADER ABI_File_CORE, kernel_start, shdr,1
   341 00000000 A5414249            <1>  db 0xA5, 'A', 'B', 'I'
   342 00000004 01                  <1>  db 1
   343 00000005 01                  <1>  db 1
   344                              <1> 
   345 00000006 0400                <1>  dw %1
   346 00000008 [4000000000000000]  <1>  dq %2
   347 00000010 2000                <1>  dw 32
   348                              <1> 
   349 00000012 [2000000000000000]  <1>  dq %3
   350 0000001A 2000                <1>  dw 32
   351 0000001C 0100                <1>  dw %4
   352 0000001E 0000                <1>  dw 0
     6                                  shdr:
     7                                      SECTION_HEADER Section_Type_LOAD, 0, kernel_start,section_end-section_start
   368 00000020 0100000000000000    <1>  dq %1
   369 00000028 0000000000000000    <1>  dq %2
   370 00000030 [4000000000000000]  <1>  dq %3
   371 00000038 C0FF000000000000    <1>  dq %4
     8                                  section_start:
     9                                  kernel_start:
    10                                  
    11 00000040 488D051B370000              lea rax, [rel kernel_end]
    12                                      function system_init,1,rax
   160                              <1>  %assign param_count %0 - 2
   161                              <1> 
   162                              <1>  %if param_count < 0
   163                              <1>  %assign param_count 0
   164                              <1>  %endif
   165                              <1>  %if param_count < 1
   166                              <1>  %assign ret_param_count 0
   167                              <1>  %else
   168                              <1>  %assign ret_param_count %2
   169                              <1>  %endif
   170                              <1> 
   171                              <1> 
   172                              <1>  prepare_call param_count, ret_param_count
   270                              <2>  %assign total_space ((%1 + %2) * 8)
   271                              <2> 
   272                              <2>  %if (total_space % 16) != 0
   273                              <2>  %assign total_space total_space + 8
   274                              <2>  %endif
   275                              <2> 
   276 00000047 4883EC10            <2>  sub rsp, total_space
   173                              <1> 
   174                              <1> 
   175                              <1>  %if param_count > 0
   176                              <1>  %assign i 0
   177                              <1> 
   178                              <1>  %rep param_count
   179                              <1>  %rotate 1
   180                              <1> 
   181                              <1> 
   182                              <1>  push qword %2
   183                              <1>  pop qword [rsp + 8*i]
   184                              <1>  %assign i i+1
   185                              <1>  %endrep
   179                              <2>  %rotate 1
   180                              <2> 
   181                              <2> 
   182 0000004B 50                  <2>  push qword %2
   183 0000004C 8F0424              <2>  pop qword [rsp + 8*i]
   184                              <2>  %assign i i+1
   186                              <1>  %rotate 1
   187                              <1>  %rotate 1
   188                              <1> 
   189                              <1>  %endif
   190                              <1> 
   191                              <1> 
   192 0000004F E8662E0000          <1>  call %1
   193                              <1> 
   194                              <1> 
   195                              <1>  cleanup_call param_count, ret_param_count
   280                              <2>  %assign total_space ((%1 + %2) * 8)
   281                              <2>  %if (total_space % 16) != 0
   282                              <2>  %assign total_space total_space + 8
   283                              <2>  %endif
   284 00000054 4883C410            <2>  add rsp, total_space
   196                              <1> 
    13                                  
    14                                  
    15                                      function test_std,1,0
   160                              <1>  %assign param_count %0 - 2
   161                              <1> 
   162                              <1>  %if param_count < 0
   163                              <1>  %assign param_count 0
   164                              <1>  %endif
   165                              <1>  %if param_count < 1
   166                              <1>  %assign ret_param_count 0
   167                              <1>  %else
   168                              <1>  %assign ret_param_count %2
   169                              <1>  %endif
   170                              <1> 
   171                              <1> 
   172                              <1>  prepare_call param_count, ret_param_count
   270                              <2>  %assign total_space ((%1 + %2) * 8)
   271                              <2> 
   272                              <2>  %if (total_space % 16) != 0
   273                              <2>  %assign total_space total_space + 8
   274                              <2>  %endif
   275                              <2> 
   276 00000058 4883EC10            <2>  sub rsp, total_space
   173                              <1> 
   174                              <1> 
   175                              <1>  %if param_count > 0
   176                              <1>  %assign i 0
   177                              <1> 
   178                              <1>  %rep param_count
   179                              <1>  %rotate 1
   180                              <1> 
   181                              <1> 
   182                              <1>  push qword %2
   183                              <1>  pop qword [rsp + 8*i]
   184                              <1>  %assign i i+1
   185                              <1>  %endrep
   179                              <2>  %rotate 1
   180                              <2> 
   181                              <2> 
   182 0000005C 6A00                <2>  push qword %2
   183 0000005E 8F0424              <2>  pop qword [rsp + 8*i]
   184                              <2>  %assign i i+1
   186                              <1>  %rotate 1
   187                              <1>  %rotate 1
   188                              <1> 
   189                              <1>  %endif
   190                              <1> 
   191                              <1> 
   192 00000061 E814000000          <1>  call %1
   193                              <1> 
   194                              <1> 
   195                              <1>  cleanup_call param_count, ret_param_count
   280                              <2>  %assign total_space ((%1 + %2) * 8)
   281                              <2>  %if (total_space % 16) != 0
   282                              <2>  %assign total_space total_space + 8
   283                              <2>  %endif
   284 00000066 4883C410            <2>  add rsp, total_space
   196                              <1> 
    16 0000006A 488B5C24F8                  mov rbx,[rsp-8]
    17 0000006F 4C8B0424                    mov r8,[rsp]
    18 00000073 B899990000                  mov rax,0x9999
    19                                  
    20                                      .endofkernel:
    21 00000078 EBFE                            jmp $
    22                                  
    23                                  test_std:;
    24                                      prolog 2
   234 0000007A 55                  <1>  push rbp
   235 0000007B 4889E5              <1>  mov rbp, rsp
   236                              <1> 
   237                              <1> 
   238 0000007E 488945F8            <1>  mov [rbp-8],rax
   239 00000082 B802000000          <1>  mov rax, %1
   240 00000087 4883C00F            <1>  add rax, 15
   241 0000008B 4883E0F0            <1>  and rax, ~15
   242 0000008F 4829C4              <1>  sub rsp, rax
   243 00000092 488B45F8            <1>  mov rax,[rbp-8]
   244                              <1> 
   245                              <1>  pushallq
   288 00000096 50                  <2>  push rax
   289 00000097 53                  <2>  push rbx
   290 00000098 51                  <2>  push rcx
   291 00000099 52                  <2>  push rdx
   292 0000009A 56                  <2>  push rsi
   293 0000009B 57                  <2>  push rdi
   294 0000009C 4150                <2>  push r8
   295 0000009E 4151                <2>  push r9
   296 000000A0 4152                <2>  push r10
   297 000000A2 4153                <2>  push r11
   298 000000A4 4154                <2>  push r12
   299 000000A6 4155                <2>  push r13
   300 000000A8 4156                <2>  push r14
   301 000000AA 4157                <2>  push r15
   246                              <1> 
   247                              <1> 
   248                              <1> 
   249                              <1> 
   250                              <1> 
    25                                      get_param rdi, 1   ; x
   262 000000AC 488B7D10            <1>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    26                                  
    27 000000B0 B999000000                  mov rcx,0x99
    28 000000B5 BA88000000                  mov rdx,0x88
    29                                  
    30 000000BA B811000000                  mov rax,0x11
    31                                      ; lalloc
    32                                      
    33                                      set_ret_param rax,2
   266 000000BF 48894518            <1>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
    34                                      ; jmp $
    35                                      epilog
   254                              <1>  popallq
   305 000000C3 415F                <2>  pop r15
   306 000000C5 415E                <2>  pop r14
   307 000000C7 415D                <2>  pop r13
   308 000000C9 415C                <2>  pop r12
   309 000000CB 415B                <2>  pop r11
   310 000000CD 415A                <2>  pop r10
   311 000000CF 4159                <2>  pop r9
   312 000000D1 4158                <2>  pop r8
   313 000000D3 5F                  <2>  pop rdi
   314 000000D4 5E                  <2>  pop rsi
   315 000000D5 5A                  <2>  pop rdx
   316 000000D6 59                  <2>  pop rcx
   317 000000D7 5B                  <2>  pop rbx
   318 000000D8 58                  <2>  pop rax
   255                              <1> 
   256 000000D9 4889EC              <1>  mov rsp, rbp
   257 000000DC 5D                  <1>  pop rbp
   258 000000DD C3                  <1>  ret
    36                                  
    37                                  %include "../kernel/init.asm"
     1                              <1> %ifndef INIT_ASM
     2                              <1> %define INIT_ASM
     3                              <1> 
     4                              <1> %include "../bootloader/global_def.asm"
     1                              <2> %ifndef GLOBAL_DEF_ASM
     2                              <2> %define GLOBAL_DEF_ASM
     3                              <2> %define PLATFORM_QEMU_X64 1
     4                              <2> %define PLATFORM_X64 2
     5                              <2> %define DEBUG_PLATFORM PLATFORM_QEMU_X64
     6                              <2> %define DEBUG_MODE 1
     7                              <2> 
     8                              <2> 
     9                              <2> ;|----------------------|
    10                              <2> ;|	100000 ~ END	|
    11                              <2> ;|	   KERNEL	|
    12                              <2> ;|----------------------|
    13                              <2> ;|	E0000 ~ 100000	|
    14                              <2> ;| Extended System BIOS |
    15                              <2> ;|----------------------|
    16                              <2> ;|	C0000 ~ Dffff	|
    17                              <2> ;|     Expansion Area   |
    18                              <2> ;|----------------------|
    19                              <2> ;|	A0000 ~ bffff	|
    20                              <2> ;|   Legacy Video Area  |
    21                              <2> ;|----------------------|
    22                              <2> ;|	9f000 ~ A0000	|
    23                              <2> ;|	 BIOS reserve	|
    24                              <2> ;|----------------------|
    25                              <2> ;|	90000 ~ 9f000	|
    26                              <2> ;|	 kernel tmpbuf	|
    27                              <2> ;|----------------------|
    28                              <2> ;|	10000 ~ 90000	|
    29                              <2> ;|	   LOADER	|
    30                              <2> ;|----------------------|
    31                              <2> ;|	8000 ~ 10000	|
    32                              <2> ;|	  VBE info	|
    33                              <2> ;|----------------------|
    34                              <2> ;|	7e00 ~ 8000	|
    35                              <2> ;|	  mem info	|
    36                              <2> ;|----------------------|
    37                              <2> ;|	7c00 ~ 7e00	|
    38                              <2> ;|	 MBR (BOOT)	|
    39                              <2> ;|----------------------|
    40                              <2> ;|	0000 ~ 7c00	|
    41                              <2> ;|	 BIOS Code	|
    42                              <2> ;|----------------------|
    43                              <2> 
    44                              <2> 
    45                              <2> ;_______________________________________________________
    46                              <2> ; START	END	    SIZE	        USED
    47                              <2> ; FFFF0	FFFFF	16B	        BIOS System Entry
    48                              <2> ; F0000	FFFEF	64KB-16B	BIOS System Code
    49                              <2> ; C8000	EFFFF	160KB	    ROM/Mapped IO
    50                              <2> ; C0000	C7FFF	32KB	    Graphic Adapter BIOS
    51                              <2> ; B8000	BFFFF	32KB	    Chroma Text Video Buffer
    52                              <2> ; B0000	B7FFF	32KB	    Mono Text Video Buffer
    53                              <2> ; A0000	AFFFF	64KB	    Graphic Video Buffer
    54                              <2> ; 9FC00	9FFFF	1KB	        Extended BIOS Data Area
    55                              <2> ; 7E00	9FBFF	622080B     Useable 608KB	
    56                              <2> ; 7C00	7DFF	512B	    MBR
    57                              <2> ; 500	7BFF	30464B      Useable 30KB	
    58                              <2> ; 400	4FF	    256B	    BIOS Data Area
    59                              <2> ; 000	3FF	    1KB	        IVT
    60                              <2> ; _____________________________________________________
    61                              <2> 
    62                              <2> 
    63                              <2> 
    64                              <2> 
    65                              <2> 
    66                              <2> 
    67                              <2> 
    68                              <2> 
    69                              <2> 
    70                              <2> 
    71                              <2> 
    72                              <2> ;|----------------------|
    73                              <2> ;|	100000 ~ END	|
    74                              <2> ;|	   KERNEL	|
    75                              <2> ;|----------------------|
    76                              <2> ;|	E0000 ~ 100000	|
    77                              <2> ;| Extended System BIOS |
    78                              <2> ;|----------------------|
    79                              <2> ;|	C0000 ~ Dffff	|
    80                              <2> ;|     Expansion Area   |
    81                              <2> ;|----------------------|
    82                              <2> ;|	A0000 ~ bffff	|
    83                              <2> ;|   Legacy Video Area  |
    84                              <2> ;|----------------------|
    85                              <2> ;|	9F000 ~ A0000	|
    86                              <2> ;|	 BIOS reserve	|
    87                              <2> ;|----------------------|
    88                              <2> ;|	90000 ~ 9F000	|
    89                              <2> ;|	 kernel tmpbuf	|
    90                              <2> ;|----------------------|
    91                              <2> ;|	10000 ~ 90000	|
    92                              <2> ;|	   LOADER	|
    93                              <2> ;|----------------------|
    94                              <2> ;|	8000 ~ 10000	|
    95                              <2> ;|	  VBE info	|
    96                              <2> ;|----------------------|
    97                              <2> ;|	7E00 ~ 8000	|
    98                              <2> ;|	  mem info	|
    99                              <2> ;|----------------------|
   100                              <2> ;|	7C00 ~ 7E00	|
   101                              <2> ;|	 MBR (BOOT)	|
   102                              <2> ;|----------------------|
   103                              <2> ;|	0000 ~ 7C00	|
   104                              <2> ;|	 BIOS Code	|
   105                              <2> ;|----------------------|
   106                              <2> 
   107                              <2> 
   108                              <2> 
   109                              <2> 
   110                              <2> 
   111                              <2> 
   112                              <2> 
   113                              <2> 
   114                              <2> 
   115                              <2> 
   116                              <2> ;______________________________________________
   117                              <2> ; ----------------Vbe Info Block------------
   118                              <2> ; typedef struct {
   119                              <2> ;     unsigned char       vbe_signature;
   120                              <2> ;     unsigned short      vbe_version;
   121                              <2> ;     unsigned long       oem_string_ptr;
   122                              <2> ;     unsigned char       capabilities;
   123                              <2> ;     unsigned long       video_mode_ptr;
   124                              <2> ;     unsigned short      total_memory;
   125                              <2> ;     unsigned short      oem_software_rev;
   126                              <2> ;     unsigned long       oem_vendor_name_ptr;
   127                              <2> ;     unsigned long       oem_product_name_ptr;
   128                              <2> ;     unsigned long       oem_product_rev_ptr;
   129                              <2> ;     unsigned char       reserved[222];
   130                              <2> ;     unsigned char       oem_data[256];  
   131                              <2> ; } VbeInfoBlock;
   132                              <2> ;______________________________________________
   133                              <2> 
   134                              <2> 
   135                              <2> BaseOfKernelFile	equ	0x00
   136                              <2> OffsetOfKernelFile	equ	0x100000
   137                              <2> BaseTmpOfKernelAddr	equ	0x9000
   138                              <2> OffsetTmpOfKernelFile	equ	0x0000
   139                              <2> VBEStructBufferAddr	equ	0x8000
   140                              <2> VBEModeStructBufferAddr	equ	0x8200
   141                              <2> MemoryStructBufferAddr	equ	0x8800
   142                              <2> 
   143                              <2> KernelCodeSelector      equ 0x08
   144                              <2> KernelDataSelector      equ 0x10
   145                              <2> UserCodeSelector      equ 0x18
   146                              <2> UserDataSelector      equ 0x20
   147                              <2> 
   148                              <2> KernelSpaceUpperAddress equ 0xFFFF800000000000
   149                              <2> 
   150                              <2> GDTPointerUpperAddr equ 0xFFFF800000104000
   151                              <2> IDTPointerUpperAddr equ 0xFFFF80000010400a
   152                              <2> TSSPointerUpperAddr equ 0xFFFF800000104014
   153                              <2> 
   154                              <2> VideoFrameBufferAddress equ 0xFFFF800003000000
   155                              <2> KernelStartSectorNum	equ	16
   156                              <2> 
   157                              <2> 
   158                              <2> 
   159                              <2> 
   160                              <2> MasterSectorReadNumPort    equ	0x1F2
   161                              <2> MasterSectorReadPort    equ	0x1F0
   162                              <2> 
   163                              <2> SlaveReadNumPort    equ	0x172
   164                              <2> SlaveSectorReadPort    equ	0x170
   165                              <2> 
   166                              <2> SectorReadNumPort    equ	MasterSectorReadNumPort
   167                              <2> SectorReadPort    equ	MasterSectorReadPort
   168                              <2> 
   169                              <2> struc vbe_info_block
   170                              <2>     .signature                 resb 4    ; 'VESA' signature (must be "VESA")
   171                              <2>     .version                   resw 1    ; VBE version (e.g., 0x0300 for VBE 3.0)
   172                              <2>     .oem_string_ptr            resd 1    ; Pointer to OEM string
   173                              <2>     .capabilities              resd 1    ; Capabilities of the video card
   174                              <2>     .video_mode_ptr            resd 1    ; Pointer to supported video modes
   175                              <2>     .total_memory              resw 1    ; Total memory in 64KB blocks
   176                              <2> 
   177                              <2>     ; VBE 2.0+ fields
   178                              <2>     .oem_software_rev          resw 1    ; OEM software revision
   179                              <2>     .oem_vendor_name_ptr       resd 1    ; Pointer to OEM vendor name string
   180                              <2>     .oem_product_name_ptr      resd 1    ; Pointer to OEM product name string
   181                              <2>     .oem_product_rev_ptr       resd 1    ; Pointer to OEM product revision string
   182                              <2>     .reserved                  resb 222  ; Reserved for VBE implementation
   183                              <2>     .oem_data                  resb 256  ; Data area for OEM-specific information
   184                              <2> endstruc
   185                              <2> 
   186                              <2> struc vbe_mode_info_block
   187                              <2>     .attributes                resw 1    ; Mode attributes
   188                              <2>     .winA_attributes           resb 1    ; Window A attributes
   189                              <2>     .winB_attributes           resb 1    ; Window B attributes
   190                              <2>     .win_granularity           resw 1    ; Window granularity in KB
   191                              <2>     .win_size                  resw 1    ; Window size in KB
   192                              <2>     .winA_segment              resw 1    ; Window A segment
   193                              <2>     .winB_segment              resw 1    ; Window B segment
   194                              <2>     .win_func_ptr              resd 1    ; Pointer to window function
   195                              <2>     .bytes_per_scanline        resw 1    ; Bytes per scanline
   196                              <2> 
   197                              <2>     ; VBE 1.2+ fields
   198                              <2>     .x_resolution              resw 1    ; Horizontal resolution in pixels
   199                              <2>     .y_resolution              resw 1    ; Vertical resolution in pixels
   200                              <2>     .x_char_size               resb 1    ; Character cell width in pixels
   201                              <2>     .y_char_size               resb 1    ; Character cell height in pixels
   202                              <2>     .number_of_planes          resb 1    ; Number of memory planes
   203                              <2>     .bits_per_pixel            resb 1    ; Bits per pixel
   204                              <2>     .number_of_banks           resb 1    ; Number of banks
   205                              <2>     .memory_model              resb 1    ; Memory model type
   206                              <2>     .bank_size                 resb 1    ; Bank size in KB
   207                              <2>     .number_of_image_pages     resb 1    ; Number of images
   208                              <2>     .reserved1                 resb 1    ; Reserved
   209                              <2> 
   210                              <2>     ; Direct Color fields (VBE 1.2+)
   211                              <2>     .red_mask_size             resb 1    ; Size of direct color red mask
   212                              <2>     .red_field_position        resb 1    ; Bit position of red mask
   213                              <2>     .green_mask_size           resb 1    ; Size of direct color green mask
   214                              <2>     .green_field_position      resb 1    ; Bit position of green mask
   215                              <2>     .blue_mask_size            resb 1    ; Size of direct color blue mask
   216                              <2>     .blue_field_position       resb 1    ; Bit position of blue mask
   217                              <2>     .reserved_mask_size        resb 1    ; Size of direct color reserved mask
   218                              <2>     .reserved_field_position   resb 1    ; Bit position of reserved mask
   219                              <2>     .direct_color_mode_info    resb 1    ; Direct color mode attributes
   220                              <2> 
   221                              <2>     ; VBE 2.0+ fields
   222                              <2>     .phys_base_ptr             resd 1    ; Physical address for flat memory frame buffer
   223                              <2>     .reserved2                 resd 1    ; Reserved
   224                              <2>     .reserved3                 resw 1    ; Reserved
   225                              <2> 
   226                              <2>     ; VBE 3.0+ fields
   227                              <2>     .lin_bytes_per_scanline    resw 1    ; Bytes per scanline for linear modes
   228                              <2>     .bnk_number_of_image_pages resb 1    ; Number of images for banked modes
   229                              <2>     .lin_number_of_image_pages resb 1    ; Number of images for linear modes
   230                              <2>     .lin_red_mask_size         resb 1    ; Size of direct color red mask (linear modes)
   231                              <2>     .lin_red_field_position    resb 1    ; Bit position of red mask (linear modes)
   232                              <2>     .lin_green_mask_size       resb 1    ; Size of direct color green mask (linear modes)
   233                              <2>     .lin_green_field_position  resb 1    ; Bit position of green mask (linear modes)
   234                              <2>     .lin_blue_mask_size        resb 1    ; Size of direct color blue mask (linear modes)
   235                              <2>     .lin_blue_field_position   resb 1    ; Bit position of blue mask (linear modes)
   236                              <2>     .lin_reserved_mask_size    resb 1    ; Size of direct color reserved mask (linear modes)
   237                              <2>     .lin_reserved_field_position resb 1  ; Bit position of reserved mask (linear modes)
   238                              <2>     .max_pixel_clock           resd 1    ; Maximum pixel clock (Hz)
   239                              <2>     .reserved4                 resb 190  ; Reserved for future expansion
   240                              <2> endstruc
   241                              <2> 
   242                              <2> struc e820_memory_entry
   243                              <2>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   244                              <2>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   245                              <2>     .length_low               resd 1    ; Lower 32 bits of the length
   246                              <2>     .length_high              resd 1    ; Upper 32 bits of the length
   247                              <2>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   248                              <2>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   249                              <2> endstruc
   250                              <2> 
   251                              <2> %endif
     5                              <1> %include "../kernel/stddef.asm"
     1                              <2> %ifndef STDDEF_ASM
     2                              <2> %define STDDEF_ASM
     3                              <2> 
     4                              <2> ;-----------Data Type Standard------------;
     5                              <2> %define USE_DT_STANDARD
     6                              <2> %ifdef USE_DT_STANDARD
     7                              <2> ;     %macro gbyte 1 ; 参数1：变量名, 参数2：初始值(1字节)
     8                              <2> ;         %1: db %2
     9                              <2> ;         %endmacro
    10                              <2> 
    11                              <2> ;     %macro g2byte 1 ; 参数1：变量名, 参数2：初始值(4字节)
    12                              <2> ;         %1: dw %2
    13                              <2> ;         %endmacro
    14                              <2> 
    15                              <2> ;     %macro g4byte 1 ; 参数1：变量名, 参数2：初始值(4字节)
    16                              <2> ;         %1: dd %2
    17                              <2> ;         %endmacro
    18                              <2> 
    19                              <2> ;     %macro g8byte 1 ; 参数1：变量名, 参数2：初始值(8字节)
    20                              <2> ;         %1: dq %2
    21                              <2> ;         %endmacro
    22                              <2> 
    23                              <2> ; %define UNIQUE_ID_IMPL(name, line) name %+ _ %+ line
    24                              <2> ; %define UNIQUE_ID(name) UNIQUE_ID_IMPL(name, __LINE__)
    25                              <2> ;     ; %macro lvar 1
    26                              <2> ;     ;     %define %1 qword [rbp - 112-(__local_offset + 8)]
    27                              <2> 
    28                              <2> ;     ;     %assign __local_offset  __local_offset + 8
    29                              <2> 
    30                              <2> ;     ;     sub rsp, 8
    31                              <2> ;     ;     %endmacro
    32                              <2> 
    33                              <2> ;     ; 初始化局部变量追踪
    34                              <2> ;     %macro LOCAL_BEGIN 0
    35                              <2> ;         %push local_ctx              ; 创建新的局部上下文
    36                              <2> ;         %assign %$local_offset 0     ; 初始化局部偏移计数器
    37                              <2> ;     %endmacro
    38                              <2> 
    39                              <2> 
    40                              <2> ;     %macro lvar 1
    41                              <2> ;         %assign %$local_offset %$local_offset+8
    42                              <2> ;         %define %$var_%1 %$local_offset
    43                              <2> ;         %define %1  qword[rbp-%$var_%1]
    44                              <2> ;         sub rsp,8
    45                              <2> ;     %endmacro
    46                              <2> 
    47                              <2>     ; %macro lstr 2
    48                              <2>     ;     %ifstr %2
    49                              <2>     ;         %strlen len %2
    50                              <2>     ;         %assign %$local_offset %$local_offset+len+1   ; 累加偏移
    51                              <2>     ;         %define %$str_%1 %$local_offset               ; 定义变量偏移
    52                              <2>     ;         %define %1  [rbp - %$str_%1]
    53                              <2>     ;         %define %1.size len+1
    54                              <2>     ;         sub rsp,%1.size
    55                              <2>     ;     %endif
    56                              <2>     ;         mov rcx, %3
    57                              <2>     ;         mov rdi, ebp
    58                              <2>     ;         add rdi, %$var_%1
    59                              <2>     ;         lea rsi, [%2]
    60                              <2>     ;         rep movsb
    61                              <2>     ; %endmacro
    62                              <2> 
    63                              <2>     ; %macro lstr_copy 2-3
    64                              <2>     ;     %ifctx local_ctx
    65                              <2>     ;         %if %0 == 3
    66                              <2>     ;             ; 带长度的字符串复制
    67                              <2>     ;             mov ecx, %3
    68                              <2>     ;             mov edi, ebp
    69                              <2>     ;             add edi, %$var_%1
    70                              <2>     ;             lea esi, [%2]
    71                              <2>     ;             rep movsb
    72                              <2>     ;         %else
    73                              <2>     ;             ; 以null结尾的字符串复制
    74                              <2>     ;             mov edi, ebp
    75                              <2>     ;             add edi, %$var_%1
    76                              <2>     ;             lea esi, [%2]
    77                              <2>     ;             %%copy_loop:
    78                              <2>     ;             lodsb
    79                              <2>     ;             stosb
    80                              <2>     ;             test al, al
    81                              <2>     ;             jnz %%copy_loop
    82                              <2>     ;         %endif
    83                              <2>     ;     %else
    84                              <2>     ;         %error "STR_COPY used outside local_ctx block"
    85                              <2>     ;     %endif
    86                              <2>     ; %endmacro
    87                              <2> 
    88                              <2>     ; %macro lstruct 1
    89                              <2>     ;     %assign %$local_offset %$local_offset+8   ; 累加偏移
    90                              <2>     ;     %define %$struct_%1 %$local_offset               ; 定义变量偏移
    91                              <2>     ;     %define %1  rbp - %$struct_%1
    92                              <2>     ;     %define %1.size 5
    93                              <2>     ;     sub rsp,%1.size
    94                              <2>     ; %endmacro
    95                              <2> 
    96                              <2>     ; ; 分配栈空间并保存寄存器
    97                              <2>     ; %macro lalloc 0
    98                              <2>     ;     %if %$local_offset > 0
    99                              <2>     ;         ; 16字节对齐
   100                              <2>     ;         %assign pad (16 - (%$local_offset % 16))
   101                              <2>     ;         %if pad < 16
   102                              <2>     ;             %assign %$local_offset %$local_offset + pad
   103                              <2>     ;         %endif
   104                              <2>     ;         sub rsp, %$local_offset
   105                              <2>     ;     %endif
   106                              <2>     ; %endmacro
   107                              <2> 
   108                              <2> 
   109                              <2>     ; ; 获取局部变量的访问表达式
   110                              <2>     ; %macro locvar 1-*
   111                              <2>     ;     ; [rbp - %$var_%1 ]
   112                              <2> 
   113                              <2>     ;     %ifctx local_ctx
   114                              <2>     ;         ; %ifidn %2, ""
   115                              <2>     ;             qword [rbp - %$var_%1]
   116                              <2>     ;         ; %else
   117                              <2>     ;         ;     [rbp - %$var_%1 - %2]
   118                              <2>     ;         ; %endif
   119                              <2>     ;     %endif
   120                              <2>     ; %endmacro
   121                              <2> 
   122                              <2>     ;     %macro locvar 1-2
   123                              <2>     ;     ; [rbp - %$var_%1 ]
   124                              <2> 
   125                              <2>     ;     %ifctx local_ctx
   126                              <2>     ;         %ifidn %2, ""
   127                              <2>     ;             [rbp - %$var_%1]
   128                              <2>     ;         %else
   129                              <2>     ;             [rbp - %$var_%1 - %2]
   130                              <2>     ;         %endif
   131                              <2>     ;     %endif
   132                              <2>     ; %endmacro
   133                              <2> 
   134                              <2> 
   135                              <2> %endif
   136                              <2> 
   137                              <2> ;-----------Calling Conventions Standard------------;
   138                              <2> %define USE_CC_STANDARD
   139                              <2> %ifdef USE_CC_STANDARD
   140                              <2> 
   141                              <2>     ;caller maintain the stack balance 
   142                              <2>         ; debug_times: db 0
   143                              <2>         ; cmp byte [rel debug_times],3
   144                              <2>         ; je debug_stop
   145                              <2>         ; add byte [rel debug_times],1
   146                              <2>     ; -------------------------------
   147                              <2>     ; 栈帧结构定义
   148                              <2>     ; -------------------------------
   149                              <2>     ; 调用后的栈布局:
   150                              <2>     ; [rsp+0x00] 返回地址 (8字节)
   151                              <2>     ; [rsp+0x08] 旧RBP     (8字节) <- rbp指向这里
   152                              <2>     ; [rsp+0x10] 参数1     (8字节)
   153                              <2>     ; [rsp+0x18] 参数2
   154                              <2>     ; ...
   155                              <2>     ; [rsp+X]    局部变量区
   156                              <2>     ; -------------------------------
   157                              <2> 
   158                              <2>     %define PARAM_OFFSET   16      ; 第一个参数的偏移量(返回地址8 + 旧RBP8)
   159                              <2>     %macro function 1-* ; 1=函数名, 2=返回参数数量, 3=参数列表
   160                              <2>         %assign param_count %0 - 2 ; 参数数量
   161                              <2>         
   162                              <2>         %if param_count < 0
   163                              <2>             %assign param_count 0 ; 如果没有参数，设置为 0
   164                              <2>         %endif
   165                              <2>         %if param_count < 1
   166                              <2>             %assign ret_param_count 0 ; 返回参数数量
   167                              <2>         %else
   168                              <2>             %assign ret_param_count %2 ; 返回参数数量
   169                              <2>         %endif
   170                              <2> 
   171                              <2>         ; 准备调用
   172                              <2>         prepare_call param_count, ret_param_count
   173                              <2> 
   174                              <2>         ; 如果有参数，将参数压入栈
   175                              <2>         %if param_count > 0
   176                              <2>             %assign i 0
   177                              <2>             ; mov [rsp-8], rax ; 保存返回地址
   178                              <2>             %rep param_count
   179                              <2>                 %rotate 1
   180                              <2>                 ; mov rax, %2
   181                              <2>                 ; mov [rsp + 8*i],qword %2 ; 将参数压入栈
   182                              <2>                 push qword %2
   183                              <2>                 pop qword [rsp + 8*i]
   184                              <2>                 %assign i i+1
   185                              <2>             %endrep
   186                              <2>             %rotate 1
   187                              <2>             %rotate 1
   188                              <2>             ; mov rax,[rsp-8]; 保存返回地址
   189                              <2>         %endif
   190                              <2> 
   191                              <2>         ; 调用函数
   192                              <2>         call %1
   193                              <2> 
   194                              <2>         ; 清理栈空间
   195                              <2>         cleanup_call param_count, ret_param_count
   196                              <2> 
   197                              <2>     %endmacro
   198                              <2> 
   199                              <2>     %macro align_stack_16 0
   200                              <2>         test rsp, 0xF
   201                              <2>         jz %%skip_align
   202                              <2>         sub rsp,8
   203                              <2>         %%skip_align:
   204                              <2>     %endmacro
   205                              <2> 
   206                              <2>     ; %macro prologue 0;local var size(bytes)
   207                              <2>     ;     push rbp
   208                              <2>     ;     mov rbp, rsp
   209                              <2> 
   210                              <2> 
   211                              <2>     ;     pushallq
   212                              <2>     ;     LOCAL_BEGIN
   213                              <2>         
   214                              <2> 
   215                              <2>     ;     ; 调试信息可以放在这里
   216                              <2>     ;     ; %ifdef DEBUG
   217                              <2>     ;     ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
   218                              <2>     ;     ; %endif
   219                              <2>     ; %endmacro
   220                              <2>     ; %macro epilogue 0
   221                              <2>     ;     %pop
   222                              <2>     ;     mov rax, rbp
   223                              <2>     ;     sub rax, 8*14
   224                              <2>     ;     mov rsp, rax
   225                              <2> 
   226                              <2>     ;     popallq
   227                              <2> 
   228                              <2>     ;     mov rsp, rbp
   229                              <2>     ;     pop rbp
   230                              <2>     ;     ret
   231                              <2>     ; %endmacro
   232                              <2> 
   233                              <2>     %macro prolog 1;local var size(bytes)
   234                              <2>         push rbp
   235                              <2>         mov rbp, rsp
   236                              <2> 
   237                              <2> 
   238                              <2>         mov [rbp-8],rax
   239                              <2>         mov rax, %1
   240                              <2>         add rax, 15
   241                              <2>         and rax, ~15
   242                              <2>         sub rsp, rax
   243                              <2>         mov rax,[rbp-8]
   244                              <2> 
   245                              <2>         pushallq
   246                              <2>         
   247                              <2>         ; 调试信息可以放在这里
   248                              <2>         ; %ifdef DEBUG
   249                              <2>         ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
   250                              <2>         ; %endif
   251                              <2>     %endmacro
   252                              <2> 
   253                              <2>     %macro epilog 0
   254                              <2>         popallq
   255                              <2> 
   256                              <2>         mov rsp, rbp
   257                              <2>         pop rbp
   258                              <2>         ret
   259                              <2>     %endmacro
   260                              <2> 
   261                              <2>     %macro get_param 2;1=register, 2=param index(from 1)
   262                              <2>         mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   263                              <2>     %endmacro
   264                              <2> 
   265                              <2>     %macro set_ret_param 2;1=register, 2=param index(from 1)
   266                              <2>         mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   267                              <2>     %endmacro
   268                              <2> 
   269                              <2>     %macro prepare_call 2;1=param count, 2=return param count
   270                              <2>         %assign total_space ((%1 + %2) * 8)
   271                              <2>         
   272                              <2>         %if (total_space % 16) != 0
   273                              <2>             %assign total_space total_space + 8  ; 添加填充
   274                              <2>         %endif
   275                              <2>         
   276                              <2>         sub rsp, total_space
   277                              <2>     %endmacro
   278                              <2> 
   279                              <2>     %macro cleanup_call 2;1=param count, 2=return param count
   280                              <2>         %assign total_space ((%1 + %2) * 8)
   281                              <2>         %if (total_space % 16) != 0
   282                              <2>             %assign total_space total_space + 8
   283                              <2>         %endif
   284                              <2>         add rsp, total_space
   285                              <2>     %endmacro
   286                              <2> 
   287                              <2>     %macro pushallq 0
   288                              <2>         push rax
   289                              <2>         push rbx
   290                              <2>         push rcx
   291                              <2>         push rdx
   292                              <2>         push rsi
   293                              <2>         push rdi
   294                              <2>         push r8
   295                              <2>         push r9
   296                              <2>         push r10
   297                              <2>         push r11
   298                              <2>         push r12
   299                              <2>         push r13
   300                              <2>         push r14
   301                              <2>         push r15
   302                              <2>     %endmacro
   303                              <2> 
   304                              <2>     %macro popallq 0
   305                              <2>         pop r15
   306                              <2>         pop r14
   307                              <2>         pop r13
   308                              <2>         pop r12
   309                              <2>         pop r11
   310                              <2>         pop r10
   311                              <2>         pop r9
   312                              <2>         pop r8
   313                              <2>         pop rdi
   314                              <2>         pop rsi
   315                              <2>         pop rdx
   316                              <2>         pop rcx
   317                              <2>         pop rbx
   318                              <2>         pop rax
   319                              <2>     %endmacro
   320                              <2> 
   321                              <2>     %endif
   322                              <2> ;---------------------ABI Standard------------------;
   323                              <2> %define USE_ABI_STANDARD
   324                              <2> %ifdef USE_ABI_STANDARD
   325                              <2> 
   326                              <2> 
   327                              <2>     %define ABI_File_None   0       ; 无文件类型
   328                              <2>     %define ABI_File_REL    1       ; 可重定位文件
   329                              <2>     %define ABI_File_EXEC   2       ; 可执行文件
   330                              <2>     %define ABI_File_DYN    3       ; 共享目标文件
   331                              <2>     %define ABI_File_CORE   4       ; 核心文件
   332                              <2> 
   333                              <2>     %define Section_Type_NULL    0      ; 未使用
   334                              <2>     %define Section_Type_LOAD    1      ; 可加载段
   335                              <2>     %define Section_Type_DYNAMIC 2      ; 动态链接信息
   336                              <2>     %define Section_Type_INTERP  3      ; 解释器路径
   337                              <2>     %define Section_Type_NOTE    4      ; 辅助信息
   338                              <2>     %define Section_Type_SHLIB   5      ; 保留
   339                              <2> 
   340                              <2>     %macro ABI_HEADER 4 ;1=File Type, 2=Entry Point Address, 3=Section Header Offset, 4=Section Header Count
   341                              <2>         db 0xA5, 'A', 'B', 'I'     ; ABI Magic Number
   342                              <2>         db 1                       ; Encode Type
   343                              <2>         db 1                       ; ABI Version
   344                              <2> 
   345                              <2>         dw %1                      ; ABI File Type
   346                              <2>         dq %2                      ; Entry Point Address
   347                              <2>         dw 32                      ; ABI Headers Size
   348                              <2> 
   349                              <2>         dq %3                      ; Section Header Offset
   350                              <2>         dw 32                      ; Section Header Size
   351                              <2>         dw %4                      ; Section Header Count
   352                              <2>         dw 0                       ; Symble Table Entry Size
   353                              <2>     %endmacro
   354                              <2>     STRUC struct_ABI_HEADER
   355                              <2>         .magic:         resb 4    ; ABI Magic Number (4 bytes)
   356                              <2>         .encode_type:   resb 1    ; Encode Type (1 byte)
   357                              <2>         .abi_version:   resb 1    ; ABI Version (1 byte)
   358                              <2>         .file_type:     resw 1    ; ABI File Type (2 bytes)
   359                              <2>         .entry_point:   resq 1    ; Entry Point Address (8 bytes)
   360                              <2>         .header_size:   resw 1    ; ABI Headers Size (2 bytes)
   361                              <2>         .section_offset: resq 1   ; Section Header Offset (8 bytes)
   362                              <2>         .section_size:  resw 1    ; Section Header Size (2 bytes)
   363                              <2>         .section_count: resw 1    ; Section Header Count (2 bytes)
   364                              <2>         .sym_table_size: resw 1   ; Symbol Table Entry Size (2 bytes)
   365                              <2>     ENDSTRUC
   366                              <2> 
   367                              <2>     %macro SECTION_HEADER 4 ;1=Section Type, 2=Virtual Address, 3=Section Offset, 4=Section Size
   368                              <2>         dq %1                  ; Section Type
   369                              <2>         dq %2                  ; Virtual Address
   370                              <2>         dq %3                  ; Section Offset
   371                              <2>         dq %4                  ; Section Size
   372                              <2>     %endmacro
   373                              <2>     STRUC struct_SECTION_HEADER
   374                              <2>         .type:      resq 1    ; Section Type (8 bytes)
   375                              <2>         .vaddr:     resq 1    ; Virtual Address (8 bytes)
   376                              <2>         .offset:    resq 1    ; Section Offset (8 bytes)
   377                              <2>         .size:      resq 1    ; Section Size (8 bytes)
   378                              <2>     ENDSTRUC
   379                              <2>     %endif
   380                              <2> 
   381                              <2> %endif
     6                              <1> 
     7                              <1> 
     8                              <1> %include "../kernel/printk.asm"
     1                              <2> %ifndef PRINTK_ASM
     2                              <2> %define PRINTK_ASM
     3                              <2> 
     4                              <2> %include "../bootloader/global_def.asm"
     1                              <3> %ifndef GLOBAL_DEF_ASM
     2                              <3> %define GLOBAL_DEF_ASM
     3                              <3> %define PLATFORM_QEMU_X64 1
     4                              <3> %define PLATFORM_X64 2
     5                              <3> %define DEBUG_PLATFORM PLATFORM_QEMU_X64
     6                              <3> %define DEBUG_MODE 1
     7                              <3> 
     8                              <3> 
     9                              <3> ;|----------------------|
    10                              <3> ;|	100000 ~ END	|
    11                              <3> ;|	   KERNEL	|
    12                              <3> ;|----------------------|
    13                              <3> ;|	E0000 ~ 100000	|
    14                              <3> ;| Extended System BIOS |
    15                              <3> ;|----------------------|
    16                              <3> ;|	C0000 ~ Dffff	|
    17                              <3> ;|     Expansion Area   |
    18                              <3> ;|----------------------|
    19                              <3> ;|	A0000 ~ bffff	|
    20                              <3> ;|   Legacy Video Area  |
    21                              <3> ;|----------------------|
    22                              <3> ;|	9f000 ~ A0000	|
    23                              <3> ;|	 BIOS reserve	|
    24                              <3> ;|----------------------|
    25                              <3> ;|	90000 ~ 9f000	|
    26                              <3> ;|	 kernel tmpbuf	|
    27                              <3> ;|----------------------|
    28                              <3> ;|	10000 ~ 90000	|
    29                              <3> ;|	   LOADER	|
    30                              <3> ;|----------------------|
    31                              <3> ;|	8000 ~ 10000	|
    32                              <3> ;|	  VBE info	|
    33                              <3> ;|----------------------|
    34                              <3> ;|	7e00 ~ 8000	|
    35                              <3> ;|	  mem info	|
    36                              <3> ;|----------------------|
    37                              <3> ;|	7c00 ~ 7e00	|
    38                              <3> ;|	 MBR (BOOT)	|
    39                              <3> ;|----------------------|
    40                              <3> ;|	0000 ~ 7c00	|
    41                              <3> ;|	 BIOS Code	|
    42                              <3> ;|----------------------|
    43                              <3> 
    44                              <3> 
    45                              <3> ;_______________________________________________________
    46                              <3> ; START	END	    SIZE	        USED
    47                              <3> ; FFFF0	FFFFF	16B	        BIOS System Entry
    48                              <3> ; F0000	FFFEF	64KB-16B	BIOS System Code
    49                              <3> ; C8000	EFFFF	160KB	    ROM/Mapped IO
    50                              <3> ; C0000	C7FFF	32KB	    Graphic Adapter BIOS
    51                              <3> ; B8000	BFFFF	32KB	    Chroma Text Video Buffer
    52                              <3> ; B0000	B7FFF	32KB	    Mono Text Video Buffer
    53                              <3> ; A0000	AFFFF	64KB	    Graphic Video Buffer
    54                              <3> ; 9FC00	9FFFF	1KB	        Extended BIOS Data Area
    55                              <3> ; 7E00	9FBFF	622080B     Useable 608KB	
    56                              <3> ; 7C00	7DFF	512B	    MBR
    57                              <3> ; 500	7BFF	30464B      Useable 30KB	
    58                              <3> ; 400	4FF	    256B	    BIOS Data Area
    59                              <3> ; 000	3FF	    1KB	        IVT
    60                              <3> ; _____________________________________________________
    61                              <3> 
    62                              <3> 
    63                              <3> 
    64                              <3> 
    65                              <3> 
    66                              <3> 
    67                              <3> 
    68                              <3> 
    69                              <3> 
    70                              <3> 
    71                              <3> 
    72                              <3> ;|----------------------|
    73                              <3> ;|	100000 ~ END	|
    74                              <3> ;|	   KERNEL	|
    75                              <3> ;|----------------------|
    76                              <3> ;|	E0000 ~ 100000	|
    77                              <3> ;| Extended System BIOS |
    78                              <3> ;|----------------------|
    79                              <3> ;|	C0000 ~ Dffff	|
    80                              <3> ;|     Expansion Area   |
    81                              <3> ;|----------------------|
    82                              <3> ;|	A0000 ~ bffff	|
    83                              <3> ;|   Legacy Video Area  |
    84                              <3> ;|----------------------|
    85                              <3> ;|	9F000 ~ A0000	|
    86                              <3> ;|	 BIOS reserve	|
    87                              <3> ;|----------------------|
    88                              <3> ;|	90000 ~ 9F000	|
    89                              <3> ;|	 kernel tmpbuf	|
    90                              <3> ;|----------------------|
    91                              <3> ;|	10000 ~ 90000	|
    92                              <3> ;|	   LOADER	|
    93                              <3> ;|----------------------|
    94                              <3> ;|	8000 ~ 10000	|
    95                              <3> ;|	  VBE info	|
    96                              <3> ;|----------------------|
    97                              <3> ;|	7E00 ~ 8000	|
    98                              <3> ;|	  mem info	|
    99                              <3> ;|----------------------|
   100                              <3> ;|	7C00 ~ 7E00	|
   101                              <3> ;|	 MBR (BOOT)	|
   102                              <3> ;|----------------------|
   103                              <3> ;|	0000 ~ 7C00	|
   104                              <3> ;|	 BIOS Code	|
   105                              <3> ;|----------------------|
   106                              <3> 
   107                              <3> 
   108                              <3> 
   109                              <3> 
   110                              <3> 
   111                              <3> 
   112                              <3> 
   113                              <3> 
   114                              <3> 
   115                              <3> 
   116                              <3> ;______________________________________________
   117                              <3> ; ----------------Vbe Info Block------------
   118                              <3> ; typedef struct {
   119                              <3> ;     unsigned char       vbe_signature;
   120                              <3> ;     unsigned short      vbe_version;
   121                              <3> ;     unsigned long       oem_string_ptr;
   122                              <3> ;     unsigned char       capabilities;
   123                              <3> ;     unsigned long       video_mode_ptr;
   124                              <3> ;     unsigned short      total_memory;
   125                              <3> ;     unsigned short      oem_software_rev;
   126                              <3> ;     unsigned long       oem_vendor_name_ptr;
   127                              <3> ;     unsigned long       oem_product_name_ptr;
   128                              <3> ;     unsigned long       oem_product_rev_ptr;
   129                              <3> ;     unsigned char       reserved[222];
   130                              <3> ;     unsigned char       oem_data[256];  
   131                              <3> ; } VbeInfoBlock;
   132                              <3> ;______________________________________________
   133                              <3> 
   134                              <3> 
   135                              <3> BaseOfKernelFile	equ	0x00
   136                              <3> OffsetOfKernelFile	equ	0x100000
   137                              <3> BaseTmpOfKernelAddr	equ	0x9000
   138                              <3> OffsetTmpOfKernelFile	equ	0x0000
   139                              <3> VBEStructBufferAddr	equ	0x8000
   140                              <3> VBEModeStructBufferAddr	equ	0x8200
   141                              <3> MemoryStructBufferAddr	equ	0x8800
   142                              <3> 
   143                              <3> KernelCodeSelector      equ 0x08
   144                              <3> KernelDataSelector      equ 0x10
   145                              <3> UserCodeSelector      equ 0x18
   146                              <3> UserDataSelector      equ 0x20
   147                              <3> 
   148                              <3> KernelSpaceUpperAddress equ 0xFFFF800000000000
   149                              <3> 
   150                              <3> GDTPointerUpperAddr equ 0xFFFF800000104000
   151                              <3> IDTPointerUpperAddr equ 0xFFFF80000010400a
   152                              <3> TSSPointerUpperAddr equ 0xFFFF800000104014
   153                              <3> 
   154                              <3> VideoFrameBufferAddress equ 0xFFFF800003000000
   155                              <3> KernelStartSectorNum	equ	16
   156                              <3> 
   157                              <3> 
   158                              <3> 
   159                              <3> 
   160                              <3> MasterSectorReadNumPort    equ	0x1F2
   161                              <3> MasterSectorReadPort    equ	0x1F0
   162                              <3> 
   163                              <3> SlaveReadNumPort    equ	0x172
   164                              <3> SlaveSectorReadPort    equ	0x170
   165                              <3> 
   166                              <3> SectorReadNumPort    equ	MasterSectorReadNumPort
   167                              <3> SectorReadPort    equ	MasterSectorReadPort
   168                              <3> 
   169                              <3> struc vbe_info_block
   170                              <3>     .signature                 resb 4    ; 'VESA' signature (must be "VESA")
   171                              <3>     .version                   resw 1    ; VBE version (e.g., 0x0300 for VBE 3.0)
   172                              <3>     .oem_string_ptr            resd 1    ; Pointer to OEM string
   173                              <3>     .capabilities              resd 1    ; Capabilities of the video card
   174                              <3>     .video_mode_ptr            resd 1    ; Pointer to supported video modes
   175                              <3>     .total_memory              resw 1    ; Total memory in 64KB blocks
   176                              <3> 
   177                              <3>     ; VBE 2.0+ fields
   178                              <3>     .oem_software_rev          resw 1    ; OEM software revision
   179                              <3>     .oem_vendor_name_ptr       resd 1    ; Pointer to OEM vendor name string
   180                              <3>     .oem_product_name_ptr      resd 1    ; Pointer to OEM product name string
   181                              <3>     .oem_product_rev_ptr       resd 1    ; Pointer to OEM product revision string
   182                              <3>     .reserved                  resb 222  ; Reserved for VBE implementation
   183                              <3>     .oem_data                  resb 256  ; Data area for OEM-specific information
   184                              <3> endstruc
   185                              <3> 
   186                              <3> struc vbe_mode_info_block
   187                              <3>     .attributes                resw 1    ; Mode attributes
   188                              <3>     .winA_attributes           resb 1    ; Window A attributes
   189                              <3>     .winB_attributes           resb 1    ; Window B attributes
   190                              <3>     .win_granularity           resw 1    ; Window granularity in KB
   191                              <3>     .win_size                  resw 1    ; Window size in KB
   192                              <3>     .winA_segment              resw 1    ; Window A segment
   193                              <3>     .winB_segment              resw 1    ; Window B segment
   194                              <3>     .win_func_ptr              resd 1    ; Pointer to window function
   195                              <3>     .bytes_per_scanline        resw 1    ; Bytes per scanline
   196                              <3> 
   197                              <3>     ; VBE 1.2+ fields
   198                              <3>     .x_resolution              resw 1    ; Horizontal resolution in pixels
   199                              <3>     .y_resolution              resw 1    ; Vertical resolution in pixels
   200                              <3>     .x_char_size               resb 1    ; Character cell width in pixels
   201                              <3>     .y_char_size               resb 1    ; Character cell height in pixels
   202                              <3>     .number_of_planes          resb 1    ; Number of memory planes
   203                              <3>     .bits_per_pixel            resb 1    ; Bits per pixel
   204                              <3>     .number_of_banks           resb 1    ; Number of banks
   205                              <3>     .memory_model              resb 1    ; Memory model type
   206                              <3>     .bank_size                 resb 1    ; Bank size in KB
   207                              <3>     .number_of_image_pages     resb 1    ; Number of images
   208                              <3>     .reserved1                 resb 1    ; Reserved
   209                              <3> 
   210                              <3>     ; Direct Color fields (VBE 1.2+)
   211                              <3>     .red_mask_size             resb 1    ; Size of direct color red mask
   212                              <3>     .red_field_position        resb 1    ; Bit position of red mask
   213                              <3>     .green_mask_size           resb 1    ; Size of direct color green mask
   214                              <3>     .green_field_position      resb 1    ; Bit position of green mask
   215                              <3>     .blue_mask_size            resb 1    ; Size of direct color blue mask
   216                              <3>     .blue_field_position       resb 1    ; Bit position of blue mask
   217                              <3>     .reserved_mask_size        resb 1    ; Size of direct color reserved mask
   218                              <3>     .reserved_field_position   resb 1    ; Bit position of reserved mask
   219                              <3>     .direct_color_mode_info    resb 1    ; Direct color mode attributes
   220                              <3> 
   221                              <3>     ; VBE 2.0+ fields
   222                              <3>     .phys_base_ptr             resd 1    ; Physical address for flat memory frame buffer
   223                              <3>     .reserved2                 resd 1    ; Reserved
   224                              <3>     .reserved3                 resw 1    ; Reserved
   225                              <3> 
   226                              <3>     ; VBE 3.0+ fields
   227                              <3>     .lin_bytes_per_scanline    resw 1    ; Bytes per scanline for linear modes
   228                              <3>     .bnk_number_of_image_pages resb 1    ; Number of images for banked modes
   229                              <3>     .lin_number_of_image_pages resb 1    ; Number of images for linear modes
   230                              <3>     .lin_red_mask_size         resb 1    ; Size of direct color red mask (linear modes)
   231                              <3>     .lin_red_field_position    resb 1    ; Bit position of red mask (linear modes)
   232                              <3>     .lin_green_mask_size       resb 1    ; Size of direct color green mask (linear modes)
   233                              <3>     .lin_green_field_position  resb 1    ; Bit position of green mask (linear modes)
   234                              <3>     .lin_blue_mask_size        resb 1    ; Size of direct color blue mask (linear modes)
   235                              <3>     .lin_blue_field_position   resb 1    ; Bit position of blue mask (linear modes)
   236                              <3>     .lin_reserved_mask_size    resb 1    ; Size of direct color reserved mask (linear modes)
   237                              <3>     .lin_reserved_field_position resb 1  ; Bit position of reserved mask (linear modes)
   238                              <3>     .max_pixel_clock           resd 1    ; Maximum pixel clock (Hz)
   239                              <3>     .reserved4                 resb 190  ; Reserved for future expansion
   240                              <3> endstruc
   241                              <3> 
   242                              <3> struc e820_memory_entry
   243                              <3>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   244                              <3>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   245                              <3>     .length_low               resd 1    ; Lower 32 bits of the length
   246                              <3>     .length_high              resd 1    ; Upper 32 bits of the length
   247                              <3>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   248                              <3>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   249                              <3> endstruc
   250                              <3> 
   251                              <3> %endif
     5                              <2> %include "../kernel/video.asm"
     1                              <3> %ifndef VIDEO_ASM
     2                              <3> %define VIDEO_ASM
     3                              <3> %include "../bootloader/global_def.asm"
     1                              <4> %ifndef GLOBAL_DEF_ASM
     2                              <4> %define GLOBAL_DEF_ASM
     3                              <4> %define PLATFORM_QEMU_X64 1
     4                              <4> %define PLATFORM_X64 2
     5                              <4> %define DEBUG_PLATFORM PLATFORM_QEMU_X64
     6                              <4> %define DEBUG_MODE 1
     7                              <4> 
     8                              <4> 
     9                              <4> ;|----------------------|
    10                              <4> ;|	100000 ~ END	|
    11                              <4> ;|	   KERNEL	|
    12                              <4> ;|----------------------|
    13                              <4> ;|	E0000 ~ 100000	|
    14                              <4> ;| Extended System BIOS |
    15                              <4> ;|----------------------|
    16                              <4> ;|	C0000 ~ Dffff	|
    17                              <4> ;|     Expansion Area   |
    18                              <4> ;|----------------------|
    19                              <4> ;|	A0000 ~ bffff	|
    20                              <4> ;|   Legacy Video Area  |
    21                              <4> ;|----------------------|
    22                              <4> ;|	9f000 ~ A0000	|
    23                              <4> ;|	 BIOS reserve	|
    24                              <4> ;|----------------------|
    25                              <4> ;|	90000 ~ 9f000	|
    26                              <4> ;|	 kernel tmpbuf	|
    27                              <4> ;|----------------------|
    28                              <4> ;|	10000 ~ 90000	|
    29                              <4> ;|	   LOADER	|
    30                              <4> ;|----------------------|
    31                              <4> ;|	8000 ~ 10000	|
    32                              <4> ;|	  VBE info	|
    33                              <4> ;|----------------------|
    34                              <4> ;|	7e00 ~ 8000	|
    35                              <4> ;|	  mem info	|
    36                              <4> ;|----------------------|
    37                              <4> ;|	7c00 ~ 7e00	|
    38                              <4> ;|	 MBR (BOOT)	|
    39                              <4> ;|----------------------|
    40                              <4> ;|	0000 ~ 7c00	|
    41                              <4> ;|	 BIOS Code	|
    42                              <4> ;|----------------------|
    43                              <4> 
    44                              <4> 
    45                              <4> ;_______________________________________________________
    46                              <4> ; START	END	    SIZE	        USED
    47                              <4> ; FFFF0	FFFFF	16B	        BIOS System Entry
    48                              <4> ; F0000	FFFEF	64KB-16B	BIOS System Code
    49                              <4> ; C8000	EFFFF	160KB	    ROM/Mapped IO
    50                              <4> ; C0000	C7FFF	32KB	    Graphic Adapter BIOS
    51                              <4> ; B8000	BFFFF	32KB	    Chroma Text Video Buffer
    52                              <4> ; B0000	B7FFF	32KB	    Mono Text Video Buffer
    53                              <4> ; A0000	AFFFF	64KB	    Graphic Video Buffer
    54                              <4> ; 9FC00	9FFFF	1KB	        Extended BIOS Data Area
    55                              <4> ; 7E00	9FBFF	622080B     Useable 608KB	
    56                              <4> ; 7C00	7DFF	512B	    MBR
    57                              <4> ; 500	7BFF	30464B      Useable 30KB	
    58                              <4> ; 400	4FF	    256B	    BIOS Data Area
    59                              <4> ; 000	3FF	    1KB	        IVT
    60                              <4> ; _____________________________________________________
    61                              <4> 
    62                              <4> 
    63                              <4> 
    64                              <4> 
    65                              <4> 
    66                              <4> 
    67                              <4> 
    68                              <4> 
    69                              <4> 
    70                              <4> 
    71                              <4> 
    72                              <4> ;|----------------------|
    73                              <4> ;|	100000 ~ END	|
    74                              <4> ;|	   KERNEL	|
    75                              <4> ;|----------------------|
    76                              <4> ;|	E0000 ~ 100000	|
    77                              <4> ;| Extended System BIOS |
    78                              <4> ;|----------------------|
    79                              <4> ;|	C0000 ~ Dffff	|
    80                              <4> ;|     Expansion Area   |
    81                              <4> ;|----------------------|
    82                              <4> ;|	A0000 ~ bffff	|
    83                              <4> ;|   Legacy Video Area  |
    84                              <4> ;|----------------------|
    85                              <4> ;|	9F000 ~ A0000	|
    86                              <4> ;|	 BIOS reserve	|
    87                              <4> ;|----------------------|
    88                              <4> ;|	90000 ~ 9F000	|
    89                              <4> ;|	 kernel tmpbuf	|
    90                              <4> ;|----------------------|
    91                              <4> ;|	10000 ~ 90000	|
    92                              <4> ;|	   LOADER	|
    93                              <4> ;|----------------------|
    94                              <4> ;|	8000 ~ 10000	|
    95                              <4> ;|	  VBE info	|
    96                              <4> ;|----------------------|
    97                              <4> ;|	7E00 ~ 8000	|
    98                              <4> ;|	  mem info	|
    99                              <4> ;|----------------------|
   100                              <4> ;|	7C00 ~ 7E00	|
   101                              <4> ;|	 MBR (BOOT)	|
   102                              <4> ;|----------------------|
   103                              <4> ;|	0000 ~ 7C00	|
   104                              <4> ;|	 BIOS Code	|
   105                              <4> ;|----------------------|
   106                              <4> 
   107                              <4> 
   108                              <4> 
   109                              <4> 
   110                              <4> 
   111                              <4> 
   112                              <4> 
   113                              <4> 
   114                              <4> 
   115                              <4> 
   116                              <4> ;______________________________________________
   117                              <4> ; ----------------Vbe Info Block------------
   118                              <4> ; typedef struct {
   119                              <4> ;     unsigned char       vbe_signature;
   120                              <4> ;     unsigned short      vbe_version;
   121                              <4> ;     unsigned long       oem_string_ptr;
   122                              <4> ;     unsigned char       capabilities;
   123                              <4> ;     unsigned long       video_mode_ptr;
   124                              <4> ;     unsigned short      total_memory;
   125                              <4> ;     unsigned short      oem_software_rev;
   126                              <4> ;     unsigned long       oem_vendor_name_ptr;
   127                              <4> ;     unsigned long       oem_product_name_ptr;
   128                              <4> ;     unsigned long       oem_product_rev_ptr;
   129                              <4> ;     unsigned char       reserved[222];
   130                              <4> ;     unsigned char       oem_data[256];  
   131                              <4> ; } VbeInfoBlock;
   132                              <4> ;______________________________________________
   133                              <4> 
   134                              <4> 
   135                              <4> BaseOfKernelFile	equ	0x00
   136                              <4> OffsetOfKernelFile	equ	0x100000
   137                              <4> BaseTmpOfKernelAddr	equ	0x9000
   138                              <4> OffsetTmpOfKernelFile	equ	0x0000
   139                              <4> VBEStructBufferAddr	equ	0x8000
   140                              <4> VBEModeStructBufferAddr	equ	0x8200
   141                              <4> MemoryStructBufferAddr	equ	0x8800
   142                              <4> 
   143                              <4> KernelCodeSelector      equ 0x08
   144                              <4> KernelDataSelector      equ 0x10
   145                              <4> UserCodeSelector      equ 0x18
   146                              <4> UserDataSelector      equ 0x20
   147                              <4> 
   148                              <4> KernelSpaceUpperAddress equ 0xFFFF800000000000
   149                              <4> 
   150                              <4> GDTPointerUpperAddr equ 0xFFFF800000104000
   151                              <4> IDTPointerUpperAddr equ 0xFFFF80000010400a
   152                              <4> TSSPointerUpperAddr equ 0xFFFF800000104014
   153                              <4> 
   154                              <4> VideoFrameBufferAddress equ 0xFFFF800003000000
   155                              <4> KernelStartSectorNum	equ	16
   156                              <4> 
   157                              <4> 
   158                              <4> 
   159                              <4> 
   160                              <4> MasterSectorReadNumPort    equ	0x1F2
   161                              <4> MasterSectorReadPort    equ	0x1F0
   162                              <4> 
   163                              <4> SlaveReadNumPort    equ	0x172
   164                              <4> SlaveSectorReadPort    equ	0x170
   165                              <4> 
   166                              <4> SectorReadNumPort    equ	MasterSectorReadNumPort
   167                              <4> SectorReadPort    equ	MasterSectorReadPort
   168                              <4> 
   169                              <4> struc vbe_info_block
   170                              <4>     .signature                 resb 4    ; 'VESA' signature (must be "VESA")
   171                              <4>     .version                   resw 1    ; VBE version (e.g., 0x0300 for VBE 3.0)
   172                              <4>     .oem_string_ptr            resd 1    ; Pointer to OEM string
   173                              <4>     .capabilities              resd 1    ; Capabilities of the video card
   174                              <4>     .video_mode_ptr            resd 1    ; Pointer to supported video modes
   175                              <4>     .total_memory              resw 1    ; Total memory in 64KB blocks
   176                              <4> 
   177                              <4>     ; VBE 2.0+ fields
   178                              <4>     .oem_software_rev          resw 1    ; OEM software revision
   179                              <4>     .oem_vendor_name_ptr       resd 1    ; Pointer to OEM vendor name string
   180                              <4>     .oem_product_name_ptr      resd 1    ; Pointer to OEM product name string
   181                              <4>     .oem_product_rev_ptr       resd 1    ; Pointer to OEM product revision string
   182                              <4>     .reserved                  resb 222  ; Reserved for VBE implementation
   183                              <4>     .oem_data                  resb 256  ; Data area for OEM-specific information
   184                              <4> endstruc
   185                              <4> 
   186                              <4> struc vbe_mode_info_block
   187                              <4>     .attributes                resw 1    ; Mode attributes
   188                              <4>     .winA_attributes           resb 1    ; Window A attributes
   189                              <4>     .winB_attributes           resb 1    ; Window B attributes
   190                              <4>     .win_granularity           resw 1    ; Window granularity in KB
   191                              <4>     .win_size                  resw 1    ; Window size in KB
   192                              <4>     .winA_segment              resw 1    ; Window A segment
   193                              <4>     .winB_segment              resw 1    ; Window B segment
   194                              <4>     .win_func_ptr              resd 1    ; Pointer to window function
   195                              <4>     .bytes_per_scanline        resw 1    ; Bytes per scanline
   196                              <4> 
   197                              <4>     ; VBE 1.2+ fields
   198                              <4>     .x_resolution              resw 1    ; Horizontal resolution in pixels
   199                              <4>     .y_resolution              resw 1    ; Vertical resolution in pixels
   200                              <4>     .x_char_size               resb 1    ; Character cell width in pixels
   201                              <4>     .y_char_size               resb 1    ; Character cell height in pixels
   202                              <4>     .number_of_planes          resb 1    ; Number of memory planes
   203                              <4>     .bits_per_pixel            resb 1    ; Bits per pixel
   204                              <4>     .number_of_banks           resb 1    ; Number of banks
   205                              <4>     .memory_model              resb 1    ; Memory model type
   206                              <4>     .bank_size                 resb 1    ; Bank size in KB
   207                              <4>     .number_of_image_pages     resb 1    ; Number of images
   208                              <4>     .reserved1                 resb 1    ; Reserved
   209                              <4> 
   210                              <4>     ; Direct Color fields (VBE 1.2+)
   211                              <4>     .red_mask_size             resb 1    ; Size of direct color red mask
   212                              <4>     .red_field_position        resb 1    ; Bit position of red mask
   213                              <4>     .green_mask_size           resb 1    ; Size of direct color green mask
   214                              <4>     .green_field_position      resb 1    ; Bit position of green mask
   215                              <4>     .blue_mask_size            resb 1    ; Size of direct color blue mask
   216                              <4>     .blue_field_position       resb 1    ; Bit position of blue mask
   217                              <4>     .reserved_mask_size        resb 1    ; Size of direct color reserved mask
   218                              <4>     .reserved_field_position   resb 1    ; Bit position of reserved mask
   219                              <4>     .direct_color_mode_info    resb 1    ; Direct color mode attributes
   220                              <4> 
   221                              <4>     ; VBE 2.0+ fields
   222                              <4>     .phys_base_ptr             resd 1    ; Physical address for flat memory frame buffer
   223                              <4>     .reserved2                 resd 1    ; Reserved
   224                              <4>     .reserved3                 resw 1    ; Reserved
   225                              <4> 
   226                              <4>     ; VBE 3.0+ fields
   227                              <4>     .lin_bytes_per_scanline    resw 1    ; Bytes per scanline for linear modes
   228                              <4>     .bnk_number_of_image_pages resb 1    ; Number of images for banked modes
   229                              <4>     .lin_number_of_image_pages resb 1    ; Number of images for linear modes
   230                              <4>     .lin_red_mask_size         resb 1    ; Size of direct color red mask (linear modes)
   231                              <4>     .lin_red_field_position    resb 1    ; Bit position of red mask (linear modes)
   232                              <4>     .lin_green_mask_size       resb 1    ; Size of direct color green mask (linear modes)
   233                              <4>     .lin_green_field_position  resb 1    ; Bit position of green mask (linear modes)
   234                              <4>     .lin_blue_mask_size        resb 1    ; Size of direct color blue mask (linear modes)
   235                              <4>     .lin_blue_field_position   resb 1    ; Bit position of blue mask (linear modes)
   236                              <4>     .lin_reserved_mask_size    resb 1    ; Size of direct color reserved mask (linear modes)
   237                              <4>     .lin_reserved_field_position resb 1  ; Bit position of reserved mask (linear modes)
   238                              <4>     .max_pixel_clock           resd 1    ; Maximum pixel clock (Hz)
   239                              <4>     .reserved4                 resb 190  ; Reserved for future expansion
   240                              <4> endstruc
   241                              <4> 
   242                              <4> struc e820_memory_entry
   243                              <4>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   244                              <4>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   245                              <4>     .length_low               resd 1    ; Lower 32 bits of the length
   246                              <4>     .length_high              resd 1    ; Upper 32 bits of the length
   247                              <4>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   248                              <4>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   249                              <4> endstruc
   250                              <4> 
   251                              <4> %endif
     4                              <3> %include "../kernel/stddef.asm"
     1                              <4> %ifndef STDDEF_ASM
     2                              <4> %define STDDEF_ASM
     3                              <4> 
     4                              <4> ;-----------Data Type Standard------------;
     5                              <4> %define USE_DT_STANDARD
     6                              <4> %ifdef USE_DT_STANDARD
     7                              <4> ;     %macro gbyte 1 ; 参数1：变量名, 参数2：初始值(1字节)
     8                              <4> ;         %1: db %2
     9                              <4> ;         %endmacro
    10                              <4> 
    11                              <4> ;     %macro g2byte 1 ; 参数1：变量名, 参数2：初始值(4字节)
    12                              <4> ;         %1: dw %2
    13                              <4> ;         %endmacro
    14                              <4> 
    15                              <4> ;     %macro g4byte 1 ; 参数1：变量名, 参数2：初始值(4字节)
    16                              <4> ;         %1: dd %2
    17                              <4> ;         %endmacro
    18                              <4> 
    19                              <4> ;     %macro g8byte 1 ; 参数1：变量名, 参数2：初始值(8字节)
    20                              <4> ;         %1: dq %2
    21                              <4> ;         %endmacro
    22                              <4> 
    23                              <4> ; %define UNIQUE_ID_IMPL(name, line) name %+ _ %+ line
    24                              <4> ; %define UNIQUE_ID(name) UNIQUE_ID_IMPL(name, __LINE__)
    25                              <4> ;     ; %macro lvar 1
    26                              <4> ;     ;     %define %1 qword [rbp - 112-(__local_offset + 8)]
    27                              <4> 
    28                              <4> ;     ;     %assign __local_offset  __local_offset + 8
    29                              <4> 
    30                              <4> ;     ;     sub rsp, 8
    31                              <4> ;     ;     %endmacro
    32                              <4> 
    33                              <4> ;     ; 初始化局部变量追踪
    34                              <4> ;     %macro LOCAL_BEGIN 0
    35                              <4> ;         %push local_ctx              ; 创建新的局部上下文
    36                              <4> ;         %assign %$local_offset 0     ; 初始化局部偏移计数器
    37                              <4> ;     %endmacro
    38                              <4> 
    39                              <4> 
    40                              <4> ;     %macro lvar 1
    41                              <4> ;         %assign %$local_offset %$local_offset+8
    42                              <4> ;         %define %$var_%1 %$local_offset
    43                              <4> ;         %define %1  qword[rbp-%$var_%1]
    44                              <4> ;         sub rsp,8
    45                              <4> ;     %endmacro
    46                              <4> 
    47                              <4>     ; %macro lstr 2
    48                              <4>     ;     %ifstr %2
    49                              <4>     ;         %strlen len %2
    50                              <4>     ;         %assign %$local_offset %$local_offset+len+1   ; 累加偏移
    51                              <4>     ;         %define %$str_%1 %$local_offset               ; 定义变量偏移
    52                              <4>     ;         %define %1  [rbp - %$str_%1]
    53                              <4>     ;         %define %1.size len+1
    54                              <4>     ;         sub rsp,%1.size
    55                              <4>     ;     %endif
    56                              <4>     ;         mov rcx, %3
    57                              <4>     ;         mov rdi, ebp
    58                              <4>     ;         add rdi, %$var_%1
    59                              <4>     ;         lea rsi, [%2]
    60                              <4>     ;         rep movsb
    61                              <4>     ; %endmacro
    62                              <4> 
    63                              <4>     ; %macro lstr_copy 2-3
    64                              <4>     ;     %ifctx local_ctx
    65                              <4>     ;         %if %0 == 3
    66                              <4>     ;             ; 带长度的字符串复制
    67                              <4>     ;             mov ecx, %3
    68                              <4>     ;             mov edi, ebp
    69                              <4>     ;             add edi, %$var_%1
    70                              <4>     ;             lea esi, [%2]
    71                              <4>     ;             rep movsb
    72                              <4>     ;         %else
    73                              <4>     ;             ; 以null结尾的字符串复制
    74                              <4>     ;             mov edi, ebp
    75                              <4>     ;             add edi, %$var_%1
    76                              <4>     ;             lea esi, [%2]
    77                              <4>     ;             %%copy_loop:
    78                              <4>     ;             lodsb
    79                              <4>     ;             stosb
    80                              <4>     ;             test al, al
    81                              <4>     ;             jnz %%copy_loop
    82                              <4>     ;         %endif
    83                              <4>     ;     %else
    84                              <4>     ;         %error "STR_COPY used outside local_ctx block"
    85                              <4>     ;     %endif
    86                              <4>     ; %endmacro
    87                              <4> 
    88                              <4>     ; %macro lstruct 1
    89                              <4>     ;     %assign %$local_offset %$local_offset+8   ; 累加偏移
    90                              <4>     ;     %define %$struct_%1 %$local_offset               ; 定义变量偏移
    91                              <4>     ;     %define %1  rbp - %$struct_%1
    92                              <4>     ;     %define %1.size 5
    93                              <4>     ;     sub rsp,%1.size
    94                              <4>     ; %endmacro
    95                              <4> 
    96                              <4>     ; ; 分配栈空间并保存寄存器
    97                              <4>     ; %macro lalloc 0
    98                              <4>     ;     %if %$local_offset > 0
    99                              <4>     ;         ; 16字节对齐
   100                              <4>     ;         %assign pad (16 - (%$local_offset % 16))
   101                              <4>     ;         %if pad < 16
   102                              <4>     ;             %assign %$local_offset %$local_offset + pad
   103                              <4>     ;         %endif
   104                              <4>     ;         sub rsp, %$local_offset
   105                              <4>     ;     %endif
   106                              <4>     ; %endmacro
   107                              <4> 
   108                              <4> 
   109                              <4>     ; ; 获取局部变量的访问表达式
   110                              <4>     ; %macro locvar 1-*
   111                              <4>     ;     ; [rbp - %$var_%1 ]
   112                              <4> 
   113                              <4>     ;     %ifctx local_ctx
   114                              <4>     ;         ; %ifidn %2, ""
   115                              <4>     ;             qword [rbp - %$var_%1]
   116                              <4>     ;         ; %else
   117                              <4>     ;         ;     [rbp - %$var_%1 - %2]
   118                              <4>     ;         ; %endif
   119                              <4>     ;     %endif
   120                              <4>     ; %endmacro
   121                              <4> 
   122                              <4>     ;     %macro locvar 1-2
   123                              <4>     ;     ; [rbp - %$var_%1 ]
   124                              <4> 
   125                              <4>     ;     %ifctx local_ctx
   126                              <4>     ;         %ifidn %2, ""
   127                              <4>     ;             [rbp - %$var_%1]
   128                              <4>     ;         %else
   129                              <4>     ;             [rbp - %$var_%1 - %2]
   130                              <4>     ;         %endif
   131                              <4>     ;     %endif
   132                              <4>     ; %endmacro
   133                              <4> 
   134                              <4> 
   135                              <4> %endif
   136                              <4> 
   137                              <4> ;-----------Calling Conventions Standard------------;
   138                              <4> %define USE_CC_STANDARD
   139                              <4> %ifdef USE_CC_STANDARD
   140                              <4> 
   141                              <4>     ;caller maintain the stack balance 
   142                              <4>         ; debug_times: db 0
   143                              <4>         ; cmp byte [rel debug_times],3
   144                              <4>         ; je debug_stop
   145                              <4>         ; add byte [rel debug_times],1
   146                              <4>     ; -------------------------------
   147                              <4>     ; 栈帧结构定义
   148                              <4>     ; -------------------------------
   149                              <4>     ; 调用后的栈布局:
   150                              <4>     ; [rsp+0x00] 返回地址 (8字节)
   151                              <4>     ; [rsp+0x08] 旧RBP     (8字节) <- rbp指向这里
   152                              <4>     ; [rsp+0x10] 参数1     (8字节)
   153                              <4>     ; [rsp+0x18] 参数2
   154                              <4>     ; ...
   155                              <4>     ; [rsp+X]    局部变量区
   156                              <4>     ; -------------------------------
   157                              <4> 
   158                              <4>     %define PARAM_OFFSET   16      ; 第一个参数的偏移量(返回地址8 + 旧RBP8)
   159                              <4>     %macro function 1-* ; 1=函数名, 2=返回参数数量, 3=参数列表
   160                              <4>         %assign param_count %0 - 2 ; 参数数量
   161                              <4>         
   162                              <4>         %if param_count < 0
   163                              <4>             %assign param_count 0 ; 如果没有参数，设置为 0
   164                              <4>         %endif
   165                              <4>         %if param_count < 1
   166                              <4>             %assign ret_param_count 0 ; 返回参数数量
   167                              <4>         %else
   168                              <4>             %assign ret_param_count %2 ; 返回参数数量
   169                              <4>         %endif
   170                              <4> 
   171                              <4>         ; 准备调用
   172                              <4>         prepare_call param_count, ret_param_count
   173                              <4> 
   174                              <4>         ; 如果有参数，将参数压入栈
   175                              <4>         %if param_count > 0
   176                              <4>             %assign i 0
   177                              <4>             ; mov [rsp-8], rax ; 保存返回地址
   178                              <4>             %rep param_count
   179                              <4>                 %rotate 1
   180                              <4>                 ; mov rax, %2
   181                              <4>                 ; mov [rsp + 8*i],qword %2 ; 将参数压入栈
   182                              <4>                 push qword %2
   183                              <4>                 pop qword [rsp + 8*i]
   184                              <4>                 %assign i i+1
   185                              <4>             %endrep
   186                              <4>             %rotate 1
   187                              <4>             %rotate 1
   188                              <4>             ; mov rax,[rsp-8]; 保存返回地址
   189                              <4>         %endif
   190                              <4> 
   191                              <4>         ; 调用函数
   192                              <4>         call %1
   193                              <4> 
   194                              <4>         ; 清理栈空间
   195                              <4>         cleanup_call param_count, ret_param_count
   196                              <4> 
   197                              <4>     %endmacro
   198                              <4> 
   199                              <4>     %macro align_stack_16 0
   200                              <4>         test rsp, 0xF
   201                              <4>         jz %%skip_align
   202                              <4>         sub rsp,8
   203                              <4>         %%skip_align:
   204                              <4>     %endmacro
   205                              <4> 
   206                              <4>     ; %macro prologue 0;local var size(bytes)
   207                              <4>     ;     push rbp
   208                              <4>     ;     mov rbp, rsp
   209                              <4> 
   210                              <4> 
   211                              <4>     ;     pushallq
   212                              <4>     ;     LOCAL_BEGIN
   213                              <4>         
   214                              <4> 
   215                              <4>     ;     ; 调试信息可以放在这里
   216                              <4>     ;     ; %ifdef DEBUG
   217                              <4>     ;     ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
   218                              <4>     ;     ; %endif
   219                              <4>     ; %endmacro
   220                              <4>     ; %macro epilogue 0
   221                              <4>     ;     %pop
   222                              <4>     ;     mov rax, rbp
   223                              <4>     ;     sub rax, 8*14
   224                              <4>     ;     mov rsp, rax
   225                              <4> 
   226                              <4>     ;     popallq
   227                              <4> 
   228                              <4>     ;     mov rsp, rbp
   229                              <4>     ;     pop rbp
   230                              <4>     ;     ret
   231                              <4>     ; %endmacro
   232                              <4> 
   233                              <4>     %macro prolog 1;local var size(bytes)
   234                              <4>         push rbp
   235                              <4>         mov rbp, rsp
   236                              <4> 
   237                              <4> 
   238                              <4>         mov [rbp-8],rax
   239                              <4>         mov rax, %1
   240                              <4>         add rax, 15
   241                              <4>         and rax, ~15
   242                              <4>         sub rsp, rax
   243                              <4>         mov rax,[rbp-8]
   244                              <4> 
   245                              <4>         pushallq
   246                              <4>         
   247                              <4>         ; 调试信息可以放在这里
   248                              <4>         ; %ifdef DEBUG
   249                              <4>         ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
   250                              <4>         ; %endif
   251                              <4>     %endmacro
   252                              <4> 
   253                              <4>     %macro epilog 0
   254                              <4>         popallq
   255                              <4> 
   256                              <4>         mov rsp, rbp
   257                              <4>         pop rbp
   258                              <4>         ret
   259                              <4>     %endmacro
   260                              <4> 
   261                              <4>     %macro get_param 2;1=register, 2=param index(from 1)
   262                              <4>         mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   263                              <4>     %endmacro
   264                              <4> 
   265                              <4>     %macro set_ret_param 2;1=register, 2=param index(from 1)
   266                              <4>         mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   267                              <4>     %endmacro
   268                              <4> 
   269                              <4>     %macro prepare_call 2;1=param count, 2=return param count
   270                              <4>         %assign total_space ((%1 + %2) * 8)
   271                              <4>         
   272                              <4>         %if (total_space % 16) != 0
   273                              <4>             %assign total_space total_space + 8  ; 添加填充
   274                              <4>         %endif
   275                              <4>         
   276                              <4>         sub rsp, total_space
   277                              <4>     %endmacro
   278                              <4> 
   279                              <4>     %macro cleanup_call 2;1=param count, 2=return param count
   280                              <4>         %assign total_space ((%1 + %2) * 8)
   281                              <4>         %if (total_space % 16) != 0
   282                              <4>             %assign total_space total_space + 8
   283                              <4>         %endif
   284                              <4>         add rsp, total_space
   285                              <4>     %endmacro
   286                              <4> 
   287                              <4>     %macro pushallq 0
   288                              <4>         push rax
   289                              <4>         push rbx
   290                              <4>         push rcx
   291                              <4>         push rdx
   292                              <4>         push rsi
   293                              <4>         push rdi
   294                              <4>         push r8
   295                              <4>         push r9
   296                              <4>         push r10
   297                              <4>         push r11
   298                              <4>         push r12
   299                              <4>         push r13
   300                              <4>         push r14
   301                              <4>         push r15
   302                              <4>     %endmacro
   303                              <4> 
   304                              <4>     %macro popallq 0
   305                              <4>         pop r15
   306                              <4>         pop r14
   307                              <4>         pop r13
   308                              <4>         pop r12
   309                              <4>         pop r11
   310                              <4>         pop r10
   311                              <4>         pop r9
   312                              <4>         pop r8
   313                              <4>         pop rdi
   314                              <4>         pop rsi
   315                              <4>         pop rdx
   316                              <4>         pop rcx
   317                              <4>         pop rbx
   318                              <4>         pop rax
   319                              <4>     %endmacro
   320                              <4> 
   321                              <4>     %endif
   322                              <4> ;---------------------ABI Standard------------------;
   323                              <4> %define USE_ABI_STANDARD
   324                              <4> %ifdef USE_ABI_STANDARD
   325                              <4> 
   326                              <4> 
   327                              <4>     %define ABI_File_None   0       ; 无文件类型
   328                              <4>     %define ABI_File_REL    1       ; 可重定位文件
   329                              <4>     %define ABI_File_EXEC   2       ; 可执行文件
   330                              <4>     %define ABI_File_DYN    3       ; 共享目标文件
   331                              <4>     %define ABI_File_CORE   4       ; 核心文件
   332                              <4> 
   333                              <4>     %define Section_Type_NULL    0      ; 未使用
   334                              <4>     %define Section_Type_LOAD    1      ; 可加载段
   335                              <4>     %define Section_Type_DYNAMIC 2      ; 动态链接信息
   336                              <4>     %define Section_Type_INTERP  3      ; 解释器路径
   337                              <4>     %define Section_Type_NOTE    4      ; 辅助信息
   338                              <4>     %define Section_Type_SHLIB   5      ; 保留
   339                              <4> 
   340                              <4>     %macro ABI_HEADER 4 ;1=File Type, 2=Entry Point Address, 3=Section Header Offset, 4=Section Header Count
   341                              <4>         db 0xA5, 'A', 'B', 'I'     ; ABI Magic Number
   342                              <4>         db 1                       ; Encode Type
   343                              <4>         db 1                       ; ABI Version
   344                              <4> 
   345                              <4>         dw %1                      ; ABI File Type
   346                              <4>         dq %2                      ; Entry Point Address
   347                              <4>         dw 32                      ; ABI Headers Size
   348                              <4> 
   349                              <4>         dq %3                      ; Section Header Offset
   350                              <4>         dw 32                      ; Section Header Size
   351                              <4>         dw %4                      ; Section Header Count
   352                              <4>         dw 0                       ; Symble Table Entry Size
   353                              <4>     %endmacro
   354                              <4>     STRUC struct_ABI_HEADER
   355                              <4>         .magic:         resb 4    ; ABI Magic Number (4 bytes)
   356                              <4>         .encode_type:   resb 1    ; Encode Type (1 byte)
   357                              <4>         .abi_version:   resb 1    ; ABI Version (1 byte)
   358                              <4>         .file_type:     resw 1    ; ABI File Type (2 bytes)
   359                              <4>         .entry_point:   resq 1    ; Entry Point Address (8 bytes)
   360                              <4>         .header_size:   resw 1    ; ABI Headers Size (2 bytes)
   361                              <4>         .section_offset: resq 1   ; Section Header Offset (8 bytes)
   362                              <4>         .section_size:  resw 1    ; Section Header Size (2 bytes)
   363                              <4>         .section_count: resw 1    ; Section Header Count (2 bytes)
   364                              <4>         .sym_table_size: resw 1   ; Symbol Table Entry Size (2 bytes)
   365                              <4>     ENDSTRUC
   366                              <4> 
   367                              <4>     %macro SECTION_HEADER 4 ;1=Section Type, 2=Virtual Address, 3=Section Offset, 4=Section Size
   368                              <4>         dq %1                  ; Section Type
   369                              <4>         dq %2                  ; Virtual Address
   370                              <4>         dq %3                  ; Section Offset
   371                              <4>         dq %4                  ; Section Size
   372                              <4>     %endmacro
   373                              <4>     STRUC struct_SECTION_HEADER
   374                              <4>         .type:      resq 1    ; Section Type (8 bytes)
   375                              <4>         .vaddr:     resq 1    ; Virtual Address (8 bytes)
   376                              <4>         .offset:    resq 1    ; Section Offset (8 bytes)
   377                              <4>         .size:      resq 1    ; Section Size (8 bytes)
   378                              <4>     ENDSTRUC
   379                              <4>     %endif
   380                              <4> 
   381                              <4> %endif
     5                              <3> [BITS 64]
     6                              <3> struc video_info
     7                              <3>     .start:
     8 00000000 ????                <3>     .xpixel:            resw 1      
     9 00000002 ????                <3>     .ypixel:            resw 1       
    10 00000004 ??                  <3>     .byte_per_pixel:    resb 1     
    11 00000005 ????????????????    <3>     .video_framebuffer: resq 1
    12                              <3>     .end:
    13                              <3>     endstruc
    14                              <3> video_info_ptr:;
    15                              <3>     istruc video_info
    16 000000DE 0000                <3>         at video_info.xpixel, dw 0
    17 000000E0 0000                <3>         at video_info.ypixel, dw 0
    18 000000E2 00                  <3>         at video_info.byte_per_pixel, db 0
    19 000000E3 0000000000000000    <3>         at video_info.video_framebuffer, dq 0
    20                              <3>     iend
    21                              <3> 
    22                              <3> video_init:;ARGB
    23                              <3>     prolog 0;
   234 000000EB 55                  <4>  push rbp
   235 000000EC 4889E5              <4>  mov rbp, rsp
   236                              <4> 
   237                              <4> 
   238 000000EF 488945F8            <4>  mov [rbp-8],rax
   239 000000F3 B800000000          <4>  mov rax, %1
   240 000000F8 4883C00F            <4>  add rax, 15
   241 000000FC 4883E0F0            <4>  and rax, ~15
   242 00000100 4829C4              <4>  sub rsp, rax
   243 00000103 488B45F8            <4>  mov rax,[rbp-8]
   244                              <4> 
   245                              <4>  pushallq
   288 00000107 50                  <5>  push rax
   289 00000108 53                  <5>  push rbx
   290 00000109 51                  <5>  push rcx
   291 0000010A 52                  <5>  push rdx
   292 0000010B 56                  <5>  push rsi
   293 0000010C 57                  <5>  push rdi
   294 0000010D 4150                <5>  push r8
   295 0000010F 4151                <5>  push r9
   296 00000111 4152                <5>  push r10
   297 00000113 4153                <5>  push r11
   298 00000115 4154                <5>  push r12
   299 00000117 4155                <5>  push r13
   300 00000119 4156                <5>  push r14
   301 0000011B 4157                <5>  push r15
   246                              <4> 
   247                              <4> 
   248                              <4> 
   249                              <4> 
   250                              <4> 
    24 0000011D 48BE128200000080FF- <3>     mov rsi,KernelSpaceUpperAddress + VBEModeStructBufferAddr + vbe_mode_info_block.x_resolution
    24 00000126 FF                  <3>
    25 00000127 BB00000000          <3>     mov rbx,0
    26 0000012C 668B1E              <3>     mov  bx, word [rsi]
    27 0000012F 66891DA8FFFFFF      <3>     mov word [rel video_info_ptr + video_info.xpixel],bx
    28                              <3> 
    29 00000136 48BE148200000080FF- <3>     mov rsi,KernelSpaceUpperAddress + VBEModeStructBufferAddr + vbe_mode_info_block.y_resolution
    29 0000013F FF                  <3>
    30 00000140 BB00000000          <3>     mov rbx,0
    31 00000145 668B1E              <3>     mov  bx, word [rsi]
    32 00000148 66891D91FFFFFF      <3>     mov word [rel video_info_ptr + video_info.ypixel],bx
    33                              <3> 
    34 0000014F 48BE198200000080FF- <3>     mov rsi,KernelSpaceUpperAddress + VBEModeStructBufferAddr + vbe_mode_info_block.bits_per_pixel
    34 00000158 FF                  <3>
    35 00000159 BB00000000          <3>     mov rbx,0
    36 0000015E 8A1E                <3>     mov bl, byte [rsi]
    37 00000160 C0EB03              <3>     shr bl,3
    38 00000163 881D79FFFFFF        <3>     mov byte [rel video_info_ptr + video_info.byte_per_pixel],bl
    39                              <3> 
    40                              <3>     ; mov rsi,KernelSpaceUpperAddress + VBEModeStructBufferAddr + vbe_mode_info_block.y_resolution
    41                              <3>     ; mov rbx,0
    42                              <3>     ; mov  bx, word [rsi]
    43 00000169 48BE000000030080FF- <3>     mov rsi,VideoFrameBufferAddress
    43 00000172 FF                  <3>
    44 00000173 48893569FFFFFF      <3>     mov qword [rel video_info_ptr + video_info.video_framebuffer],rsi
    45                              <3> 
    46                              <3>     epilog
   254                              <4>  popallq
   305 0000017A 415F                <5>  pop r15
   306 0000017C 415E                <5>  pop r14
   307 0000017E 415D                <5>  pop r13
   308 00000180 415C                <5>  pop r12
   309 00000182 415B                <5>  pop r11
   310 00000184 415A                <5>  pop r10
   311 00000186 4159                <5>  pop r9
   312 00000188 4158                <5>  pop r8
   313 0000018A 5F                  <5>  pop rdi
   314 0000018B 5E                  <5>  pop rsi
   315 0000018C 5A                  <5>  pop rdx
   316 0000018D 59                  <5>  pop rcx
   317 0000018E 5B                  <5>  pop rbx
   318 0000018F 58                  <5>  pop rax
   255                              <4> 
   256 00000190 4889EC              <4>  mov rsp, rbp
   257 00000193 5D                  <4>  pop rbp
   258 00000194 C3                  <4>  ret
    47                              <3> 
    48                              <3> draw_pixel:; Input: x,y,color
    49                              <3>     prolog 2;
   234 00000195 55                  <4>  push rbp
   235 00000196 4889E5              <4>  mov rbp, rsp
   236                              <4> 
   237                              <4> 
   238 00000199 488945F8            <4>  mov [rbp-8],rax
   239 0000019D B802000000          <4>  mov rax, %1
   240 000001A2 4883C00F            <4>  add rax, 15
   241 000001A6 4883E0F0            <4>  and rax, ~15
   242 000001AA 4829C4              <4>  sub rsp, rax
   243 000001AD 488B45F8            <4>  mov rax,[rbp-8]
   244                              <4> 
   245                              <4>  pushallq
   288 000001B1 50                  <5>  push rax
   289 000001B2 53                  <5>  push rbx
   290 000001B3 51                  <5>  push rcx
   291 000001B4 52                  <5>  push rdx
   292 000001B5 56                  <5>  push rsi
   293 000001B6 57                  <5>  push rdi
   294 000001B7 4150                <5>  push r8
   295 000001B9 4151                <5>  push r9
   296 000001BB 4152                <5>  push r10
   297 000001BD 4153                <5>  push r11
   298 000001BF 4154                <5>  push r12
   299 000001C1 4155                <5>  push r13
   300 000001C3 4156                <5>  push r14
   301 000001C5 4157                <5>  push r15
   246                              <4> 
   247                              <4> 
   248                              <4> 
   249                              <4> 
   250                              <4> 
    50                              <3>         ; jmp $
    51                              <3>     get_param rdi, 1   ; x
   262 000001C7 488B7D10            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    52                              <3>     get_param rsi, 2   ; y
   262 000001CB 488B7518            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    53                              <3>     get_param rdx, 3   ; c
   262 000001CF 488B5520            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    54 000001D3 52                  <3>     push rdx
    55                              <3>     ; mov []
    56 000001D4 488D1D03FFFFFF      <3>     lea rbx, [rel video_info_ptr] ; Load video info structure address
    57                              <3> 
    58                              <3> 
    59                              <3> 
    60                              <3>     ; Calculate pixel offset
    61 000001DB B800000000          <3>     mov rax,0
    62 000001E0 480FB703            <3>     movzx rax, word [rbx + video_info.xpixel] ; Screen width
    63                              <3> 
    64 000001E4 48F7E6              <3>     mul rsi                                 ; y * screen width
    65                              <3>         ; jmp $
    66 000001E7 4801F8              <3>     add rax, rdi                             ; Add x
    67 000001EA 480FB64B04          <3>     movzx rcx, byte [rbx + video_info.byte_per_pixel] ; Bytes per pixel
    68 000001EF 480FAFC1            <3>     imul rax, rcx                          ; Offset = (y * width + x) * bytes_per_pixel
    69                              <3> 
    70                              <3>     ; Write color to framebuffer
    71 000001F3 488B5B05            <3>     mov rbx, qword [rbx + video_info.video_framebuffer] ; Framebuffer address
    72 000001F7 4801C3              <3>     add rbx, rax                          ; rbx = framebuffer + offset
    73                              <3> 
    74 000001FA 5A                  <3>     pop rdx
    75 000001FB 8913                <3>     mov dword [rbx], edx                        ; Write color (assumes 32-bit color)
    76                              <3> 
    77                              <3>         ; jmp $
    78                              <3>     set_ret_param rax,4
   266 000001FD 48894528            <4>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
    79                              <3>     epilog
   254                              <4>  popallq
   305 00000201 415F                <5>  pop r15
   306 00000203 415E                <5>  pop r14
   307 00000205 415D                <5>  pop r13
   308 00000207 415C                <5>  pop r12
   309 00000209 415B                <5>  pop r11
   310 0000020B 415A                <5>  pop r10
   311 0000020D 4159                <5>  pop r9
   312 0000020F 4158                <5>  pop r8
   313 00000211 5F                  <5>  pop rdi
   314 00000212 5E                  <5>  pop rsi
   315 00000213 5A                  <5>  pop rdx
   316 00000214 59                  <5>  pop rcx
   317 00000215 5B                  <5>  pop rbx
   318 00000216 58                  <5>  pop rax
   255                              <4> 
   256 00000217 4889EC              <4>  mov rsp, rbp
   257 0000021A 5D                  <4>  pop rbp
   258 0000021B C3                  <4>  ret
    80                              <3> 
    81                              <3> draw_line:; Bresenham's line algorithm Input: x1,y1,x2,y2,color
    82                              <3>     prolog 2;
   234 0000021C 55                  <4>  push rbp
   235 0000021D 4889E5              <4>  mov rbp, rsp
   236                              <4> 
   237                              <4> 
   238 00000220 488945F8            <4>  mov [rbp-8],rax
   239 00000224 B802000000          <4>  mov rax, %1
   240 00000229 4883C00F            <4>  add rax, 15
   241 0000022D 4883E0F0            <4>  and rax, ~15
   242 00000231 4829C4              <4>  sub rsp, rax
   243 00000234 488B45F8            <4>  mov rax,[rbp-8]
   244                              <4> 
   245                              <4>  pushallq
   288 00000238 50                  <5>  push rax
   289 00000239 53                  <5>  push rbx
   290 0000023A 51                  <5>  push rcx
   291 0000023B 52                  <5>  push rdx
   292 0000023C 56                  <5>  push rsi
   293 0000023D 57                  <5>  push rdi
   294 0000023E 4150                <5>  push r8
   295 00000240 4151                <5>  push r9
   296 00000242 4152                <5>  push r10
   297 00000244 4153                <5>  push r11
   298 00000246 4154                <5>  push r12
   299 00000248 4155                <5>  push r13
   300 0000024A 4156                <5>  push r14
   301 0000024C 4157                <5>  push r15
   246                              <4> 
   247                              <4> 
   248                              <4> 
   249                              <4> 
   250                              <4> 
    83                              <3>     get_param rdi, 1    ; x1
   262 0000024E 488B7D10            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    84                              <3>     get_param rsi, 2    ; y1
   262 00000252 488B7518            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    85                              <3>     get_param rdx, 3    ; x2
   262 00000256 488B5520            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    86                              <3>     get_param rcx, 4    ; y2
   262 0000025A 488B4D28            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    87                              <3>     get_param r8,  5    ; color
   262 0000025E 4C8B4530            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    88                              <3> 
    89                              <3>     ; Calculate dx and dy
    90 00000262 4989D1              <3>     mov r9, rdx         ; r9 = x2
    91 00000265 4929F9              <3>     sub r9, rdi         ; dx = x2 - x1
    92 00000268 4989CA              <3>     mov r10, rcx        ; r10 = y2
    93 0000026B 4929F2              <3>     sub r10, rsi        ; dy = y2 - y1
    94                              <3> 
    95                              <3>     ; Determine the absolute values of dx and dy
    96 0000026E 4D89CB              <3>     mov r11, r9         ; r11 = dx
    97 00000271 4D85DB              <3>     test r11, r11
    98 00000274 7903                <3>     jns .dx_positive
    99 00000276 49F7DB              <3>     neg r11             ; r11 = abs(dx)
   100                              <3>     .dx_positive:
   101 00000279 4D89D4              <3>         mov r12, r10        ; r12 = dy
   102 0000027C 4D85E4              <3>         test r12, r12
   103 0000027F 7903                <3>         jns .dy_positive
   104 00000281 49F7DC              <3>         neg r12             ; r12 = abs(dy)
   105                              <3>     .dy_positive:
   106                              <3> 
   107                              <3>         ; Determine the direction of the line
   108 00000284 41BD01000000        <3>         mov r13, 1          ; x_step = 1
   109 0000028A 4D85C9              <3>         test r9, r9
   110 0000028D 7907                <3>         jns .x_step_positive
   111 0000028F 49C7C5FFFFFFFF      <3>         mov r13, -1         ; x_step = -1
   112                              <3>     .x_step_positive:
   113 00000296 41BE01000000        <3>         mov r14, 1          ; y_step = 1
   114 0000029C 4D85D2              <3>         test r10, r10
   115 0000029F 7907                <3>         jns .y_step_positive
   116 000002A1 49C7C6FFFFFFFF      <3>         mov r14, -1         ; y_step = -1
   117                              <3>     .y_step_positive:
   118                              <3> 
   119 000002A8 4D39E3              <3>     cmp r11, r12        ; Compare abs(dx) and abs(dy)
   120 000002AB 7D21                <3>     jge .steep_x        ; If abs(dx) >= abs(dy), use x-major line
   121 000002AD 4D89DF              <3>     mov r15, r11        ; error = abs(dx)
   122 000002B0 49D1E7              <3>     shl r15, 1          ; error = 2 * abs(dx)
   123 000002B3 4D29E7              <3>     sub r15, r12         ; error = 2 * abs(dx) - abs(dy)
   124                              <3> 
   125 000002B6 4D89D9              <3>     mov r9, r11         ; r9 = abs(dx)
   126 000002B9 49D1E1              <3>     shl r9, 1           ; delta_error = 2 * abs(dx)
   127                              <3> 
   128 000002BC 4D89CA              <3>     mov r10,r9
   129 000002BF 4157                <3>     push r15
   130 000002C1 4D89E7              <3>     mov r15, r12
   131 000002C4 49D1E7              <3>     shl r15, 1           ; delta_error = 2 * abs(dy)
   132 000002C7 4D29FA              <3>     sub r10,r15
   133 000002CA 415F                <3>     pop r15
   134 000002CC EB21                <3>     jmp .draw_loop_dy
   135                              <3>     .steep_x:
   136 000002CE 4D89E7              <3>         mov r15, r12        ; error = abs(dy)
   137 000002D1 49D1E7              <3>         shl r15, 1          ; error = 2 * abs(dy)
   138 000002D4 4D29DF              <3>         sub r15, r11         ; error = 2 * abs(dy) - abs(dx)
   139                              <3> 
   140 000002D7 4D89E1              <3>         mov r9, r12         ; r9 = abs(dy)
   141 000002DA 49D1E1              <3>         shl r9, 1           ; delta_error = 2 * abs(dy)
   142                              <3> 
   143 000002DD 4D89CA              <3>         mov r10,r9
   144 000002E0 4157                <3>         push r15
   145 000002E2 4D89DF              <3>         mov r15, r11
   146 000002E5 49D1E7              <3>         shl r15, 1           ; delta_error = 2 * abs(dx)
   147 000002E8 4D29FA              <3>         sub r10,r15
   148 000002EB 415F                <3>         pop r15
   149 000002ED EB39                <3>         jmp .draw_loop_dx
   150                              <3>     .draw_loop_dy:
   151 000002EF 4839CE              <3>         cmp rsi, rcx        ; Compare y1 with y2
   152 000002F2 746D                <3>         je .done            ; If both match, we're done
   153                              <3> 
   154 000002F4 4983FF00            <3>         cmp r15,0
   155 000002F8 7D08                <3>         jge .yup1
   156 000002FA 4C01F6              <3>         add rsi, r14        ; y += y_step
   157 000002FD 4D01CF              <3>         add r15,r9
   158 00000300 EB09                <3>         jmp .ydrawloop
   159                              <3>         .yup1:
   160 00000302 4C01EF              <3>             add rdi, r13        ; x += x_step
   161 00000305 4C01F6              <3>             add rsi, r14        ; y += y_step
   162 00000308 4D01D7              <3>             add r15,r10
   163                              <3>         .ydrawloop:
   164                              <3>             ; Draw the current pixel
   165                              <3>             prepare_call 3,1
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 0000030B 4883EC20            <4>  sub rsp, total_space
   166 0000030F 4C89442410          <3>             mov qword [rsp+16], r8
   167 00000314 4889742408          <3>             mov qword [rsp+8], rsi
   168 00000319 48893C24            <3>             mov qword [rsp], rdi
   169 0000031D E873FEFFFF          <3>             call draw_pixel
   170                              <3>             cleanup_call 3,1
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00000322 4883C420            <4>  add rsp, total_space
   171                              <3>             ; mov rax, [rsp-8]
   172 00000326 EBC7                <3>             jmp .draw_loop_dy            ; If both match, we're done
   173                              <3> 
   174                              <3>     .draw_loop_dx:
   175 00000328 4839D7              <3>         cmp rdi, rdx        ; Compare y1 with y2
   176 0000032B 7434                <3>         je .done            ; If both match, we're done
   177                              <3> 
   178 0000032D 4983FF00            <3>         cmp r15,0
   179 00000331 7D08                <3>         jge .xup1
   180 00000333 4C01EF              <3>         add rdi, r13        ; y += y_step
   181 00000336 4D01CF              <3>         add r15,r9
   182 00000339 EB09                <3>         jmp .xdrawloop
   183                              <3>         .xup1:
   184 0000033B 4C01EF              <3>             add rdi, r13        ; x += x_step
   185 0000033E 4C01F6              <3>             add rsi, r14        ; y += y_step
   186 00000341 4D01D7              <3>             add r15,r10
   187                              <3>         .xdrawloop:
   188                              <3>             ; Draw the current pixel
   189                              <3>             prepare_call 3,1
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00000344 4883EC20            <4>  sub rsp, total_space
   190 00000348 4C89442410          <3>             mov qword [rsp+16], r8
   191 0000034D 4889742408          <3>             mov qword [rsp+8], rsi
   192 00000352 48893C24            <3>             mov qword [rsp], rdi
   193 00000356 E83AFEFFFF          <3>             call draw_pixel
   194                              <3>             cleanup_call 3,1
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 0000035B 4883C420            <4>  add rsp, total_space
   195                              <3>             ; mov rax, [rsp-8]
   196 0000035F EBC7                <3>             jmp .draw_loop_dx            ; If both match, we're done
   197                              <3>         
   198                              <3>     .done:
   199                              <3>         set_ret_param rcx,6
   266 00000361 48894D38            <4>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   200                              <3>         epilog
   254                              <4>  popallq
   305 00000365 415F                <5>  pop r15
   306 00000367 415E                <5>  pop r14
   307 00000369 415D                <5>  pop r13
   308 0000036B 415C                <5>  pop r12
   309 0000036D 415B                <5>  pop r11
   310 0000036F 415A                <5>  pop r10
   311 00000371 4159                <5>  pop r9
   312 00000373 4158                <5>  pop r8
   313 00000375 5F                  <5>  pop rdi
   314 00000376 5E                  <5>  pop rsi
   315 00000377 5A                  <5>  pop rdx
   316 00000378 59                  <5>  pop rcx
   317 00000379 5B                  <5>  pop rbx
   318 0000037A 58                  <5>  pop rax
   255                              <4> 
   256 0000037B 4889EC              <4>  mov rsp, rbp
   257 0000037E 5D                  <4>  pop rbp
   258 0000037F C3                  <4>  ret
   201                              <3> 
   202                              <3> draw_rect:; Input: x1,y1,x2,y2,color
   203                              <3>     prolog 2;
   234 00000380 55                  <4>  push rbp
   235 00000381 4889E5              <4>  mov rbp, rsp
   236                              <4> 
   237                              <4> 
   238 00000384 488945F8            <4>  mov [rbp-8],rax
   239 00000388 B802000000          <4>  mov rax, %1
   240 0000038D 4883C00F            <4>  add rax, 15
   241 00000391 4883E0F0            <4>  and rax, ~15
   242 00000395 4829C4              <4>  sub rsp, rax
   243 00000398 488B45F8            <4>  mov rax,[rbp-8]
   244                              <4> 
   245                              <4>  pushallq
   288 0000039C 50                  <5>  push rax
   289 0000039D 53                  <5>  push rbx
   290 0000039E 51                  <5>  push rcx
   291 0000039F 52                  <5>  push rdx
   292 000003A0 56                  <5>  push rsi
   293 000003A1 57                  <5>  push rdi
   294 000003A2 4150                <5>  push r8
   295 000003A4 4151                <5>  push r9
   296 000003A6 4152                <5>  push r10
   297 000003A8 4153                <5>  push r11
   298 000003AA 4154                <5>  push r12
   299 000003AC 4155                <5>  push r13
   300 000003AE 4156                <5>  push r14
   301 000003B0 4157                <5>  push r15
   246                              <4> 
   247                              <4> 
   248                              <4> 
   249                              <4> 
   250                              <4> 
   204                              <3>     get_param rdi, 1    ; x1
   262 000003B2 488B7D10            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   205                              <3>     get_param rsi, 2    ; y1
   262 000003B6 488B7518            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   206                              <3>     get_param rdx, 3    ; x2
   262 000003BA 488B5520            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   207                              <3>     get_param rcx, 4    ; y2
   262 000003BE 488B4D28            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   208                              <3>     get_param r8,  5    ; color
   262 000003C2 4C8B4530            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   209                              <3>     ; jmp $
   210                              <3>     .line1:
   211                              <3>         prepare_call 5,1
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 000003C6 4883EC30            <4>  sub rsp, total_space
   212 000003CA 48C7442420FFFFFF00  <3>         mov qword [rsp+32], 0x00FFFFFF
   213 000003D3 4889742418          <3>         mov qword [rsp+24], rsi
   214 000003D8 4889542410          <3>         mov qword [rsp+16], rdx
   215                              <3> 
   216 000003DD 4889742408          <3>         mov qword [rsp+8], rsi
   217 000003E2 48893C24            <3>         mov qword [rsp], rdi
   218 000003E6 E831FEFFFF          <3>         call draw_line
   219                              <3>         cleanup_call 5,1
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 000003EB 4883C430            <4>  add rsp, total_space
   220 000003EF 488B4424F8          <3>         mov rax, [rsp-8]
   221                              <3>     .line2:
   222                              <3>         prepare_call 5,1
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 000003F4 4883EC30            <4>  sub rsp, total_space
   223 000003F8 48C7442420FFFFFF00  <3>         mov qword [rsp+32], 0x00FFFFFF
   224 00000401 48894C2418          <3>         mov qword [rsp+24], rcx
   225 00000406 4889542410          <3>         mov qword [rsp+16], rdx
   226                              <3> 
   227 0000040B 4889742408          <3>         mov qword [rsp+8], rsi
   228 00000410 48891424            <3>         mov qword [rsp], rdx
   229 00000414 E803FEFFFF          <3>         call draw_line
   230                              <3>         cleanup_call 5,1
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00000419 4883C430            <4>  add rsp, total_space
   231 0000041D 488B4424F8          <3>         mov rax, [rsp-8]
   232                              <3>     .line3:
   233                              <3>         prepare_call 5,1
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00000422 4883EC30            <4>  sub rsp, total_space
   234 00000426 48C7442420FFFFFF00  <3>         mov qword [rsp+32], 0x00FFFFFF
   235 0000042F 48894C2418          <3>         mov qword [rsp+24], rcx
   236 00000434 48897C2410          <3>         mov qword [rsp+16], rdi
   237                              <3> 
   238 00000439 48894C2408          <3>         mov qword [rsp+8], rcx
   239 0000043E 48891424            <3>         mov qword [rsp], rdx
   240 00000442 E8D5FDFFFF          <3>         call draw_line
   241                              <3>         cleanup_call 5,1
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00000447 4883C430            <4>  add rsp, total_space
   242 0000044B 488B4424F8          <3>         mov rax, [rsp-8]
   243                              <3>     .line4:
   244                              <3>         prepare_call 5,1
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00000450 4883EC30            <4>  sub rsp, total_space
   245 00000454 48C7442420FFFFFF00  <3>         mov qword [rsp+32], 0x00FFFFFF
   246 0000045D 4889742418          <3>         mov qword [rsp+24], rsi
   247 00000462 48897C2410          <3>         mov qword [rsp+16], rdi
   248                              <3> 
   249 00000467 48894C2408          <3>         mov qword [rsp+8], rcx
   250 0000046C 48893C24            <3>         mov qword [rsp], rdi
   251 00000470 E8A7FDFFFF          <3>         call draw_line
   252                              <3>         cleanup_call 5,1
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00000475 4883C430            <4>  add rsp, total_space
   253 00000479 488B4424F8          <3>         mov rax, [rsp-8]
   254                              <3>     .done:
   255                              <3>         set_ret_param rcx,6
   266 0000047E 48894D38            <4>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   256                              <3>         epilog
   254                              <4>  popallq
   305 00000482 415F                <5>  pop r15
   306 00000484 415E                <5>  pop r14
   307 00000486 415D                <5>  pop r13
   308 00000488 415C                <5>  pop r12
   309 0000048A 415B                <5>  pop r11
   310 0000048C 415A                <5>  pop r10
   311 0000048E 4159                <5>  pop r9
   312 00000490 4158                <5>  pop r8
   313 00000492 5F                  <5>  pop rdi
   314 00000493 5E                  <5>  pop rsi
   315 00000494 5A                  <5>  pop rdx
   316 00000495 59                  <5>  pop rcx
   317 00000496 5B                  <5>  pop rbx
   318 00000497 58                  <5>  pop rax
   255                              <4> 
   256 00000498 4889EC              <4>  mov rsp, rbp
   257 0000049B 5D                  <4>  pop rbp
   258 0000049C C3                  <4>  ret
   257                              <3> 
   258                              <3> draw_screen:;Input:color
   259                              <3>     prolog 2;
   234 0000049D 55                  <4>  push rbp
   235 0000049E 4889E5              <4>  mov rbp, rsp
   236                              <4> 
   237                              <4> 
   238 000004A1 488945F8            <4>  mov [rbp-8],rax
   239 000004A5 B802000000          <4>  mov rax, %1
   240 000004AA 4883C00F            <4>  add rax, 15
   241 000004AE 4883E0F0            <4>  and rax, ~15
   242 000004B2 4829C4              <4>  sub rsp, rax
   243 000004B5 488B45F8            <4>  mov rax,[rbp-8]
   244                              <4> 
   245                              <4>  pushallq
   288 000004B9 50                  <5>  push rax
   289 000004BA 53                  <5>  push rbx
   290 000004BB 51                  <5>  push rcx
   291 000004BC 52                  <5>  push rdx
   292 000004BD 56                  <5>  push rsi
   293 000004BE 57                  <5>  push rdi
   294 000004BF 4150                <5>  push r8
   295 000004C1 4151                <5>  push r9
   296 000004C3 4152                <5>  push r10
   297 000004C5 4153                <5>  push r11
   298 000004C7 4154                <5>  push r12
   299 000004C9 4155                <5>  push r13
   300 000004CB 4156                <5>  push r14
   301 000004CD 4157                <5>  push r15
   246                              <4> 
   247                              <4> 
   248                              <4> 
   249                              <4> 
   250                              <4> 
   260                              <3> 
   261                              <3>     get_param rdi, 1   ; x
   262 000004CF 488B7D10            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   262                              <3> 
   263 000004D3 488D1D04FCFFFF      <3>     lea rbx, [rel video_info_ptr] ; Load video info structure address
   264                              <3>     ; Calculate pixel offset
   265 000004DA B800000000          <3>     mov rax,0
   266 000004DF 480FB703            <3>     movzx rax, word [rbx + video_info.xpixel] ; Screen width
   267                              <3> 
   268 000004E3 B900000000          <3>     mov rcx,0
   269 000004E8 480FB74B02          <3>     movzx rcx, word [rbx + video_info.ypixel] ; Screen height
   270                              <3> 
   271 000004ED 48F7E1              <3>     mul rcx
   272                              <3> 
   273 000004F0 4889C1              <3>     mov rcx,rax
   274 000004F3 480FB65304          <3>     movzx rdx, byte [rbx + video_info.byte_per_pixel] ; Bytes per pixel
   275 000004F8 48F7E2              <3>     mul rdx                          ; Offset = (y * width + x) * bytes_per_pixel
   276                              <3> 
   277 000004FB 488B5B05            <3>     mov rbx, qword [rbx + video_info.video_framebuffer] ; Framebuffer address
   278 000004FF 4801C3              <3>     add rbx,rax
   279                              <3>     .write_color:
   280                              <3>         ; Write color to framebuffer
   281                              <3>         
   282 00000502 893B                <3>         mov dword [rbx], edi                        ; Write color (assumes 32-bit color)
   283 00000504 4883EB04            <3>         sub rbx,4                          ; rbx = framebuffer + offset
   284 00000508 E2F8                <3>         loop .write_color
   285                              <3> 
   286                              <3>         ; jmp $
   287                              <3>     set_ret_param rax,2
   266 0000050A 48894518            <4>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   288                              <3> 
   289                              <3>     epilog
   254                              <4>  popallq
   305 0000050E 415F                <5>  pop r15
   306 00000510 415E                <5>  pop r14
   307 00000512 415D                <5>  pop r13
   308 00000514 415C                <5>  pop r12
   309 00000516 415B                <5>  pop r11
   310 00000518 415A                <5>  pop r10
   311 0000051A 4159                <5>  pop r9
   312 0000051C 4158                <5>  pop r8
   313 0000051E 5F                  <5>  pop rdi
   314 0000051F 5E                  <5>  pop rsi
   315 00000520 5A                  <5>  pop rdx
   316 00000521 59                  <5>  pop rcx
   317 00000522 5B                  <5>  pop rbx
   318 00000523 58                  <5>  pop rax
   255                              <4> 
   256 00000524 4889EC              <4>  mov rsp, rbp
   257 00000527 5D                  <4>  pop rbp
   258 00000528 C3                  <4>  ret
   290                              <3> 
   291                              <3> 
   292                              <3> draw_triangle: ; Input: x1, y1, x2, y2, x3, y3, color
   293                              <3>     prolog 2;
   234 00000529 55                  <4>  push rbp
   235 0000052A 4889E5              <4>  mov rbp, rsp
   236                              <4> 
   237                              <4> 
   238 0000052D 488945F8            <4>  mov [rbp-8],rax
   239 00000531 B802000000          <4>  mov rax, %1
   240 00000536 4883C00F            <4>  add rax, 15
   241 0000053A 4883E0F0            <4>  and rax, ~15
   242 0000053E 4829C4              <4>  sub rsp, rax
   243 00000541 488B45F8            <4>  mov rax,[rbp-8]
   244                              <4> 
   245                              <4>  pushallq
   288 00000545 50                  <5>  push rax
   289 00000546 53                  <5>  push rbx
   290 00000547 51                  <5>  push rcx
   291 00000548 52                  <5>  push rdx
   292 00000549 56                  <5>  push rsi
   293 0000054A 57                  <5>  push rdi
   294 0000054B 4150                <5>  push r8
   295 0000054D 4151                <5>  push r9
   296 0000054F 4152                <5>  push r10
   297 00000551 4153                <5>  push r11
   298 00000553 4154                <5>  push r12
   299 00000555 4155                <5>  push r13
   300 00000557 4156                <5>  push r14
   301 00000559 4157                <5>  push r15
   246                              <4> 
   247                              <4> 
   248                              <4> 
   249                              <4> 
   250                              <4> 
   294                              <3>     get_param rdi, 1    ; x1
   262 0000055B 488B7D10            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   295                              <3>     get_param rsi, 2    ; y1
   262 0000055F 488B7518            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   296                              <3>     get_param rdx, 3    ; x2
   262 00000563 488B5520            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   297                              <3>     get_param rcx, 4    ; y2
   262 00000567 488B4D28            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   298                              <3>     get_param r8,  5    ; x3
   262 0000056B 4C8B4530            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   299                              <3>     get_param r9,  6    ; y3
   262 0000056F 4C8B4D38            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   300                              <3>     get_param r10, 7    ; color
   262 00000573 4C8B5540            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   301                              <3> 
   302                              <3>     ; Draw line from (x1, y1) to (x2, y2)
   303                              <3>     prepare_call 5, 1
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00000577 4883EC30            <4>  sub rsp, total_space
   304 0000057B 4C89542420          <3>     mov qword [rsp+32], r10 ; color
   305 00000580 48894C2418          <3>     mov qword [rsp+24], rcx ; y2
   306 00000585 4889542410          <3>     mov qword [rsp+16], rdx ; x2
   307 0000058A 4889742408          <3>     mov qword [rsp+8], rsi  ; y1
   308 0000058F 48893C24            <3>     mov qword [rsp], rdi    ; x1
   309 00000593 E884FCFFFF          <3>     call draw_line
   310                              <3>     cleanup_call 5, 1
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00000598 4883C430            <4>  add rsp, total_space
   311                              <3> 
   312                              <3>     ; Draw line from (x2, y2) to (x3, y3)
   313                              <3>     prepare_call 5, 1
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 0000059C 4883EC30            <4>  sub rsp, total_space
   314 000005A0 4C89542420          <3>     mov qword [rsp+32], r10 ; color
   315 000005A5 4C894C2418          <3>     mov qword [rsp+24], r9  ; y3
   316 000005AA 4C89442410          <3>     mov qword [rsp+16], r8  ; x3
   317 000005AF 48894C2408          <3>     mov qword [rsp+8], rcx  ; y2
   318 000005B4 48891424            <3>     mov qword [rsp], rdx    ; x2
   319 000005B8 E85FFCFFFF          <3>     call draw_line
   320                              <3>     cleanup_call 5, 1
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 000005BD 4883C430            <4>  add rsp, total_space
   321                              <3> 
   322                              <3>     ; Draw line from (x3, y3) to (x1, y1)
   323                              <3>     prepare_call 5, 1
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 000005C1 4883EC30            <4>  sub rsp, total_space
   324 000005C5 4C89542420          <3>     mov qword [rsp+32], r10 ; color
   325 000005CA 4889742418          <3>     mov qword [rsp+24], rsi ; y1
   326 000005CF 48897C2410          <3>     mov qword [rsp+16], rdi ; x1
   327 000005D4 4C894C2408          <3>     mov qword [rsp+8], r9   ; y3
   328 000005D9 4C890424            <3>     mov qword [rsp], r8     ; x3
   329 000005DD E83AFCFFFF          <3>     call draw_line
   330                              <3>     cleanup_call 5, 1
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 000005E2 4883C430            <4>  add rsp, total_space
   331                              <3> 
   332                              <3>     set_ret_param rax, 8
   266 000005E6 48894548            <4>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   333                              <3>     epilog
   254                              <4>  popallq
   305 000005EA 415F                <5>  pop r15
   306 000005EC 415E                <5>  pop r14
   307 000005EE 415D                <5>  pop r13
   308 000005F0 415C                <5>  pop r12
   309 000005F2 415B                <5>  pop r11
   310 000005F4 415A                <5>  pop r10
   311 000005F6 4159                <5>  pop r9
   312 000005F8 4158                <5>  pop r8
   313 000005FA 5F                  <5>  pop rdi
   314 000005FB 5E                  <5>  pop rsi
   315 000005FC 5A                  <5>  pop rdx
   316 000005FD 59                  <5>  pop rcx
   317 000005FE 5B                  <5>  pop rbx
   318 000005FF 58                  <5>  pop rax
   255                              <4> 
   256 00000600 4889EC              <4>  mov rsp, rbp
   257 00000603 5D                  <4>  pop rbp
   258 00000604 C3                  <4>  ret
   334                              <3> 
   335                              <3> draw_circle: ; Input: x_center, y_center, radius, color
   336                              <3>     prolog 2;
   234 00000605 55                  <4>  push rbp
   235 00000606 4889E5              <4>  mov rbp, rsp
   236                              <4> 
   237                              <4> 
   238 00000609 488945F8            <4>  mov [rbp-8],rax
   239 0000060D B802000000          <4>  mov rax, %1
   240 00000612 4883C00F            <4>  add rax, 15
   241 00000616 4883E0F0            <4>  and rax, ~15
   242 0000061A 4829C4              <4>  sub rsp, rax
   243 0000061D 488B45F8            <4>  mov rax,[rbp-8]
   244                              <4> 
   245                              <4>  pushallq
   288 00000621 50                  <5>  push rax
   289 00000622 53                  <5>  push rbx
   290 00000623 51                  <5>  push rcx
   291 00000624 52                  <5>  push rdx
   292 00000625 56                  <5>  push rsi
   293 00000626 57                  <5>  push rdi
   294 00000627 4150                <5>  push r8
   295 00000629 4151                <5>  push r9
   296 0000062B 4152                <5>  push r10
   297 0000062D 4153                <5>  push r11
   298 0000062F 4154                <5>  push r12
   299 00000631 4155                <5>  push r13
   300 00000633 4156                <5>  push r14
   301 00000635 4157                <5>  push r15
   246                              <4> 
   247                              <4> 
   248                              <4> 
   249                              <4> 
   250                              <4> 
   337                              <3>     get_param rdi, 1    ; x_center
   262 00000637 488B7D10            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   338                              <3>     get_param rsi, 2    ; y_center
   262 0000063B 488B7518            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   339                              <3>     get_param rdx, 3    ; radius
   262 0000063F 488B5520            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   340                              <3>     get_param rcx, 4    ; color
   262 00000643 488B4D28            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   341                              <3> 
   342                              <3>     ; Initialize variables
   343 00000647 41B800000000        <3>     mov r8, 0           ; x = 0
   344 0000064D 4989D1              <3>     mov r9, rdx         ; y = radius
   345 00000650 41BA03000000        <3>     mov r10, 3          ; decision = 1 - radius
   346 00000656 4889D0              <3>     mov rax, rdx         ; r = radius
   347 00000659 BB02000000          <3>     mov rbx,2
   348 0000065E 48F7E3              <3>     mul rbx
   349 00000661 4929C2              <3>     sub r10,rax
   350                              <3>     ; d = 3 - 2 * r;
   351                              <3> 
   352                              <3>     .circle_loop:
   353                              <3>         ; Draw the 8 symmetric points of the circle
   354                              <3>         prepare_call 3, 1
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00000664 4883EC20            <4>  sub rsp, total_space
   355 00000668 48894C2410          <3>         mov qword [rsp+16], rcx
   356 0000066D 4889742408          <3>         mov qword [rsp+8], rsi
   357 00000672 48893C24            <3>         mov qword [rsp], rdi
   358 00000676 4C010424            <3>         add qword [rsp], r8
   359 0000067A 4C014C2408          <3>         add qword [rsp+8], r9
   360 0000067F E811FBFFFF          <3>         call draw_pixel
   361                              <3>         cleanup_call 3, 1
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00000684 4883C420            <4>  add rsp, total_space
   362                              <3> 
   363                              <3>         prepare_call 3, 1
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00000688 4883EC20            <4>  sub rsp, total_space
   364 0000068C 48894C2410          <3>         mov qword [rsp+16], rcx
   365 00000691 4889742408          <3>         mov qword [rsp+8], rsi
   366 00000696 48893C24            <3>         mov qword [rsp], rdi
   367 0000069A 4C290424            <3>         sub qword [rsp], r8
   368 0000069E 4C014C2408          <3>         add qword [rsp+8], r9
   369 000006A3 E8EDFAFFFF          <3>         call draw_pixel
   370                              <3>         cleanup_call 3, 1
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 000006A8 4883C420            <4>  add rsp, total_space
   371                              <3> 
   372                              <3>         prepare_call 3, 1
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 000006AC 4883EC20            <4>  sub rsp, total_space
   373 000006B0 48894C2410          <3>         mov qword [rsp+16], rcx
   374 000006B5 4889742408          <3>         mov qword [rsp+8], rsi
   375 000006BA 48893C24            <3>         mov qword [rsp], rdi
   376 000006BE 4C010424            <3>         add qword [rsp], r8
   377 000006C2 4C294C2408          <3>         sub qword [rsp+8], r9
   378 000006C7 E8C9FAFFFF          <3>         call draw_pixel
   379                              <3>         cleanup_call 3, 1
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 000006CC 4883C420            <4>  add rsp, total_space
   380                              <3> 
   381                              <3>         prepare_call 3, 1
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 000006D0 4883EC20            <4>  sub rsp, total_space
   382 000006D4 48894C2410          <3>         mov qword [rsp+16], rcx
   383 000006D9 4889742408          <3>         mov qword [rsp+8], rsi
   384 000006DE 48893C24            <3>         mov qword [rsp], rdi
   385 000006E2 4C290424            <3>         sub qword [rsp], r8
   386 000006E6 4C294C2408          <3>         sub qword [rsp+8], r9
   387 000006EB E8A5FAFFFF          <3>         call draw_pixel
   388                              <3>         cleanup_call 3, 1
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 000006F0 4883C420            <4>  add rsp, total_space
   389                              <3> 
   390                              <3>         prepare_call 3, 1
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 000006F4 4883EC20            <4>  sub rsp, total_space
   391 000006F8 48894C2410          <3>         mov qword [rsp+16], rcx
   392 000006FD 4889742408          <3>         mov qword [rsp+8], rsi
   393 00000702 48893C24            <3>         mov qword [rsp], rdi
   394 00000706 4C010C24            <3>         add qword [rsp], r9
   395 0000070A 4C01442408          <3>         add qword [rsp+8], r8
   396 0000070F E881FAFFFF          <3>         call draw_pixel
   397                              <3>         cleanup_call 3, 1
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00000714 4883C420            <4>  add rsp, total_space
   398                              <3> 
   399                              <3>         prepare_call 3, 1
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00000718 4883EC20            <4>  sub rsp, total_space
   400 0000071C 48894C2410          <3>         mov qword [rsp+16], rcx
   401 00000721 4889742408          <3>         mov qword [rsp+8], rsi
   402 00000726 48893C24            <3>         mov qword [rsp], rdi
   403 0000072A 4C290C24            <3>         sub qword [rsp], r9
   404 0000072E 4C01442408          <3>         add qword [rsp+8], r8
   405 00000733 E85DFAFFFF          <3>         call draw_pixel
   406                              <3>         cleanup_call 3, 1
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00000738 4883C420            <4>  add rsp, total_space
   407                              <3> 
   408                              <3>         prepare_call 3, 1
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 0000073C 4883EC20            <4>  sub rsp, total_space
   409 00000740 48894C2410          <3>         mov qword [rsp+16], rcx
   410 00000745 4889742408          <3>         mov qword [rsp+8], rsi
   411 0000074A 48893C24            <3>         mov qword [rsp], rdi
   412 0000074E 4C010C24            <3>         add qword [rsp], r9
   413 00000752 4C29442408          <3>         sub qword [rsp+8], r8
   414 00000757 E839FAFFFF          <3>         call draw_pixel
   415                              <3>         cleanup_call 3, 1
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 0000075C 4883C420            <4>  add rsp, total_space
   416                              <3> 
   417                              <3>         prepare_call 3, 1
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00000760 4883EC20            <4>  sub rsp, total_space
   418 00000764 48894C2410          <3>         mov qword [rsp+16], rcx
   419 00000769 4889742408          <3>         mov qword [rsp+8], rsi
   420 0000076E 48893C24            <3>         mov qword [rsp], rdi
   421 00000772 4C290C24            <3>         sub qword [rsp], r9
   422 00000776 4C29442408          <3>         sub qword [rsp+8], r8
   423 0000077B E815FAFFFF          <3>         call draw_pixel
   424                              <3>         cleanup_call 3, 1
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00000780 4883C420            <4>  add rsp, total_space
   425                              <3> 
   426                              <3>         ; Update decision parameter and coordinates
   427                              <3> 
   428                              <3> 
   429                              <3>         ;     if (d < 0) {
   430                              <3>         ;         d = d + 4 * x + 6;
   431                              <3>         ;     } else {
   432                              <3>         ;         d = d + 4 * (x - y) + 10;
   433                              <3>         ;         y --;
   434                              <3>         ;     }
   435                              <3>         ;     x ++;
   436                              <3>         ; }
   437                              <3>         ; r10
   438 00000784 4983FA00            <3>         cmp r10, 0
   439 00000788 7C1B                <3>         jl .update_y
   440 0000078A 4C89C0              <3>         mov rax, r8
   441 0000078D 4C29C8              <3>         sub rax, r9
   442                              <3>         
   443 00000790 BB04000000          <3>         mov rbx,4
   444 00000795 48F7E3              <3>         mul rbx
   445 00000798 4883C00A            <3>         add rax,10
   446 0000079C 4901C2              <3>         add r10, rax         ; d = d + 4 * (x - y) + 10;
   447                              <3> 
   448 0000079F 4983E901            <3>         sub r9, 1           ; y--
   449 000007A3 EB12                <3>         jmp .update_x
   450                              <3>         .update_y:
   451 000007A5 4C89C0              <3>             mov rax, r8
   452                              <3> 
   453 000007A8 BB04000000          <3>             mov rbx,4
   454 000007AD 48F7E3              <3>             mul rbx
   455                              <3> 
   456 000007B0 4883C006            <3>             add rax,6
   457 000007B4 4901C2              <3>             add r10, rax         ;d = d + 4 * x + 6;
   458                              <3>         .update_x:
   459 000007B7 4983C001            <3>             add r8, 1           ; x++
   460 000007BB 4D39C8              <3>             cmp r8, r9
   461 000007BE 0F8EA0FEFFFF        <3>             jle .circle_loop
   462                              <3> 
   463                              <3>         set_ret_param rax, 5
   266 000007C4 48894530            <4>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   464                              <3>         epilog
   254                              <4>  popallq
   305 000007C8 415F                <5>  pop r15
   306 000007CA 415E                <5>  pop r14
   307 000007CC 415D                <5>  pop r13
   308 000007CE 415C                <5>  pop r12
   309 000007D0 415B                <5>  pop r11
   310 000007D2 415A                <5>  pop r10
   311 000007D4 4159                <5>  pop r9
   312 000007D6 4158                <5>  pop r8
   313 000007D8 5F                  <5>  pop rdi
   314 000007D9 5E                  <5>  pop rsi
   315 000007DA 5A                  <5>  pop rdx
   316 000007DB 59                  <5>  pop rcx
   317 000007DC 5B                  <5>  pop rbx
   318 000007DD 58                  <5>  pop rax
   255                              <4> 
   256 000007DE 4889EC              <4>  mov rsp, rbp
   257 000007E1 5D                  <4>  pop rbp
   258 000007E2 C3                  <4>  ret
   465                              <3> 
   466                              <3> %endif
     6                              <2>     
     7                              <2> [BITS 64]
     8                              <2> 
     9                              <2> %define COLOR_WHITE 	0x00ffffff		;WHITE
    10                              <2> %define COLOR_BLACK 	0x00000000		;BLACK
    11                              <2> %define COLOR_RED	    0x00ff0000		;RED
    12                              <2> %define COLOR_ORANGE	0x00ff8000		;ORANGE
    13                              <2> %define COLOR_YELLOW	0x00ffff00		;YELLOW
    14                              <2> %define COLOR_GREEN	    0x0000ff00		;GREEN
    15                              <2> %define COLOR_BLUE	    0x000000ff		;BLUE
    16                              <2> %define COLOR_INDIGO	0x0000ffff		;INDIGO
    17                              <2> %define COLOR_PURPLE	0x008000ff		;PURPLE
    18                              <2> 
    19                              <2> struc print_info
    20 00000000 ????                <2>     .cursor_xposition:     resw 1
    21 00000002 ????                <2>     .cursor_yposition:     resw 1
    22 00000004 ????                <2>     .cursor_line:          resw 1
    23                              <2> 
    24 00000006 ????                <2>     .print_xposition:      resw 1
    25 00000008 ????                <2>     .print_yposition:      resw 1
    26 0000000A ????                <2>     .print_line:           resw 1
    27 0000000C ????????????????    <2>     .print_address:        resq 1
    28                              <2> 
    29 00000014 ????                <2>     .screen_xmax:          resw 1
    30 00000016 ????                <2>     .screen_ymax:          resw 1
    31                              <2> 
    32 00000018 ????????????????    <2>     .font_base_address:    resq 1
    33 00000020 ????                <2>     .font_size:            resw 1
    34 00000022 ????                <2>     .font_width:           resw 1
    35 00000024 ????                <2>     .font_height:          resw 1
    36                              <2> 
    37 00000026 ????                <2>     .pixel_line_start:     resw 1
    38 00000028 ????                <2>     .pixel_line_height:       resw 1 
    39                              <2> 
    40 0000002A ????????            <2>     .default_color:        resd 1
    41 0000002E ????????            <2>     .current_color:        resd 1
    42                              <2>  endstruc
    43                              <2> print_info_ptr:;
    44                              <2>     istruc print_info
    45 000007E3 0000                <2>         at print_info.cursor_xposition, dw 0
    46 000007E5 0000                <2>         at print_info.cursor_yposition, dw 0
    47 000007E7 0000                <2>         at print_info.cursor_line, dw 0
    48                              <2> 
    49 000007E9 0000                <2>         at print_info.print_xposition, dw 0
    50 000007EB 0000                <2>         at print_info.print_yposition, dw 0
    51 000007ED 0000                <2>         at print_info.print_line, dw 0
    52 000007EF 0000000000000000    <2>         at print_info.print_address, dq 0
    53                              <2> 
    54 000007F7 0000                <2>         at print_info.screen_xmax, dw 0
    55 000007F9 0000                <2>         at print_info.screen_ymax, dw 0
    56                              <2> 
    57 000007FB 0000000000000000    <2>         at print_info.font_base_address, dq 0
    58 00000803 0000                <2>         at print_info.font_size, dw 0
    59 00000805 0000                <2>         at print_info.font_width, dw 0
    60 00000807 0000                <2>         at print_info.font_height, dw 0
    61                              <2> 
    62 00000809 0000                <2>         at print_info.pixel_line_start, dw 0
    63 0000080B 0000                <2>         at print_info.pixel_line_height, dw 0
    64                              <2> 
    65 0000080D 00000000            <2>         at print_info.default_color, dd 0
    66 00000811 00000000            <2>         at print_info.current_color, dd 0
    67                              <2>     iend
    68                              <2> 
    69                              <2> printk_init:;init printk
    70                              <2>     prolog 0;
   234 00000815 55                  <3>  push rbp
   235 00000816 4889E5              <3>  mov rbp, rsp
   236                              <3> 
   237                              <3> 
   238 00000819 488945F8            <3>  mov [rbp-8],rax
   239 0000081D B800000000          <3>  mov rax, %1
   240 00000822 4883C00F            <3>  add rax, 15
   241 00000826 4883E0F0            <3>  and rax, ~15
   242 0000082A 4829C4              <3>  sub rsp, rax
   243 0000082D 488B45F8            <3>  mov rax,[rbp-8]
   244                              <3> 
   245                              <3>  pushallq
   288 00000831 50                  <4>  push rax
   289 00000832 53                  <4>  push rbx
   290 00000833 51                  <4>  push rcx
   291 00000834 52                  <4>  push rdx
   292 00000835 56                  <4>  push rsi
   293 00000836 57                  <4>  push rdi
   294 00000837 4150                <4>  push r8
   295 00000839 4151                <4>  push r9
   296 0000083B 4152                <4>  push r10
   297 0000083D 4153                <4>  push r11
   298 0000083F 4154                <4>  push r12
   299 00000841 4155                <4>  push r13
   300 00000843 4156                <4>  push r14
   301 00000845 4157                <4>  push r15
   246                              <3> 
   247                              <3> 
   248                              <3> 
   249                              <3> 
   250                              <3> 
    71                              <2> 
    72 00000847 66C70593FFFFFF0000  <2>     mov word [rel print_info_ptr + print_info.cursor_xposition],0
    73 00000850 66C7058CFFFFFF0000  <2>     mov word [rel print_info_ptr + print_info.cursor_yposition],0
    74 00000859 66C70585FFFFFF0000  <2>     mov word [rel print_info_ptr + print_info.cursor_line],0
    75                              <2> 
    76                              <2> 
    77 00000862 66C7057EFFFFFF0000  <2>     mov word [rel print_info_ptr + print_info.print_xposition],0
    78 0000086B 66C70577FFFFFF0000  <2>     mov word [rel print_info_ptr + print_info.print_yposition],0    
    79 00000874 66C70570FFFFFF0000  <2>     mov word [rel print_info_ptr + print_info.print_line],0
    80 0000087D 48C70567FFFFFF0000- <2>     mov qword [rel print_info_ptr + print_info.print_address],0
    80 00000886 0000                <2>
    81                              <2> 
    82 00000888 66C70566FFFFFFF000  <2>     mov word [rel print_info_ptr + print_info.screen_xmax],240
    83 00000891 66C7055FFFFFFF3600  <2>     mov word [rel print_info_ptr + print_info.screen_ymax],54    
    84                              <2> 
    85 0000089A 48BE005210000080FF- <2>     mov rsi,0xFFFF800000105200
    85 000008A3 FF                  <2>
    86 000008A4 48893550FFFFFF      <2>     mov qword [rel print_info_ptr + print_info.font_base_address],rsi
    87 000008AB 66C7054FFFFFFF1000  <2>     mov word [rel print_info_ptr + print_info.font_size],16
    88 000008B4 66C70548FFFFFF0800  <2>     mov word [rel print_info_ptr + print_info.font_width],8
    89 000008BD 66C70541FFFFFF1000  <2>     mov word [rel print_info_ptr + print_info.font_height],16
    90                              <2> 
    91 000008C6 66C7053AFFFFFF0400  <2>     mov word [rel print_info_ptr + print_info.pixel_line_start],4
    92 000008CF 66C70533FFFFFF1400  <2>     mov word [rel print_info_ptr + print_info.pixel_line_height],20
    93                              <2> 
    94 000008D8 C7052BFFFFFFFFFFFF- <2>     mov dword [rel print_info_ptr + print_info.default_color],COLOR_WHITE
    94 000008E1 00                  <2>
    95 000008E2 C70525FFFFFFFFFFFF- <2>     mov dword [rel print_info_ptr + print_info.current_color],COLOR_WHITE
    95 000008EB 00                  <2>
    96                              <2> 
    97                              <2>     epilog
   254                              <3>  popallq
   305 000008EC 415F                <4>  pop r15
   306 000008EE 415E                <4>  pop r14
   307 000008F0 415D                <4>  pop r13
   308 000008F2 415C                <4>  pop r12
   309 000008F4 415B                <4>  pop r11
   310 000008F6 415A                <4>  pop r10
   311 000008F8 4159                <4>  pop r9
   312 000008FA 4158                <4>  pop r8
   313 000008FC 5F                  <4>  pop rdi
   314 000008FD 5E                  <4>  pop rsi
   315 000008FE 5A                  <4>  pop rdx
   316 000008FF 59                  <4>  pop rcx
   317 00000900 5B                  <4>  pop rbx
   318 00000901 58                  <4>  pop rax
   255                              <3> 
   256 00000902 4889EC              <3>  mov rsp, rbp
   257 00000905 5D                  <3>  pop rbp
   258 00000906 C3                  <3>  ret
    98                              <2> 
    99                              <2> printk:; input: format string,pointer to arguments
   100                              <2> 
   101                              <2>     prolog 2
   234 00000907 55                  <3>  push rbp
   235 00000908 4889E5              <3>  mov rbp, rsp
   236                              <3> 
   237                              <3> 
   238 0000090B 488945F8            <3>  mov [rbp-8],rax
   239 0000090F B802000000          <3>  mov rax, %1
   240 00000914 4883C00F            <3>  add rax, 15
   241 00000918 4883E0F0            <3>  and rax, ~15
   242 0000091C 4829C4              <3>  sub rsp, rax
   243 0000091F 488B45F8            <3>  mov rax,[rbp-8]
   244                              <3> 
   245                              <3>  pushallq
   288 00000923 50                  <4>  push rax
   289 00000924 53                  <4>  push rbx
   290 00000925 51                  <4>  push rcx
   291 00000926 52                  <4>  push rdx
   292 00000927 56                  <4>  push rsi
   293 00000928 57                  <4>  push rdi
   294 00000929 4150                <4>  push r8
   295 0000092B 4151                <4>  push r9
   296 0000092D 4152                <4>  push r10
   297 0000092F 4153                <4>  push r11
   298 00000931 4154                <4>  push r12
   299 00000933 4155                <4>  push r13
   300 00000935 4156                <4>  push r14
   301 00000937 4157                <4>  push r15
   246                              <3> 
   247                              <3> 
   248                              <3> 
   249                              <3> 
   250                              <3> 
   102                              <2>     get_param rsi, 1   ; rsi = format string
   262 00000939 488B7510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   103                              <2>     get_param rdx, 2   ; rdx = pointer to arguments
   262 0000093D 488B5518            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   104                              <2> 
   105 00000941 B800000000          <2>     mov rax,0
   106                              <2> 
   107                              <2>     .next_char:
   108 00000946 AC                  <2>         lodsb                  ; Load next character from format string into AL
   109 00000947 84C0                <2>         test al, al            ; Check if end of string
   110 00000949 0F8480000000        <2>         jz .done
   111                              <2> 
   112 0000094F 3C5C                <2>         cmp al, '\'           ; Check for escape character
   113 00000951 745F                <2>         je .escape_character
   114                              <2> 
   115 00000953 3C25                <2>         cmp al, '%'            ; Check for format specifier
   116 00000955 750F                <2>         jne .print_char
   117 00000957 AC                  <2>         lodsb                  ; Load format specifier
   118 00000958 3C64                <2>         cmp al, 'd'            ; Check for %d
   119 0000095A 741D                <2>         je .print_decimal
   120 0000095C 3C78                <2>         cmp al, 'x'            ; Check for %x
   121 0000095E 742C                <2>         je .print_hex
   122 00000960 3C73                <2>         cmp al, 's'            ; Check for %s
   123 00000962 743B                <2>         je .print_string
   124 00000964 EBE0                <2>         jmp .next_char         ; Skip unknown specifier
   125                              <2> 
   126                              <2>     .print_char:
   127                              <2>         function print_char,1,rax
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00000966 4883EC10            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 0000096A 50                  <4>  push qword %2
   183 0000096B 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 0000096E E877000000          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00000973 4883C410            <4>  add rsp, total_space
   196                              <3> 
   128 00000977 EBCD                <2>         jmp .next_char
   129                              <2> 
   130                              <2>     .print_decimal:
   131                              <2>         function print_decimal,1,rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00000979 4883EC10            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 0000097D 52                  <4>  push qword %2
   183 0000097E 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00000981 E88F010000          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00000986 4883C410            <4>  add rsp, total_space
   196                              <3> 
   132 0000098A EBBA                <2>         jmp .next_char
   133                              <2> 
   134                              <2>     .print_hex:
   135                              <2>         function print_hex,1,rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 0000098C 4883EC10            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00000990 52                  <4>  push qword %2
   183 00000991 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00000994 E80D020000          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00000999 4883C410            <4>  add rsp, total_space
   196                              <3> 
   136 0000099D EBA7                <2>         jmp .next_char
   137                              <2> 
   138                              <2>     .print_string:
   139                              <2> 
   140                              <2>         function print_string,1,rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 0000099F 4883EC10            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 000009A3 52                  <4>  push qword %2
   183 000009A4 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 000009A7 E888020000          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 000009AC 4883C410            <4>  add rsp, total_space
   196                              <3> 
   141 000009B0 EB94                <2>         jmp .next_char
   142                              <2> 
   143                              <2>     .escape_character:
   144 000009B2 AC                  <2>         lodsb                  ; Load next character from string into AL
   145 000009B3 3C6E                <2>         cmp al, 'n'            ; Check for %d
   146 000009B5 7402                <2>         je .new_line
   147 000009B7 EB11                <2>         jmp .escape_done
   148                              <2>         .new_line:
   149 000009B9 6683052AFEFFFF01    <2>             add word [rel print_info_ptr + print_info.print_yposition],1
   150 000009C1 66C7051FFEFFFF0000  <2>             mov word [rel print_info_ptr + print_info.print_xposition],0
   151                              <2>         .escape_done:
   152 000009CA E977FFFFFF          <2>             jmp .next_char           
   153                              <2> 
   154                              <2>     .done:
   155                              <2>         epilog
   254                              <3>  popallq
   305 000009CF 415F                <4>  pop r15
   306 000009D1 415E                <4>  pop r14
   307 000009D3 415D                <4>  pop r13
   308 000009D5 415C                <4>  pop r12
   309 000009D7 415B                <4>  pop r11
   310 000009D9 415A                <4>  pop r10
   311 000009DB 4159                <4>  pop r9
   312 000009DD 4158                <4>  pop r8
   313 000009DF 5F                  <4>  pop rdi
   314 000009E0 5E                  <4>  pop rsi
   315 000009E1 5A                  <4>  pop rdx
   316 000009E2 59                  <4>  pop rcx
   317 000009E3 5B                  <4>  pop rbx
   318 000009E4 58                  <4>  pop rax
   255                              <3> 
   256 000009E5 4889EC              <3>  mov rsp, rbp
   257 000009E8 5D                  <3>  pop rbp
   258 000009E9 C3                  <3>  ret
   156                              <2> 
   157                              <2> print_char:; input:char
   158                              <2>     prolog 2;
   234 000009EA 55                  <3>  push rbp
   235 000009EB 4889E5              <3>  mov rbp, rsp
   236                              <3> 
   237                              <3> 
   238 000009EE 488945F8            <3>  mov [rbp-8],rax
   239 000009F2 B802000000          <3>  mov rax, %1
   240 000009F7 4883C00F            <3>  add rax, 15
   241 000009FB 4883E0F0            <3>  and rax, ~15
   242 000009FF 4829C4              <3>  sub rsp, rax
   243 00000A02 488B45F8            <3>  mov rax,[rbp-8]
   244                              <3> 
   245                              <3>  pushallq
   288 00000A06 50                  <4>  push rax
   289 00000A07 53                  <4>  push rbx
   290 00000A08 51                  <4>  push rcx
   291 00000A09 52                  <4>  push rdx
   292 00000A0A 56                  <4>  push rsi
   293 00000A0B 57                  <4>  push rdi
   294 00000A0C 4150                <4>  push r8
   295 00000A0E 4151                <4>  push r9
   296 00000A10 4152                <4>  push r10
   297 00000A12 4153                <4>  push r11
   298 00000A14 4154                <4>  push r12
   299 00000A16 4155                <4>  push r13
   300 00000A18 4156                <4>  push r14
   301 00000A1A 4157                <4>  push r15
   246                              <3> 
   247                              <3> 
   248                              <3> 
   249                              <3> 
   250                              <3> 
   159                              <2> 
   160                              <2>     get_param rsi, 1   ; char
   262 00000A1C 488B7510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   161                              <2> 
   162                              <2> 
   163                              <2> 
   164 00000A20 B800000000          <2>     mov rax, 0
   165 00000A25 668B05BFFDFFFF      <2>     mov ax, word [rel print_info_ptr + print_info.print_yposition]
   166                              <2> 
   167 00000A2C BB00000000          <2>     mov rbx,0
   168 00000A31 668B1DA6F6FFFF      <2>     mov bx,word [rel video_info_ptr + video_info.xpixel]
   169 00000A38 48F7E3              <2>     mul rbx
   170                              <2> 
   171                              <2> 
   172 00000A3B BB00000000          <2>     mov rbx,0
   173 00000A40 668B1DC4FDFFFF      <2>     mov bx,word [rel print_info_ptr + print_info.pixel_line_height]
   174 00000A47 48F7E3              <2>     mul rbx
   175                              <2> 
   176 00000A4A 50                  <2>     push rax
   177 00000A4B 4831C0              <2>     xor rax,rax
   178 00000A4E 668B0594FDFFFF      <2>     mov ax,word [rel print_info_ptr + print_info.print_xposition]
   179 00000A55 BB00000000          <2>     mov rbx,0
   180 00000A5A 668B1DA4FDFFFF      <2>     mov bx,word [rel print_info_ptr + print_info.font_width]
   181 00000A61 48F7E3              <2>     mul rbx
   182                              <2> 
   183                              <2> 
   184 00000A64 B900000000          <2>     mov rcx,0
   185 00000A69 59                  <2>     pop rcx
   186 00000A6A 4801C8              <2>     add rax, rcx
   187                              <2> 
   188 00000A6D BB00000000          <2>     mov rbx,0
   189 00000A72 8A1D6AF6FFFF        <2>     mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   190 00000A78 48F7E3              <2>     mul rbx
   191                              <2> 
   192 00000A7B 488B3D61F6FFFF      <2>     mov rdi, qword [rel video_info_ptr + video_info.video_framebuffer]
   193 00000A82 4801C7              <2>     add rdi, rax        ;rdi=屏幕地址
   194                              <2> 
   195                              <2> 
   196 00000A85 48C1E604            <2>     shl rsi, 4
   197                              <2> 
   198 00000A89 BB00000000          <2>     mov rbx,0
   199 00000A8E 488B1D66FDFFFF      <2>     mov rbx, [rel print_info_ptr + print_info.font_base_address]
   200 00000A95 4801DE              <2>     add rsi, rbx        ; RSI = 字符数据地址
   201                              <2> 
   202 00000A98 4831C9              <2>     xor rcx,rcx
   203 00000A9B 668B0D65FDFFFF      <2>     mov cx, word [rel print_info_ptr + print_info.font_height]
   204                              <2> 
   205                              <2>     .next_line:
   206 00000AA2 57                  <2>         push rdi               ; 保存当前行起始位置
   207                              <2>         
   208                              <2>         ; 处理一行(8像素)
   209 00000AA3 8A16                <2>         mov dl, [rsi]          ; 获取字模数据
   210 00000AA5 B608                <2>         mov dh, 8              ; 8位/行
   211                              <2>         .next_pixel:
   212 00000AA7 4831C0              <2>             xor rax,rax
   213 00000AAA 8A0532F6FFFF        <2>             mov al,byte [rel video_info_ptr + video_info.byte_per_pixel]
   214                              <2> 
   215 00000AB0 F6C280              <2>             test dl, 0x80       ; 测试最高位
   216 00000AB3 7413                <2>             jz .skip_pixel
   217                              <2> 
   218                              <2> 
   219 00000AB5 3C04                <2>             cmp al,4
   220 00000AB7 7208                <2>             jb .pixel_2byte
   221 00000AB9 C64702FF            <2>             mov byte [rdi+2], 0xFF ; 绘制像素(白色)
   222 00000ABD C6470300            <2>             mov byte [rdi+3], 0x00 ; 绘制像素(白色)
   223                              <2>             .pixel_2byte:
   224 00000AC1 C607FF              <2>                 mov byte [rdi], 0xFF ; 绘制像素(白色)
   225 00000AC4 C64701FF            <2>                 mov byte [rdi+1], 0xFF ; 绘制像素(白色)
   226                              <2>             ; jmp $
   227                              <2>         .skip_pixel:
   228 00000AC8 D0E2                <2>             shl dl, 1           ; 移到下一位
   229 00000ACA 4801C7              <2>             add rdi,rax
   230 00000ACD FECE                <2>             dec dh
   231 00000ACF 75D6                <2>             jnz .next_pixel
   232                              <2>         
   233 00000AD1 5F                  <2>         pop rdi                 ; 恢复行起始位置
   234 00000AD2 4831C0              <2>         xor rax,rax
   235 00000AD5 668B0502F6FFFF      <2>         mov ax,word [rel video_info_ptr + video_info.xpixel]
   236                              <2> 
   237 00000ADC BB00000000          <2>         mov rbx,0
   238 00000AE1 8A1DFBF5FFFF        <2>         mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   239 00000AE7 48F7E3              <2>         mul rbx
   240                              <2> 
   241 00000AEA 4801C7              <2>         add rdi,rax; 移到下一行(320=屏幕宽度)
   242                              <2> 
   243 00000AED 48FFC6              <2>         inc rsi                 ; 下一个字模字节
   244                              <2> 
   245 00000AF0 E2B0                <2>         loop .next_line
   246                              <2>     
   247 00000AF2 668305EFFCFFFF01    <2>     add word [rel print_info_ptr + print_info.print_xposition],1
   248                              <2>     epilog
   254                              <3>  popallq
   305 00000AFA 415F                <4>  pop r15
   306 00000AFC 415E                <4>  pop r14
   307 00000AFE 415D                <4>  pop r13
   308 00000B00 415C                <4>  pop r12
   309 00000B02 415B                <4>  pop r11
   310 00000B04 415A                <4>  pop r10
   311 00000B06 4159                <4>  pop r9
   312 00000B08 4158                <4>  pop r8
   313 00000B0A 5F                  <4>  pop rdi
   314 00000B0B 5E                  <4>  pop rsi
   315 00000B0C 5A                  <4>  pop rdx
   316 00000B0D 59                  <4>  pop rcx
   317 00000B0E 5B                  <4>  pop rbx
   318 00000B0F 58                  <4>  pop rax
   255                              <3> 
   256 00000B10 4889EC              <3>  mov rsp, rbp
   257 00000B13 5D                  <3>  pop rbp
   258 00000B14 C3                  <3>  ret
   249                              <2> 
   250                              <2> print_decimal:;input:rsi=decimal number
   251                              <2> 
   252                              <2>     prolog 2;
   234 00000B15 55                  <3>  push rbp
   235 00000B16 4889E5              <3>  mov rbp, rsp
   236                              <3> 
   237                              <3> 
   238 00000B19 488945F8            <3>  mov [rbp-8],rax
   239 00000B1D B802000000          <3>  mov rax, %1
   240 00000B22 4883C00F            <3>  add rax, 15
   241 00000B26 4883E0F0            <3>  and rax, ~15
   242 00000B2A 4829C4              <3>  sub rsp, rax
   243 00000B2D 488B45F8            <3>  mov rax,[rbp-8]
   244                              <3> 
   245                              <3>  pushallq
   288 00000B31 50                  <4>  push rax
   289 00000B32 53                  <4>  push rbx
   290 00000B33 51                  <4>  push rcx
   291 00000B34 52                  <4>  push rdx
   292 00000B35 56                  <4>  push rsi
   293 00000B36 57                  <4>  push rdi
   294 00000B37 4150                <4>  push r8
   295 00000B39 4151                <4>  push r9
   296 00000B3B 4152                <4>  push r10
   297 00000B3D 4153                <4>  push r11
   298 00000B3F 4154                <4>  push r12
   299 00000B41 4155                <4>  push r13
   300 00000B43 4156                <4>  push r14
   301 00000B45 4157                <4>  push r15
   246                              <3> 
   247                              <3> 
   248                              <3> 
   249                              <3> 
   250                              <3> 
   253                              <2> 
   254                              <2>     get_param rsi, 1   ; dec
   262 00000B47 488B7510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   255                              <2> 
   256                              <2>     ; mov rbx, 'D'
   257                              <2>     ; function print_char,1,rbx    
   258                              <2> 
   259 00000B4B 4831C0              <2>     xor rax, rax
   260 00000B4E 4831DB              <2>     xor rbx, rbx
   261 00000B51 4831D2              <2>     xor rdx, rdx
   262 00000B54 488B06              <2>     mov rax, [rsi]
   263                              <2> 
   264 00000B57 4831DB              <2>     xor rbx, rbx
   265 00000B5A BB0A000000          <2>     mov rbx, 10              ; Base 10
   266 00000B5F 4831C9              <2>     xor rcx, rcx             ; Digit counter
   267                              <2> 
   268                              <2>     .convert_loop:
   269 00000B62 4831D2              <2>         xor rdx, rdx
   270 00000B65 48F7F3              <2>         div rbx              ; Divide rax by 10, remainder in rdx
   271 00000B68 52                  <2>         push rdx             ; Save remainder (digit)
   272 00000B69 48FFC1              <2>         inc rcx              ; Increment digit counter
   273 00000B6C 4885C0              <2>         test rax, rax
   274 00000B6F 75F1                <2>         jnz .convert_loop    ; Repeat until rax == 0
   275                              <2> 
   276                              <2>     .print_digits:
   277 00000B71 5A                  <2>         pop rdx              ; Get digit from stack
   278 00000B72 80C230              <2>         add dl, '0'          ; Convert to ASCII
   279                              <2> 
   280 00000B75 4889D3              <2>         mov rbx, rdx
   281                              <2>         function print_char,1,rbx    
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00000B78 4883EC10            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00000B7C 53                  <4>  push qword %2
   183 00000B7D 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00000B80 E865FEFFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00000B85 4883C410            <4>  add rsp, total_space
   196                              <3> 
   282                              <2> 
   283 00000B89 E2E6                <2>         loop .print_digits
   284                              <2> 
   285                              <2>     epilog
   254                              <3>  popallq
   305 00000B8B 415F                <4>  pop r15
   306 00000B8D 415E                <4>  pop r14
   307 00000B8F 415D                <4>  pop r13
   308 00000B91 415C                <4>  pop r12
   309 00000B93 415B                <4>  pop r11
   310 00000B95 415A                <4>  pop r10
   311 00000B97 4159                <4>  pop r9
   312 00000B99 4158                <4>  pop r8
   313 00000B9B 5F                  <4>  pop rdi
   314 00000B9C 5E                  <4>  pop rsi
   315 00000B9D 5A                  <4>  pop rdx
   316 00000B9E 59                  <4>  pop rcx
   317 00000B9F 5B                  <4>  pop rbx
   318 00000BA0 58                  <4>  pop rax
   255                              <3> 
   256 00000BA1 4889EC              <3>  mov rsp, rbp
   257 00000BA4 5D                  <3>  pop rbp
   258 00000BA5 C3                  <3>  ret
   286                              <2> 
   287                              <2> 
   288                              <2> print_hex:;input:rsi=hex number
   289                              <2> 
   290                              <2>     prolog 2;
   234 00000BA6 55                  <3>  push rbp
   235 00000BA7 4889E5              <3>  mov rbp, rsp
   236                              <3> 
   237                              <3> 
   238 00000BAA 488945F8            <3>  mov [rbp-8],rax
   239 00000BAE B802000000          <3>  mov rax, %1
   240 00000BB3 4883C00F            <3>  add rax, 15
   241 00000BB7 4883E0F0            <3>  and rax, ~15
   242 00000BBB 4829C4              <3>  sub rsp, rax
   243 00000BBE 488B45F8            <3>  mov rax,[rbp-8]
   244                              <3> 
   245                              <3>  pushallq
   288 00000BC2 50                  <4>  push rax
   289 00000BC3 53                  <4>  push rbx
   290 00000BC4 51                  <4>  push rcx
   291 00000BC5 52                  <4>  push rdx
   292 00000BC6 56                  <4>  push rsi
   293 00000BC7 57                  <4>  push rdi
   294 00000BC8 4150                <4>  push r8
   295 00000BCA 4151                <4>  push r9
   296 00000BCC 4152                <4>  push r10
   297 00000BCE 4153                <4>  push r11
   298 00000BD0 4154                <4>  push r12
   299 00000BD2 4155                <4>  push r13
   300 00000BD4 4156                <4>  push r14
   301 00000BD6 4157                <4>  push r15
   246                              <3> 
   247                              <3> 
   248                              <3> 
   249                              <3> 
   250                              <3> 
   291                              <2> 
   292                              <2>     get_param rsi, 1   ; dec
   262 00000BD8 488B7510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   293                              <2> 
   294                              <2>     ; mov rbx, 'X'
   295                              <2>     ; function print_char,1,rbx    
   296                              <2> 
   297 00000BDC 4831C0              <2>     xor rax, rax
   298 00000BDF 4831DB              <2>     xor rbx, rbx
   299 00000BE2 4831D2              <2>     xor rdx, rdx
   300 00000BE5 488B06              <2>     mov rax, [rsi]
   301                              <2> 
   302 00000BE8 B910000000          <2>     mov rcx, 16              ; Process 16 digits (64-bit number)
   303                              <2>     .convert_loop:
   304 00000BED 48C1C004            <2>         rol rax, 4           ; Rotate left by 4 bits
   305 00000BF1 88C2                <2>         mov dl, al           ; Extract lower nibble
   306 00000BF3 80E20F              <2>         and dl, 0x0F         ; Mask to get a single hex digit
   307 00000BF6 80FA0A              <2>         cmp dl, 10
   308 00000BF9 7C05                <2>         jl .digit
   309 00000BFB 80C257              <2>         add dl, 'a' - 10     ; Convert to 'A'-'F'
   310 00000BFE EB03                <2>         jmp .output
   311                              <2>     .digit:
   312 00000C00 80C230              <2>         add dl, '0'          ; Convert to '0'-'9'
   313                              <2>     .output:
   314 00000C03 4889D3              <2>         mov rbx, rdx
   315                              <2>         function print_char,1,rbx    
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00000C06 4883EC10            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00000C0A 53                  <4>  push qword %2
   183 00000C0B 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00000C0E E8D7FDFFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00000C13 4883C410            <4>  add rsp, total_space
   196                              <3> 
   316 00000C17 E2D4                <2>         loop .convert_loop
   317                              <2>     epilog
   254                              <3>  popallq
   305 00000C19 415F                <4>  pop r15
   306 00000C1B 415E                <4>  pop r14
   307 00000C1D 415D                <4>  pop r13
   308 00000C1F 415C                <4>  pop r12
   309 00000C21 415B                <4>  pop r11
   310 00000C23 415A                <4>  pop r10
   311 00000C25 4159                <4>  pop r9
   312 00000C27 4158                <4>  pop r8
   313 00000C29 5F                  <4>  pop rdi
   314 00000C2A 5E                  <4>  pop rsi
   315 00000C2B 5A                  <4>  pop rdx
   316 00000C2C 59                  <4>  pop rcx
   317 00000C2D 5B                  <4>  pop rbx
   318 00000C2E 58                  <4>  pop rax
   255                              <3> 
   256 00000C2F 4889EC              <3>  mov rsp, rbp
   257 00000C32 5D                  <3>  pop rbp
   258 00000C33 C3                  <3>  ret
   318                              <2> 
   319                              <2> 
   320                              <2> 
   321                              <2> print_string:;input: string
   322                              <2>     prolog 2;
   234 00000C34 55                  <3>  push rbp
   235 00000C35 4889E5              <3>  mov rbp, rsp
   236                              <3> 
   237                              <3> 
   238 00000C38 488945F8            <3>  mov [rbp-8],rax
   239 00000C3C B802000000          <3>  mov rax, %1
   240 00000C41 4883C00F            <3>  add rax, 15
   241 00000C45 4883E0F0            <3>  and rax, ~15
   242 00000C49 4829C4              <3>  sub rsp, rax
   243 00000C4C 488B45F8            <3>  mov rax,[rbp-8]
   244                              <3> 
   245                              <3>  pushallq
   288 00000C50 50                  <4>  push rax
   289 00000C51 53                  <4>  push rbx
   290 00000C52 51                  <4>  push rcx
   291 00000C53 52                  <4>  push rdx
   292 00000C54 56                  <4>  push rsi
   293 00000C55 57                  <4>  push rdi
   294 00000C56 4150                <4>  push r8
   295 00000C58 4151                <4>  push r9
   296 00000C5A 4152                <4>  push r10
   297 00000C5C 4153                <4>  push r11
   298 00000C5E 4154                <4>  push r12
   299 00000C60 4155                <4>  push r13
   300 00000C62 4156                <4>  push r14
   301 00000C64 4157                <4>  push r15
   246                              <3> 
   247                              <3> 
   248                              <3> 
   249                              <3> 
   250                              <3> 
   323                              <2>     get_param rsi, 1   ; string
   262 00000C66 488B7510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   324                              <2> 
   325 00000C6A 4831C0              <2>     xor rax,rax
   326                              <2>     .next_char_t:
   327 00000C6D AC                  <2>         lodsb                  ; Load next character from string into AL
   328 00000C6E 84C0                <2>         test al, al            ; Check if end of string
   329 00000C70 7431                <2>         jz .done_t
   330                              <2> 
   331 00000C72 3C5C                <2>         cmp al, '\'           ; Check for escape character
   332 00000C74 7413                <2>         je .escape_character
   333                              <2> 
   334                              <2>         function print_char,1,rax
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00000C76 4883EC10            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00000C7A 50                  <4>  push qword %2
   183 00000C7B 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00000C7E E867FDFFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00000C83 4883C410            <4>  add rsp, total_space
   196                              <3> 
   335                              <2> 
   336 00000C87 EBE4                <2>         jmp .next_char_t
   337                              <2>         .escape_character:
   338 00000C89 AC                  <2>             lodsb                  ; Load next character from string into AL
   339 00000C8A 3C6E                <2>             cmp al, 'n'            ; Check for %d
   340 00000C8C 7402                <2>             je .new_line
   341 00000C8E EB11                <2>             jmp .escape_done
   342                              <2>             .new_line:
   343 00000C90 66830553FBFFFF01    <2>                 add word [rel print_info_ptr + print_info.print_yposition],1
   344 00000C98 66C70548FBFFFF0000  <2>                 mov word [rel print_info_ptr + print_info.print_xposition],0
   345                              <2>             .escape_done:
   346 00000CA1 EBCA                <2>                 jmp .next_char_t            
   347                              <2>     .done_t:
   348                              <2>     epilog
   254                              <3>  popallq
   305 00000CA3 415F                <4>  pop r15
   306 00000CA5 415E                <4>  pop r14
   307 00000CA7 415D                <4>  pop r13
   308 00000CA9 415C                <4>  pop r12
   309 00000CAB 415B                <4>  pop r11
   310 00000CAD 415A                <4>  pop r10
   311 00000CAF 4159                <4>  pop r9
   312 00000CB1 4158                <4>  pop r8
   313 00000CB3 5F                  <4>  pop rdi
   314 00000CB4 5E                  <4>  pop rsi
   315 00000CB5 5A                  <4>  pop rdx
   316 00000CB6 59                  <4>  pop rcx
   317 00000CB7 5B                  <4>  pop rbx
   318 00000CB8 58                  <4>  pop rax
   255                              <3> 
   256 00000CB9 4889EC              <3>  mov rsp, rbp
   257 00000CBC 5D                  <3>  pop rbp
   258 00000CBD C3                  <3>  ret
   349                              <2> flush_framebuffer:;flush framebuffer
   350                              <2>     prolog 0;
   234 00000CBE 55                  <3>  push rbp
   235 00000CBF 4889E5              <3>  mov rbp, rsp
   236                              <3> 
   237                              <3> 
   238 00000CC2 488945F8            <3>  mov [rbp-8],rax
   239 00000CC6 B800000000          <3>  mov rax, %1
   240 00000CCB 4883C00F            <3>  add rax, 15
   241 00000CCF 4883E0F0            <3>  and rax, ~15
   242 00000CD3 4829C4              <3>  sub rsp, rax
   243 00000CD6 488B45F8            <3>  mov rax,[rbp-8]
   244                              <3> 
   245                              <3>  pushallq
   288 00000CDA 50                  <4>  push rax
   289 00000CDB 53                  <4>  push rbx
   290 00000CDC 51                  <4>  push rcx
   291 00000CDD 52                  <4>  push rdx
   292 00000CDE 56                  <4>  push rsi
   293 00000CDF 57                  <4>  push rdi
   294 00000CE0 4150                <4>  push r8
   295 00000CE2 4151                <4>  push r9
   296 00000CE4 4152                <4>  push r10
   297 00000CE6 4153                <4>  push r11
   298 00000CE8 4154                <4>  push r12
   299 00000CEA 4155                <4>  push r13
   300 00000CEC 4156                <4>  push r14
   301 00000CEE 4157                <4>  push r15
   246                              <3> 
   247                              <3> 
   248                              <3> 
   249                              <3> 
   250                              <3> 
   351 00000CF0 B800000000          <2>     mov rax, 0
   352 00000CF5 668B05EFFAFFFF      <2>     mov ax, word [rel print_info_ptr + print_info.print_yposition]
   353 00000CFC BB00000000          <2>     mov rbx,0
   354 00000D01 668B1DD6F3FFFF      <2>     mov bx,word [rel video_info_ptr + video_info.xpixel]
   355 00000D08 480FAFC3            <2>     imul rax,rbx
   356 00000D0C B900000000          <2>     mov rcx,0
   357 00000D11 668B0DD1FAFFFF      <2>     mov cx,word [rel print_info_ptr + print_info.print_xposition]
   358 00000D18 4801C8              <2>     add rax, rcx
   359 00000D1B BB00000000          <2>     mov rbx,0
   360 00000D20 8A1DBCF3FFFF        <2>     mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   361 00000D26 480FAFC3            <2>     imul rax,rbx
   362                              <2>     ; jmp $
   363 00000D2A 488B3DB2F3FFFF      <2>     mov rdi, qword [rel video_info_ptr + video_info.video_framebuffer]
   364 00000D31 4801C7              <2>     add rdi, rax
   365 00000D34 B800000000          <2>     mov rax,0
   366                              <2>     epilog
   254                              <3>  popallq
   305 00000D39 415F                <4>  pop r15
   306 00000D3B 415E                <4>  pop r14
   307 00000D3D 415D                <4>  pop r13
   308 00000D3F 415C                <4>  pop r12
   309 00000D41 415B                <4>  pop r11
   310 00000D43 415A                <4>  pop r10
   311 00000D45 4159                <4>  pop r9
   312 00000D47 4158                <4>  pop r8
   313 00000D49 5F                  <4>  pop rdi
   314 00000D4A 5E                  <4>  pop rsi
   315 00000D4B 5A                  <4>  pop rdx
   316 00000D4C 59                  <4>  pop rcx
   317 00000D4D 5B                  <4>  pop rbx
   318 00000D4E 58                  <4>  pop rax
   255                              <3> 
   256 00000D4F 4889EC              <3>  mov rsp, rbp
   257 00000D52 5D                  <3>  pop rbp
   258 00000D53 C3                  <3>  ret
   367                              <2> 
   368                              <2> draw_char:; input: x,y,char; draw a character
   369                              <2>     prolog 2;
   234 00000D54 55                  <3>  push rbp
   235 00000D55 4889E5              <3>  mov rbp, rsp
   236                              <3> 
   237                              <3> 
   238 00000D58 488945F8            <3>  mov [rbp-8],rax
   239 00000D5C B802000000          <3>  mov rax, %1
   240 00000D61 4883C00F            <3>  add rax, 15
   241 00000D65 4883E0F0            <3>  and rax, ~15
   242 00000D69 4829C4              <3>  sub rsp, rax
   243 00000D6C 488B45F8            <3>  mov rax,[rbp-8]
   244                              <3> 
   245                              <3>  pushallq
   288 00000D70 50                  <4>  push rax
   289 00000D71 53                  <4>  push rbx
   290 00000D72 51                  <4>  push rcx
   291 00000D73 52                  <4>  push rdx
   292 00000D74 56                  <4>  push rsi
   293 00000D75 57                  <4>  push rdi
   294 00000D76 4150                <4>  push r8
   295 00000D78 4151                <4>  push r9
   296 00000D7A 4152                <4>  push r10
   297 00000D7C 4153                <4>  push r11
   298 00000D7E 4154                <4>  push r12
   299 00000D80 4155                <4>  push r13
   300 00000D82 4156                <4>  push r14
   301 00000D84 4157                <4>  push r15
   246                              <3> 
   247                              <3> 
   248                              <3> 
   249                              <3> 
   250                              <3> 
   370                              <2>     get_param r8, 1   ; x
   262 00000D86 4C8B4510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   371                              <2>     get_param r9, 2   ; y
   262 00000D8A 4C8B4D18            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   372                              <2>     get_param rsi, 3   ; char
   262 00000D8E 488B7520            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   373                              <2> 
   374 00000D92 B800000000          <2>     mov rax, 0
   375 00000D97 4C89C8              <2>     mov rax, r9
   376                              <2> 
   377 00000D9A BB00000000          <2>     mov rbx,0
   378 00000D9F 668B1D38F3FFFF      <2>     mov bx,word [rel video_info_ptr + video_info.xpixel]
   379 00000DA6 480FAFC3            <2>     imul rax,rbx
   380                              <2> 
   381 00000DAA B900000000          <2>     mov rcx,0
   382 00000DAF 4C89C1              <2>     mov rcx,r8
   383 00000DB2 4801C8              <2>     add rax, rcx
   384                              <2> 
   385 00000DB5 BB00000000          <2>     mov rbx,0
   386 00000DBA 8A1D22F3FFFF        <2>     mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   387 00000DC0 480FAFC3            <2>     imul rax,rbx
   388                              <2>     ; jmp $
   389 00000DC4 488B3D18F3FFFF      <2>     mov rdi, qword [rel video_info_ptr + video_info.video_framebuffer]
   390 00000DCB 4801C7              <2>     add rdi, rax        ;rdi=屏幕地址
   391                              <2> 
   392                              <2> 
   393 00000DCE 4831C0              <2>     xor rax, rax
   394 00000DD1 4889F0              <2>     mov rax,rsi
   395                              <2> 
   396 00000DD4 48C1E004            <2>     shl rax, 4                 ; 乘以16(每个字符16字节)
   397 00000DD8 488B1D1CFAFFFF      <2>     mov rbx, [rel print_info_ptr + print_info.font_base_address]
   398 00000DDF 4801C3              <2>     add rbx, rax         ; RSI = 字符数据地址
   399 00000DE2 4889DE              <2>     mov rsi,rbx
   400                              <2> 
   401                              <2> 
   402 00000DE5 B910000000          <2>     mov rcx, 16                ; 16行高度
   403 00000DEA 57                  <2>     push rdi               ; 保存当前行起始位置
   404                              <2>     .next_line:
   405 00000DEB 57                  <2>         push rdi               ; 保存当前行起始位置
   406                              <2>         
   407                              <2>         ; 处理一行(8像素)
   408 00000DEC 8A16                <2>         mov dl, [rsi]          ; 获取字模数据
   409 00000DEE B608                <2>         mov dh, 8              ; 8位/行
   410                              <2>         .next_pixel:
   411 00000DF0 4831C0              <2>             xor rax,rax
   412 00000DF3 8A05E9F2FFFF        <2>             mov al,byte [rel video_info_ptr + video_info.byte_per_pixel]
   413                              <2> 
   414 00000DF9 F6C280              <2>             test dl, 0x80       ; 测试最高位
   415 00000DFC 7415                <2>             jz .skip_pixel
   416                              <2> 
   417                              <2> 
   418 00000DFE 3C04                <2>             cmp al,4
   419 00000E00 7208                <2>             jb .pixel_2byte
   420 00000E02 C64702FF            <2>             mov byte [rdi+2], 0xFF ; 绘制像素(白色)
   421 00000E06 C6470300            <2>             mov byte [rdi+3], 0x00 ; 绘制像素(白色)
   422                              <2>             .pixel_2byte:
   423 00000E0A C607FF              <2>                 mov byte [rdi], 0xFF ; 绘制像素(白色)
   424 00000E0D C64701FF            <2>                 mov byte [rdi+1], 0xFF ; 绘制像素(白色)
   425 00000E11 EB0F                <2>             jmp .pixel_write_done
   426                              <2>         .skip_pixel:
   427 00000E13 C6470200            <2>             mov byte [rdi+2], 0x00 ; 绘制像素(白色)
   428 00000E17 C6470300            <2>             mov byte [rdi+3], 0x00 ; 绘制像素(白色)
   429 00000E1B C60700              <2>             mov byte [rdi], 0x00 ; 绘制像素(白色)
   430 00000E1E C6470100            <2>             mov byte [rdi+1], 0x00 ; 绘制像素(白色)
   431                              <2>             .pixel_write_done:
   432 00000E22 D0E2                <2>             shl dl, 1           ; 移到下一位
   433 00000E24 4801C7              <2>             add rdi,rax
   434 00000E27 FECE                <2>             dec dh
   435 00000E29 75C5                <2>             jnz .next_pixel
   436                              <2>         
   437 00000E2B 5F                  <2>         pop rdi                 ; 恢复行起始位置
   438                              <2> 
   439 00000E2C 4831C0              <2>         xor rax,rax
   440 00000E2F 668B05A8F2FFFF      <2>         mov ax,word [rel video_info_ptr + video_info.xpixel]
   441                              <2> 
   442 00000E36 BB00000000          <2>         mov rbx,0
   443 00000E3B 8A1DA1F2FFFF        <2>         mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   444 00000E41 480FAFC3            <2>         imul rax,rbx
   445 00000E45 4801C7              <2>         add rdi,rax
   446 00000E48 48FFC6              <2>         inc rsi                 ; next char font
   447 00000E4B E29E                <2>         loop .next_line
   448                              <2>                 ; jmp $
   449 00000E4D 5F                  <2>     pop rdi                 ; 恢复行起始位置
   450                              <2>     epilog
   254                              <3>  popallq
   305 00000E4E 415F                <4>  pop r15
   306 00000E50 415E                <4>  pop r14
   307 00000E52 415D                <4>  pop r13
   308 00000E54 415C                <4>  pop r12
   309 00000E56 415B                <4>  pop r11
   310 00000E58 415A                <4>  pop r10
   311 00000E5A 4159                <4>  pop r9
   312 00000E5C 4158                <4>  pop r8
   313 00000E5E 5F                  <4>  pop rdi
   314 00000E5F 5E                  <4>  pop rsi
   315 00000E60 5A                  <4>  pop rdx
   316 00000E61 59                  <4>  pop rcx
   317 00000E62 5B                  <4>  pop rbx
   318 00000E63 58                  <4>  pop rax
   255                              <3> 
   256 00000E64 4889EC              <3>  mov rsp, rbp
   257 00000E67 5D                  <3>  pop rbp
   258 00000E68 C3                  <3>  ret
   451                              <2> 
   452                              <2> 
   453                              <2> 
   454                              <2> draw_string:; input: x,y,string; draw string
   455                              <2>     prolog 2;
   234 00000E69 55                  <3>  push rbp
   235 00000E6A 4889E5              <3>  mov rbp, rsp
   236                              <3> 
   237                              <3> 
   238 00000E6D 488945F8            <3>  mov [rbp-8],rax
   239 00000E71 B802000000          <3>  mov rax, %1
   240 00000E76 4883C00F            <3>  add rax, 15
   241 00000E7A 4883E0F0            <3>  and rax, ~15
   242 00000E7E 4829C4              <3>  sub rsp, rax
   243 00000E81 488B45F8            <3>  mov rax,[rbp-8]
   244                              <3> 
   245                              <3>  pushallq
   288 00000E85 50                  <4>  push rax
   289 00000E86 53                  <4>  push rbx
   290 00000E87 51                  <4>  push rcx
   291 00000E88 52                  <4>  push rdx
   292 00000E89 56                  <4>  push rsi
   293 00000E8A 57                  <4>  push rdi
   294 00000E8B 4150                <4>  push r8
   295 00000E8D 4151                <4>  push r9
   296 00000E8F 4152                <4>  push r10
   297 00000E91 4153                <4>  push r11
   298 00000E93 4154                <4>  push r12
   299 00000E95 4155                <4>  push r13
   300 00000E97 4156                <4>  push r14
   301 00000E99 4157                <4>  push r15
   246                              <3> 
   247                              <3> 
   248                              <3> 
   249                              <3> 
   250                              <3> 
   456                              <2>     get_param r8, 1   ; x
   262 00000E9B 4C8B4510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   457                              <2>     get_param r9, 2   ; y
   262 00000E9F 4C8B4D18            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   458                              <2>     get_param rsi, 3   ; string
   262 00000EA3 488B7520            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   459                              <2> 
   460                              <2>     .next_char:
   461 00000EA7 AC                  <2>         lodsb                  
   462 00000EA8 84C0                <2>         test al, al
   463 00000EAA 744E                <2>         jz .done
   464 00000EAC BB00000000          <2>         mov rbx, 0
   465 00000EB1 B320                <2>         mov bl, " "
   466                              <2>         function draw_char,1,r8,r9,rbx ;clear char
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00000EB3 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00000EB7 4150                <4>  push qword %2
   183 00000EB9 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00000EBC 4151                <4>  push qword %2
   183 00000EBE 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00000EC2 53                  <4>  push qword %2
   183 00000EC3 8F442410            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00000EC7 E888FEFFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00000ECC 4883C420            <4>  add rsp, total_space
   196                              <3> 
   467 00000ED0 BB00000000          <2>         mov rbx, 0
   468 00000ED5 88C3                <2>         mov bl, al
   469                              <2>         function draw_char,1,r8,r9,rbx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00000ED7 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00000EDB 4150                <4>  push qword %2
   183 00000EDD 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00000EE0 4151                <4>  push qword %2
   183 00000EE2 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00000EE6 53                  <4>  push qword %2
   183 00000EE7 8F442410            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00000EEB E864FEFFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00000EF0 4883C420            <4>  add rsp, total_space
   196                              <3> 
   470 00000EF4 4983C008            <2>         add r8, 8
   471                              <2> 
   472 00000EF8 EBAD                <2>         jmp .next_char
   473                              <2>     .done:
   474                              <2>     epilog
   254                              <3>  popallq
   305 00000EFA 415F                <4>  pop r15
   306 00000EFC 415E                <4>  pop r14
   307 00000EFE 415D                <4>  pop r13
   308 00000F00 415C                <4>  pop r12
   309 00000F02 415B                <4>  pop r11
   310 00000F04 415A                <4>  pop r10
   311 00000F06 4159                <4>  pop r9
   312 00000F08 4158                <4>  pop r8
   313 00000F0A 5F                  <4>  pop rdi
   314 00000F0B 5E                  <4>  pop rsi
   315 00000F0C 5A                  <4>  pop rdx
   316 00000F0D 59                  <4>  pop rcx
   317 00000F0E 5B                  <4>  pop rbx
   318 00000F0F 58                  <4>  pop rax
   255                              <3> 
   256 00000F10 4889EC              <3>  mov rsp, rbp
   257 00000F13 5D                  <3>  pop rbp
   258 00000F14 C3                  <3>  ret
   475                              <2> 
   476                              <2> draw_hex:; input: x,y,hex; draw hex
   477                              <2>     prolog 2;
   234 00000F15 55                  <3>  push rbp
   235 00000F16 4889E5              <3>  mov rbp, rsp
   236                              <3> 
   237                              <3> 
   238 00000F19 488945F8            <3>  mov [rbp-8],rax
   239 00000F1D B802000000          <3>  mov rax, %1
   240 00000F22 4883C00F            <3>  add rax, 15
   241 00000F26 4883E0F0            <3>  and rax, ~15
   242 00000F2A 4829C4              <3>  sub rsp, rax
   243 00000F2D 488B45F8            <3>  mov rax,[rbp-8]
   244                              <3> 
   245                              <3>  pushallq
   288 00000F31 50                  <4>  push rax
   289 00000F32 53                  <4>  push rbx
   290 00000F33 51                  <4>  push rcx
   291 00000F34 52                  <4>  push rdx
   292 00000F35 56                  <4>  push rsi
   293 00000F36 57                  <4>  push rdi
   294 00000F37 4150                <4>  push r8
   295 00000F39 4151                <4>  push r9
   296 00000F3B 4152                <4>  push r10
   297 00000F3D 4153                <4>  push r11
   298 00000F3F 4154                <4>  push r12
   299 00000F41 4155                <4>  push r13
   300 00000F43 4156                <4>  push r14
   301 00000F45 4157                <4>  push r15
   246                              <3> 
   247                              <3> 
   248                              <3> 
   249                              <3> 
   250                              <3> 
   478                              <2>     get_param r8, 1   ; x
   262 00000F47 4C8B4510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   479                              <2>     get_param r9, 2   ; y
   262 00000F4B 4C8B4D18            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   480                              <2>     get_param rsi, 3   ; hex
   262 00000F4F 488B7520            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   481                              <2> 
   482 00000F53 BB58000000          <2>     mov rbx, 'X'
   483                              <2>     function draw_char,1,r8,r9,rbx    
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00000F58 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00000F5C 4150                <4>  push qword %2
   183 00000F5E 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00000F61 4151                <4>  push qword %2
   183 00000F63 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00000F67 53                  <4>  push qword %2
   183 00000F68 8F442410            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00000F6C E8E3FDFFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00000F71 4883C420            <4>  add rsp, total_space
   196                              <3> 
   484 00000F75 4983C008            <2>     add r8, 8
   485                              <2> 
   486                              <2> 
   487 00000F79 4831C0              <2>     xor rax, rax
   488 00000F7C 4831DB              <2>     xor rbx, rbx
   489 00000F7F 4831D2              <2>     xor rdx, rdx
   490 00000F82 488B06              <2>     mov rax, [rsi]
   491                              <2> 
   492 00000F85 B910000000          <2>     mov rcx, 16              ; Process 16 digits (64-bit number)
   493                              <2>     .convert_loopqq:
   494 00000F8A 48C1C004            <2>         rol rax, 4           ; Rotate left by 4 bits
   495 00000F8E 88C2                <2>         mov dl, al           ; Extract lower nibble
   496                              <2> 
   497 00000F90 80E20F              <2>         and dl, 0x0F         ; Mask to get a single hex digit
   498                              <2> 
   499 00000F93 80FA0A              <2>         cmp dl, 10
   500 00000F96 7C05                <2>         jl .digitqq
   501 00000F98 80C257              <2>         add dl, 'a' - 10     ; Convert to 'A'-'F'
   502 00000F9B EB03                <2>         jmp .outputqq
   503                              <2>     .digitqq:
   504 00000F9D 80C230              <2>         add dl, '0'          ; Convert to '0'-'9'
   505                              <2>     .outputqq:
   506 00000FA0 4889D3              <2>         mov rbx, rdx
   507                              <2> 
   508                              <2>         function draw_char,1,r8,r9,rbx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00000FA3 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00000FA7 4150                <4>  push qword %2
   183 00000FA9 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00000FAC 4151                <4>  push qword %2
   183 00000FAE 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00000FB2 53                  <4>  push qword %2
   183 00000FB3 8F442410            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00000FB7 E898FDFFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00000FBC 4883C420            <4>  add rsp, total_space
   196                              <3> 
   509                              <2>         
   510 00000FC0 4983C008            <2>         add r8, 8
   511 00000FC4 E2C4                <2>         loop .convert_loopqq
   512                              <2> 
   513                              <2>     epilog
   254                              <3>  popallq
   305 00000FC6 415F                <4>  pop r15
   306 00000FC8 415E                <4>  pop r14
   307 00000FCA 415D                <4>  pop r13
   308 00000FCC 415C                <4>  pop r12
   309 00000FCE 415B                <4>  pop r11
   310 00000FD0 415A                <4>  pop r10
   311 00000FD2 4159                <4>  pop r9
   312 00000FD4 4158                <4>  pop r8
   313 00000FD6 5F                  <4>  pop rdi
   314 00000FD7 5E                  <4>  pop rsi
   315 00000FD8 5A                  <4>  pop rdx
   316 00000FD9 59                  <4>  pop rcx
   317 00000FDA 5B                  <4>  pop rbx
   318 00000FDB 58                  <4>  pop rax
   255                              <3> 
   256 00000FDC 4889EC              <3>  mov rsp, rbp
   257 00000FDF 5D                  <3>  pop rbp
   258 00000FE0 C3                  <3>  ret
   514                              <2> draw_decimal:; input: x,y,decimal address; draw dec
   515                              <2>     prolog 2;
   234 00000FE1 55                  <3>  push rbp
   235 00000FE2 4889E5              <3>  mov rbp, rsp
   236                              <3> 
   237                              <3> 
   238 00000FE5 488945F8            <3>  mov [rbp-8],rax
   239 00000FE9 B802000000          <3>  mov rax, %1
   240 00000FEE 4883C00F            <3>  add rax, 15
   241 00000FF2 4883E0F0            <3>  and rax, ~15
   242 00000FF6 4829C4              <3>  sub rsp, rax
   243 00000FF9 488B45F8            <3>  mov rax,[rbp-8]
   244                              <3> 
   245                              <3>  pushallq
   288 00000FFD 50                  <4>  push rax
   289 00000FFE 53                  <4>  push rbx
   290 00000FFF 51                  <4>  push rcx
   291 00001000 52                  <4>  push rdx
   292 00001001 56                  <4>  push rsi
   293 00001002 57                  <4>  push rdi
   294 00001003 4150                <4>  push r8
   295 00001005 4151                <4>  push r9
   296 00001007 4152                <4>  push r10
   297 00001009 4153                <4>  push r11
   298 0000100B 4154                <4>  push r12
   299 0000100D 4155                <4>  push r13
   300 0000100F 4156                <4>  push r14
   301 00001011 4157                <4>  push r15
   246                              <3> 
   247                              <3> 
   248                              <3> 
   249                              <3> 
   250                              <3> 
   516                              <2>     get_param r8, 1   ; x
   262 00001013 4C8B4510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   517                              <2>     get_param r9, 2   ; y
   262 00001017 4C8B4D18            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   518                              <2>     get_param rsi, 3   ; dec
   262 0000101B 488B7520            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   519                              <2> 
   520 0000101F BB44000000          <2>     mov rbx, 'D'
   521                              <2>     function draw_char,1,r8,r9,rbx    
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00001024 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00001028 4150                <4>  push qword %2
   183 0000102A 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 0000102D 4151                <4>  push qword %2
   183 0000102F 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00001033 53                  <4>  push qword %2
   183 00001034 8F442410            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00001038 E817FDFFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 0000103D 4883C420            <4>  add rsp, total_space
   196                              <3> 
   522 00001041 4983C008            <2>     add r8, 8
   523                              <2> 
   524 00001045 4831C0              <2>     xor rax, rax
   525 00001048 4831DB              <2>     xor rbx, rbx
   526 0000104B 4831D2              <2>     xor rdx, rdx
   527 0000104E 488B06              <2>     mov rax, [rsi]
   528                              <2> 
   529 00001051 4831DB              <2>     xor rbx, rbx
   530 00001054 BB0A000000          <2>     mov rbx, 10              ; Base 10
   531 00001059 4831C9              <2>     xor rcx, rcx             ; Digit counter
   532                              <2> 
   533                              <2>     .convert_loop:
   534 0000105C 4831D2              <2>         xor rdx, rdx
   535 0000105F 48F7F3              <2>         div rbx              ; Divide rax by 10, remainder in rdx
   536 00001062 52                  <2>         push rdx             ; Save remainder (digit)
   537 00001063 48FFC1              <2>         inc rcx              ; Increment digit counter
   538 00001066 4885C0              <2>         test rax, rax
   539 00001069 75F1                <2>         jnz .convert_loop    ; Repeat until rax == 0
   540                              <2> 
   541                              <2>     .print_digits:
   542 0000106B 5A                  <2>         pop rdx              ; Get digit from stack
   543 0000106C 80C230              <2>         add dl, '0'          ; Convert to ASCII
   544                              <2> 
   545 0000106F 4889D3              <2>         mov rbx, rdx
   546                              <2>         function draw_char,1,r8,r9,rbx    
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00001072 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00001076 4150                <4>  push qword %2
   183 00001078 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 0000107B 4151                <4>  push qword %2
   183 0000107D 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00001081 53                  <4>  push qword %2
   183 00001082 8F442410            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00001086 E8C9FCFFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 0000108B 4883C420            <4>  add rsp, total_space
   196                              <3> 
   547 0000108F 4983C008            <2>         add r8, 8
   548                              <2> 
   549 00001093 E2D6                <2>         loop .print_digits
   550                              <2> 
   551                              <2>     epilog
   254                              <3>  popallq
   305 00001095 415F                <4>  pop r15
   306 00001097 415E                <4>  pop r14
   307 00001099 415D                <4>  pop r13
   308 0000109B 415C                <4>  pop r12
   309 0000109D 415B                <4>  pop r11
   310 0000109F 415A                <4>  pop r10
   311 000010A1 4159                <4>  pop r9
   312 000010A3 4158                <4>  pop r8
   313 000010A5 5F                  <4>  pop rdi
   314 000010A6 5E                  <4>  pop rsi
   315 000010A7 5A                  <4>  pop rdx
   316 000010A8 59                  <4>  pop rcx
   317 000010A9 5B                  <4>  pop rbx
   318 000010AA 58                  <4>  pop rax
   255                              <3> 
   256 000010AB 4889EC              <3>  mov rsp, rbp
   257 000010AE 5D                  <3>  pop rbp
   258 000010AF C3                  <3>  ret
   552                              <2> ; debug_stop:
   553                              <2> ;     mov r15,0x99999
   554                              <2> ;     jmp $
   555                              <2> %endif
     9                              <1> %include "../kernel/expection.asm"
     1                              <2> %ifndef EXPECTION_ASM
     2                              <2> %define EXPECTION_ASM
     3                              <2> 
     4                              <2> %include "../bootloader/global_def.asm"
     1                              <3> %ifndef GLOBAL_DEF_ASM
     2                              <3> %define GLOBAL_DEF_ASM
     3                              <3> %define PLATFORM_QEMU_X64 1
     4                              <3> %define PLATFORM_X64 2
     5                              <3> %define DEBUG_PLATFORM PLATFORM_QEMU_X64
     6                              <3> %define DEBUG_MODE 1
     7                              <3> 
     8                              <3> 
     9                              <3> ;|----------------------|
    10                              <3> ;|	100000 ~ END	|
    11                              <3> ;|	   KERNEL	|
    12                              <3> ;|----------------------|
    13                              <3> ;|	E0000 ~ 100000	|
    14                              <3> ;| Extended System BIOS |
    15                              <3> ;|----------------------|
    16                              <3> ;|	C0000 ~ Dffff	|
    17                              <3> ;|     Expansion Area   |
    18                              <3> ;|----------------------|
    19                              <3> ;|	A0000 ~ bffff	|
    20                              <3> ;|   Legacy Video Area  |
    21                              <3> ;|----------------------|
    22                              <3> ;|	9f000 ~ A0000	|
    23                              <3> ;|	 BIOS reserve	|
    24                              <3> ;|----------------------|
    25                              <3> ;|	90000 ~ 9f000	|
    26                              <3> ;|	 kernel tmpbuf	|
    27                              <3> ;|----------------------|
    28                              <3> ;|	10000 ~ 90000	|
    29                              <3> ;|	   LOADER	|
    30                              <3> ;|----------------------|
    31                              <3> ;|	8000 ~ 10000	|
    32                              <3> ;|	  VBE info	|
    33                              <3> ;|----------------------|
    34                              <3> ;|	7e00 ~ 8000	|
    35                              <3> ;|	  mem info	|
    36                              <3> ;|----------------------|
    37                              <3> ;|	7c00 ~ 7e00	|
    38                              <3> ;|	 MBR (BOOT)	|
    39                              <3> ;|----------------------|
    40                              <3> ;|	0000 ~ 7c00	|
    41                              <3> ;|	 BIOS Code	|
    42                              <3> ;|----------------------|
    43                              <3> 
    44                              <3> 
    45                              <3> ;_______________________________________________________
    46                              <3> ; START	END	    SIZE	        USED
    47                              <3> ; FFFF0	FFFFF	16B	        BIOS System Entry
    48                              <3> ; F0000	FFFEF	64KB-16B	BIOS System Code
    49                              <3> ; C8000	EFFFF	160KB	    ROM/Mapped IO
    50                              <3> ; C0000	C7FFF	32KB	    Graphic Adapter BIOS
    51                              <3> ; B8000	BFFFF	32KB	    Chroma Text Video Buffer
    52                              <3> ; B0000	B7FFF	32KB	    Mono Text Video Buffer
    53                              <3> ; A0000	AFFFF	64KB	    Graphic Video Buffer
    54                              <3> ; 9FC00	9FFFF	1KB	        Extended BIOS Data Area
    55                              <3> ; 7E00	9FBFF	622080B     Useable 608KB	
    56                              <3> ; 7C00	7DFF	512B	    MBR
    57                              <3> ; 500	7BFF	30464B      Useable 30KB	
    58                              <3> ; 400	4FF	    256B	    BIOS Data Area
    59                              <3> ; 000	3FF	    1KB	        IVT
    60                              <3> ; _____________________________________________________
    61                              <3> 
    62                              <3> 
    63                              <3> 
    64                              <3> 
    65                              <3> 
    66                              <3> 
    67                              <3> 
    68                              <3> 
    69                              <3> 
    70                              <3> 
    71                              <3> 
    72                              <3> ;|----------------------|
    73                              <3> ;|	100000 ~ END	|
    74                              <3> ;|	   KERNEL	|
    75                              <3> ;|----------------------|
    76                              <3> ;|	E0000 ~ 100000	|
    77                              <3> ;| Extended System BIOS |
    78                              <3> ;|----------------------|
    79                              <3> ;|	C0000 ~ Dffff	|
    80                              <3> ;|     Expansion Area   |
    81                              <3> ;|----------------------|
    82                              <3> ;|	A0000 ~ bffff	|
    83                              <3> ;|   Legacy Video Area  |
    84                              <3> ;|----------------------|
    85                              <3> ;|	9F000 ~ A0000	|
    86                              <3> ;|	 BIOS reserve	|
    87                              <3> ;|----------------------|
    88                              <3> ;|	90000 ~ 9F000	|
    89                              <3> ;|	 kernel tmpbuf	|
    90                              <3> ;|----------------------|
    91                              <3> ;|	10000 ~ 90000	|
    92                              <3> ;|	   LOADER	|
    93                              <3> ;|----------------------|
    94                              <3> ;|	8000 ~ 10000	|
    95                              <3> ;|	  VBE info	|
    96                              <3> ;|----------------------|
    97                              <3> ;|	7E00 ~ 8000	|
    98                              <3> ;|	  mem info	|
    99                              <3> ;|----------------------|
   100                              <3> ;|	7C00 ~ 7E00	|
   101                              <3> ;|	 MBR (BOOT)	|
   102                              <3> ;|----------------------|
   103                              <3> ;|	0000 ~ 7C00	|
   104                              <3> ;|	 BIOS Code	|
   105                              <3> ;|----------------------|
   106                              <3> 
   107                              <3> 
   108                              <3> 
   109                              <3> 
   110                              <3> 
   111                              <3> 
   112                              <3> 
   113                              <3> 
   114                              <3> 
   115                              <3> 
   116                              <3> ;______________________________________________
   117                              <3> ; ----------------Vbe Info Block------------
   118                              <3> ; typedef struct {
   119                              <3> ;     unsigned char       vbe_signature;
   120                              <3> ;     unsigned short      vbe_version;
   121                              <3> ;     unsigned long       oem_string_ptr;
   122                              <3> ;     unsigned char       capabilities;
   123                              <3> ;     unsigned long       video_mode_ptr;
   124                              <3> ;     unsigned short      total_memory;
   125                              <3> ;     unsigned short      oem_software_rev;
   126                              <3> ;     unsigned long       oem_vendor_name_ptr;
   127                              <3> ;     unsigned long       oem_product_name_ptr;
   128                              <3> ;     unsigned long       oem_product_rev_ptr;
   129                              <3> ;     unsigned char       reserved[222];
   130                              <3> ;     unsigned char       oem_data[256];  
   131                              <3> ; } VbeInfoBlock;
   132                              <3> ;______________________________________________
   133                              <3> 
   134                              <3> 
   135                              <3> BaseOfKernelFile	equ	0x00
   136                              <3> OffsetOfKernelFile	equ	0x100000
   137                              <3> BaseTmpOfKernelAddr	equ	0x9000
   138                              <3> OffsetTmpOfKernelFile	equ	0x0000
   139                              <3> VBEStructBufferAddr	equ	0x8000
   140                              <3> VBEModeStructBufferAddr	equ	0x8200
   141                              <3> MemoryStructBufferAddr	equ	0x8800
   142                              <3> 
   143                              <3> KernelCodeSelector      equ 0x08
   144                              <3> KernelDataSelector      equ 0x10
   145                              <3> UserCodeSelector      equ 0x18
   146                              <3> UserDataSelector      equ 0x20
   147                              <3> 
   148                              <3> KernelSpaceUpperAddress equ 0xFFFF800000000000
   149                              <3> 
   150                              <3> GDTPointerUpperAddr equ 0xFFFF800000104000
   151                              <3> IDTPointerUpperAddr equ 0xFFFF80000010400a
   152                              <3> TSSPointerUpperAddr equ 0xFFFF800000104014
   153                              <3> 
   154                              <3> VideoFrameBufferAddress equ 0xFFFF800003000000
   155                              <3> KernelStartSectorNum	equ	16
   156                              <3> 
   157                              <3> 
   158                              <3> 
   159                              <3> 
   160                              <3> MasterSectorReadNumPort    equ	0x1F2
   161                              <3> MasterSectorReadPort    equ	0x1F0
   162                              <3> 
   163                              <3> SlaveReadNumPort    equ	0x172
   164                              <3> SlaveSectorReadPort    equ	0x170
   165                              <3> 
   166                              <3> SectorReadNumPort    equ	MasterSectorReadNumPort
   167                              <3> SectorReadPort    equ	MasterSectorReadPort
   168                              <3> 
   169                              <3> struc vbe_info_block
   170                              <3>     .signature                 resb 4    ; 'VESA' signature (must be "VESA")
   171                              <3>     .version                   resw 1    ; VBE version (e.g., 0x0300 for VBE 3.0)
   172                              <3>     .oem_string_ptr            resd 1    ; Pointer to OEM string
   173                              <3>     .capabilities              resd 1    ; Capabilities of the video card
   174                              <3>     .video_mode_ptr            resd 1    ; Pointer to supported video modes
   175                              <3>     .total_memory              resw 1    ; Total memory in 64KB blocks
   176                              <3> 
   177                              <3>     ; VBE 2.0+ fields
   178                              <3>     .oem_software_rev          resw 1    ; OEM software revision
   179                              <3>     .oem_vendor_name_ptr       resd 1    ; Pointer to OEM vendor name string
   180                              <3>     .oem_product_name_ptr      resd 1    ; Pointer to OEM product name string
   181                              <3>     .oem_product_rev_ptr       resd 1    ; Pointer to OEM product revision string
   182                              <3>     .reserved                  resb 222  ; Reserved for VBE implementation
   183                              <3>     .oem_data                  resb 256  ; Data area for OEM-specific information
   184                              <3> endstruc
   185                              <3> 
   186                              <3> struc vbe_mode_info_block
   187                              <3>     .attributes                resw 1    ; Mode attributes
   188                              <3>     .winA_attributes           resb 1    ; Window A attributes
   189                              <3>     .winB_attributes           resb 1    ; Window B attributes
   190                              <3>     .win_granularity           resw 1    ; Window granularity in KB
   191                              <3>     .win_size                  resw 1    ; Window size in KB
   192                              <3>     .winA_segment              resw 1    ; Window A segment
   193                              <3>     .winB_segment              resw 1    ; Window B segment
   194                              <3>     .win_func_ptr              resd 1    ; Pointer to window function
   195                              <3>     .bytes_per_scanline        resw 1    ; Bytes per scanline
   196                              <3> 
   197                              <3>     ; VBE 1.2+ fields
   198                              <3>     .x_resolution              resw 1    ; Horizontal resolution in pixels
   199                              <3>     .y_resolution              resw 1    ; Vertical resolution in pixels
   200                              <3>     .x_char_size               resb 1    ; Character cell width in pixels
   201                              <3>     .y_char_size               resb 1    ; Character cell height in pixels
   202                              <3>     .number_of_planes          resb 1    ; Number of memory planes
   203                              <3>     .bits_per_pixel            resb 1    ; Bits per pixel
   204                              <3>     .number_of_banks           resb 1    ; Number of banks
   205                              <3>     .memory_model              resb 1    ; Memory model type
   206                              <3>     .bank_size                 resb 1    ; Bank size in KB
   207                              <3>     .number_of_image_pages     resb 1    ; Number of images
   208                              <3>     .reserved1                 resb 1    ; Reserved
   209                              <3> 
   210                              <3>     ; Direct Color fields (VBE 1.2+)
   211                              <3>     .red_mask_size             resb 1    ; Size of direct color red mask
   212                              <3>     .red_field_position        resb 1    ; Bit position of red mask
   213                              <3>     .green_mask_size           resb 1    ; Size of direct color green mask
   214                              <3>     .green_field_position      resb 1    ; Bit position of green mask
   215                              <3>     .blue_mask_size            resb 1    ; Size of direct color blue mask
   216                              <3>     .blue_field_position       resb 1    ; Bit position of blue mask
   217                              <3>     .reserved_mask_size        resb 1    ; Size of direct color reserved mask
   218                              <3>     .reserved_field_position   resb 1    ; Bit position of reserved mask
   219                              <3>     .direct_color_mode_info    resb 1    ; Direct color mode attributes
   220                              <3> 
   221                              <3>     ; VBE 2.0+ fields
   222                              <3>     .phys_base_ptr             resd 1    ; Physical address for flat memory frame buffer
   223                              <3>     .reserved2                 resd 1    ; Reserved
   224                              <3>     .reserved3                 resw 1    ; Reserved
   225                              <3> 
   226                              <3>     ; VBE 3.0+ fields
   227                              <3>     .lin_bytes_per_scanline    resw 1    ; Bytes per scanline for linear modes
   228                              <3>     .bnk_number_of_image_pages resb 1    ; Number of images for banked modes
   229                              <3>     .lin_number_of_image_pages resb 1    ; Number of images for linear modes
   230                              <3>     .lin_red_mask_size         resb 1    ; Size of direct color red mask (linear modes)
   231                              <3>     .lin_red_field_position    resb 1    ; Bit position of red mask (linear modes)
   232                              <3>     .lin_green_mask_size       resb 1    ; Size of direct color green mask (linear modes)
   233                              <3>     .lin_green_field_position  resb 1    ; Bit position of green mask (linear modes)
   234                              <3>     .lin_blue_mask_size        resb 1    ; Size of direct color blue mask (linear modes)
   235                              <3>     .lin_blue_field_position   resb 1    ; Bit position of blue mask (linear modes)
   236                              <3>     .lin_reserved_mask_size    resb 1    ; Size of direct color reserved mask (linear modes)
   237                              <3>     .lin_reserved_field_position resb 1  ; Bit position of reserved mask (linear modes)
   238                              <3>     .max_pixel_clock           resd 1    ; Maximum pixel clock (Hz)
   239                              <3>     .reserved4                 resb 190  ; Reserved for future expansion
   240                              <3> endstruc
   241                              <3> 
   242                              <3> struc e820_memory_entry
   243                              <3>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   244                              <3>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   245                              <3>     .length_low               resd 1    ; Lower 32 bits of the length
   246                              <3>     .length_high              resd 1    ; Upper 32 bits of the length
   247                              <3>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   248                              <3>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   249                              <3> endstruc
   250                              <3> 
   251                              <3> %endif
     5                              <2> %include "../kernel/stddef.asm"
     1                              <3> %ifndef STDDEF_ASM
     2                              <3> %define STDDEF_ASM
     3                              <3> 
     4                              <3> ;-----------Data Type Standard------------;
     5                              <3> %define USE_DT_STANDARD
     6                              <3> %ifdef USE_DT_STANDARD
     7                              <3> ;     %macro gbyte 1 ; 参数1：变量名, 参数2：初始值(1字节)
     8                              <3> ;         %1: db %2
     9                              <3> ;         %endmacro
    10                              <3> 
    11                              <3> ;     %macro g2byte 1 ; 参数1：变量名, 参数2：初始值(4字节)
    12                              <3> ;         %1: dw %2
    13                              <3> ;         %endmacro
    14                              <3> 
    15                              <3> ;     %macro g4byte 1 ; 参数1：变量名, 参数2：初始值(4字节)
    16                              <3> ;         %1: dd %2
    17                              <3> ;         %endmacro
    18                              <3> 
    19                              <3> ;     %macro g8byte 1 ; 参数1：变量名, 参数2：初始值(8字节)
    20                              <3> ;         %1: dq %2
    21                              <3> ;         %endmacro
    22                              <3> 
    23                              <3> ; %define UNIQUE_ID_IMPL(name, line) name %+ _ %+ line
    24                              <3> ; %define UNIQUE_ID(name) UNIQUE_ID_IMPL(name, __LINE__)
    25                              <3> ;     ; %macro lvar 1
    26                              <3> ;     ;     %define %1 qword [rbp - 112-(__local_offset + 8)]
    27                              <3> 
    28                              <3> ;     ;     %assign __local_offset  __local_offset + 8
    29                              <3> 
    30                              <3> ;     ;     sub rsp, 8
    31                              <3> ;     ;     %endmacro
    32                              <3> 
    33                              <3> ;     ; 初始化局部变量追踪
    34                              <3> ;     %macro LOCAL_BEGIN 0
    35                              <3> ;         %push local_ctx              ; 创建新的局部上下文
    36                              <3> ;         %assign %$local_offset 0     ; 初始化局部偏移计数器
    37                              <3> ;     %endmacro
    38                              <3> 
    39                              <3> 
    40                              <3> ;     %macro lvar 1
    41                              <3> ;         %assign %$local_offset %$local_offset+8
    42                              <3> ;         %define %$var_%1 %$local_offset
    43                              <3> ;         %define %1  qword[rbp-%$var_%1]
    44                              <3> ;         sub rsp,8
    45                              <3> ;     %endmacro
    46                              <3> 
    47                              <3>     ; %macro lstr 2
    48                              <3>     ;     %ifstr %2
    49                              <3>     ;         %strlen len %2
    50                              <3>     ;         %assign %$local_offset %$local_offset+len+1   ; 累加偏移
    51                              <3>     ;         %define %$str_%1 %$local_offset               ; 定义变量偏移
    52                              <3>     ;         %define %1  [rbp - %$str_%1]
    53                              <3>     ;         %define %1.size len+1
    54                              <3>     ;         sub rsp,%1.size
    55                              <3>     ;     %endif
    56                              <3>     ;         mov rcx, %3
    57                              <3>     ;         mov rdi, ebp
    58                              <3>     ;         add rdi, %$var_%1
    59                              <3>     ;         lea rsi, [%2]
    60                              <3>     ;         rep movsb
    61                              <3>     ; %endmacro
    62                              <3> 
    63                              <3>     ; %macro lstr_copy 2-3
    64                              <3>     ;     %ifctx local_ctx
    65                              <3>     ;         %if %0 == 3
    66                              <3>     ;             ; 带长度的字符串复制
    67                              <3>     ;             mov ecx, %3
    68                              <3>     ;             mov edi, ebp
    69                              <3>     ;             add edi, %$var_%1
    70                              <3>     ;             lea esi, [%2]
    71                              <3>     ;             rep movsb
    72                              <3>     ;         %else
    73                              <3>     ;             ; 以null结尾的字符串复制
    74                              <3>     ;             mov edi, ebp
    75                              <3>     ;             add edi, %$var_%1
    76                              <3>     ;             lea esi, [%2]
    77                              <3>     ;             %%copy_loop:
    78                              <3>     ;             lodsb
    79                              <3>     ;             stosb
    80                              <3>     ;             test al, al
    81                              <3>     ;             jnz %%copy_loop
    82                              <3>     ;         %endif
    83                              <3>     ;     %else
    84                              <3>     ;         %error "STR_COPY used outside local_ctx block"
    85                              <3>     ;     %endif
    86                              <3>     ; %endmacro
    87                              <3> 
    88                              <3>     ; %macro lstruct 1
    89                              <3>     ;     %assign %$local_offset %$local_offset+8   ; 累加偏移
    90                              <3>     ;     %define %$struct_%1 %$local_offset               ; 定义变量偏移
    91                              <3>     ;     %define %1  rbp - %$struct_%1
    92                              <3>     ;     %define %1.size 5
    93                              <3>     ;     sub rsp,%1.size
    94                              <3>     ; %endmacro
    95                              <3> 
    96                              <3>     ; ; 分配栈空间并保存寄存器
    97                              <3>     ; %macro lalloc 0
    98                              <3>     ;     %if %$local_offset > 0
    99                              <3>     ;         ; 16字节对齐
   100                              <3>     ;         %assign pad (16 - (%$local_offset % 16))
   101                              <3>     ;         %if pad < 16
   102                              <3>     ;             %assign %$local_offset %$local_offset + pad
   103                              <3>     ;         %endif
   104                              <3>     ;         sub rsp, %$local_offset
   105                              <3>     ;     %endif
   106                              <3>     ; %endmacro
   107                              <3> 
   108                              <3> 
   109                              <3>     ; ; 获取局部变量的访问表达式
   110                              <3>     ; %macro locvar 1-*
   111                              <3>     ;     ; [rbp - %$var_%1 ]
   112                              <3> 
   113                              <3>     ;     %ifctx local_ctx
   114                              <3>     ;         ; %ifidn %2, ""
   115                              <3>     ;             qword [rbp - %$var_%1]
   116                              <3>     ;         ; %else
   117                              <3>     ;         ;     [rbp - %$var_%1 - %2]
   118                              <3>     ;         ; %endif
   119                              <3>     ;     %endif
   120                              <3>     ; %endmacro
   121                              <3> 
   122                              <3>     ;     %macro locvar 1-2
   123                              <3>     ;     ; [rbp - %$var_%1 ]
   124                              <3> 
   125                              <3>     ;     %ifctx local_ctx
   126                              <3>     ;         %ifidn %2, ""
   127                              <3>     ;             [rbp - %$var_%1]
   128                              <3>     ;         %else
   129                              <3>     ;             [rbp - %$var_%1 - %2]
   130                              <3>     ;         %endif
   131                              <3>     ;     %endif
   132                              <3>     ; %endmacro
   133                              <3> 
   134                              <3> 
   135                              <3> %endif
   136                              <3> 
   137                              <3> ;-----------Calling Conventions Standard------------;
   138                              <3> %define USE_CC_STANDARD
   139                              <3> %ifdef USE_CC_STANDARD
   140                              <3> 
   141                              <3>     ;caller maintain the stack balance 
   142                              <3>         ; debug_times: db 0
   143                              <3>         ; cmp byte [rel debug_times],3
   144                              <3>         ; je debug_stop
   145                              <3>         ; add byte [rel debug_times],1
   146                              <3>     ; -------------------------------
   147                              <3>     ; 栈帧结构定义
   148                              <3>     ; -------------------------------
   149                              <3>     ; 调用后的栈布局:
   150                              <3>     ; [rsp+0x00] 返回地址 (8字节)
   151                              <3>     ; [rsp+0x08] 旧RBP     (8字节) <- rbp指向这里
   152                              <3>     ; [rsp+0x10] 参数1     (8字节)
   153                              <3>     ; [rsp+0x18] 参数2
   154                              <3>     ; ...
   155                              <3>     ; [rsp+X]    局部变量区
   156                              <3>     ; -------------------------------
   157                              <3> 
   158                              <3>     %define PARAM_OFFSET   16      ; 第一个参数的偏移量(返回地址8 + 旧RBP8)
   159                              <3>     %macro function 1-* ; 1=函数名, 2=返回参数数量, 3=参数列表
   160                              <3>         %assign param_count %0 - 2 ; 参数数量
   161                              <3>         
   162                              <3>         %if param_count < 0
   163                              <3>             %assign param_count 0 ; 如果没有参数，设置为 0
   164                              <3>         %endif
   165                              <3>         %if param_count < 1
   166                              <3>             %assign ret_param_count 0 ; 返回参数数量
   167                              <3>         %else
   168                              <3>             %assign ret_param_count %2 ; 返回参数数量
   169                              <3>         %endif
   170                              <3> 
   171                              <3>         ; 准备调用
   172                              <3>         prepare_call param_count, ret_param_count
   173                              <3> 
   174                              <3>         ; 如果有参数，将参数压入栈
   175                              <3>         %if param_count > 0
   176                              <3>             %assign i 0
   177                              <3>             ; mov [rsp-8], rax ; 保存返回地址
   178                              <3>             %rep param_count
   179                              <3>                 %rotate 1
   180                              <3>                 ; mov rax, %2
   181                              <3>                 ; mov [rsp + 8*i],qword %2 ; 将参数压入栈
   182                              <3>                 push qword %2
   183                              <3>                 pop qword [rsp + 8*i]
   184                              <3>                 %assign i i+1
   185                              <3>             %endrep
   186                              <3>             %rotate 1
   187                              <3>             %rotate 1
   188                              <3>             ; mov rax,[rsp-8]; 保存返回地址
   189                              <3>         %endif
   190                              <3> 
   191                              <3>         ; 调用函数
   192                              <3>         call %1
   193                              <3> 
   194                              <3>         ; 清理栈空间
   195                              <3>         cleanup_call param_count, ret_param_count
   196                              <3> 
   197                              <3>     %endmacro
   198                              <3> 
   199                              <3>     %macro align_stack_16 0
   200                              <3>         test rsp, 0xF
   201                              <3>         jz %%skip_align
   202                              <3>         sub rsp,8
   203                              <3>         %%skip_align:
   204                              <3>     %endmacro
   205                              <3> 
   206                              <3>     ; %macro prologue 0;local var size(bytes)
   207                              <3>     ;     push rbp
   208                              <3>     ;     mov rbp, rsp
   209                              <3> 
   210                              <3> 
   211                              <3>     ;     pushallq
   212                              <3>     ;     LOCAL_BEGIN
   213                              <3>         
   214                              <3> 
   215                              <3>     ;     ; 调试信息可以放在这里
   216                              <3>     ;     ; %ifdef DEBUG
   217                              <3>     ;     ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
   218                              <3>     ;     ; %endif
   219                              <3>     ; %endmacro
   220                              <3>     ; %macro epilogue 0
   221                              <3>     ;     %pop
   222                              <3>     ;     mov rax, rbp
   223                              <3>     ;     sub rax, 8*14
   224                              <3>     ;     mov rsp, rax
   225                              <3> 
   226                              <3>     ;     popallq
   227                              <3> 
   228                              <3>     ;     mov rsp, rbp
   229                              <3>     ;     pop rbp
   230                              <3>     ;     ret
   231                              <3>     ; %endmacro
   232                              <3> 
   233                              <3>     %macro prolog 1;local var size(bytes)
   234                              <3>         push rbp
   235                              <3>         mov rbp, rsp
   236                              <3> 
   237                              <3> 
   238                              <3>         mov [rbp-8],rax
   239                              <3>         mov rax, %1
   240                              <3>         add rax, 15
   241                              <3>         and rax, ~15
   242                              <3>         sub rsp, rax
   243                              <3>         mov rax,[rbp-8]
   244                              <3> 
   245                              <3>         pushallq
   246                              <3>         
   247                              <3>         ; 调试信息可以放在这里
   248                              <3>         ; %ifdef DEBUG
   249                              <3>         ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
   250                              <3>         ; %endif
   251                              <3>     %endmacro
   252                              <3> 
   253                              <3>     %macro epilog 0
   254                              <3>         popallq
   255                              <3> 
   256                              <3>         mov rsp, rbp
   257                              <3>         pop rbp
   258                              <3>         ret
   259                              <3>     %endmacro
   260                              <3> 
   261                              <3>     %macro get_param 2;1=register, 2=param index(from 1)
   262                              <3>         mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   263                              <3>     %endmacro
   264                              <3> 
   265                              <3>     %macro set_ret_param 2;1=register, 2=param index(from 1)
   266                              <3>         mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   267                              <3>     %endmacro
   268                              <3> 
   269                              <3>     %macro prepare_call 2;1=param count, 2=return param count
   270                              <3>         %assign total_space ((%1 + %2) * 8)
   271                              <3>         
   272                              <3>         %if (total_space % 16) != 0
   273                              <3>             %assign total_space total_space + 8  ; 添加填充
   274                              <3>         %endif
   275                              <3>         
   276                              <3>         sub rsp, total_space
   277                              <3>     %endmacro
   278                              <3> 
   279                              <3>     %macro cleanup_call 2;1=param count, 2=return param count
   280                              <3>         %assign total_space ((%1 + %2) * 8)
   281                              <3>         %if (total_space % 16) != 0
   282                              <3>             %assign total_space total_space + 8
   283                              <3>         %endif
   284                              <3>         add rsp, total_space
   285                              <3>     %endmacro
   286                              <3> 
   287                              <3>     %macro pushallq 0
   288                              <3>         push rax
   289                              <3>         push rbx
   290                              <3>         push rcx
   291                              <3>         push rdx
   292                              <3>         push rsi
   293                              <3>         push rdi
   294                              <3>         push r8
   295                              <3>         push r9
   296                              <3>         push r10
   297                              <3>         push r11
   298                              <3>         push r12
   299                              <3>         push r13
   300                              <3>         push r14
   301                              <3>         push r15
   302                              <3>     %endmacro
   303                              <3> 
   304                              <3>     %macro popallq 0
   305                              <3>         pop r15
   306                              <3>         pop r14
   307                              <3>         pop r13
   308                              <3>         pop r12
   309                              <3>         pop r11
   310                              <3>         pop r10
   311                              <3>         pop r9
   312                              <3>         pop r8
   313                              <3>         pop rdi
   314                              <3>         pop rsi
   315                              <3>         pop rdx
   316                              <3>         pop rcx
   317                              <3>         pop rbx
   318                              <3>         pop rax
   319                              <3>     %endmacro
   320                              <3> 
   321                              <3>     %endif
   322                              <3> ;---------------------ABI Standard------------------;
   323                              <3> %define USE_ABI_STANDARD
   324                              <3> %ifdef USE_ABI_STANDARD
   325                              <3> 
   326                              <3> 
   327                              <3>     %define ABI_File_None   0       ; 无文件类型
   328                              <3>     %define ABI_File_REL    1       ; 可重定位文件
   329                              <3>     %define ABI_File_EXEC   2       ; 可执行文件
   330                              <3>     %define ABI_File_DYN    3       ; 共享目标文件
   331                              <3>     %define ABI_File_CORE   4       ; 核心文件
   332                              <3> 
   333                              <3>     %define Section_Type_NULL    0      ; 未使用
   334                              <3>     %define Section_Type_LOAD    1      ; 可加载段
   335                              <3>     %define Section_Type_DYNAMIC 2      ; 动态链接信息
   336                              <3>     %define Section_Type_INTERP  3      ; 解释器路径
   337                              <3>     %define Section_Type_NOTE    4      ; 辅助信息
   338                              <3>     %define Section_Type_SHLIB   5      ; 保留
   339                              <3> 
   340                              <3>     %macro ABI_HEADER 4 ;1=File Type, 2=Entry Point Address, 3=Section Header Offset, 4=Section Header Count
   341                              <3>         db 0xA5, 'A', 'B', 'I'     ; ABI Magic Number
   342                              <3>         db 1                       ; Encode Type
   343                              <3>         db 1                       ; ABI Version
   344                              <3> 
   345                              <3>         dw %1                      ; ABI File Type
   346                              <3>         dq %2                      ; Entry Point Address
   347                              <3>         dw 32                      ; ABI Headers Size
   348                              <3> 
   349                              <3>         dq %3                      ; Section Header Offset
   350                              <3>         dw 32                      ; Section Header Size
   351                              <3>         dw %4                      ; Section Header Count
   352                              <3>         dw 0                       ; Symble Table Entry Size
   353                              <3>     %endmacro
   354                              <3>     STRUC struct_ABI_HEADER
   355                              <3>         .magic:         resb 4    ; ABI Magic Number (4 bytes)
   356                              <3>         .encode_type:   resb 1    ; Encode Type (1 byte)
   357                              <3>         .abi_version:   resb 1    ; ABI Version (1 byte)
   358                              <3>         .file_type:     resw 1    ; ABI File Type (2 bytes)
   359                              <3>         .entry_point:   resq 1    ; Entry Point Address (8 bytes)
   360                              <3>         .header_size:   resw 1    ; ABI Headers Size (2 bytes)
   361                              <3>         .section_offset: resq 1   ; Section Header Offset (8 bytes)
   362                              <3>         .section_size:  resw 1    ; Section Header Size (2 bytes)
   363                              <3>         .section_count: resw 1    ; Section Header Count (2 bytes)
   364                              <3>         .sym_table_size: resw 1   ; Symbol Table Entry Size (2 bytes)
   365                              <3>     ENDSTRUC
   366                              <3> 
   367                              <3>     %macro SECTION_HEADER 4 ;1=Section Type, 2=Virtual Address, 3=Section Offset, 4=Section Size
   368                              <3>         dq %1                  ; Section Type
   369                              <3>         dq %2                  ; Virtual Address
   370                              <3>         dq %3                  ; Section Offset
   371                              <3>         dq %4                  ; Section Size
   372                              <3>     %endmacro
   373                              <3>     STRUC struct_SECTION_HEADER
   374                              <3>         .type:      resq 1    ; Section Type (8 bytes)
   375                              <3>         .vaddr:     resq 1    ; Virtual Address (8 bytes)
   376                              <3>         .offset:    resq 1    ; Section Offset (8 bytes)
   377                              <3>         .size:      resq 1    ; Section Size (8 bytes)
   378                              <3>     ENDSTRUC
   379                              <3>     %endif
   380                              <3> 
   381                              <3> %endif
     6                              <2> 
     7                              <2> [BITS 64]
     8                              <2> ; GDTPointerUpperAddr equ 0xFFFF800000104000
     9                              <2> ; IDTPointerUpperAddr equ 0xFFFF80000010400a
    10                              <2> ; TSSPointerUpperAddr equ 0xFFFF800000104004
    11 000010B0 64656661756C742065- <2> expection_default_message: db 'default expection:%x\n', 0
    11 000010B9 7870656374696F6E3A- <2>
    11 000010C2 25785C6E00          <2>
    12 000010C7 646976696465206578- <2> expection_div_message: db 'divide expection:%x\n', 0
    12 000010D0 70656374696F6E3A25- <2>
    12 000010D9 785C6E00            <2>
    13 000010DD 646562756720657870- <2> expection_debug_message: db 'debug expection:%x\n', 0
    13 000010E6 656374696F6E3A2578- <2>
    13 000010EF 5C6E00              <2>
    14                              <2> 
    15 000010F2 0000000000000000    <2> expection_error_code: dq 0
    16                              <2> 
    17                              <2> 
    18                              <2> 
    19                              <2> ; ; 描述符类型常量
    20                              <2> %define INTGATE 0x8E    ; 64位中断门(P=1, DPL=00, 类型=1110)
    21                              <2> %define TRAPGATE 0x8F   ; 64位陷阱门(P=1, DPL=00, 类型=1111)
    22                              <2> 
    23                              <2> ; ; 64位IDT条目结构(16字节)
    24                              <2> struc idt_info
    25 00000000 ????                <2>     .offset_low:   resw 1  ; 0  偏移低16位(0..15)
    26 00000002 ????                <2>     .selector:     resw 1  ; 16 代码段选择子
    27                              <2> 
    28 00000004 ??                  <2>     .ist:          resb 1  ; 32 IST索引(0表示不使用)
    29 00000005 ??                  <2>     .type_attr:    resb 1  ; 40 类型属性
    30                              <2> 
    31 00000006 ????                <2>     .offset_mid:   resw 1  ; 48 偏移中16位(16..31)
    32                              <2> 
    33 00000008 ????????            <2>     .offset_high:  resd 1  ; 64 偏移高32位(32..63)
    34                              <2> 
    35 0000000C ????????            <2>     .reserved:     resd 1  ; 96 保留
    36                              <2>     endstruc
    37                              <2> init_expection:;init expection idt
    38                              <2>     prolog 0;
   234 000010FA 55                  <3>  push rbp
   235 000010FB 4889E5              <3>  mov rbp, rsp
   236                              <3> 
   237                              <3> 
   238 000010FE 488945F8            <3>  mov [rbp-8],rax
   239 00001102 B800000000          <3>  mov rax, %1
   240 00001107 4883C00F            <3>  add rax, 15
   241 0000110B 4883E0F0            <3>  and rax, ~15
   242 0000110F 4829C4              <3>  sub rsp, rax
   243 00001112 488B45F8            <3>  mov rax,[rbp-8]
   244                              <3> 
   245                              <3>  pushallq
   288 00001116 50                  <4>  push rax
   289 00001117 53                  <4>  push rbx
   290 00001118 51                  <4>  push rcx
   291 00001119 52                  <4>  push rdx
   292 0000111A 56                  <4>  push rsi
   293 0000111B 57                  <4>  push rdi
   294 0000111C 4150                <4>  push r8
   295 0000111E 4151                <4>  push r9
   296 00001120 4152                <4>  push r10
   297 00001122 4153                <4>  push r11
   298 00001124 4154                <4>  push r12
   299 00001126 4155                <4>  push r13
   300 00001128 4156                <4>  push r14
   301 0000112A 4157                <4>  push r15
   246                              <3> 
   247                              <3> 
   248                              <3> 
   249                              <3> 
   250                              <3> 
    39 0000112C 488D35C1010000      <2>     lea rsi,[rel default_exception_handler]
    40                              <2>     function setup_default_expection_idt,1,rsi
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00001133 4883EC10            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00001137 56                  <4>  push qword %2
   183 00001138 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 0000113B E811010000          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00001140 4883C410            <4>  add rsp, total_space
   196                              <3> 
    41                              <2>     ; jmp $
    42 00001144 488D35D1010000      <2>     lea rsi,[rel div0_exception_handler]
    43                              <2>     function register_expection_idt,1,0,1,rsi
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 0000114B 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 0000114F 6A00                <4>  push qword %2
   183 00001151 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00001154 6A01                <4>  push qword %2
   183 00001156 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 0000115A 56                  <4>  push qword %2
   183 0000115B 8F442410            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 0000115F E843000000          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00001164 4883C420            <4>  add rsp, total_space
   196                              <3> 
    44                              <2> 
    45 00001168 488D3503020000      <2>     lea rsi,[rel debug_exception_handler]
    46                              <2>     function register_expection_idt,1,1,1,rsi
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 0000116F 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00001173 6A01                <4>  push qword %2
   183 00001175 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00001178 6A01                <4>  push qword %2
   183 0000117A 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 0000117E 56                  <4>  push qword %2
   183 0000117F 8F442410            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00001183 E81F000000          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00001188 4883C420            <4>  add rsp, total_space
   196                              <3> 
    47                              <2> 
    48                              <2>     ; mov rax,0x123123
    49                              <2>     ; jmp $
    50                              <2> 
    51                              <2>     epilog
   254                              <3>  popallq
   305 0000118C 415F                <4>  pop r15
   306 0000118E 415E                <4>  pop r14
   307 00001190 415D                <4>  pop r13
   308 00001192 415C                <4>  pop r12
   309 00001194 415B                <4>  pop r11
   310 00001196 415A                <4>  pop r10
   311 00001198 4159                <4>  pop r9
   312 0000119A 4158                <4>  pop r8
   313 0000119C 5F                  <4>  pop rdi
   314 0000119D 5E                  <4>  pop rsi
   315 0000119E 5A                  <4>  pop rdx
   316 0000119F 59                  <4>  pop rcx
   317 000011A0 5B                  <4>  pop rbx
   318 000011A1 58                  <4>  pop rax
   255                              <3> 
   256 000011A2 4889EC              <3>  mov rsp, rbp
   257 000011A5 5D                  <3>  pop rbp
   258 000011A6 C3                  <3>  ret
    52                              <2> register_expection_idt:;vector_num,rsp,handler
    53                              <2>     prolog 0;
   234 000011A7 55                  <3>  push rbp
   235 000011A8 4889E5              <3>  mov rbp, rsp
   236                              <3> 
   237                              <3> 
   238 000011AB 488945F8            <3>  mov [rbp-8],rax
   239 000011AF B800000000          <3>  mov rax, %1
   240 000011B4 4883C00F            <3>  add rax, 15
   241 000011B8 4883E0F0            <3>  and rax, ~15
   242 000011BC 4829C4              <3>  sub rsp, rax
   243 000011BF 488B45F8            <3>  mov rax,[rbp-8]
   244                              <3> 
   245                              <3>  pushallq
   288 000011C3 50                  <4>  push rax
   289 000011C4 53                  <4>  push rbx
   290 000011C5 51                  <4>  push rcx
   291 000011C6 52                  <4>  push rdx
   292 000011C7 56                  <4>  push rsi
   293 000011C8 57                  <4>  push rdi
   294 000011C9 4150                <4>  push r8
   295 000011CB 4151                <4>  push r9
   296 000011CD 4152                <4>  push r10
   297 000011CF 4153                <4>  push r11
   298 000011D1 4154                <4>  push r12
   299 000011D3 4155                <4>  push r13
   300 000011D5 4156                <4>  push r14
   301 000011D7 4157                <4>  push r15
   246                              <3> 
   247                              <3> 
   248                              <3> 
   249                              <3> 
   250                              <3> 
    54                              <2>     get_param rsi, 1
   262 000011D9 488B7510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    55                              <2>     get_param r15, 2
   262 000011DD 4C8B7D18            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    56                              <2>     get_param rdi, 3
   262 000011E1 488B7D20            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    57 000011E5 48BB0A4010000080FF- <2>     mov rbx,IDTPointerUpperAddr
    57 000011EE FF                  <2>
    58 000011EF 488B4302            <2>     mov rax,[rbx + 2]
    59                              <2> 
    60 000011F3 4989F0              <2>     mov r8,rsi
    61 000011F6 49C1E004            <2>     shl r8, 4
    62 000011FA 4C01C0              <2>     add rax, r8
    63                              <2> 
    64                              <2>     ; jmp $
    65                              <2> 
    66 000011FD 4989F8              <2>     mov r8,rdi
    67 00001200 49C1E820            <2>     shr r8,32
    68                              <2> 
    69 00001204 4989F9              <2>     mov r9,rdi
    70 00001207 49C1E910            <2>     shr r9,16
    71 0000120B 4981E1FFFF0000      <2>     and r9,0xFFFF
    72                              <2> 
    73 00001212 B900000000          <2>     mov rcx,0
    74 00001217 4C89F9              <2>     mov rcx, r15
    75                              <2>     ; jmp $
    76 0000121A 668938              <2>     mov word [rax + idt_info.offset_low], di
    77                              <2>         ; mov ax,di
    78                              <2>     ; jmp $
    79 0000121D 66C740020800        <2>     mov word [rax + idt_info.selector], KernelCodeSelector
    80 00001223 884804              <2>     mov byte [rax + idt_info.ist], cl
    81 00001226 C640058F            <2>     mov byte [rax + idt_info.type_attr], TRAPGATE
    82 0000122A 6644894806          <2>     mov word [rax + idt_info.offset_mid], r9w
    83 0000122F 4C894008            <2>     mov qword [rax + idt_info.offset_high], r8
    84                              <2> 
    85 00001233 0F011B              <2>     lidt	[rbx]
    86                              <2>     epilog
   254                              <3>  popallq
   305 00001236 415F                <4>  pop r15
   306 00001238 415E                <4>  pop r14
   307 0000123A 415D                <4>  pop r13
   308 0000123C 415C                <4>  pop r12
   309 0000123E 415B                <4>  pop r11
   310 00001240 415A                <4>  pop r10
   311 00001242 4159                <4>  pop r9
   312 00001244 4158                <4>  pop r8
   313 00001246 5F                  <4>  pop rdi
   314 00001247 5E                  <4>  pop rsi
   315 00001248 5A                  <4>  pop rdx
   316 00001249 59                  <4>  pop rcx
   317 0000124A 5B                  <4>  pop rbx
   318 0000124B 58                  <4>  pop rax
   255                              <3> 
   256 0000124C 4889EC              <3>  mov rsp, rbp
   257 0000124F 5D                  <3>  pop rbp
   258 00001250 C3                  <3>  ret
    87                              <2> 
    88                              <2> setup_default_expection_idt:;setup expection idt 0~31
    89                              <2>     prolog 0;
   234 00001251 55                  <3>  push rbp
   235 00001252 4889E5              <3>  mov rbp, rsp
   236                              <3> 
   237                              <3> 
   238 00001255 488945F8            <3>  mov [rbp-8],rax
   239 00001259 B800000000          <3>  mov rax, %1
   240 0000125E 4883C00F            <3>  add rax, 15
   241 00001262 4883E0F0            <3>  and rax, ~15
   242 00001266 4829C4              <3>  sub rsp, rax
   243 00001269 488B45F8            <3>  mov rax,[rbp-8]
   244                              <3> 
   245                              <3>  pushallq
   288 0000126D 50                  <4>  push rax
   289 0000126E 53                  <4>  push rbx
   290 0000126F 51                  <4>  push rcx
   291 00001270 52                  <4>  push rdx
   292 00001271 56                  <4>  push rsi
   293 00001272 57                  <4>  push rdi
   294 00001273 4150                <4>  push r8
   295 00001275 4151                <4>  push r9
   296 00001277 4152                <4>  push r10
   297 00001279 4153                <4>  push r11
   298 0000127B 4154                <4>  push r12
   299 0000127D 4155                <4>  push r13
   300 0000127F 4156                <4>  push r14
   301 00001281 4157                <4>  push r15
   246                              <3> 
   247                              <3> 
   248                              <3> 
   249                              <3> 
   250                              <3> 
    90                              <2>     get_param rsi, 1
   262 00001283 488B7510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    91 00001287 4989F0              <2>     mov r8,rsi
    92 0000128A 49C1E820            <2>     shr r8,32
    93 0000128E 4989F1              <2>     mov r9,rsi
    94 00001291 49C1E910            <2>     shr r9,16
    95 00001295 4981E1FFFF0000      <2>     and r9,0xFFFF
    96                              <2> 
    97 0000129C B900000000          <2>     mov rcx,0
    98 000012A1 48BB0A4010000080FF- <2>     mov rbx,IDTPointerUpperAddr
    98 000012AA FF                  <2>
    99 000012AB 488B4302            <2>     mov rax,[rbx + 2]
   100                              <2> 
   101                              <2>     .expection_idt:
   102 000012AF 668930              <2>         mov word [rax + idt_info.offset_low], si
   103 000012B2 66C740020800        <2>         mov word [rax + idt_info.selector], KernelCodeSelector
   104                              <2> 
   105 000012B8 C6400401            <2>         mov byte [rax + idt_info.ist], 0x01
   106 000012BC C640058F            <2>         mov byte [rax + idt_info.type_attr], TRAPGATE
   107                              <2> 
   108 000012C0 6644894806          <2>         mov word [rax + idt_info.offset_mid], r9w
   109                              <2> 
   110 000012C5 4C894008            <2>         mov qword [rax + idt_info.offset_high], r8
   111                              <2> 
   112 000012C9 4883C010            <2>         add rax, 16
   113 000012CD 48FFC1              <2>         inc rcx
   114 000012D0 4883F920            <2>         cmp rcx, 32
   115 000012D4 7CD9                <2>         jl .expection_idt
   116                              <2> 
   117 000012D6 0F011B              <2>     lidt	[rbx]
   118                              <2>     epilog
   254                              <3>  popallq
   305 000012D9 415F                <4>  pop r15
   306 000012DB 415E                <4>  pop r14
   307 000012DD 415D                <4>  pop r13
   308 000012DF 415C                <4>  pop r12
   309 000012E1 415B                <4>  pop r11
   310 000012E3 415A                <4>  pop r10
   311 000012E5 4159                <4>  pop r9
   312 000012E7 4158                <4>  pop r8
   313 000012E9 5F                  <4>  pop rdi
   314 000012EA 5E                  <4>  pop rsi
   315 000012EB 5A                  <4>  pop rdx
   316 000012EC 59                  <4>  pop rcx
   317 000012ED 5B                  <4>  pop rbx
   318 000012EE 58                  <4>  pop rax
   255                              <3> 
   256 000012EF 4889EC              <3>  mov rsp, rbp
   257 000012F2 5D                  <3>  pop rbp
   258 000012F3 C3                  <3>  ret
   119                              <2> 
   120                              <2> 
   121                              <2> default_exception_handler:;
   122                              <2>     ; mov rax,0xffff
   123 000012F4 488D35B5FDFFFF      <2>     lea rsi, [rel expection_default_message]
   124 000012FB 488D15F0FDFFFF      <2>     lea rdx, [rel expection_error_code]
   125                              <2>     function printk,1,rsi,rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00001302 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00001306 56                  <4>  push qword %2
   183 00001307 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 0000130A 52                  <4>  push qword %2
   183 0000130B 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 0000130F E8F3F5FFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00001314 4883C420            <4>  add rsp, total_space
   196                              <3> 
   126                              <2> 
   127 00001318 EBFE                <2>     jmp $
   128 0000131A 48CF                <2>     iretq
   129                              <2> div0_exception_handler:;
   130                              <2>     ; mov rbx,0x1111
   131                              <2>     ; jmp $
   132 0000131C 50                  <2>     push rax
   133 0000131D 53                  <2>     push rbx
   134 0000131E 51                  <2>     push rcx
   135 0000131F 52                  <2>     push rdx
   136 00001320 56                  <2>     push rsi
   137 00001321 57                  <2>     push rdi
   138 00001322 55                  <2>     push rbp
   139 00001323 4150                <2>     push r8
   140 00001325 4151                <2>     push r9
   141 00001327 4152                <2>     push r10
   142 00001329 4153                <2>     push r11
   143 0000132B 4154                <2>     push r12
   144 0000132D 4155                <2>     push r13
   145 0000132F 4156                <2>     push r14
   146 00001331 4157                <2>     push r15
   147                              <2> 
   148                              <2> 
   149 00001333 488D358DFDFFFF      <2>     lea rsi, [rel expection_div_message]
   150 0000133A 488D15B1FDFFFF      <2>     lea rdx, [rel expection_error_code]
   151                              <2>     function printk,1,rsi,rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00001341 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00001345 56                  <4>  push qword %2
   183 00001346 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00001349 52                  <4>  push qword %2
   183 0000134A 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 0000134E E8B4F5FFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00001353 4883C420            <4>  add rsp, total_space
   196                              <3> 
   152                              <2> 
   153                              <2> 
   154 00001357 EBFE                <2>     jmp $
   155                              <2>     ; hlt
   156                              <2> 
   157 00001359 415F                <2>     pop r15
   158 0000135B 415E                <2>     pop r14
   159 0000135D 415D                <2>     pop r13
   160 0000135F 415C                <2>     pop r12
   161 00001361 415B                <2>     pop r11
   162 00001363 415A                <2>     pop r10
   163 00001365 4159                <2>     pop r9
   164 00001367 4158                <2>     pop r8
   165 00001369 5D                  <2>     pop rbp
   166 0000136A 5F                  <2>     pop rdi
   167 0000136B 5E                  <2>     pop rsi
   168 0000136C 5A                  <2>     pop rdx
   169 0000136D 59                  <2>     pop rcx
   170 0000136E 5B                  <2>     pop rbx
   171 0000136F 58                  <2>     pop rax
   172                              <2> 
   173 00001370 48CF                <2>     iretq
   174                              <2> debug_exception_handler:;
   175                              <2>     ; mov rbx,0x2222
   176                              <2>     ; jmp $
   177 00001372 50                  <2>     push rax
   178 00001373 53                  <2>     push rbx
   179 00001374 51                  <2>     push rcx
   180 00001375 52                  <2>     push rdx
   181 00001376 56                  <2>     push rsi
   182 00001377 57                  <2>     push rdi
   183 00001378 55                  <2>     push rbp
   184 00001379 4150                <2>     push r8
   185 0000137B 4151                <2>     push r9
   186 0000137D 4152                <2>     push r10
   187 0000137F 4153                <2>     push r11
   188 00001381 4154                <2>     push r12
   189 00001383 4155                <2>     push r13
   190 00001385 4156                <2>     push r14
   191 00001387 4157                <2>     push r15
   192                              <2> 
   193                              <2> 
   194 00001389 488D354DFDFFFF      <2>     lea rsi, [rel expection_debug_message]
   195 00001390 488D155BFDFFFF      <2>     lea rdx, [rel expection_error_code]
   196                              <2>     function printk,1,rsi,rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00001397 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 0000139B 56                  <4>  push qword %2
   183 0000139C 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 0000139F 52                  <4>  push qword %2
   183 000013A0 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 000013A4 E85EF5FFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 000013A9 4883C420            <4>  add rsp, total_space
   196                              <3> 
   197 000013AD EBFE                <2>     jmp $
   198                              <2> 
   199 000013AF 415F                <2>     pop r15
   200 000013B1 415E                <2>     pop r14
   201 000013B3 415D                <2>     pop r13
   202 000013B5 415C                <2>     pop r12
   203 000013B7 415B                <2>     pop r11
   204 000013B9 415A                <2>     pop r10
   205 000013BB 4159                <2>     pop r9
   206 000013BD 4158                <2>     pop r8
   207 000013BF 5D                  <2>     pop rbp
   208 000013C0 5F                  <2>     pop rdi
   209 000013C1 5E                  <2>     pop rsi
   210 000013C2 5A                  <2>     pop rdx
   211 000013C3 59                  <2>     pop rcx
   212 000013C4 5B                  <2>     pop rbx
   213 000013C5 58                  <2>     pop rax
   214                              <2> 
   215 000013C6 48CF                <2>     iretq
   216                              <2>     ; function draw_screen,0,0x00000000
   217                              <2>     ;  jmp $
   218                              <2>     ; lea rsi,[rel expection_div_messige]
   219                              <2>     ; function draw_string,1,0,0,rsi
   220                              <2>     ; jmp $
   221                              <2>     ; iretq
   222                              <2> ; make_call_gate:                          	;创建64位的调用门
   223                              <2> ;                                           	;输入：RAX=例程的线性地址
   224                              <2> ;                                           	;输出：RDI:RSI=调用门
   225                              <2> ;          mov rdi, rax
   226                              <2> ;          shr rdi, 32                     	;得到门的高64位，在RDI中
   227                              <2> 
   228                              <2> ;          push rax                        	;构造数据结构，并预置线性地址的位15~0
   229                              <2> ;          mov word [rsp + 2], CORE_CODE64_SEL	;预置段选择子部分
   230                              <2> ;          mov [rsp + 4], eax                  	;预置线性地址的位31~16
   231                              <2> ;          mov word [rsp + 4], 0x8c00         	;添加P=1，TYPE=64位调用门
   232                              <2> ;          pop rsi
   233                              <2> 
   234                              <2> ;          ret
   235                              <2> 
   236                              <2> ; ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   237                              <2> ; make_interrupt_gate:                      	;创建64位的中断门
   238                              <2> ;                                             	;输入：RAX=例程的线性地址
   239                              <2> ;                                             	;输出：RDI:RSI=中断门
   240                              <2> ;          mov rdi, rax
   241                              <2> ;          shr rdi, 32                       	;得到门的高64位，在RDI中
   242                              <2> 
   243                              <2> ;          push rax                          	;构造数据结构，并预置线性地址的位15~0
   244                              <2> ;          mov word [rsp + 2], CORE_CODE64_SEL	;预置段选择子部分
   245                              <2> ;          mov [rsp + 4], eax                  	;预置线性地址的位31~16
   246                              <2> ;          mov word [rsp + 4], 0x8e00         	;添加P=1，TYPE=64位中断门
   247                              <2> ;          pop rsi
   248                              <2> 
   249                              <2> ;          ret
   250                              <2> 
   251                              <2> ; ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   252                              <2> ; make_trap_gate:                             	;创建64位的陷阱门
   253                              <2> ;                                              	;输入：RAX=例程的线性地址
   254                              <2> ;                                              	;输出：RDI:RSI=陷阱门
   255                              <2> ;          mov rdi, rax
   256                              <2> ;          shr rdi, 32                        	;得到门的高64位，在RDI中
   257                              <2> 
   258                              <2> ;          push rax                           	;构造数据结构，并预置线性地址的位15~0
   259                              <2> ;          mov word [rsp + 2], CORE_CODE64_SEL	;预置段选择子部分
   260                              <2> ;          mov [rsp + 4], eax                  	;预置线性地址的位31~16
   261                              <2> ;          mov word [rsp + 4], 0x8f00         	;添加P=1，TYPE=64位陷阱门
   262                              <2> ;          pop rsi
   263                              <2> 
   264                              <2> ;          ret
   265                              <2> 
   266                              <2> ; ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   267                              <2> ; make_tss_descriptor:                    	;创建64位的TSS描述符
   268                              <2> ;                                           	;输入：RAX=TSS的线性地址
   269                              <2> ;                                           	;输出：RDI:RSI=TSS描述符
   270                              <2> ;          push rax
   271                              <2> 
   272                              <2> ;          mov rdi, rax
   273                              <2> ;          shr rdi, 32                    	;得到门的高64位，在RDI中
   274                              <2> 
   275                              <2> ;          push rax                       	;先将部分线性地址移到适当位置
   276                              <2> ;          shl qword [rsp], 16           	;将线性地址的位23~00移到正确位置
   277                              <2> ;          mov word [rsp], 104           	;段界限的标准长度
   278                              <2> ;          mov al, [rsp + 5]
   279                              <2> ;          mov [rsp + 7], al             	;将线性地址的位31~24移到正确位置
   280                              <2> ;          mov byte [rsp + 5], 0x89     	;P=1，DPL=00，TYPE=1001（64位TSS）
   281                              <2> ;          mov byte [rsp + 6], 0        	;G、0、0、AVL和limit
   282                              <2> ;          pop rsi                       	;门的低64位
   283                              <2> 
   284                              <2> ;          pop rax
   285                              <2> 
   286                              <2> ;          ret
   287                              <2> 
   288                              <2> ; ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   289                              <2> ; mount_idt_entry:                     	;在中断描述符表IDT中安装门描述符
   290                              <2> ;                                        	;R8=中断向量
   291                              <2> ;                                        	;RDI:RSI=门描述符
   292                              <2> ;          push r8
   293                              <2> ;          push r9
   294                              <2> 
   295                              <2> ;          shl r8, 4                         	;中断号乘以16，得到表内偏移
   296                              <2> ;          mov r9, UPPER_IDT_LINEAR        	;中断描述符表的高端线性地址
   297                              <2> ;          mov [r9 + r8], rsi
   298                              <2> ;          mov [r9 + r8 + 8], rdi
   299                              <2> 
   300                              <2> ;          pop r9
   301                              <2> ;          pop r8
   302                              <2> 
   303                              <2> ;          ret
   304                              <2> %include "../kernel/printk.asm"
     1                              <3> %ifndef PRINTK_ASM
     2                              <3> %define PRINTK_ASM
     3                              <3> 
     4                              <3> %include "../bootloader/global_def.asm"
     5                              <3> %include "../kernel/video.asm"
     6                              <3>     
     7                              <3> [BITS 64]
     8                              <3> 
     9                              <3> %define COLOR_WHITE 	0x00ffffff		;WHITE
    10                              <3> %define COLOR_BLACK 	0x00000000		;BLACK
    11                              <3> %define COLOR_RED	    0x00ff0000		;RED
    12                              <3> %define COLOR_ORANGE	0x00ff8000		;ORANGE
    13                              <3> %define COLOR_YELLOW	0x00ffff00		;YELLOW
    14                              <3> %define COLOR_GREEN	    0x0000ff00		;GREEN
    15                              <3> %define COLOR_BLUE	    0x000000ff		;BLUE
    16                              <3> %define COLOR_INDIGO	0x0000ffff		;INDIGO
    17                              <3> %define COLOR_PURPLE	0x008000ff		;PURPLE
    18                              <3> 
    19                              <3> struc print_info
    20                              <3>     .cursor_xposition:     resw 1
    21                              <3>     .cursor_yposition:     resw 1
    22                              <3>     .cursor_line:          resw 1
    23                              <3> 
    24                              <3>     .print_xposition:      resw 1
    25                              <3>     .print_yposition:      resw 1
    26                              <3>     .print_line:           resw 1
    27                              <3>     .print_address:        resq 1
    28                              <3> 
    29                              <3>     .screen_xmax:          resw 1
    30                              <3>     .screen_ymax:          resw 1
    31                              <3> 
    32                              <3>     .font_base_address:    resq 1
    33                              <3>     .font_size:            resw 1
    34                              <3>     .font_width:           resw 1
    35                              <3>     .font_height:          resw 1
    36                              <3> 
    37                              <3>     .pixel_line_start:     resw 1
    38                              <3>     .pixel_line_height:       resw 1 
    39                              <3> 
    40                              <3>     .default_color:        resd 1
    41                              <3>     .current_color:        resd 1
    42                              <3>  endstruc
    43                              <3> print_info_ptr:;
    44                              <3>     istruc print_info
    45                              <3>         at print_info.cursor_xposition, dw 0
    46                              <3>         at print_info.cursor_yposition, dw 0
    47                              <3>         at print_info.cursor_line, dw 0
    48                              <3> 
    49                              <3>         at print_info.print_xposition, dw 0
    50                              <3>         at print_info.print_yposition, dw 0
    51                              <3>         at print_info.print_line, dw 0
    52                              <3>         at print_info.print_address, dq 0
    53                              <3> 
    54                              <3>         at print_info.screen_xmax, dw 0
    55                              <3>         at print_info.screen_ymax, dw 0
    56                              <3> 
    57                              <3>         at print_info.font_base_address, dq 0
    58                              <3>         at print_info.font_size, dw 0
    59                              <3>         at print_info.font_width, dw 0
    60                              <3>         at print_info.font_height, dw 0
    61                              <3> 
    62                              <3>         at print_info.pixel_line_start, dw 0
    63                              <3>         at print_info.pixel_line_height, dw 0
    64                              <3> 
    65                              <3>         at print_info.default_color, dd 0
    66                              <3>         at print_info.current_color, dd 0
    67                              <3>     iend
    68                              <3> 
    69                              <3> printk_init:;init printk
    70                              <3>     prolog 0;
    71                              <3> 
    72                              <3>     mov word [rel print_info_ptr + print_info.cursor_xposition],0
    73                              <3>     mov word [rel print_info_ptr + print_info.cursor_yposition],0
    74                              <3>     mov word [rel print_info_ptr + print_info.cursor_line],0
    75                              <3> 
    76                              <3> 
    77                              <3>     mov word [rel print_info_ptr + print_info.print_xposition],0
    78                              <3>     mov word [rel print_info_ptr + print_info.print_yposition],0    
    79                              <3>     mov word [rel print_info_ptr + print_info.print_line],0
    80                              <3>     mov qword [rel print_info_ptr + print_info.print_address],0
    81                              <3> 
    82                              <3>     mov word [rel print_info_ptr + print_info.screen_xmax],240
    83                              <3>     mov word [rel print_info_ptr + print_info.screen_ymax],54    
    84                              <3> 
    85                              <3>     mov rsi,0xFFFF800000105200
    86                              <3>     mov qword [rel print_info_ptr + print_info.font_base_address],rsi
    87                              <3>     mov word [rel print_info_ptr + print_info.font_size],16
    88                              <3>     mov word [rel print_info_ptr + print_info.font_width],8
    89                              <3>     mov word [rel print_info_ptr + print_info.font_height],16
    90                              <3> 
    91                              <3>     mov word [rel print_info_ptr + print_info.pixel_line_start],4
    92                              <3>     mov word [rel print_info_ptr + print_info.pixel_line_height],20
    93                              <3> 
    94                              <3>     mov dword [rel print_info_ptr + print_info.default_color],COLOR_WHITE
    95                              <3>     mov dword [rel print_info_ptr + print_info.current_color],COLOR_WHITE
    96                              <3> 
    97                              <3>     epilog
    98                              <3> 
    99                              <3> printk:; input: format string,pointer to arguments
   100                              <3> 
   101                              <3>     prolog 2
   102                              <3>     get_param rsi, 1   ; rsi = format string
   103                              <3>     get_param rdx, 2   ; rdx = pointer to arguments
   104                              <3> 
   105                              <3>     mov rax,0
   106                              <3> 
   107                              <3>     .next_char:
   108                              <3>         lodsb                  ; Load next character from format string into AL
   109                              <3>         test al, al            ; Check if end of string
   110                              <3>         jz .done
   111                              <3> 
   112                              <3>         cmp al, '\'           ; Check for escape character
   113                              <3>         je .escape_character
   114                              <3> 
   115                              <3>         cmp al, '%'            ; Check for format specifier
   116                              <3>         jne .print_char
   117                              <3>         lodsb                  ; Load format specifier
   118                              <3>         cmp al, 'd'            ; Check for %d
   119                              <3>         je .print_decimal
   120                              <3>         cmp al, 'x'            ; Check for %x
   121                              <3>         je .print_hex
   122                              <3>         cmp al, 's'            ; Check for %s
   123                              <3>         je .print_string
   124                              <3>         jmp .next_char         ; Skip unknown specifier
   125                              <3> 
   126                              <3>     .print_char:
   127                              <3>         function print_char,1,rax
   128                              <3>         jmp .next_char
   129                              <3> 
   130                              <3>     .print_decimal:
   131                              <3>         function print_decimal,1,rdx
   132                              <3>         jmp .next_char
   133                              <3> 
   134                              <3>     .print_hex:
   135                              <3>         function print_hex,1,rdx
   136                              <3>         jmp .next_char
   137                              <3> 
   138                              <3>     .print_string:
   139                              <3> 
   140                              <3>         function print_string,1,rdx
   141                              <3>         jmp .next_char
   142                              <3> 
   143                              <3>     .escape_character:
   144                              <3>         lodsb                  ; Load next character from string into AL
   145                              <3>         cmp al, 'n'            ; Check for %d
   146                              <3>         je .new_line
   147                              <3>         jmp .escape_done
   148                              <3>         .new_line:
   149                              <3>             add word [rel print_info_ptr + print_info.print_yposition],1
   150                              <3>             mov word [rel print_info_ptr + print_info.print_xposition],0
   151                              <3>         .escape_done:
   152                              <3>             jmp .next_char           
   153                              <3> 
   154                              <3>     .done:
   155                              <3>         epilog
   156                              <3> 
   157                              <3> print_char:; input:char
   158                              <3>     prolog 2;
   159                              <3> 
   160                              <3>     get_param rsi, 1   ; char
   161                              <3> 
   162                              <3> 
   163                              <3> 
   164                              <3>     mov rax, 0
   165                              <3>     mov ax, word [rel print_info_ptr + print_info.print_yposition]
   166                              <3> 
   167                              <3>     mov rbx,0
   168                              <3>     mov bx,word [rel video_info_ptr + video_info.xpixel]
   169                              <3>     mul rbx
   170                              <3> 
   171                              <3> 
   172                              <3>     mov rbx,0
   173                              <3>     mov bx,word [rel print_info_ptr + print_info.pixel_line_height]
   174                              <3>     mul rbx
   175                              <3> 
   176                              <3>     push rax
   177                              <3>     xor rax,rax
   178                              <3>     mov ax,word [rel print_info_ptr + print_info.print_xposition]
   179                              <3>     mov rbx,0
   180                              <3>     mov bx,word [rel print_info_ptr + print_info.font_width]
   181                              <3>     mul rbx
   182                              <3> 
   183                              <3> 
   184                              <3>     mov rcx,0
   185                              <3>     pop rcx
   186                              <3>     add rax, rcx
   187                              <3> 
   188                              <3>     mov rbx,0
   189                              <3>     mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   190                              <3>     mul rbx
   191                              <3> 
   192                              <3>     mov rdi, qword [rel video_info_ptr + video_info.video_framebuffer]
   193                              <3>     add rdi, rax        ;rdi=屏幕地址
   194                              <3> 
   195                              <3> 
   196                              <3>     shl rsi, 4
   197                              <3> 
   198                              <3>     mov rbx,0
   199                              <3>     mov rbx, [rel print_info_ptr + print_info.font_base_address]
   200                              <3>     add rsi, rbx        ; RSI = 字符数据地址
   201                              <3> 
   202                              <3>     xor rcx,rcx
   203                              <3>     mov cx, word [rel print_info_ptr + print_info.font_height]
   204                              <3> 
   205                              <3>     .next_line:
   206                              <3>         push rdi               ; 保存当前行起始位置
   207                              <3>         
   208                              <3>         ; 处理一行(8像素)
   209                              <3>         mov dl, [rsi]          ; 获取字模数据
   210                              <3>         mov dh, 8              ; 8位/行
   211                              <3>         .next_pixel:
   212                              <3>             xor rax,rax
   213                              <3>             mov al,byte [rel video_info_ptr + video_info.byte_per_pixel]
   214                              <3> 
   215                              <3>             test dl, 0x80       ; 测试最高位
   216                              <3>             jz .skip_pixel
   217                              <3> 
   218                              <3> 
   219                              <3>             cmp al,4
   220                              <3>             jb .pixel_2byte
   221                              <3>             mov byte [rdi+2], 0xFF ; 绘制像素(白色)
   222                              <3>             mov byte [rdi+3], 0x00 ; 绘制像素(白色)
   223                              <3>             .pixel_2byte:
   224                              <3>                 mov byte [rdi], 0xFF ; 绘制像素(白色)
   225                              <3>                 mov byte [rdi+1], 0xFF ; 绘制像素(白色)
   226                              <3>             ; jmp $
   227                              <3>         .skip_pixel:
   228                              <3>             shl dl, 1           ; 移到下一位
   229                              <3>             add rdi,rax
   230                              <3>             dec dh
   231                              <3>             jnz .next_pixel
   232                              <3>         
   233                              <3>         pop rdi                 ; 恢复行起始位置
   234                              <3>         xor rax,rax
   235                              <3>         mov ax,word [rel video_info_ptr + video_info.xpixel]
   236                              <3> 
   237                              <3>         mov rbx,0
   238                              <3>         mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   239                              <3>         mul rbx
   240                              <3> 
   241                              <3>         add rdi,rax; 移到下一行(320=屏幕宽度)
   242                              <3> 
   243                              <3>         inc rsi                 ; 下一个字模字节
   244                              <3> 
   245                              <3>         loop .next_line
   246                              <3>     
   247                              <3>     add word [rel print_info_ptr + print_info.print_xposition],1
   248                              <3>     epilog
   249                              <3> 
   250                              <3> print_decimal:;input:rsi=decimal number
   251                              <3> 
   252                              <3>     prolog 2;
   253                              <3> 
   254                              <3>     get_param rsi, 1   ; dec
   255                              <3> 
   256                              <3>     ; mov rbx, 'D'
   257                              <3>     ; function print_char,1,rbx    
   258                              <3> 
   259                              <3>     xor rax, rax
   260                              <3>     xor rbx, rbx
   261                              <3>     xor rdx, rdx
   262                              <3>     mov rax, [rsi]
   263                              <3> 
   264                              <3>     xor rbx, rbx
   265                              <3>     mov rbx, 10              ; Base 10
   266                              <3>     xor rcx, rcx             ; Digit counter
   267                              <3> 
   268                              <3>     .convert_loop:
   269                              <3>         xor rdx, rdx
   270                              <3>         div rbx              ; Divide rax by 10, remainder in rdx
   271                              <3>         push rdx             ; Save remainder (digit)
   272                              <3>         inc rcx              ; Increment digit counter
   273                              <3>         test rax, rax
   274                              <3>         jnz .convert_loop    ; Repeat until rax == 0
   275                              <3> 
   276                              <3>     .print_digits:
   277                              <3>         pop rdx              ; Get digit from stack
   278                              <3>         add dl, '0'          ; Convert to ASCII
   279                              <3> 
   280                              <3>         mov rbx, rdx
   281                              <3>         function print_char,1,rbx    
   282                              <3> 
   283                              <3>         loop .print_digits
   284                              <3> 
   285                              <3>     epilog
   286                              <3> 
   287                              <3> 
   288                              <3> print_hex:;input:rsi=hex number
   289                              <3> 
   290                              <3>     prolog 2;
   291                              <3> 
   292                              <3>     get_param rsi, 1   ; dec
   293                              <3> 
   294                              <3>     ; mov rbx, 'X'
   295                              <3>     ; function print_char,1,rbx    
   296                              <3> 
   297                              <3>     xor rax, rax
   298                              <3>     xor rbx, rbx
   299                              <3>     xor rdx, rdx
   300                              <3>     mov rax, [rsi]
   301                              <3> 
   302                              <3>     mov rcx, 16              ; Process 16 digits (64-bit number)
   303                              <3>     .convert_loop:
   304                              <3>         rol rax, 4           ; Rotate left by 4 bits
   305                              <3>         mov dl, al           ; Extract lower nibble
   306                              <3>         and dl, 0x0F         ; Mask to get a single hex digit
   307                              <3>         cmp dl, 10
   308                              <3>         jl .digit
   309                              <3>         add dl, 'a' - 10     ; Convert to 'A'-'F'
   310                              <3>         jmp .output
   311                              <3>     .digit:
   312                              <3>         add dl, '0'          ; Convert to '0'-'9'
   313                              <3>     .output:
   314                              <3>         mov rbx, rdx
   315                              <3>         function print_char,1,rbx    
   316                              <3>         loop .convert_loop
   317                              <3>     epilog
   318                              <3> 
   319                              <3> 
   320                              <3> 
   321                              <3> print_string:;input: string
   322                              <3>     prolog 2;
   323                              <3>     get_param rsi, 1   ; string
   324                              <3> 
   325                              <3>     xor rax,rax
   326                              <3>     .next_char_t:
   327                              <3>         lodsb                  ; Load next character from string into AL
   328                              <3>         test al, al            ; Check if end of string
   329                              <3>         jz .done_t
   330                              <3> 
   331                              <3>         cmp al, '\'           ; Check for escape character
   332                              <3>         je .escape_character
   333                              <3> 
   334                              <3>         function print_char,1,rax
   335                              <3> 
   336                              <3>         jmp .next_char_t
   337                              <3>         .escape_character:
   338                              <3>             lodsb                  ; Load next character from string into AL
   339                              <3>             cmp al, 'n'            ; Check for %d
   340                              <3>             je .new_line
   341                              <3>             jmp .escape_done
   342                              <3>             .new_line:
   343                              <3>                 add word [rel print_info_ptr + print_info.print_yposition],1
   344                              <3>                 mov word [rel print_info_ptr + print_info.print_xposition],0
   345                              <3>             .escape_done:
   346                              <3>                 jmp .next_char_t            
   347                              <3>     .done_t:
   348                              <3>     epilog
   349                              <3> flush_framebuffer:;flush framebuffer
   350                              <3>     prolog 0;
   351                              <3>     mov rax, 0
   352                              <3>     mov ax, word [rel print_info_ptr + print_info.print_yposition]
   353                              <3>     mov rbx,0
   354                              <3>     mov bx,word [rel video_info_ptr + video_info.xpixel]
   355                              <3>     imul rax,rbx
   356                              <3>     mov rcx,0
   357                              <3>     mov cx,word [rel print_info_ptr + print_info.print_xposition]
   358                              <3>     add rax, rcx
   359                              <3>     mov rbx,0
   360                              <3>     mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   361                              <3>     imul rax,rbx
   362                              <3>     ; jmp $
   363                              <3>     mov rdi, qword [rel video_info_ptr + video_info.video_framebuffer]
   364                              <3>     add rdi, rax
   365                              <3>     mov rax,0
   366                              <3>     epilog
   367                              <3> 
   368                              <3> draw_char:; input: x,y,char; draw a character
   369                              <3>     prolog 2;
   370                              <3>     get_param r8, 1   ; x
   371                              <3>     get_param r9, 2   ; y
   372                              <3>     get_param rsi, 3   ; char
   373                              <3> 
   374                              <3>     mov rax, 0
   375                              <3>     mov rax, r9
   376                              <3> 
   377                              <3>     mov rbx,0
   378                              <3>     mov bx,word [rel video_info_ptr + video_info.xpixel]
   379                              <3>     imul rax,rbx
   380                              <3> 
   381                              <3>     mov rcx,0
   382                              <3>     mov rcx,r8
   383                              <3>     add rax, rcx
   384                              <3> 
   385                              <3>     mov rbx,0
   386                              <3>     mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   387                              <3>     imul rax,rbx
   388                              <3>     ; jmp $
   389                              <3>     mov rdi, qword [rel video_info_ptr + video_info.video_framebuffer]
   390                              <3>     add rdi, rax        ;rdi=屏幕地址
   391                              <3> 
   392                              <3> 
   393                              <3>     xor rax, rax
   394                              <3>     mov rax,rsi
   395                              <3> 
   396                              <3>     shl rax, 4                 ; 乘以16(每个字符16字节)
   397                              <3>     mov rbx, [rel print_info_ptr + print_info.font_base_address]
   398                              <3>     add rbx, rax         ; RSI = 字符数据地址
   399                              <3>     mov rsi,rbx
   400                              <3> 
   401                              <3> 
   402                              <3>     mov rcx, 16                ; 16行高度
   403                              <3>     push rdi               ; 保存当前行起始位置
   404                              <3>     .next_line:
   405                              <3>         push rdi               ; 保存当前行起始位置
   406                              <3>         
   407                              <3>         ; 处理一行(8像素)
   408                              <3>         mov dl, [rsi]          ; 获取字模数据
   409                              <3>         mov dh, 8              ; 8位/行
   410                              <3>         .next_pixel:
   411                              <3>             xor rax,rax
   412                              <3>             mov al,byte [rel video_info_ptr + video_info.byte_per_pixel]
   413                              <3> 
   414                              <3>             test dl, 0x80       ; 测试最高位
   415                              <3>             jz .skip_pixel
   416                              <3> 
   417                              <3> 
   418                              <3>             cmp al,4
   419                              <3>             jb .pixel_2byte
   420                              <3>             mov byte [rdi+2], 0xFF ; 绘制像素(白色)
   421                              <3>             mov byte [rdi+3], 0x00 ; 绘制像素(白色)
   422                              <3>             .pixel_2byte:
   423                              <3>                 mov byte [rdi], 0xFF ; 绘制像素(白色)
   424                              <3>                 mov byte [rdi+1], 0xFF ; 绘制像素(白色)
   425                              <3>             jmp .pixel_write_done
   426                              <3>         .skip_pixel:
   427                              <3>             mov byte [rdi+2], 0x00 ; 绘制像素(白色)
   428                              <3>             mov byte [rdi+3], 0x00 ; 绘制像素(白色)
   429                              <3>             mov byte [rdi], 0x00 ; 绘制像素(白色)
   430                              <3>             mov byte [rdi+1], 0x00 ; 绘制像素(白色)
   431                              <3>             .pixel_write_done:
   432                              <3>             shl dl, 1           ; 移到下一位
   433                              <3>             add rdi,rax
   434                              <3>             dec dh
   435                              <3>             jnz .next_pixel
   436                              <3>         
   437                              <3>         pop rdi                 ; 恢复行起始位置
   438                              <3> 
   439                              <3>         xor rax,rax
   440                              <3>         mov ax,word [rel video_info_ptr + video_info.xpixel]
   441                              <3> 
   442                              <3>         mov rbx,0
   443                              <3>         mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   444                              <3>         imul rax,rbx
   445                              <3>         add rdi,rax
   446                              <3>         inc rsi                 ; next char font
   447                              <3>         loop .next_line
   448                              <3>                 ; jmp $
   449                              <3>     pop rdi                 ; 恢复行起始位置
   450                              <3>     epilog
   451                              <3> 
   452                              <3> 
   453                              <3> 
   454                              <3> draw_string:; input: x,y,string; draw string
   455                              <3>     prolog 2;
   456                              <3>     get_param r8, 1   ; x
   457                              <3>     get_param r9, 2   ; y
   458                              <3>     get_param rsi, 3   ; string
   459                              <3> 
   460                              <3>     .next_char:
   461                              <3>         lodsb                  
   462                              <3>         test al, al
   463                              <3>         jz .done
   464                              <3>         mov rbx, 0
   465                              <3>         mov bl, " "
   466                              <3>         function draw_char,1,r8,r9,rbx ;clear char
   467                              <3>         mov rbx, 0
   468                              <3>         mov bl, al
   469                              <3>         function draw_char,1,r8,r9,rbx
   470                              <3>         add r8, 8
   471                              <3> 
   472                              <3>         jmp .next_char
   473                              <3>     .done:
   474                              <3>     epilog
   475                              <3> 
   476                              <3> draw_hex:; input: x,y,hex; draw hex
   477                              <3>     prolog 2;
   478                              <3>     get_param r8, 1   ; x
   479                              <3>     get_param r9, 2   ; y
   480                              <3>     get_param rsi, 3   ; hex
   481                              <3> 
   482                              <3>     mov rbx, 'X'
   483                              <3>     function draw_char,1,r8,r9,rbx    
   484                              <3>     add r8, 8
   485                              <3> 
   486                              <3> 
   487                              <3>     xor rax, rax
   488                              <3>     xor rbx, rbx
   489                              <3>     xor rdx, rdx
   490                              <3>     mov rax, [rsi]
   491                              <3> 
   492                              <3>     mov rcx, 16              ; Process 16 digits (64-bit number)
   493                              <3>     .convert_loopqq:
   494                              <3>         rol rax, 4           ; Rotate left by 4 bits
   495                              <3>         mov dl, al           ; Extract lower nibble
   496                              <3> 
   497                              <3>         and dl, 0x0F         ; Mask to get a single hex digit
   498                              <3> 
   499                              <3>         cmp dl, 10
   500                              <3>         jl .digitqq
   501                              <3>         add dl, 'a' - 10     ; Convert to 'A'-'F'
   502                              <3>         jmp .outputqq
   503                              <3>     .digitqq:
   504                              <3>         add dl, '0'          ; Convert to '0'-'9'
   505                              <3>     .outputqq:
   506                              <3>         mov rbx, rdx
   507                              <3> 
   508                              <3>         function draw_char,1,r8,r9,rbx
   509                              <3>         
   510                              <3>         add r8, 8
   511                              <3>         loop .convert_loopqq
   512                              <3> 
   513                              <3>     epilog
   514                              <3> draw_decimal:; input: x,y,decimal address; draw dec
   515                              <3>     prolog 2;
   516                              <3>     get_param r8, 1   ; x
   517                              <3>     get_param r9, 2   ; y
   518                              <3>     get_param rsi, 3   ; dec
   519                              <3> 
   520                              <3>     mov rbx, 'D'
   521                              <3>     function draw_char,1,r8,r9,rbx    
   522                              <3>     add r8, 8
   523                              <3> 
   524                              <3>     xor rax, rax
   525                              <3>     xor rbx, rbx
   526                              <3>     xor rdx, rdx
   527                              <3>     mov rax, [rsi]
   528                              <3> 
   529                              <3>     xor rbx, rbx
   530                              <3>     mov rbx, 10              ; Base 10
   531                              <3>     xor rcx, rcx             ; Digit counter
   532                              <3> 
   533                              <3>     .convert_loop:
   534                              <3>         xor rdx, rdx
   535                              <3>         div rbx              ; Divide rax by 10, remainder in rdx
   536                              <3>         push rdx             ; Save remainder (digit)
   537                              <3>         inc rcx              ; Increment digit counter
   538                              <3>         test rax, rax
   539                              <3>         jnz .convert_loop    ; Repeat until rax == 0
   540                              <3> 
   541                              <3>     .print_digits:
   542                              <3>         pop rdx              ; Get digit from stack
   543                              <3>         add dl, '0'          ; Convert to ASCII
   544                              <3> 
   545                              <3>         mov rbx, rdx
   546                              <3>         function draw_char,1,r8,r9,rbx    
   547                              <3>         add r8, 8
   548                              <3> 
   549                              <3>         loop .print_digits
   550                              <3> 
   551                              <3>     epilog
   552                              <3> ; debug_stop:
   553                              <3> ;     mov r15,0x99999
   554                              <3> ;     jmp $
   555                              <3> %endif
   305                              <2> %endif
    10                              <1> %include "../kernel/interrupt.asm"
     1                              <2> %ifndef INTERRUPT_ASM
     2                              <2> %define INTERRUPT_ASM
     3                              <2> 
     4                              <2> %include "../bootloader/global_def.asm"
     1                              <3> %ifndef GLOBAL_DEF_ASM
     2                              <3> %define GLOBAL_DEF_ASM
     3                              <3> %define PLATFORM_QEMU_X64 1
     4                              <3> %define PLATFORM_X64 2
     5                              <3> %define DEBUG_PLATFORM PLATFORM_QEMU_X64
     6                              <3> %define DEBUG_MODE 1
     7                              <3> 
     8                              <3> 
     9                              <3> ;|----------------------|
    10                              <3> ;|	100000 ~ END	|
    11                              <3> ;|	   KERNEL	|
    12                              <3> ;|----------------------|
    13                              <3> ;|	E0000 ~ 100000	|
    14                              <3> ;| Extended System BIOS |
    15                              <3> ;|----------------------|
    16                              <3> ;|	C0000 ~ Dffff	|
    17                              <3> ;|     Expansion Area   |
    18                              <3> ;|----------------------|
    19                              <3> ;|	A0000 ~ bffff	|
    20                              <3> ;|   Legacy Video Area  |
    21                              <3> ;|----------------------|
    22                              <3> ;|	9f000 ~ A0000	|
    23                              <3> ;|	 BIOS reserve	|
    24                              <3> ;|----------------------|
    25                              <3> ;|	90000 ~ 9f000	|
    26                              <3> ;|	 kernel tmpbuf	|
    27                              <3> ;|----------------------|
    28                              <3> ;|	10000 ~ 90000	|
    29                              <3> ;|	   LOADER	|
    30                              <3> ;|----------------------|
    31                              <3> ;|	8000 ~ 10000	|
    32                              <3> ;|	  VBE info	|
    33                              <3> ;|----------------------|
    34                              <3> ;|	7e00 ~ 8000	|
    35                              <3> ;|	  mem info	|
    36                              <3> ;|----------------------|
    37                              <3> ;|	7c00 ~ 7e00	|
    38                              <3> ;|	 MBR (BOOT)	|
    39                              <3> ;|----------------------|
    40                              <3> ;|	0000 ~ 7c00	|
    41                              <3> ;|	 BIOS Code	|
    42                              <3> ;|----------------------|
    43                              <3> 
    44                              <3> 
    45                              <3> ;_______________________________________________________
    46                              <3> ; START	END	    SIZE	        USED
    47                              <3> ; FFFF0	FFFFF	16B	        BIOS System Entry
    48                              <3> ; F0000	FFFEF	64KB-16B	BIOS System Code
    49                              <3> ; C8000	EFFFF	160KB	    ROM/Mapped IO
    50                              <3> ; C0000	C7FFF	32KB	    Graphic Adapter BIOS
    51                              <3> ; B8000	BFFFF	32KB	    Chroma Text Video Buffer
    52                              <3> ; B0000	B7FFF	32KB	    Mono Text Video Buffer
    53                              <3> ; A0000	AFFFF	64KB	    Graphic Video Buffer
    54                              <3> ; 9FC00	9FFFF	1KB	        Extended BIOS Data Area
    55                              <3> ; 7E00	9FBFF	622080B     Useable 608KB	
    56                              <3> ; 7C00	7DFF	512B	    MBR
    57                              <3> ; 500	7BFF	30464B      Useable 30KB	
    58                              <3> ; 400	4FF	    256B	    BIOS Data Area
    59                              <3> ; 000	3FF	    1KB	        IVT
    60                              <3> ; _____________________________________________________
    61                              <3> 
    62                              <3> 
    63                              <3> 
    64                              <3> 
    65                              <3> 
    66                              <3> 
    67                              <3> 
    68                              <3> 
    69                              <3> 
    70                              <3> 
    71                              <3> 
    72                              <3> ;|----------------------|
    73                              <3> ;|	100000 ~ END	|
    74                              <3> ;|	   KERNEL	|
    75                              <3> ;|----------------------|
    76                              <3> ;|	E0000 ~ 100000	|
    77                              <3> ;| Extended System BIOS |
    78                              <3> ;|----------------------|
    79                              <3> ;|	C0000 ~ Dffff	|
    80                              <3> ;|     Expansion Area   |
    81                              <3> ;|----------------------|
    82                              <3> ;|	A0000 ~ bffff	|
    83                              <3> ;|   Legacy Video Area  |
    84                              <3> ;|----------------------|
    85                              <3> ;|	9F000 ~ A0000	|
    86                              <3> ;|	 BIOS reserve	|
    87                              <3> ;|----------------------|
    88                              <3> ;|	90000 ~ 9F000	|
    89                              <3> ;|	 kernel tmpbuf	|
    90                              <3> ;|----------------------|
    91                              <3> ;|	10000 ~ 90000	|
    92                              <3> ;|	   LOADER	|
    93                              <3> ;|----------------------|
    94                              <3> ;|	8000 ~ 10000	|
    95                              <3> ;|	  VBE info	|
    96                              <3> ;|----------------------|
    97                              <3> ;|	7E00 ~ 8000	|
    98                              <3> ;|	  mem info	|
    99                              <3> ;|----------------------|
   100                              <3> ;|	7C00 ~ 7E00	|
   101                              <3> ;|	 MBR (BOOT)	|
   102                              <3> ;|----------------------|
   103                              <3> ;|	0000 ~ 7C00	|
   104                              <3> ;|	 BIOS Code	|
   105                              <3> ;|----------------------|
   106                              <3> 
   107                              <3> 
   108                              <3> 
   109                              <3> 
   110                              <3> 
   111                              <3> 
   112                              <3> 
   113                              <3> 
   114                              <3> 
   115                              <3> 
   116                              <3> ;______________________________________________
   117                              <3> ; ----------------Vbe Info Block------------
   118                              <3> ; typedef struct {
   119                              <3> ;     unsigned char       vbe_signature;
   120                              <3> ;     unsigned short      vbe_version;
   121                              <3> ;     unsigned long       oem_string_ptr;
   122                              <3> ;     unsigned char       capabilities;
   123                              <3> ;     unsigned long       video_mode_ptr;
   124                              <3> ;     unsigned short      total_memory;
   125                              <3> ;     unsigned short      oem_software_rev;
   126                              <3> ;     unsigned long       oem_vendor_name_ptr;
   127                              <3> ;     unsigned long       oem_product_name_ptr;
   128                              <3> ;     unsigned long       oem_product_rev_ptr;
   129                              <3> ;     unsigned char       reserved[222];
   130                              <3> ;     unsigned char       oem_data[256];  
   131                              <3> ; } VbeInfoBlock;
   132                              <3> ;______________________________________________
   133                              <3> 
   134                              <3> 
   135                              <3> BaseOfKernelFile	equ	0x00
   136                              <3> OffsetOfKernelFile	equ	0x100000
   137                              <3> BaseTmpOfKernelAddr	equ	0x9000
   138                              <3> OffsetTmpOfKernelFile	equ	0x0000
   139                              <3> VBEStructBufferAddr	equ	0x8000
   140                              <3> VBEModeStructBufferAddr	equ	0x8200
   141                              <3> MemoryStructBufferAddr	equ	0x8800
   142                              <3> 
   143                              <3> KernelCodeSelector      equ 0x08
   144                              <3> KernelDataSelector      equ 0x10
   145                              <3> UserCodeSelector      equ 0x18
   146                              <3> UserDataSelector      equ 0x20
   147                              <3> 
   148                              <3> KernelSpaceUpperAddress equ 0xFFFF800000000000
   149                              <3> 
   150                              <3> GDTPointerUpperAddr equ 0xFFFF800000104000
   151                              <3> IDTPointerUpperAddr equ 0xFFFF80000010400a
   152                              <3> TSSPointerUpperAddr equ 0xFFFF800000104014
   153                              <3> 
   154                              <3> VideoFrameBufferAddress equ 0xFFFF800003000000
   155                              <3> KernelStartSectorNum	equ	16
   156                              <3> 
   157                              <3> 
   158                              <3> 
   159                              <3> 
   160                              <3> MasterSectorReadNumPort    equ	0x1F2
   161                              <3> MasterSectorReadPort    equ	0x1F0
   162                              <3> 
   163                              <3> SlaveReadNumPort    equ	0x172
   164                              <3> SlaveSectorReadPort    equ	0x170
   165                              <3> 
   166                              <3> SectorReadNumPort    equ	MasterSectorReadNumPort
   167                              <3> SectorReadPort    equ	MasterSectorReadPort
   168                              <3> 
   169                              <3> struc vbe_info_block
   170                              <3>     .signature                 resb 4    ; 'VESA' signature (must be "VESA")
   171                              <3>     .version                   resw 1    ; VBE version (e.g., 0x0300 for VBE 3.0)
   172                              <3>     .oem_string_ptr            resd 1    ; Pointer to OEM string
   173                              <3>     .capabilities              resd 1    ; Capabilities of the video card
   174                              <3>     .video_mode_ptr            resd 1    ; Pointer to supported video modes
   175                              <3>     .total_memory              resw 1    ; Total memory in 64KB blocks
   176                              <3> 
   177                              <3>     ; VBE 2.0+ fields
   178                              <3>     .oem_software_rev          resw 1    ; OEM software revision
   179                              <3>     .oem_vendor_name_ptr       resd 1    ; Pointer to OEM vendor name string
   180                              <3>     .oem_product_name_ptr      resd 1    ; Pointer to OEM product name string
   181                              <3>     .oem_product_rev_ptr       resd 1    ; Pointer to OEM product revision string
   182                              <3>     .reserved                  resb 222  ; Reserved for VBE implementation
   183                              <3>     .oem_data                  resb 256  ; Data area for OEM-specific information
   184                              <3> endstruc
   185                              <3> 
   186                              <3> struc vbe_mode_info_block
   187                              <3>     .attributes                resw 1    ; Mode attributes
   188                              <3>     .winA_attributes           resb 1    ; Window A attributes
   189                              <3>     .winB_attributes           resb 1    ; Window B attributes
   190                              <3>     .win_granularity           resw 1    ; Window granularity in KB
   191                              <3>     .win_size                  resw 1    ; Window size in KB
   192                              <3>     .winA_segment              resw 1    ; Window A segment
   193                              <3>     .winB_segment              resw 1    ; Window B segment
   194                              <3>     .win_func_ptr              resd 1    ; Pointer to window function
   195                              <3>     .bytes_per_scanline        resw 1    ; Bytes per scanline
   196                              <3> 
   197                              <3>     ; VBE 1.2+ fields
   198                              <3>     .x_resolution              resw 1    ; Horizontal resolution in pixels
   199                              <3>     .y_resolution              resw 1    ; Vertical resolution in pixels
   200                              <3>     .x_char_size               resb 1    ; Character cell width in pixels
   201                              <3>     .y_char_size               resb 1    ; Character cell height in pixels
   202                              <3>     .number_of_planes          resb 1    ; Number of memory planes
   203                              <3>     .bits_per_pixel            resb 1    ; Bits per pixel
   204                              <3>     .number_of_banks           resb 1    ; Number of banks
   205                              <3>     .memory_model              resb 1    ; Memory model type
   206                              <3>     .bank_size                 resb 1    ; Bank size in KB
   207                              <3>     .number_of_image_pages     resb 1    ; Number of images
   208                              <3>     .reserved1                 resb 1    ; Reserved
   209                              <3> 
   210                              <3>     ; Direct Color fields (VBE 1.2+)
   211                              <3>     .red_mask_size             resb 1    ; Size of direct color red mask
   212                              <3>     .red_field_position        resb 1    ; Bit position of red mask
   213                              <3>     .green_mask_size           resb 1    ; Size of direct color green mask
   214                              <3>     .green_field_position      resb 1    ; Bit position of green mask
   215                              <3>     .blue_mask_size            resb 1    ; Size of direct color blue mask
   216                              <3>     .blue_field_position       resb 1    ; Bit position of blue mask
   217                              <3>     .reserved_mask_size        resb 1    ; Size of direct color reserved mask
   218                              <3>     .reserved_field_position   resb 1    ; Bit position of reserved mask
   219                              <3>     .direct_color_mode_info    resb 1    ; Direct color mode attributes
   220                              <3> 
   221                              <3>     ; VBE 2.0+ fields
   222                              <3>     .phys_base_ptr             resd 1    ; Physical address for flat memory frame buffer
   223                              <3>     .reserved2                 resd 1    ; Reserved
   224                              <3>     .reserved3                 resw 1    ; Reserved
   225                              <3> 
   226                              <3>     ; VBE 3.0+ fields
   227                              <3>     .lin_bytes_per_scanline    resw 1    ; Bytes per scanline for linear modes
   228                              <3>     .bnk_number_of_image_pages resb 1    ; Number of images for banked modes
   229                              <3>     .lin_number_of_image_pages resb 1    ; Number of images for linear modes
   230                              <3>     .lin_red_mask_size         resb 1    ; Size of direct color red mask (linear modes)
   231                              <3>     .lin_red_field_position    resb 1    ; Bit position of red mask (linear modes)
   232                              <3>     .lin_green_mask_size       resb 1    ; Size of direct color green mask (linear modes)
   233                              <3>     .lin_green_field_position  resb 1    ; Bit position of green mask (linear modes)
   234                              <3>     .lin_blue_mask_size        resb 1    ; Size of direct color blue mask (linear modes)
   235                              <3>     .lin_blue_field_position   resb 1    ; Bit position of blue mask (linear modes)
   236                              <3>     .lin_reserved_mask_size    resb 1    ; Size of direct color reserved mask (linear modes)
   237                              <3>     .lin_reserved_field_position resb 1  ; Bit position of reserved mask (linear modes)
   238                              <3>     .max_pixel_clock           resd 1    ; Maximum pixel clock (Hz)
   239                              <3>     .reserved4                 resb 190  ; Reserved for future expansion
   240                              <3> endstruc
   241                              <3> 
   242                              <3> struc e820_memory_entry
   243                              <3>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   244                              <3>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   245                              <3>     .length_low               resd 1    ; Lower 32 bits of the length
   246                              <3>     .length_high              resd 1    ; Upper 32 bits of the length
   247                              <3>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   248                              <3>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   249                              <3> endstruc
   250                              <3> 
   251                              <3> %endif
     5                              <2> %include "../kernel/stddef.asm"
     1                              <3> %ifndef STDDEF_ASM
     2                              <3> %define STDDEF_ASM
     3                              <3> 
     4                              <3> ;-----------Data Type Standard------------;
     5                              <3> %define USE_DT_STANDARD
     6                              <3> %ifdef USE_DT_STANDARD
     7                              <3> ;     %macro gbyte 1 ; 参数1：变量名, 参数2：初始值(1字节)
     8                              <3> ;         %1: db %2
     9                              <3> ;         %endmacro
    10                              <3> 
    11                              <3> ;     %macro g2byte 1 ; 参数1：变量名, 参数2：初始值(4字节)
    12                              <3> ;         %1: dw %2
    13                              <3> ;         %endmacro
    14                              <3> 
    15                              <3> ;     %macro g4byte 1 ; 参数1：变量名, 参数2：初始值(4字节)
    16                              <3> ;         %1: dd %2
    17                              <3> ;         %endmacro
    18                              <3> 
    19                              <3> ;     %macro g8byte 1 ; 参数1：变量名, 参数2：初始值(8字节)
    20                              <3> ;         %1: dq %2
    21                              <3> ;         %endmacro
    22                              <3> 
    23                              <3> ; %define UNIQUE_ID_IMPL(name, line) name %+ _ %+ line
    24                              <3> ; %define UNIQUE_ID(name) UNIQUE_ID_IMPL(name, __LINE__)
    25                              <3> ;     ; %macro lvar 1
    26                              <3> ;     ;     %define %1 qword [rbp - 112-(__local_offset + 8)]
    27                              <3> 
    28                              <3> ;     ;     %assign __local_offset  __local_offset + 8
    29                              <3> 
    30                              <3> ;     ;     sub rsp, 8
    31                              <3> ;     ;     %endmacro
    32                              <3> 
    33                              <3> ;     ; 初始化局部变量追踪
    34                              <3> ;     %macro LOCAL_BEGIN 0
    35                              <3> ;         %push local_ctx              ; 创建新的局部上下文
    36                              <3> ;         %assign %$local_offset 0     ; 初始化局部偏移计数器
    37                              <3> ;     %endmacro
    38                              <3> 
    39                              <3> 
    40                              <3> ;     %macro lvar 1
    41                              <3> ;         %assign %$local_offset %$local_offset+8
    42                              <3> ;         %define %$var_%1 %$local_offset
    43                              <3> ;         %define %1  qword[rbp-%$var_%1]
    44                              <3> ;         sub rsp,8
    45                              <3> ;     %endmacro
    46                              <3> 
    47                              <3>     ; %macro lstr 2
    48                              <3>     ;     %ifstr %2
    49                              <3>     ;         %strlen len %2
    50                              <3>     ;         %assign %$local_offset %$local_offset+len+1   ; 累加偏移
    51                              <3>     ;         %define %$str_%1 %$local_offset               ; 定义变量偏移
    52                              <3>     ;         %define %1  [rbp - %$str_%1]
    53                              <3>     ;         %define %1.size len+1
    54                              <3>     ;         sub rsp,%1.size
    55                              <3>     ;     %endif
    56                              <3>     ;         mov rcx, %3
    57                              <3>     ;         mov rdi, ebp
    58                              <3>     ;         add rdi, %$var_%1
    59                              <3>     ;         lea rsi, [%2]
    60                              <3>     ;         rep movsb
    61                              <3>     ; %endmacro
    62                              <3> 
    63                              <3>     ; %macro lstr_copy 2-3
    64                              <3>     ;     %ifctx local_ctx
    65                              <3>     ;         %if %0 == 3
    66                              <3>     ;             ; 带长度的字符串复制
    67                              <3>     ;             mov ecx, %3
    68                              <3>     ;             mov edi, ebp
    69                              <3>     ;             add edi, %$var_%1
    70                              <3>     ;             lea esi, [%2]
    71                              <3>     ;             rep movsb
    72                              <3>     ;         %else
    73                              <3>     ;             ; 以null结尾的字符串复制
    74                              <3>     ;             mov edi, ebp
    75                              <3>     ;             add edi, %$var_%1
    76                              <3>     ;             lea esi, [%2]
    77                              <3>     ;             %%copy_loop:
    78                              <3>     ;             lodsb
    79                              <3>     ;             stosb
    80                              <3>     ;             test al, al
    81                              <3>     ;             jnz %%copy_loop
    82                              <3>     ;         %endif
    83                              <3>     ;     %else
    84                              <3>     ;         %error "STR_COPY used outside local_ctx block"
    85                              <3>     ;     %endif
    86                              <3>     ; %endmacro
    87                              <3> 
    88                              <3>     ; %macro lstruct 1
    89                              <3>     ;     %assign %$local_offset %$local_offset+8   ; 累加偏移
    90                              <3>     ;     %define %$struct_%1 %$local_offset               ; 定义变量偏移
    91                              <3>     ;     %define %1  rbp - %$struct_%1
    92                              <3>     ;     %define %1.size 5
    93                              <3>     ;     sub rsp,%1.size
    94                              <3>     ; %endmacro
    95                              <3> 
    96                              <3>     ; ; 分配栈空间并保存寄存器
    97                              <3>     ; %macro lalloc 0
    98                              <3>     ;     %if %$local_offset > 0
    99                              <3>     ;         ; 16字节对齐
   100                              <3>     ;         %assign pad (16 - (%$local_offset % 16))
   101                              <3>     ;         %if pad < 16
   102                              <3>     ;             %assign %$local_offset %$local_offset + pad
   103                              <3>     ;         %endif
   104                              <3>     ;         sub rsp, %$local_offset
   105                              <3>     ;     %endif
   106                              <3>     ; %endmacro
   107                              <3> 
   108                              <3> 
   109                              <3>     ; ; 获取局部变量的访问表达式
   110                              <3>     ; %macro locvar 1-*
   111                              <3>     ;     ; [rbp - %$var_%1 ]
   112                              <3> 
   113                              <3>     ;     %ifctx local_ctx
   114                              <3>     ;         ; %ifidn %2, ""
   115                              <3>     ;             qword [rbp - %$var_%1]
   116                              <3>     ;         ; %else
   117                              <3>     ;         ;     [rbp - %$var_%1 - %2]
   118                              <3>     ;         ; %endif
   119                              <3>     ;     %endif
   120                              <3>     ; %endmacro
   121                              <3> 
   122                              <3>     ;     %macro locvar 1-2
   123                              <3>     ;     ; [rbp - %$var_%1 ]
   124                              <3> 
   125                              <3>     ;     %ifctx local_ctx
   126                              <3>     ;         %ifidn %2, ""
   127                              <3>     ;             [rbp - %$var_%1]
   128                              <3>     ;         %else
   129                              <3>     ;             [rbp - %$var_%1 - %2]
   130                              <3>     ;         %endif
   131                              <3>     ;     %endif
   132                              <3>     ; %endmacro
   133                              <3> 
   134                              <3> 
   135                              <3> %endif
   136                              <3> 
   137                              <3> ;-----------Calling Conventions Standard------------;
   138                              <3> %define USE_CC_STANDARD
   139                              <3> %ifdef USE_CC_STANDARD
   140                              <3> 
   141                              <3>     ;caller maintain the stack balance 
   142                              <3>         ; debug_times: db 0
   143                              <3>         ; cmp byte [rel debug_times],3
   144                              <3>         ; je debug_stop
   145                              <3>         ; add byte [rel debug_times],1
   146                              <3>     ; -------------------------------
   147                              <3>     ; 栈帧结构定义
   148                              <3>     ; -------------------------------
   149                              <3>     ; 调用后的栈布局:
   150                              <3>     ; [rsp+0x00] 返回地址 (8字节)
   151                              <3>     ; [rsp+0x08] 旧RBP     (8字节) <- rbp指向这里
   152                              <3>     ; [rsp+0x10] 参数1     (8字节)
   153                              <3>     ; [rsp+0x18] 参数2
   154                              <3>     ; ...
   155                              <3>     ; [rsp+X]    局部变量区
   156                              <3>     ; -------------------------------
   157                              <3> 
   158                              <3>     %define PARAM_OFFSET   16      ; 第一个参数的偏移量(返回地址8 + 旧RBP8)
   159                              <3>     %macro function 1-* ; 1=函数名, 2=返回参数数量, 3=参数列表
   160                              <3>         %assign param_count %0 - 2 ; 参数数量
   161                              <3>         
   162                              <3>         %if param_count < 0
   163                              <3>             %assign param_count 0 ; 如果没有参数，设置为 0
   164                              <3>         %endif
   165                              <3>         %if param_count < 1
   166                              <3>             %assign ret_param_count 0 ; 返回参数数量
   167                              <3>         %else
   168                              <3>             %assign ret_param_count %2 ; 返回参数数量
   169                              <3>         %endif
   170                              <3> 
   171                              <3>         ; 准备调用
   172                              <3>         prepare_call param_count, ret_param_count
   173                              <3> 
   174                              <3>         ; 如果有参数，将参数压入栈
   175                              <3>         %if param_count > 0
   176                              <3>             %assign i 0
   177                              <3>             ; mov [rsp-8], rax ; 保存返回地址
   178                              <3>             %rep param_count
   179                              <3>                 %rotate 1
   180                              <3>                 ; mov rax, %2
   181                              <3>                 ; mov [rsp + 8*i],qword %2 ; 将参数压入栈
   182                              <3>                 push qword %2
   183                              <3>                 pop qword [rsp + 8*i]
   184                              <3>                 %assign i i+1
   185                              <3>             %endrep
   186                              <3>             %rotate 1
   187                              <3>             %rotate 1
   188                              <3>             ; mov rax,[rsp-8]; 保存返回地址
   189                              <3>         %endif
   190                              <3> 
   191                              <3>         ; 调用函数
   192                              <3>         call %1
   193                              <3> 
   194                              <3>         ; 清理栈空间
   195                              <3>         cleanup_call param_count, ret_param_count
   196                              <3> 
   197                              <3>     %endmacro
   198                              <3> 
   199                              <3>     %macro align_stack_16 0
   200                              <3>         test rsp, 0xF
   201                              <3>         jz %%skip_align
   202                              <3>         sub rsp,8
   203                              <3>         %%skip_align:
   204                              <3>     %endmacro
   205                              <3> 
   206                              <3>     ; %macro prologue 0;local var size(bytes)
   207                              <3>     ;     push rbp
   208                              <3>     ;     mov rbp, rsp
   209                              <3> 
   210                              <3> 
   211                              <3>     ;     pushallq
   212                              <3>     ;     LOCAL_BEGIN
   213                              <3>         
   214                              <3> 
   215                              <3>     ;     ; 调试信息可以放在这里
   216                              <3>     ;     ; %ifdef DEBUG
   217                              <3>     ;     ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
   218                              <3>     ;     ; %endif
   219                              <3>     ; %endmacro
   220                              <3>     ; %macro epilogue 0
   221                              <3>     ;     %pop
   222                              <3>     ;     mov rax, rbp
   223                              <3>     ;     sub rax, 8*14
   224                              <3>     ;     mov rsp, rax
   225                              <3> 
   226                              <3>     ;     popallq
   227                              <3> 
   228                              <3>     ;     mov rsp, rbp
   229                              <3>     ;     pop rbp
   230                              <3>     ;     ret
   231                              <3>     ; %endmacro
   232                              <3> 
   233                              <3>     %macro prolog 1;local var size(bytes)
   234                              <3>         push rbp
   235                              <3>         mov rbp, rsp
   236                              <3> 
   237                              <3> 
   238                              <3>         mov [rbp-8],rax
   239                              <3>         mov rax, %1
   240                              <3>         add rax, 15
   241                              <3>         and rax, ~15
   242                              <3>         sub rsp, rax
   243                              <3>         mov rax,[rbp-8]
   244                              <3> 
   245                              <3>         pushallq
   246                              <3>         
   247                              <3>         ; 调试信息可以放在这里
   248                              <3>         ; %ifdef DEBUG
   249                              <3>         ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
   250                              <3>         ; %endif
   251                              <3>     %endmacro
   252                              <3> 
   253                              <3>     %macro epilog 0
   254                              <3>         popallq
   255                              <3> 
   256                              <3>         mov rsp, rbp
   257                              <3>         pop rbp
   258                              <3>         ret
   259                              <3>     %endmacro
   260                              <3> 
   261                              <3>     %macro get_param 2;1=register, 2=param index(from 1)
   262                              <3>         mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   263                              <3>     %endmacro
   264                              <3> 
   265                              <3>     %macro set_ret_param 2;1=register, 2=param index(from 1)
   266                              <3>         mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   267                              <3>     %endmacro
   268                              <3> 
   269                              <3>     %macro prepare_call 2;1=param count, 2=return param count
   270                              <3>         %assign total_space ((%1 + %2) * 8)
   271                              <3>         
   272                              <3>         %if (total_space % 16) != 0
   273                              <3>             %assign total_space total_space + 8  ; 添加填充
   274                              <3>         %endif
   275                              <3>         
   276                              <3>         sub rsp, total_space
   277                              <3>     %endmacro
   278                              <3> 
   279                              <3>     %macro cleanup_call 2;1=param count, 2=return param count
   280                              <3>         %assign total_space ((%1 + %2) * 8)
   281                              <3>         %if (total_space % 16) != 0
   282                              <3>             %assign total_space total_space + 8
   283                              <3>         %endif
   284                              <3>         add rsp, total_space
   285                              <3>     %endmacro
   286                              <3> 
   287                              <3>     %macro pushallq 0
   288                              <3>         push rax
   289                              <3>         push rbx
   290                              <3>         push rcx
   291                              <3>         push rdx
   292                              <3>         push rsi
   293                              <3>         push rdi
   294                              <3>         push r8
   295                              <3>         push r9
   296                              <3>         push r10
   297                              <3>         push r11
   298                              <3>         push r12
   299                              <3>         push r13
   300                              <3>         push r14
   301                              <3>         push r15
   302                              <3>     %endmacro
   303                              <3> 
   304                              <3>     %macro popallq 0
   305                              <3>         pop r15
   306                              <3>         pop r14
   307                              <3>         pop r13
   308                              <3>         pop r12
   309                              <3>         pop r11
   310                              <3>         pop r10
   311                              <3>         pop r9
   312                              <3>         pop r8
   313                              <3>         pop rdi
   314                              <3>         pop rsi
   315                              <3>         pop rdx
   316                              <3>         pop rcx
   317                              <3>         pop rbx
   318                              <3>         pop rax
   319                              <3>     %endmacro
   320                              <3> 
   321                              <3>     %endif
   322                              <3> ;---------------------ABI Standard------------------;
   323                              <3> %define USE_ABI_STANDARD
   324                              <3> %ifdef USE_ABI_STANDARD
   325                              <3> 
   326                              <3> 
   327                              <3>     %define ABI_File_None   0       ; 无文件类型
   328                              <3>     %define ABI_File_REL    1       ; 可重定位文件
   329                              <3>     %define ABI_File_EXEC   2       ; 可执行文件
   330                              <3>     %define ABI_File_DYN    3       ; 共享目标文件
   331                              <3>     %define ABI_File_CORE   4       ; 核心文件
   332                              <3> 
   333                              <3>     %define Section_Type_NULL    0      ; 未使用
   334                              <3>     %define Section_Type_LOAD    1      ; 可加载段
   335                              <3>     %define Section_Type_DYNAMIC 2      ; 动态链接信息
   336                              <3>     %define Section_Type_INTERP  3      ; 解释器路径
   337                              <3>     %define Section_Type_NOTE    4      ; 辅助信息
   338                              <3>     %define Section_Type_SHLIB   5      ; 保留
   339                              <3> 
   340                              <3>     %macro ABI_HEADER 4 ;1=File Type, 2=Entry Point Address, 3=Section Header Offset, 4=Section Header Count
   341                              <3>         db 0xA5, 'A', 'B', 'I'     ; ABI Magic Number
   342                              <3>         db 1                       ; Encode Type
   343                              <3>         db 1                       ; ABI Version
   344                              <3> 
   345                              <3>         dw %1                      ; ABI File Type
   346                              <3>         dq %2                      ; Entry Point Address
   347                              <3>         dw 32                      ; ABI Headers Size
   348                              <3> 
   349                              <3>         dq %3                      ; Section Header Offset
   350                              <3>         dw 32                      ; Section Header Size
   351                              <3>         dw %4                      ; Section Header Count
   352                              <3>         dw 0                       ; Symble Table Entry Size
   353                              <3>     %endmacro
   354                              <3>     STRUC struct_ABI_HEADER
   355                              <3>         .magic:         resb 4    ; ABI Magic Number (4 bytes)
   356                              <3>         .encode_type:   resb 1    ; Encode Type (1 byte)
   357                              <3>         .abi_version:   resb 1    ; ABI Version (1 byte)
   358                              <3>         .file_type:     resw 1    ; ABI File Type (2 bytes)
   359                              <3>         .entry_point:   resq 1    ; Entry Point Address (8 bytes)
   360                              <3>         .header_size:   resw 1    ; ABI Headers Size (2 bytes)
   361                              <3>         .section_offset: resq 1   ; Section Header Offset (8 bytes)
   362                              <3>         .section_size:  resw 1    ; Section Header Size (2 bytes)
   363                              <3>         .section_count: resw 1    ; Section Header Count (2 bytes)
   364                              <3>         .sym_table_size: resw 1   ; Symbol Table Entry Size (2 bytes)
   365                              <3>     ENDSTRUC
   366                              <3> 
   367                              <3>     %macro SECTION_HEADER 4 ;1=Section Type, 2=Virtual Address, 3=Section Offset, 4=Section Size
   368                              <3>         dq %1                  ; Section Type
   369                              <3>         dq %2                  ; Virtual Address
   370                              <3>         dq %3                  ; Section Offset
   371                              <3>         dq %4                  ; Section Size
   372                              <3>     %endmacro
   373                              <3>     STRUC struct_SECTION_HEADER
   374                              <3>         .type:      resq 1    ; Section Type (8 bytes)
   375                              <3>         .vaddr:     resq 1    ; Virtual Address (8 bytes)
   376                              <3>         .offset:    resq 1    ; Section Offset (8 bytes)
   377                              <3>         .size:      resq 1    ; Section Size (8 bytes)
   378                              <3>     ENDSTRUC
   379                              <3>     %endif
   380                              <3> 
   381                              <3> %endif
     6                              <2> 
     7                              <2> [BITS 64]
     8                              <2> ; GDTPointerUpperAddr equ 0xFFFF800000104000
     9                              <2> ; IDTPointerUpperAddr equ 0xFFFF80000010400a
    10                              <2> ; TSSPointerUpperAddr equ 0xFFFF800000104004
    11                              <2> 
    12 000013C8 64656661756C742069- <2> interrupt_default_message: db 'default interrupt:%x\n', 0
    12 000013D1 6E746572727570743A- <2>
    12 000013DA 25785C6E00          <2>
    13 000013DF 64697669646520696E- <2> interrupt_div_message: db 'divide interrupt:%x\n', 0
    13 000013E8 746572727570743A25- <2>
    13 000013F1 785C6E00            <2>
    14 000013F5 6B6579626F61726420- <2> interrupt_keyboard_message: db 'keyboard interrupt:%x\n', 0
    14 000013FE 696E74657272757074- <2>
    14 00001407 3A25785C6E00        <2>
    15                              <2> 
    16 0000140D 30303A30303A303000  <2> global_rtc_time_str: db "00:00:00", 0
    17                              <2> 
    18                              <2> 
    19 00001416 0000000000000000    <2> interrupt_error_code: dq 0
    20                              <2> 
    21                              <2> ; ; Descriptor Type
    22                              <2> %define INTGATE 0x8E    ; 64位中断门(P=1, DPL=00, 类型=1110)
    23                              <2> %define TRAPGATE 0x8F   ; 64位陷阱门(P=1, DPL=00, 类型=1111)
    24                              <2> 
    25                              <2> 
    26                              <2> ; 8259A PIC ports and commands
    27                              <2> %define PIC1_CMD        0x20    ; Master PIC command port
    28                              <2> %define PIC1_DATA       0x21    ; Master PIC data port
    29                              <2> %define PIC2_CMD        0xA0    ; Slave PIC command port
    30                              <2> %define PIC2_DATA       0xA1    ; Slave PIC data port
    31                              <2> 
    32                              <2> ; PIC initialization commands
    33                              <2> %define ICW1_INIT       0x11    ; Initialize PIC
    34                              <2> %define ICW4_8086       0x01    ; 8086/88 mode
    35                              <2> 
    36                              <2> ; Interrupt vector offset
    37                              <2> %define MASTER_OFFSET   0x20    ; IRQ 0-7 mapped to interrupts 0x20-0x27
    38                              <2> %define SLAVE_OFFSET    0x28    ; IRQ 8-15 mapped to interrupts 0x28-0x2F
    39                              <2> 
    40                              <2> 
    41                              <2> %define KEYBOARD_PORT 0x60
    42                              <2> 
    43                              <2> %define RTC_ADDR      0x70    ; RTC 地址端口
    44                              <2> %define RTC_DATA      0x71    ; RTC 数据端口
    45                              <2> 
    46                              <2> 
    47 0000141E 001B313233343536    <2> key_scan_code_map: db 0x00, 0x1B, '1', '2', '3', '4', '5', '6'  ; 0x00-0x07
    48 00001426 373839302D3D0809    <2>         db '7', '8', '9', '0', '-', '=', 0x08, 0x09   ; 0x08-0x0F
    49 0000142E 7177657274797569    <2>         db 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i'    ; 0x10-0x17
    50 00001436 6F705B5D0A006173    <2>         db 'o', 'p', '[', ']', 0x0A, 0x00, 'a', 's'   ; 0x18-0x1F
    51 0000143E 646667686A6B6C3B    <2>         db 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';'    ; 0x20-0x27
    52 00001446 2760005C7A786376    <2>         db "'", '`', 0x00, '\', 'z', 'x', 'c', 'v'    ; 0x28-0x2F
    53 0000144E 626E6D2C2E2F002A    <2>         db 'b', 'n', 'm', ',', '.', '/', 0x00, '*'    ; 0x30-0x37
    54 00001456 0020000000000000    <2>         db 0x00, ' ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  ; 0x38-0x3F
    55                              <2> keymap_end:;end of key map
    56                              <2> 
    57                              <2> ; Define structure for interrupt stack frame
    58                              <2> struc int_frame
    59 00000000 ????????????????    <2>     .r15:       resq 1
    60 00000008 ????????????????    <2>     .r14:       resq 1
    61 00000010 ????????????????    <2>     .r13:       resq 1
    62 00000018 ????????????????    <2>     .r12:       resq 1
    63 00000020 ????????????????    <2>     .r11:       resq 1
    64 00000028 ????????????????    <2>     .r10:       resq 1
    65 00000030 ????????????????    <2>     .r9:        resq 1
    66 00000038 ????????????????    <2>     .r8:        resq 1
    67 00000040 ????????????????    <2>     .rdi:       resq 1
    68 00000048 ????????????????    <2>     .rsi:       resq 1
    69 00000050 ????????????????    <2>     .rbp:       resq 1
    70 00000058 ????????????????    <2>     .rbx:       resq 1
    71 00000060 ????????????????    <2>     .rdx:       resq 1
    72 00000068 ????????????????    <2>     .rcx:       resq 1
    73 00000070 ????????????????    <2>     .rax:       resq 1
    74                              <2>     ; Hardware pushes these automatically
    75 00000078 ????????????????    <2>     .error:     resq 1  ; Error code (some interrupts only)
    76 00000080 ????????????????    <2>     .rip:       resq 1
    77 00000088 ????????????????    <2>     .cs:        resq 1
    78 00000090 ????????????????    <2>     .rflags:    resq 1
    79 00000098 ????????????????    <2>     .rsp:       resq 1
    80 000000A0 ????????????????    <2>     .ss:        resq 1
    81                              <2> endstruc
    82                              <2> 
    83                              <2> %macro SAVE_CONTEXT 0
    84                              <2>     push rax
    85                              <2>     push rcx
    86                              <2>     push rdx
    87                              <2>     push rbx
    88                              <2>     push rbp
    89                              <2>     push rsi
    90                              <2>     push rdi
    91                              <2>     push r8
    92                              <2>     push r9
    93                              <2>     push r10
    94                              <2>     push r11
    95                              <2>     push r12
    96                              <2>     push r13
    97                              <2>     push r14
    98                              <2>     push r15
    99                              <2> %endmacro
   100                              <2> 
   101                              <2> %macro RESTORE_CONTEXT 0
   102                              <2>     pop r15
   103                              <2>     pop r14
   104                              <2>     pop r13
   105                              <2>     pop r12
   106                              <2>     pop r11
   107                              <2>     pop r10
   108                              <2>     pop r9
   109                              <2>     pop r8
   110                              <2>     pop rdi
   111                              <2>     pop rsi
   112                              <2>     pop rbp
   113                              <2>     pop rbx
   114                              <2>     pop rdx
   115                              <2>     pop rcx
   116                              <2>     pop rax
   117                              <2> %endmacro
   118                              <2> 
   119                              <2> ; ; 64位IDT条目结构(16字节)
   120                              <2> struc idt_info
   121 00000000 ????                <2>     .offset_low:   resw 1  ; 偏移低16位(0..15)
   122 00000002 ????                <2>     .selector:     resw 1  ; 代码段选择子
   123                              <2> 
   124 00000004 ??                  <2>     .ist:          resb 1  ; IST索引(0表示不使用)
   125 00000005 ??                  <2>     .type_attr:    resb 1  ; 类型属性
   126                              <2> 
   127 00000006 ????                <2>     .offset_mid:   resw 1  ; 偏移中16位(16..31)
   128                              <2> 
   129 00000008 ????????            <2>     .offset_high:  resd 1  ; 偏移高32位(32..63)
   130                              <2> 
   131 0000000C ????????            <2>     .reserved:     resd 1  ; 保留
   132                              <2> endstruc
   133                              <2> init_interrupt:;init expection idt
   134                              <2>     prolog 0;
   234 0000145E 55                  <3>  push rbp
   235 0000145F 4889E5              <3>  mov rbp, rsp
   236                              <3> 
   237                              <3> 
   238 00001462 488945F8            <3>  mov [rbp-8],rax
   239 00001466 B800000000          <3>  mov rax, %1
   240 0000146B 4883C00F            <3>  add rax, 15
   241 0000146F 4883E0F0            <3>  and rax, ~15
   242 00001473 4829C4              <3>  sub rsp, rax
   243 00001476 488B45F8            <3>  mov rax,[rbp-8]
   244                              <3> 
   245                              <3>  pushallq
   288 0000147A 50                  <4>  push rax
   289 0000147B 53                  <4>  push rbx
   290 0000147C 51                  <4>  push rcx
   291 0000147D 52                  <4>  push rdx
   292 0000147E 56                  <4>  push rsi
   293 0000147F 57                  <4>  push rdi
   294 00001480 4150                <4>  push r8
   295 00001482 4151                <4>  push r9
   296 00001484 4152                <4>  push r10
   297 00001486 4153                <4>  push r11
   298 00001488 4154                <4>  push r12
   299 0000148A 4155                <4>  push r13
   300 0000148C 4156                <4>  push r14
   301 0000148E 4157                <4>  push r15
   246                              <3> 
   247                              <3> 
   248                              <3> 
   249                              <3> 
   250                              <3> 
   135 00001490 FA                  <2>     cli
   136                              <2> 
   137                              <2> 
   138 00001491 488D35F1010000      <2>     lea rsi,[rel default_interrupt_handler]
   139                              <2>     function setup_default_interrupt_idt,1,rsi
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00001498 4883EC10            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 0000149C 56                  <4>  push qword %2
   183 0000149D 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 000014A0 E888000000          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 000014A5 4883C410            <4>  add rsp, total_space
   196                              <3> 
   140                              <2> 
   141 000014A9 488D350F020000      <2>     lea rsi,[rel irq1_keyboard_interrupt_handler]
   142                              <2>     function register_interrupt_idt,1,0x21,1,rsi
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 000014B0 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 000014B4 6A21                <4>  push qword %2
   183 000014B6 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 000014B9 6A01                <4>  push qword %2
   183 000014BB 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 000014BF 56                  <4>  push qword %2
   183 000014C0 8F442410            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 000014C4 E816010000          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 000014C9 4883C420            <4>  add rsp, total_space
   196                              <3> 
   143                              <2> 
   144                              <2> 
   145 000014CD 488D3599030000      <2>     lea rsi,[rel irq8_rtc_interrupt_handler]
   146                              <2>     function register_interrupt_idt,1,0x28,1,rsi
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 000014D4 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 000014D8 6A28                <4>  push qword %2
   183 000014DA 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 000014DD 6A01                <4>  push qword %2
   183 000014DF 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 000014E3 56                  <4>  push qword %2
   183 000014E4 8F442410            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 000014E8 E8F2000000          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 000014ED 4883C420            <4>  add rsp, total_space
   196                              <3> 
   147                              <2> 
   148                              <2>     function init_8259a
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 000014F1 4883EC00            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 000014F5 E828020000          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 000014FA 4883C400            <4>  add rsp, total_space
   196                              <3> 
   149                              <2>     function init_rtc_timer
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 000014FE 4883EC00            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00001502 E8FD020000          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00001507 4883C400            <4>  add rsp, total_space
   196                              <3> 
   150                              <2>     ;  function enable_irq,1,1
   151                              <2>     ;  function enable_irq,1,1
   152                              <2>     ;  function enable_irq,1,1
   153                              <2>     ;  function enable_irq,1,1
   154                              <2> 
   155 0000150B FB                  <2>     sti
   156 0000150C B00C                <2>         mov al, 0x0c
   157 0000150E E670                <2>         out 0x70, al
   158 00001510 E471                <2>         in al, 0x71                              ;读RTC寄存器C，复位未决的中断状态
   159                              <2> 
   160                              <2>     epilog
   254                              <3>  popallq
   305 00001512 415F                <4>  pop r15
   306 00001514 415E                <4>  pop r14
   307 00001516 415D                <4>  pop r13
   308 00001518 415C                <4>  pop r12
   309 0000151A 415B                <4>  pop r11
   310 0000151C 415A                <4>  pop r10
   311 0000151E 4159                <4>  pop r9
   312 00001520 4158                <4>  pop r8
   313 00001522 5F                  <4>  pop rdi
   314 00001523 5E                  <4>  pop rsi
   315 00001524 5A                  <4>  pop rdx
   316 00001525 59                  <4>  pop rcx
   317 00001526 5B                  <4>  pop rbx
   318 00001527 58                  <4>  pop rax
   255                              <3> 
   256 00001528 4889EC              <3>  mov rsp, rbp
   257 0000152B 5D                  <3>  pop rbp
   258 0000152C C3                  <3>  ret
   161                              <2>     
   162                              <2> setup_default_interrupt_idt:;setup expection idt 0~31
   163                              <2>     prolog 0;
   234 0000152D 55                  <3>  push rbp
   235 0000152E 4889E5              <3>  mov rbp, rsp
   236                              <3> 
   237                              <3> 
   238 00001531 488945F8            <3>  mov [rbp-8],rax
   239 00001535 B800000000          <3>  mov rax, %1
   240 0000153A 4883C00F            <3>  add rax, 15
   241 0000153E 4883E0F0            <3>  and rax, ~15
   242 00001542 4829C4              <3>  sub rsp, rax
   243 00001545 488B45F8            <3>  mov rax,[rbp-8]
   244                              <3> 
   245                              <3>  pushallq
   288 00001549 50                  <4>  push rax
   289 0000154A 53                  <4>  push rbx
   290 0000154B 51                  <4>  push rcx
   291 0000154C 52                  <4>  push rdx
   292 0000154D 56                  <4>  push rsi
   293 0000154E 57                  <4>  push rdi
   294 0000154F 4150                <4>  push r8
   295 00001551 4151                <4>  push r9
   296 00001553 4152                <4>  push r10
   297 00001555 4153                <4>  push r11
   298 00001557 4154                <4>  push r12
   299 00001559 4155                <4>  push r13
   300 0000155B 4156                <4>  push r14
   301 0000155D 4157                <4>  push r15
   246                              <3> 
   247                              <3> 
   248                              <3> 
   249                              <3> 
   250                              <3> 
   164                              <2>     get_param rsi, 1
   262 0000155F 488B7510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   165 00001563 4989F0              <2>     mov r8,rsi
   166 00001566 49C1E820            <2>     shr r8,32
   167 0000156A 4989F1              <2>     mov r9,rsi
   168 0000156D 49C1E910            <2>     shr r9,16
   169 00001571 4981E1FFFF0000      <2>     and r9,0xFFFF
   170                              <2> 
   171 00001578 B920000000          <2>     mov rcx,32
   172 0000157D 48BB0A4010000080FF- <2>     mov rbx,IDTPointerUpperAddr
   172 00001586 FF                  <2>
   173 00001587 488B4302            <2>     mov rax,[rbx + 2]
   174                              <2>     
   175 0000158B BA20000000          <2>     mov rdx,32
   176 00001590 48C1E204            <2>     shl rdx, 4
   177 00001594 4801D0              <2>     add rax, rdx
   178                              <2> 
   179                              <2>     .expection_idt:
   180 00001597 668930              <2>         mov word [rax + idt_info.offset_low], si
   181 0000159A 66C740020800        <2>         mov word [rax + idt_info.selector], KernelCodeSelector
   182                              <2> 
   183 000015A0 C6400400            <2>         mov byte [rax + idt_info.ist], 0x00
   184 000015A4 C640058E            <2>         mov byte [rax + idt_info.type_attr], INTGATE
   185                              <2> 
   186 000015A8 6644894806          <2>         mov word [rax + idt_info.offset_mid], r9w
   187                              <2> 
   188 000015AD 4C894008            <2>         mov qword [rax + idt_info.offset_high], r8
   189                              <2> 
   190 000015B1 4883C010            <2>         add rax, 16
   191 000015B5 48FFC1              <2>         inc rcx
   192 000015B8 4881F900010000      <2>         cmp rcx, 256
   193 000015BF 7ED6                <2>         jle .expection_idt
   194                              <2> 
   195 000015C1 0F011B              <2>     lidt	[rbx]
   196                              <2>     epilog
   254                              <3>  popallq
   305 000015C4 415F                <4>  pop r15
   306 000015C6 415E                <4>  pop r14
   307 000015C8 415D                <4>  pop r13
   308 000015CA 415C                <4>  pop r12
   309 000015CC 415B                <4>  pop r11
   310 000015CE 415A                <4>  pop r10
   311 000015D0 4159                <4>  pop r9
   312 000015D2 4158                <4>  pop r8
   313 000015D4 5F                  <4>  pop rdi
   314 000015D5 5E                  <4>  pop rsi
   315 000015D6 5A                  <4>  pop rdx
   316 000015D7 59                  <4>  pop rcx
   317 000015D8 5B                  <4>  pop rbx
   318 000015D9 58                  <4>  pop rax
   255                              <3> 
   256 000015DA 4889EC              <3>  mov rsp, rbp
   257 000015DD 5D                  <3>  pop rbp
   258 000015DE C3                  <3>  ret
   197                              <2> 
   198                              <2> register_interrupt_idt:;register interrupt_idt:;vector_num,rsp,handler
   199                              <2>     prolog 0;
   234 000015DF 55                  <3>  push rbp
   235 000015E0 4889E5              <3>  mov rbp, rsp
   236                              <3> 
   237                              <3> 
   238 000015E3 488945F8            <3>  mov [rbp-8],rax
   239 000015E7 B800000000          <3>  mov rax, %1
   240 000015EC 4883C00F            <3>  add rax, 15
   241 000015F0 4883E0F0            <3>  and rax, ~15
   242 000015F4 4829C4              <3>  sub rsp, rax
   243 000015F7 488B45F8            <3>  mov rax,[rbp-8]
   244                              <3> 
   245                              <3>  pushallq
   288 000015FB 50                  <4>  push rax
   289 000015FC 53                  <4>  push rbx
   290 000015FD 51                  <4>  push rcx
   291 000015FE 52                  <4>  push rdx
   292 000015FF 56                  <4>  push rsi
   293 00001600 57                  <4>  push rdi
   294 00001601 4150                <4>  push r8
   295 00001603 4151                <4>  push r9
   296 00001605 4152                <4>  push r10
   297 00001607 4153                <4>  push r11
   298 00001609 4154                <4>  push r12
   299 0000160B 4155                <4>  push r13
   300 0000160D 4156                <4>  push r14
   301 0000160F 4157                <4>  push r15
   246                              <3> 
   247                              <3> 
   248                              <3> 
   249                              <3> 
   250                              <3> 
   200                              <2>     get_param rsi, 1
   262 00001611 488B7510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   201                              <2>     get_param r15, 2
   262 00001615 4C8B7D18            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   202                              <2>     get_param rdi, 3
   262 00001619 488B7D20            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   203 0000161D 48BB0A4010000080FF- <2>     mov rbx,IDTPointerUpperAddr
   203 00001626 FF                  <2>
   204 00001627 488B4302            <2>     mov rax,[rbx + 2]
   205                              <2> 
   206 0000162B 4989F0              <2>     mov r8,rsi
   207 0000162E 49C1E004            <2>     shl r8, 4
   208 00001632 4C01C0              <2>     add rax, r8
   209                              <2> 
   210                              <2>     ; jmp $
   211                              <2> 
   212 00001635 4989F8              <2>     mov r8,rdi
   213 00001638 49C1E820            <2>     shr r8,32
   214                              <2> 
   215 0000163C 4989F9              <2>     mov r9,rdi
   216 0000163F 49C1E910            <2>     shr r9,16
   217 00001643 4981E1FFFF0000      <2>     and r9,0xFFFF
   218                              <2> 
   219 0000164A B900000000          <2>     mov rcx,0
   220 0000164F 4C89F9              <2>     mov rcx, r15
   221                              <2>     ; jmp $
   222 00001652 668938              <2>     mov word [rax + idt_info.offset_low], di
   223                              <2>         ; mov ax,di
   224                              <2>     ; jmp $
   225 00001655 66C740020800        <2>     mov word [rax + idt_info.selector], KernelCodeSelector
   226 0000165B 884804              <2>     mov byte [rax + idt_info.ist], cl
   227 0000165E C640058E            <2>     mov byte [rax + idt_info.type_attr], INTGATE
   228 00001662 6644894806          <2>     mov word [rax + idt_info.offset_mid], r9w
   229 00001667 4C894008            <2>     mov qword [rax + idt_info.offset_high], r8
   230                              <2> 
   231 0000166B 0F011B              <2>     lidt	[rbx]
   232                              <2>     epilog
   254                              <3>  popallq
   305 0000166E 415F                <4>  pop r15
   306 00001670 415E                <4>  pop r14
   307 00001672 415D                <4>  pop r13
   308 00001674 415C                <4>  pop r12
   309 00001676 415B                <4>  pop r11
   310 00001678 415A                <4>  pop r10
   311 0000167A 4159                <4>  pop r9
   312 0000167C 4158                <4>  pop r8
   313 0000167E 5F                  <4>  pop rdi
   314 0000167F 5E                  <4>  pop rsi
   315 00001680 5A                  <4>  pop rdx
   316 00001681 59                  <4>  pop rcx
   317 00001682 5B                  <4>  pop rbx
   318 00001683 58                  <4>  pop rax
   255                              <3> 
   256 00001684 4889EC              <3>  mov rsp, rbp
   257 00001687 5D                  <3>  pop rbp
   258 00001688 C3                  <3>  ret
   233                              <2> 
   234                              <2> default_interrupt_handler:;
   235                              <2> 
   236                              <2>     SAVE_CONTEXT
    84 00001689 50                  <3>  push rax
    85 0000168A 51                  <3>  push rcx
    86 0000168B 52                  <3>  push rdx
    87 0000168C 53                  <3>  push rbx
    88 0000168D 55                  <3>  push rbp
    89 0000168E 56                  <3>  push rsi
    90 0000168F 57                  <3>  push rdi
    91 00001690 4150                <3>  push r8
    92 00001692 4151                <3>  push r9
    93 00001694 4152                <3>  push r10
    94 00001696 4153                <3>  push r11
    95 00001698 4154                <3>  push r12
    96 0000169A 4155                <3>  push r13
    97 0000169C 4156                <3>  push r14
    98 0000169E 4157                <3>  push r15
   237 000016A0 B020                <2>          mov al, 0x20                             ;中断结束命令EOI
   238 000016A2 E6A0                <2>          out 0xa0, al                             ;向从片发送
   239 000016A4 E620                <2>          out 0x20, al                             ;向主片发送
   240                              <2> 
   241                              <2>     ; lea rsi, [rel interrupt_default_message]
   242                              <2>     ; lea rdx, [rel interrupt_error_code]
   243                              <2>     ; function printk,1,rsi,rdx
   244                              <2> 
   245                              <2>     RESTORE_CONTEXT
   102 000016A6 415F                <3>  pop r15
   103 000016A8 415E                <3>  pop r14
   104 000016AA 415D                <3>  pop r13
   105 000016AC 415C                <3>  pop r12
   106 000016AE 415B                <3>  pop r11
   107 000016B0 415A                <3>  pop r10
   108 000016B2 4159                <3>  pop r9
   109 000016B4 4158                <3>  pop r8
   110 000016B6 5F                  <3>  pop rdi
   111 000016B7 5E                  <3>  pop rsi
   112 000016B8 5D                  <3>  pop rbp
   113 000016B9 5B                  <3>  pop rbx
   114 000016BA 5A                  <3>  pop rdx
   115 000016BB 59                  <3>  pop rcx
   116 000016BC 58                  <3>  pop rax
   246 000016BD 48CF                <2>     iretq
   247                              <2> 
   248                              <2> irq1_keyboard_interrupt_handler:;0x21
   249                              <2>     SAVE_CONTEXT
    84 000016BF 50                  <3>  push rax
    85 000016C0 51                  <3>  push rcx
    86 000016C1 52                  <3>  push rdx
    87 000016C2 53                  <3>  push rbx
    88 000016C3 55                  <3>  push rbp
    89 000016C4 56                  <3>  push rsi
    90 000016C5 57                  <3>  push rdi
    91 000016C6 4150                <3>  push r8
    92 000016C8 4151                <3>  push r9
    93 000016CA 4152                <3>  push r10
    94 000016CC 4153                <3>  push r11
    95 000016CE 4154                <3>  push r12
    96 000016D0 4155                <3>  push r13
    97 000016D2 4156                <3>  push r14
    98 000016D4 4157                <3>  push r15
   250                              <2>     
   251 000016D6 4889E0              <2>     mov rax, rsp        ; Pass stack frame pointer as parameter
   252 000016D9 4889C7              <2>     mov rdi, rax
   253                              <2>     
   254 000016DC 4831C0              <2>     xor rax,rax
   255 000016DF E460                <2>     in  al, KEYBOARD_PORT 
   256 000016E1 3C80                <2>     cmp al,0x80
   257 000016E3 7720                <2>     jnbe .ignore_break_code
   258 000016E5 4831DB              <2>         xor rbx,rbx
   259 000016E8 488D152FFDFFFF      <2>         lea rdx , [rel key_scan_code_map ]
   260 000016EF 4801C2              <2>         add rdx, rax
   261                              <2>         ; mov [rel interrupt_error_code],rbx
   262                              <2>         ; jmp $
   263 000016F2 8A02                <2>         mov al,byte [rdx]
   264                              <2>         function print_char,1,rax
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 000016F4 4883EC10            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 000016F8 50                  <4>  push qword %2
   183 000016F9 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 000016FC E8E9F2FFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00001701 4883C410            <4>  add rsp, total_space
   196                              <3> 
   265                              <2>         ; lea rsi, [rel interrupt_keyboard_message]
   266                              <2>         ; lea rdx, [rel interrupt_error_code]
   267                              <2>         ; function printk,1,rsi,rdx
   268                              <2>     .ignore_break_code:
   269                              <2>     ; Send EOI to PIC
   270 00001705 B020                <2>     mov al, 0x20        ; EOI command
   271 00001707 E620                <2>     out PIC1_CMD, al    ; Send to master PIC
   272                              <2>     
   273                              <2>     RESTORE_CONTEXT
   102 00001709 415F                <3>  pop r15
   103 0000170B 415E                <3>  pop r14
   104 0000170D 415D                <3>  pop r13
   105 0000170F 415C                <3>  pop r12
   106 00001711 415B                <3>  pop r11
   107 00001713 415A                <3>  pop r10
   108 00001715 4159                <3>  pop r9
   109 00001717 4158                <3>  pop r8
   110 00001719 5F                  <3>  pop rdi
   111 0000171A 5E                  <3>  pop rsi
   112 0000171B 5D                  <3>  pop rbp
   113 0000171C 5B                  <3>  pop rbx
   114 0000171D 5A                  <3>  pop rdx
   115 0000171E 59                  <3>  pop rcx
   116 0000171F 58                  <3>  pop rax
   274 00001720 48CF                <2>     iretq
   275                              <2> 
   276                              <2> init_8259a:;init 8259a
   277                              <2>     prolog 0
   234 00001722 55                  <3>  push rbp
   235 00001723 4889E5              <3>  mov rbp, rsp
   236                              <3> 
   237                              <3> 
   238 00001726 488945F8            <3>  mov [rbp-8],rax
   239 0000172A B800000000          <3>  mov rax, %1
   240 0000172F 4883C00F            <3>  add rax, 15
   241 00001733 4883E0F0            <3>  and rax, ~15
   242 00001737 4829C4              <3>  sub rsp, rax
   243 0000173A 488B45F8            <3>  mov rax,[rbp-8]
   244                              <3> 
   245                              <3>  pushallq
   288 0000173E 50                  <4>  push rax
   289 0000173F 53                  <4>  push rbx
   290 00001740 51                  <4>  push rcx
   291 00001741 52                  <4>  push rdx
   292 00001742 56                  <4>  push rsi
   293 00001743 57                  <4>  push rdi
   294 00001744 4150                <4>  push r8
   295 00001746 4151                <4>  push r9
   296 00001748 4152                <4>  push r10
   297 0000174A 4153                <4>  push r11
   298 0000174C 4154                <4>  push r12
   299 0000174E 4155                <4>  push r13
   300 00001750 4156                <4>  push r14
   301 00001752 4157                <4>  push r15
   246                              <3> 
   247                              <3> 
   248                              <3> 
   249                              <3> 
   250                              <3> 
   278                              <2> 
   279                              <2>     ; ; ICW1: Start initialization sequence
   280                              <2>     ; mov al, ICW1_INIT
   281                              <2>     ; out PIC1_CMD, al    ; Initialize master PIC
   282                              <2>     ; out PIC2_CMD, al    ; Initialize slave PIC
   283                              <2>     
   284                              <2>     ; ; ICW2: Vector offset
   285                              <2>     ; mov al, MASTER_OFFSET
   286                              <2>     ; out PIC1_DATA, al   ; Master PIC vector offset
   287                              <2>     ; mov al, SLAVE_OFFSET
   288                              <2>     ; out PIC2_DATA, al   ; Slave PIC vector offset
   289                              <2>     
   290                              <2>     ; ; ICW3: Tell Master PIC that there is a slave PIC at IRQ2 (0000 0100)
   291                              <2>     ; mov al, 4
   292                              <2>     ; out PIC1_DATA, al
   293                              <2>     ; ; ICW3: Tell Slave PIC its cascade identity (0000 0010)
   294                              <2>     ; mov al, 2
   295                              <2>     ; out PIC2_DATA, al
   296                              <2>     
   297                              <2>     ; ; ICW4: Set 8086 mode
   298                              <2>     ; mov al, ICW4_8086
   299                              <2>     ; out PIC1_DATA, al
   300                              <2>     ; out PIC2_DATA, al
   301                              <2>     
   302                              <2>     ; ; OCW1: Mask all interrupts initially
   303                              <2>     ; ; mov al, 0x00
   304                              <2>     ; mov al,0xfd
   305                              <2>     ; out PIC1_DATA, al
   306                              <2>     ; mov al,0xff
   307                              <2>     ; out PIC2_DATA, al
   308                              <2> 
   309                              <2> 
   310                              <2>     ; ; 发送 ICW1 (初始化命令字 1)
   311                              <2>     ; mov al, 0x11         ; ICW1: 边沿触发, 级联, 需要 ICW4
   312                              <2>     ; out PIC1_CMD, al
   313                              <2>     ; out PIC2_CMD, al
   314                              <2> 
   315                              <2>     ; ; 发送 ICW2 (中断向量偏移)
   316                              <2>     ; mov al, 0x20         ; 主 PIC 中断向量从 0x20 开始
   317                              <2>     ; out PIC1_DATA, al
   318                              <2>     ; mov al, 0x28         ; 从 PIC 中断向量从 0x28 开始
   319                              <2>     ; out PIC2_DATA, al
   320                              <2> 
   321                              <2>     ; ; 发送 ICW3 (级联配置)
   322                              <2>     ; mov al, 0x04         ; 主 PIC 的 IRQ2 连接从 PIC
   323                              <2>     ; out PIC1_DATA, al
   324                              <2>     ; mov al, 0x02         ; 从 PIC 级联到主 PIC 的 IRQ2
   325                              <2>     ; out PIC2_DATA, al
   326                              <2> 
   327                              <2>     ; ; 发送 ICW4 (8086 模式)
   328                              <2>     ; mov al, 0x01         ; 8086 模式
   329                              <2>     ; out PIC1_DATA, al
   330                              <2>     ; out PIC2_DATA, al
   331                              <2> 
   332                              <2>     ; ; 启用 IRQ8 (RTC 中断)
   333                              <2>     ; in al, PIC2_DATA     ; 读取从 PIC 的 IMR
   334                              <2>     ; jmp $
   335                              <2>     ; and al, 0xFE         ; 清除 IRQ8 的屏蔽位 (bit 0)
   336                              <2>     ; out PIC2_DATA, al
   337                              <2> 
   338                              <2>     ; mov al,0xfd
   339                              <2>     ; out PIC1_DATA, al
   340                              <2>     ; mov al,0xfe
   341                              <2>     ; out PIC2_DATA, al
   342                              <2> 
   343 00001754 B011                <2>          mov al, 0x11
   344 00001756 E620                <2>          out 0x20, al                    	;ICW1：边沿触发/级联方式
   345 00001758 B020                <2>          mov al, 0x20
   346 0000175A E621                <2>          out 0x21, al  	                ;ICW2:起始中断向量（避开前31个异常的向量）
   347 0000175C B004                <2>          mov al, 0x04
   348 0000175E E621                <2>          out 0x21, al  	                ;ICW3:从片级联到IR2
   349 00001760 B001                <2>          mov al, 0x01
   350 00001762 E621                <2>          out 0x21, al                  	;ICW4:非总线缓冲，全嵌套，正常EOI
   351                              <2> 
   352 00001764 B011                <2>          mov al, 0x11
   353 00001766 E6A0                <2>          out 0xa0, al                  	;ICW1：边沿触发/级联方式
   354 00001768 B028                <2>          mov al, 0x28
   355 0000176A E6A1                <2>          out 0xa1, al                  	;ICW2:起始中断向量-->0x28
   356 0000176C B002                <2>          mov al, 0x02
   357 0000176E E6A1                <2>          out 0xa1, al                  	;ICW3:从片识别标志，级联到主片IR2
   358 00001770 B001                <2>          mov al, 0x01
   359 00001772 E6A1                <2>          out 0xa1, al                  	;ICW4:非总线缓冲，全嵌套，正常EOI
   360                              <2> 
   361                              <2> 
   362                              <2>     epilog
   254                              <3>  popallq
   305 00001774 415F                <4>  pop r15
   306 00001776 415E                <4>  pop r14
   307 00001778 415D                <4>  pop r13
   308 0000177A 415C                <4>  pop r12
   309 0000177C 415B                <4>  pop r11
   310 0000177E 415A                <4>  pop r10
   311 00001780 4159                <4>  pop r9
   312 00001782 4158                <4>  pop r8
   313 00001784 5F                  <4>  pop rdi
   314 00001785 5E                  <4>  pop rsi
   315 00001786 5A                  <4>  pop rdx
   316 00001787 59                  <4>  pop rcx
   317 00001788 5B                  <4>  pop rbx
   318 00001789 58                  <4>  pop rax
   255                              <3> 
   256 0000178A 4889EC              <3>  mov rsp, rbp
   257 0000178D 5D                  <3>  pop rbp
   258 0000178E C3                  <3>  ret
   363                              <2> 
   364                              <2> 
   365                              <2> enable_irq:;enable irq; Helper function to enable specific IRQ
   366                              <2>     prolog 1
   234 0000178F 55                  <3>  push rbp
   235 00001790 4889E5              <3>  mov rbp, rsp
   236                              <3> 
   237                              <3> 
   238 00001793 488945F8            <3>  mov [rbp-8],rax
   239 00001797 B801000000          <3>  mov rax, %1
   240 0000179C 4883C00F            <3>  add rax, 15
   241 000017A0 4883E0F0            <3>  and rax, ~15
   242 000017A4 4829C4              <3>  sub rsp, rax
   243 000017A7 488B45F8            <3>  mov rax,[rbp-8]
   244                              <3> 
   245                              <3>  pushallq
   288 000017AB 50                  <4>  push rax
   289 000017AC 53                  <4>  push rbx
   290 000017AD 51                  <4>  push rcx
   291 000017AE 52                  <4>  push rdx
   292 000017AF 56                  <4>  push rsi
   293 000017B0 57                  <4>  push rdi
   294 000017B1 4150                <4>  push r8
   295 000017B3 4151                <4>  push r9
   296 000017B5 4152                <4>  push r10
   297 000017B7 4153                <4>  push r11
   298 000017B9 4154                <4>  push r12
   299 000017BB 4155                <4>  push r13
   300 000017BD 4156                <4>  push r14
   301 000017BF 4157                <4>  push r15
   246                              <3> 
   247                              <3> 
   248                              <3> 
   249                              <3> 
   250                              <3> 
   367                              <2>     get_param rax, 1    ; Get IRQ number parameter
   262 000017C1 488B4510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   368                              <2>     
   369 000017C5 4883F808            <2>     cmp rax, 8
   370 000017C9 720B                <2>     jb .master_pic
   371                              <2>     
   372                              <2>     .slave_pic:
   373 000017CB 4883E808            <2>         sub rax, 8
   374 000017CF B9A1000000          <2>         mov rcx, PIC2_DATA
   375 000017D4 EB05                <2>         jmp .continue
   376                              <2>         
   377                              <2>     .master_pic:
   378 000017D6 B921000000          <2>         mov rcx, PIC1_DATA
   379                              <2>         
   380                              <2>     .continue:
   381 000017DB 50                  <2>         push rax
   382 000017DC EC                  <2>         in al, dx           ; Get current mask
   383 000017DD B401                <2>         mov ah, 1
   384 000017DF 88D9                <2>         mov cl, bl
   385 000017E1 D2E4                <2>         shl ah, cl          ; Create mask for this IRQ
   386 000017E3 F6D4                <2>         not ah              ; Invert mask
   387 000017E5 20E0                <2>         and al, ah          ; Clear bit for this IRQ
   388 000017E7 EE                  <2>         out dx, al          ; Write new mask
   389 000017E8 58                  <2>         pop rax
   390                              <2>     
   391                              <2>     epilog
   254                              <3>  popallq
   305 000017E9 415F                <4>  pop r15
   306 000017EB 415E                <4>  pop r14
   307 000017ED 415D                <4>  pop r13
   308 000017EF 415C                <4>  pop r12
   309 000017F1 415B                <4>  pop r11
   310 000017F3 415A                <4>  pop r10
   311 000017F5 4159                <4>  pop r9
   312 000017F7 4158                <4>  pop r8
   313 000017F9 5F                  <4>  pop rdi
   314 000017FA 5E                  <4>  pop rsi
   315 000017FB 5A                  <4>  pop rdx
   316 000017FC 59                  <4>  pop rcx
   317 000017FD 5B                  <4>  pop rbx
   318 000017FE 58                  <4>  pop rax
   255                              <3> 
   256 000017FF 4889EC              <3>  mov rsp, rbp
   257 00001802 5D                  <3>  pop rbp
   258 00001803 C3                  <3>  ret
   392                              <2> 
   393                              <2> init_rtc_timer:;init rtc
   394                              <2>     prolog 0
   234 00001804 55                  <3>  push rbp
   235 00001805 4889E5              <3>  mov rbp, rsp
   236                              <3> 
   237                              <3> 
   238 00001808 488945F8            <3>  mov [rbp-8],rax
   239 0000180C B800000000          <3>  mov rax, %1
   240 00001811 4883C00F            <3>  add rax, 15
   241 00001815 4883E0F0            <3>  and rax, ~15
   242 00001819 4829C4              <3>  sub rsp, rax
   243 0000181C 488B45F8            <3>  mov rax,[rbp-8]
   244                              <3> 
   245                              <3>  pushallq
   288 00001820 50                  <4>  push rax
   289 00001821 53                  <4>  push rbx
   290 00001822 51                  <4>  push rcx
   291 00001823 52                  <4>  push rdx
   292 00001824 56                  <4>  push rsi
   293 00001825 57                  <4>  push rdi
   294 00001826 4150                <4>  push r8
   295 00001828 4151                <4>  push r9
   296 0000182A 4152                <4>  push r10
   297 0000182C 4153                <4>  push r11
   298 0000182E 4154                <4>  push r12
   299 00001830 4155                <4>  push r13
   300 00001832 4156                <4>  push r14
   301 00001834 4157                <4>  push r15
   246                              <3> 
   247                              <3> 
   248                              <3> 
   249                              <3> 
   250                              <3> 
   395                              <2>     ;     ;设置和时钟中断相关的硬件
   396 00001836 B00B                <2>     mov al, 0x0b                             ;RTC寄存器B
   397 00001838 0C80                <2>     or al, 0x80                              ;阻断NMI
   398 0000183A E670                <2>     out 0x70, al
   399 0000183C B012                <2>     mov al, 0x12                             ;设置寄存器B，禁止周期性中断，开放更
   400 0000183E E671                <2>     out 0x71, al                             ;新结束后中断，BCD码，24小时制
   401                              <2> 
   402                              <2>     ; 设置 RTC 频率 (默认 1024 Hz, 改为 1 Hz)
   403 00001840 B08A                <2>     mov al, 0x8A         ; 再次选择寄存器 B
   404 00001842 E670                <2>     out RTC_ADDR, al
   405 00001844 E471                <2>     in al, RTC_DATA
   406 00001846 24F0                <2>     and al, 0xF0         ; 清除低 4 位 (频率设置)
   407 00001848 0C0F                <2>     or al, 0x0F          ; 设置频率为 2 Hz (0x0F = 2 Hz, 0x0E = 4 Hz, ...)
   408 0000184A E671                <2>     out RTC_DATA, al
   409                              <2> 
   410                              <2> 
   411 0000184C E4A1                <2>     in al, 0xa1                              ;读8259从片的IMR寄存器
   412                              <2> 
   413 0000184E 24FE                <2>     and al, 0xfe                             ;清除bit 0(此位连接RTC)
   414 00001850 E6A1                <2>     out 0xa1, al                             ;写回此寄存器
   415                              <2> 
   416                              <2> 
   417                              <2> 
   418                              <2> 
   419                              <2>     ; ; 禁用 NMI (Non-Maskable Interrupt)
   420                              <2>     ; mov al, 0x8A         ; 选择寄存器 B (0x8A = NMI 禁用 + 寄存器 B)
   421                              <2>     ; out RTC_ADDR, al
   422                              <2> 
   423                              <2>     ; ; 读取当前寄存器 B 的值
   424                              <2>     ; in al, RTC_DATA
   425                              <2>     ; or al, 0x40          ; 启用 Periodic Interrupt (bit 6)
   426                              <2>     ; mov bl, al
   427                              <2> 
   428                              <2>     ; ; 写回寄存器 B
   429                              <2>     ; mov al, 0x8A
   430                              <2>     ; out RTC_ADDR, al
   431                              <2>     ; mov al, bl
   432                              <2>     ; out RTC_DATA, al
   433                              <2> 
   434                              <2>     ; ; 设置 RTC 频率 (默认 1024 Hz, 改为 1 Hz)
   435                              <2>     ; mov al, 0x8A         ; 再次选择寄存器 B
   436                              <2>     ; out RTC_ADDR, al
   437                              <2>     ; in al, RTC_DATA
   438                              <2>     ; and al, 0xF0         ; 清除低 4 位 (频率设置)
   439                              <2>     ; or al, 0x0F          ; 设置频率为 2 Hz (0x0F = 2 Hz, 0x0E = 4 Hz, ...)
   440                              <2>     ; out RTC_DATA, al
   441                              <2> 
   442                              <2>     ; ; 启用 NMI
   443                              <2>     ; mov al, 0x8B         ; 选择寄存器 B (NMI 启用)
   444                              <2>     ; out RTC_ADDR, al
   445                              <2>     ; in al, RTC_DATA      ; 读取当前值
   446                              <2>     ; and al, 0x7F         ; 清除 NMI 禁用位 (bit 7)
   447                              <2>     ; out RTC_DATA, al
   448                              <2> 
   449                              <2>     ; sti
   450                              <2> 
   451                              <2>     ; mov al, 0x0c
   452                              <2>     ; out 0x70, al
   453                              <2>     ; in al, 0x71                              ;读RTC寄存器C，复位未决的中断状态
   454                              <2> 
   455                              <2> 
   456                              <2> 
   457                              <2> 
   458                              <2>     ; mov r8,0x12345678
   459                              <2>     ; jmp $
   460                              <2> 
   461                              <2> 
   462                              <2>     ; ; 1. 允许IRQ8
   463                              <2>     ; in   al, 0xA1
   464                              <2>     ; and  al, 0xFE
   465                              <2>     ; out  0xA1, al
   466                              <2> 
   467                              <2>     ; ; 2. 设置寄存器B，启用周期性中断
   468                              <2>     ; mov  al, 0x8B         ; 选择寄存器B，禁止NMI
   469                              <2>     ; out  0x70, al
   470                              <2>     ; in   al, 0x71         ; 读出原值
   471                              <2>     ; and  al, 0x0F         ; 保留低4位
   472                              <2>     ; or   al, 0x40         ; 设置bit6 (Periodic Interrupt Enable)
   473                              <2>     ; out  0x71, al         ; 写回寄存器B
   474                              <2> 
   475                              <2>     ; ; 3. 设置寄存器A，分频器=0x0F（2Hz），如需1Hz可用0x0F
   476                              <2>     ; mov  al, 0x8A         ; 选择寄存器A，禁止NMI
   477                              <2>     ; out  0x70, al
   478                              <2>     ; in   al, 0x71         ; 读出原值
   479                              <2>     ; and  al, 0xF0         ; 保留高4位
   480                              <2>     ; or   al, 0x0F         ; 设置低4位为0x0F（2Hz），0x0F=2Hz, 0x0E=4Hz, 0x0D=8Hz, 0x0C=16Hz
   481                              <2>     ; out  0x71, al         ; 写回寄存器A
   482                              <2> 
   483                              <2> 
   484                              <2>     epilog
   254                              <3>  popallq
   305 00001852 415F                <4>  pop r15
   306 00001854 415E                <4>  pop r14
   307 00001856 415D                <4>  pop r13
   308 00001858 415C                <4>  pop r12
   309 0000185A 415B                <4>  pop r11
   310 0000185C 415A                <4>  pop r10
   311 0000185E 4159                <4>  pop r9
   312 00001860 4158                <4>  pop r8
   313 00001862 5F                  <4>  pop rdi
   314 00001863 5E                  <4>  pop rsi
   315 00001864 5A                  <4>  pop rdx
   316 00001865 59                  <4>  pop rcx
   317 00001866 5B                  <4>  pop rbx
   318 00001867 58                  <4>  pop rax
   255                              <3> 
   256 00001868 4889EC              <3>  mov rsp, rbp
   257 0000186B 5D                  <3>  pop rbp
   258 0000186C C3                  <3>  ret
   485                              <2> irq8_rtc_interrupt_handler:;timer handler
   486                              <2>     SAVE_CONTEXT
    84 0000186D 50                  <3>  push rax
    85 0000186E 51                  <3>  push rcx
    86 0000186F 52                  <3>  push rdx
    87 00001870 53                  <3>  push rbx
    88 00001871 55                  <3>  push rbp
    89 00001872 56                  <3>  push rsi
    90 00001873 57                  <3>  push rdi
    91 00001874 4150                <3>  push r8
    92 00001876 4151                <3>  push r9
    93 00001878 4152                <3>  push r10
    94 0000187A 4153                <3>  push r11
    95 0000187C 4154                <3>  push r12
    96 0000187E 4155                <3>  push r13
    97 00001880 4156                <3>  push r14
    98 00001882 4157                <3>  push r15
   487                              <2> 
   488                              <2>     ; mov r9,0x123456
   489                              <2>     ; jmp $
   490                              <2>     ; 1. 读取 RTC 寄存器 C（清除中断标志）
   491 00001884 B00C                <2>     mov al, 0x0C
   492 00001886 E670                <2>     out 0x70, al
   493 00001888 E471                <2>     in al, 0x71           ; 读取后自动清除中断
   494                              <2> 
   495                              <2>     ; 2. 发送 EOI（Legacy PIC）
   496 0000188A B020                <2>     mov al, 0x20
   497 0000188C E6A0                <2>     out 0xA0, al          ; 从 PIC
   498 0000188E E620                <2>     out 0x20, al          ; 主 PIC
   499                              <2> 
   500                              <2>     ; 3. 读取 CMOS 时间（秒、分、时）
   501 00001890 B000                <2>     mov al, 0x00          ; 秒
   502 00001892 E670                <2>     out 0x70, al
   503 00001894 E471                <2>     in al, 0x71
   504 00001896 88C3                <2>     mov bl, al
   505                              <2> 
   506 00001898 B002                <2>     mov al, 0x02          ; 分
   507 0000189A E670                <2>     out 0x70, al
   508 0000189C E471                <2>     in al, 0x71
   509 0000189E 88C7                <2>     mov bh, al
   510                              <2> 
   511 000018A0 B004                <2>     mov al, 0x04          ; 时
   512 000018A2 E670                <2>     out 0x70, al
   513 000018A4 E471                <2>     in al, 0x71
   514 000018A6 88C1                <2>     mov cl, al
   515                              <2> 
   516                              <2>     ; 4. 转换为 ASCII（BCD 格式）
   517                              <2>     ; 小时
   518                              <2>     .utc8:
   519 000018A8 4883F000            <2>         xor rax,0
   520                              <2> 
   521 000018AC 88C8                <2>         mov al, cl
   522 000018AE C0E804              <2>         shr al, 4
   523 000018B1 B20A                <2>         mov dl,10
   524 000018B3 F6E2                <2>         mul dl
   525                              <2> 
   526 000018B5 88CC                <2>         mov ah,cl
   527 000018B7 80E40F              <2>         and ah, 0x0F   
   528 000018BA 00E0                <2>         add al,ah
   529 000018BC 0408                <2>         add al,8
   530                              <2> 
   531 000018BE 3C18                <2>         cmp al,24
   532 000018C0 7C02                <2>         jl .hours24
   533 000018C2 2C18                <2>         sub al,24
   534                              <2>         .hours24:
   535 000018C4 88C1                <2>         mov cl,al
   536                              <2> 
   537 000018C6 88C8                <2>     mov al, cl
   538 000018C8 C0E804              <2>     shr al, 4
   539 000018CB 0430                <2>     add al, '0'
   540 000018CD 88053AFBFFFF        <2>     mov [rel global_rtc_time_str], al
   541 000018D3 88C8                <2>     mov al, cl
   542 000018D5 240F                <2>     and al, 0x0F
   543 000018D7 0430                <2>     add al, '0'
   544 000018D9 88052FFBFFFF        <2>     mov [rel global_rtc_time_str + 1], al
   545                              <2> 
   546                              <2>     ; 分钟
   547 000018DF 88F8                <2>     mov al, bh
   548 000018E1 C0E804              <2>     shr al, 4
   549 000018E4 0430                <2>     add al, '0'
   550 000018E6 880524FBFFFF        <2>     mov [rel global_rtc_time_str + 3], al
   551 000018EC 88F8                <2>     mov al, bh
   552 000018EE 240F                <2>     and al, 0x0F
   553 000018F0 0430                <2>     add al, '0'
   554 000018F2 880519FBFFFF        <2>     mov [rel global_rtc_time_str + 4], al
   555                              <2> 
   556                              <2>     ; 秒
   557 000018F8 88D8                <2>     mov al, bl
   558 000018FA C0E804              <2>     shr al, 4
   559 000018FD 0430                <2>     add al, '0'
   560 000018FF 88050EFBFFFF        <2>     mov [rel global_rtc_time_str + 6], al
   561 00001905 88D8                <2>     mov al, bl
   562 00001907 240F                <2>     and al, 0x0F
   563 00001909 0430                <2>     add al, '0'
   564 0000190B 880503FBFFFF        <2>     mov [rel global_rtc_time_str + 7], al
   565                              <2> 
   566 00001911 488D35F5FAFFFF      <2>         lea rsi,[rel global_rtc_time_str]    
   567                              <2>        function draw_string,1,1500,0,rsi
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00001918 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 0000191C 68DC050000          <4>  push qword %2
   183 00001921 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00001924 6A00                <4>  push qword %2
   183 00001926 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 0000192A 56                  <4>  push qword %2
   183 0000192B 8F442410            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 0000192F E835F5FFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00001934 4883C420            <4>  add rsp, total_space
   196                              <3> 
   568                              <2> 
   569                              <2> 
   570                              <2>     RESTORE_CONTEXT
   102 00001938 415F                <3>  pop r15
   103 0000193A 415E                <3>  pop r14
   104 0000193C 415D                <3>  pop r13
   105 0000193E 415C                <3>  pop r12
   106 00001940 415B                <3>  pop r11
   107 00001942 415A                <3>  pop r10
   108 00001944 4159                <3>  pop r9
   109 00001946 4158                <3>  pop r8
   110 00001948 5F                  <3>  pop rdi
   111 00001949 5E                  <3>  pop rsi
   112 0000194A 5D                  <3>  pop rbp
   113 0000194B 5B                  <3>  pop rbx
   114 0000194C 5A                  <3>  pop rdx
   115 0000194D 59                  <3>  pop rcx
   116 0000194E 58                  <3>  pop rax
   571 0000194F 48CF                <2>     iretq
   572                              <2> ; make_call_gate:                          	;创建64位的调用门
   573                              <2> ;                                           	;输入：RAX=例程的线性地址
   574                              <2> ;                                           	;输出：RDI:RSI=调用门
   575                              <2> ;          mov rdi, rax
   576                              <2> ;          shr rdi, 32                     	;得到门的高64位，在RDI中
   577                              <2> 
   578                              <2> ;          push rax                        	;构造数据结构，并预置线性地址的位15~0
   579                              <2> ;          mov word [rsp + 2], CORE_CODE64_SEL	;预置段选择子部分
   580                              <2> ;          mov [rsp + 4], eax                  	;预置线性地址的位31~16
   581                              <2> ;          mov word [rsp + 4], 0x8c00         	;添加P=1，TYPE=64位调用门
   582                              <2> ;          pop rsi
   583                              <2> 
   584                              <2> ;          ret
   585                              <2> 
   586                              <2> ; ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   587                              <2> ; make_interrupt_gate:                      	;创建64位的中断门
   588                              <2> ;                                             	;输入：RAX=例程的线性地址
   589                              <2> ;                                             	;输出：RDI:RSI=中断门
   590                              <2> ;          mov rdi, rax
   591                              <2> ;          shr rdi, 32                       	;得到门的高64位，在RDI中
   592                              <2> 
   593                              <2> ;          push rax                          	;构造数据结构，并预置线性地址的位15~0
   594                              <2> ;          mov word [rsp + 2], CORE_CODE64_SEL	;预置段选择子部分
   595                              <2> ;          mov [rsp + 4], eax                  	;预置线性地址的位31~16
   596                              <2> ;          mov word [rsp + 4], 0x8e00         	;添加P=1，TYPE=64位中断门
   597                              <2> ;          pop rsi
   598                              <2> 
   599                              <2> ;          ret
   600                              <2> 
   601                              <2> ; ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   602                              <2> ; make_trap_gate:                             	;创建64位的陷阱门
   603                              <2> ;                                              	;输入：RAX=例程的线性地址
   604                              <2> ;                                              	;输出：RDI:RSI=陷阱门
   605                              <2> ;          mov rdi, rax
   606                              <2> ;          shr rdi, 32                        	;得到门的高64位，在RDI中
   607                              <2> 
   608                              <2> ;          push rax                           	;构造数据结构，并预置线性地址的位15~0
   609                              <2> ;          mov word [rsp + 2], CORE_CODE64_SEL	;预置段选择子部分
   610                              <2> ;          mov [rsp + 4], eax                  	;预置线性地址的位31~16
   611                              <2> ;          mov word [rsp + 4], 0x8f00         	;添加P=1，TYPE=64位陷阱门
   612                              <2> ;          pop rsi
   613                              <2> 
   614                              <2> ;          ret
   615                              <2> 
   616                              <2> ; ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   617                              <2> ; make_tss_descriptor:                    	;创建64位的TSS描述符
   618                              <2> ;                                           	;输入：RAX=TSS的线性地址
   619                              <2> ;                                           	;输出：RDI:RSI=TSS描述符
   620                              <2> ;          push rax
   621                              <2> 
   622                              <2> ;          mov rdi, rax
   623                              <2> ;          shr rdi, 32                    	;得到门的高64位，在RDI中
   624                              <2> 
   625                              <2> ;          push rax                       	;先将部分线性地址移到适当位置
   626                              <2> ;          shl qword [rsp], 16           	;将线性地址的位23~00移到正确位置
   627                              <2> ;          mov word [rsp], 104           	;段界限的标准长度
   628                              <2> ;          mov al, [rsp + 5]
   629                              <2> ;          mov [rsp + 7], al             	;将线性地址的位31~24移到正确位置
   630                              <2> ;          mov byte [rsp + 5], 0x89     	;P=1，DPL=00，TYPE=1001（64位TSS）
   631                              <2> ;          mov byte [rsp + 6], 0        	;G、0、0、AVL和limit
   632                              <2> ;          pop rsi                       	;门的低64位
   633                              <2> 
   634                              <2> ;          pop rax
   635                              <2> 
   636                              <2> ;          ret
   637                              <2> 
   638                              <2> ; ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   639                              <2> ; mount_idt_entry:                     	;在中断描述符表IDT中安装门描述符
   640                              <2> ;                                        	;R8=中断向量
   641                              <2> ;                                        	;RDI:RSI=门描述符
   642                              <2> ;          push r8
   643                              <2> ;          push r9
   644                              <2> 
   645                              <2> ;          shl r8, 4                         	;中断号乘以16，得到表内偏移
   646                              <2> ;          mov r9, UPPER_IDT_LINEAR        	;中断描述符表的高端线性地址
   647                              <2> ;          mov [r9 + r8], rsi
   648                              <2> ;          mov [r9 + r8 + 8], rdi
   649                              <2> 
   650                              <2> ;          pop r9
   651                              <2> ;          pop r8
   652                              <2> 
   653                              <2> ;          ret
   654                              <2> %endif
    11                              <1> %include "../kernel/memory.asm"
     1                              <2> %ifndef MEMORY_ASM
     2                              <2> %define MEMORY_ASM
     3                              <2> 
     4                              <2> %include "../bootloader/global_def.asm"
     1                              <3> %ifndef GLOBAL_DEF_ASM
     2                              <3> %define GLOBAL_DEF_ASM
     3                              <3> %define PLATFORM_QEMU_X64 1
     4                              <3> %define PLATFORM_X64 2
     5                              <3> %define DEBUG_PLATFORM PLATFORM_QEMU_X64
     6                              <3> %define DEBUG_MODE 1
     7                              <3> 
     8                              <3> 
     9                              <3> ;|----------------------|
    10                              <3> ;|	100000 ~ END	|
    11                              <3> ;|	   KERNEL	|
    12                              <3> ;|----------------------|
    13                              <3> ;|	E0000 ~ 100000	|
    14                              <3> ;| Extended System BIOS |
    15                              <3> ;|----------------------|
    16                              <3> ;|	C0000 ~ Dffff	|
    17                              <3> ;|     Expansion Area   |
    18                              <3> ;|----------------------|
    19                              <3> ;|	A0000 ~ bffff	|
    20                              <3> ;|   Legacy Video Area  |
    21                              <3> ;|----------------------|
    22                              <3> ;|	9f000 ~ A0000	|
    23                              <3> ;|	 BIOS reserve	|
    24                              <3> ;|----------------------|
    25                              <3> ;|	90000 ~ 9f000	|
    26                              <3> ;|	 kernel tmpbuf	|
    27                              <3> ;|----------------------|
    28                              <3> ;|	10000 ~ 90000	|
    29                              <3> ;|	   LOADER	|
    30                              <3> ;|----------------------|
    31                              <3> ;|	8000 ~ 10000	|
    32                              <3> ;|	  VBE info	|
    33                              <3> ;|----------------------|
    34                              <3> ;|	7e00 ~ 8000	|
    35                              <3> ;|	  mem info	|
    36                              <3> ;|----------------------|
    37                              <3> ;|	7c00 ~ 7e00	|
    38                              <3> ;|	 MBR (BOOT)	|
    39                              <3> ;|----------------------|
    40                              <3> ;|	0000 ~ 7c00	|
    41                              <3> ;|	 BIOS Code	|
    42                              <3> ;|----------------------|
    43                              <3> 
    44                              <3> 
    45                              <3> ;_______________________________________________________
    46                              <3> ; START	END	    SIZE	        USED
    47                              <3> ; FFFF0	FFFFF	16B	        BIOS System Entry
    48                              <3> ; F0000	FFFEF	64KB-16B	BIOS System Code
    49                              <3> ; C8000	EFFFF	160KB	    ROM/Mapped IO
    50                              <3> ; C0000	C7FFF	32KB	    Graphic Adapter BIOS
    51                              <3> ; B8000	BFFFF	32KB	    Chroma Text Video Buffer
    52                              <3> ; B0000	B7FFF	32KB	    Mono Text Video Buffer
    53                              <3> ; A0000	AFFFF	64KB	    Graphic Video Buffer
    54                              <3> ; 9FC00	9FFFF	1KB	        Extended BIOS Data Area
    55                              <3> ; 7E00	9FBFF	622080B     Useable 608KB	
    56                              <3> ; 7C00	7DFF	512B	    MBR
    57                              <3> ; 500	7BFF	30464B      Useable 30KB	
    58                              <3> ; 400	4FF	    256B	    BIOS Data Area
    59                              <3> ; 000	3FF	    1KB	        IVT
    60                              <3> ; _____________________________________________________
    61                              <3> 
    62                              <3> 
    63                              <3> 
    64                              <3> 
    65                              <3> 
    66                              <3> 
    67                              <3> 
    68                              <3> 
    69                              <3> 
    70                              <3> 
    71                              <3> 
    72                              <3> ;|----------------------|
    73                              <3> ;|	100000 ~ END	|
    74                              <3> ;|	   KERNEL	|
    75                              <3> ;|----------------------|
    76                              <3> ;|	E0000 ~ 100000	|
    77                              <3> ;| Extended System BIOS |
    78                              <3> ;|----------------------|
    79                              <3> ;|	C0000 ~ Dffff	|
    80                              <3> ;|     Expansion Area   |
    81                              <3> ;|----------------------|
    82                              <3> ;|	A0000 ~ bffff	|
    83                              <3> ;|   Legacy Video Area  |
    84                              <3> ;|----------------------|
    85                              <3> ;|	9F000 ~ A0000	|
    86                              <3> ;|	 BIOS reserve	|
    87                              <3> ;|----------------------|
    88                              <3> ;|	90000 ~ 9F000	|
    89                              <3> ;|	 kernel tmpbuf	|
    90                              <3> ;|----------------------|
    91                              <3> ;|	10000 ~ 90000	|
    92                              <3> ;|	   LOADER	|
    93                              <3> ;|----------------------|
    94                              <3> ;|	8000 ~ 10000	|
    95                              <3> ;|	  VBE info	|
    96                              <3> ;|----------------------|
    97                              <3> ;|	7E00 ~ 8000	|
    98                              <3> ;|	  mem info	|
    99                              <3> ;|----------------------|
   100                              <3> ;|	7C00 ~ 7E00	|
   101                              <3> ;|	 MBR (BOOT)	|
   102                              <3> ;|----------------------|
   103                              <3> ;|	0000 ~ 7C00	|
   104                              <3> ;|	 BIOS Code	|
   105                              <3> ;|----------------------|
   106                              <3> 
   107                              <3> 
   108                              <3> 
   109                              <3> 
   110                              <3> 
   111                              <3> 
   112                              <3> 
   113                              <3> 
   114                              <3> 
   115                              <3> 
   116                              <3> ;______________________________________________
   117                              <3> ; ----------------Vbe Info Block------------
   118                              <3> ; typedef struct {
   119                              <3> ;     unsigned char       vbe_signature;
   120                              <3> ;     unsigned short      vbe_version;
   121                              <3> ;     unsigned long       oem_string_ptr;
   122                              <3> ;     unsigned char       capabilities;
   123                              <3> ;     unsigned long       video_mode_ptr;
   124                              <3> ;     unsigned short      total_memory;
   125                              <3> ;     unsigned short      oem_software_rev;
   126                              <3> ;     unsigned long       oem_vendor_name_ptr;
   127                              <3> ;     unsigned long       oem_product_name_ptr;
   128                              <3> ;     unsigned long       oem_product_rev_ptr;
   129                              <3> ;     unsigned char       reserved[222];
   130                              <3> ;     unsigned char       oem_data[256];  
   131                              <3> ; } VbeInfoBlock;
   132                              <3> ;______________________________________________
   133                              <3> 
   134                              <3> 
   135                              <3> BaseOfKernelFile	equ	0x00
   136                              <3> OffsetOfKernelFile	equ	0x100000
   137                              <3> BaseTmpOfKernelAddr	equ	0x9000
   138                              <3> OffsetTmpOfKernelFile	equ	0x0000
   139                              <3> VBEStructBufferAddr	equ	0x8000
   140                              <3> VBEModeStructBufferAddr	equ	0x8200
   141                              <3> MemoryStructBufferAddr	equ	0x8800
   142                              <3> 
   143                              <3> KernelCodeSelector      equ 0x08
   144                              <3> KernelDataSelector      equ 0x10
   145                              <3> UserCodeSelector      equ 0x18
   146                              <3> UserDataSelector      equ 0x20
   147                              <3> 
   148                              <3> KernelSpaceUpperAddress equ 0xFFFF800000000000
   149                              <3> 
   150                              <3> GDTPointerUpperAddr equ 0xFFFF800000104000
   151                              <3> IDTPointerUpperAddr equ 0xFFFF80000010400a
   152                              <3> TSSPointerUpperAddr equ 0xFFFF800000104014
   153                              <3> 
   154                              <3> VideoFrameBufferAddress equ 0xFFFF800003000000
   155                              <3> KernelStartSectorNum	equ	16
   156                              <3> 
   157                              <3> 
   158                              <3> 
   159                              <3> 
   160                              <3> MasterSectorReadNumPort    equ	0x1F2
   161                              <3> MasterSectorReadPort    equ	0x1F0
   162                              <3> 
   163                              <3> SlaveReadNumPort    equ	0x172
   164                              <3> SlaveSectorReadPort    equ	0x170
   165                              <3> 
   166                              <3> SectorReadNumPort    equ	MasterSectorReadNumPort
   167                              <3> SectorReadPort    equ	MasterSectorReadPort
   168                              <3> 
   169                              <3> struc vbe_info_block
   170                              <3>     .signature                 resb 4    ; 'VESA' signature (must be "VESA")
   171                              <3>     .version                   resw 1    ; VBE version (e.g., 0x0300 for VBE 3.0)
   172                              <3>     .oem_string_ptr            resd 1    ; Pointer to OEM string
   173                              <3>     .capabilities              resd 1    ; Capabilities of the video card
   174                              <3>     .video_mode_ptr            resd 1    ; Pointer to supported video modes
   175                              <3>     .total_memory              resw 1    ; Total memory in 64KB blocks
   176                              <3> 
   177                              <3>     ; VBE 2.0+ fields
   178                              <3>     .oem_software_rev          resw 1    ; OEM software revision
   179                              <3>     .oem_vendor_name_ptr       resd 1    ; Pointer to OEM vendor name string
   180                              <3>     .oem_product_name_ptr      resd 1    ; Pointer to OEM product name string
   181                              <3>     .oem_product_rev_ptr       resd 1    ; Pointer to OEM product revision string
   182                              <3>     .reserved                  resb 222  ; Reserved for VBE implementation
   183                              <3>     .oem_data                  resb 256  ; Data area for OEM-specific information
   184                              <3> endstruc
   185                              <3> 
   186                              <3> struc vbe_mode_info_block
   187                              <3>     .attributes                resw 1    ; Mode attributes
   188                              <3>     .winA_attributes           resb 1    ; Window A attributes
   189                              <3>     .winB_attributes           resb 1    ; Window B attributes
   190                              <3>     .win_granularity           resw 1    ; Window granularity in KB
   191                              <3>     .win_size                  resw 1    ; Window size in KB
   192                              <3>     .winA_segment              resw 1    ; Window A segment
   193                              <3>     .winB_segment              resw 1    ; Window B segment
   194                              <3>     .win_func_ptr              resd 1    ; Pointer to window function
   195                              <3>     .bytes_per_scanline        resw 1    ; Bytes per scanline
   196                              <3> 
   197                              <3>     ; VBE 1.2+ fields
   198                              <3>     .x_resolution              resw 1    ; Horizontal resolution in pixels
   199                              <3>     .y_resolution              resw 1    ; Vertical resolution in pixels
   200                              <3>     .x_char_size               resb 1    ; Character cell width in pixels
   201                              <3>     .y_char_size               resb 1    ; Character cell height in pixels
   202                              <3>     .number_of_planes          resb 1    ; Number of memory planes
   203                              <3>     .bits_per_pixel            resb 1    ; Bits per pixel
   204                              <3>     .number_of_banks           resb 1    ; Number of banks
   205                              <3>     .memory_model              resb 1    ; Memory model type
   206                              <3>     .bank_size                 resb 1    ; Bank size in KB
   207                              <3>     .number_of_image_pages     resb 1    ; Number of images
   208                              <3>     .reserved1                 resb 1    ; Reserved
   209                              <3> 
   210                              <3>     ; Direct Color fields (VBE 1.2+)
   211                              <3>     .red_mask_size             resb 1    ; Size of direct color red mask
   212                              <3>     .red_field_position        resb 1    ; Bit position of red mask
   213                              <3>     .green_mask_size           resb 1    ; Size of direct color green mask
   214                              <3>     .green_field_position      resb 1    ; Bit position of green mask
   215                              <3>     .blue_mask_size            resb 1    ; Size of direct color blue mask
   216                              <3>     .blue_field_position       resb 1    ; Bit position of blue mask
   217                              <3>     .reserved_mask_size        resb 1    ; Size of direct color reserved mask
   218                              <3>     .reserved_field_position   resb 1    ; Bit position of reserved mask
   219                              <3>     .direct_color_mode_info    resb 1    ; Direct color mode attributes
   220                              <3> 
   221                              <3>     ; VBE 2.0+ fields
   222                              <3>     .phys_base_ptr             resd 1    ; Physical address for flat memory frame buffer
   223                              <3>     .reserved2                 resd 1    ; Reserved
   224                              <3>     .reserved3                 resw 1    ; Reserved
   225                              <3> 
   226                              <3>     ; VBE 3.0+ fields
   227                              <3>     .lin_bytes_per_scanline    resw 1    ; Bytes per scanline for linear modes
   228                              <3>     .bnk_number_of_image_pages resb 1    ; Number of images for banked modes
   229                              <3>     .lin_number_of_image_pages resb 1    ; Number of images for linear modes
   230                              <3>     .lin_red_mask_size         resb 1    ; Size of direct color red mask (linear modes)
   231                              <3>     .lin_red_field_position    resb 1    ; Bit position of red mask (linear modes)
   232                              <3>     .lin_green_mask_size       resb 1    ; Size of direct color green mask (linear modes)
   233                              <3>     .lin_green_field_position  resb 1    ; Bit position of green mask (linear modes)
   234                              <3>     .lin_blue_mask_size        resb 1    ; Size of direct color blue mask (linear modes)
   235                              <3>     .lin_blue_field_position   resb 1    ; Bit position of blue mask (linear modes)
   236                              <3>     .lin_reserved_mask_size    resb 1    ; Size of direct color reserved mask (linear modes)
   237                              <3>     .lin_reserved_field_position resb 1  ; Bit position of reserved mask (linear modes)
   238                              <3>     .max_pixel_clock           resd 1    ; Maximum pixel clock (Hz)
   239                              <3>     .reserved4                 resb 190  ; Reserved for future expansion
   240                              <3> endstruc
   241                              <3> 
   242                              <3> struc e820_memory_entry
   243                              <3>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   244                              <3>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   245                              <3>     .length_low               resd 1    ; Lower 32 bits of the length
   246                              <3>     .length_high              resd 1    ; Upper 32 bits of the length
   247                              <3>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   248                              <3>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   249                              <3> endstruc
   250                              <3> 
   251                              <3> %endif
     5                              <2> %include "../kernel/stddef.asm"
     1                              <3> %ifndef STDDEF_ASM
     2                              <3> %define STDDEF_ASM
     3                              <3> 
     4                              <3> ;-----------Data Type Standard------------;
     5                              <3> %define USE_DT_STANDARD
     6                              <3> %ifdef USE_DT_STANDARD
     7                              <3> ;     %macro gbyte 1 ; 参数1：变量名, 参数2：初始值(1字节)
     8                              <3> ;         %1: db %2
     9                              <3> ;         %endmacro
    10                              <3> 
    11                              <3> ;     %macro g2byte 1 ; 参数1：变量名, 参数2：初始值(4字节)
    12                              <3> ;         %1: dw %2
    13                              <3> ;         %endmacro
    14                              <3> 
    15                              <3> ;     %macro g4byte 1 ; 参数1：变量名, 参数2：初始值(4字节)
    16                              <3> ;         %1: dd %2
    17                              <3> ;         %endmacro
    18                              <3> 
    19                              <3> ;     %macro g8byte 1 ; 参数1：变量名, 参数2：初始值(8字节)
    20                              <3> ;         %1: dq %2
    21                              <3> ;         %endmacro
    22                              <3> 
    23                              <3> ; %define UNIQUE_ID_IMPL(name, line) name %+ _ %+ line
    24                              <3> ; %define UNIQUE_ID(name) UNIQUE_ID_IMPL(name, __LINE__)
    25                              <3> ;     ; %macro lvar 1
    26                              <3> ;     ;     %define %1 qword [rbp - 112-(__local_offset + 8)]
    27                              <3> 
    28                              <3> ;     ;     %assign __local_offset  __local_offset + 8
    29                              <3> 
    30                              <3> ;     ;     sub rsp, 8
    31                              <3> ;     ;     %endmacro
    32                              <3> 
    33                              <3> ;     ; 初始化局部变量追踪
    34                              <3> ;     %macro LOCAL_BEGIN 0
    35                              <3> ;         %push local_ctx              ; 创建新的局部上下文
    36                              <3> ;         %assign %$local_offset 0     ; 初始化局部偏移计数器
    37                              <3> ;     %endmacro
    38                              <3> 
    39                              <3> 
    40                              <3> ;     %macro lvar 1
    41                              <3> ;         %assign %$local_offset %$local_offset+8
    42                              <3> ;         %define %$var_%1 %$local_offset
    43                              <3> ;         %define %1  qword[rbp-%$var_%1]
    44                              <3> ;         sub rsp,8
    45                              <3> ;     %endmacro
    46                              <3> 
    47                              <3>     ; %macro lstr 2
    48                              <3>     ;     %ifstr %2
    49                              <3>     ;         %strlen len %2
    50                              <3>     ;         %assign %$local_offset %$local_offset+len+1   ; 累加偏移
    51                              <3>     ;         %define %$str_%1 %$local_offset               ; 定义变量偏移
    52                              <3>     ;         %define %1  [rbp - %$str_%1]
    53                              <3>     ;         %define %1.size len+1
    54                              <3>     ;         sub rsp,%1.size
    55                              <3>     ;     %endif
    56                              <3>     ;         mov rcx, %3
    57                              <3>     ;         mov rdi, ebp
    58                              <3>     ;         add rdi, %$var_%1
    59                              <3>     ;         lea rsi, [%2]
    60                              <3>     ;         rep movsb
    61                              <3>     ; %endmacro
    62                              <3> 
    63                              <3>     ; %macro lstr_copy 2-3
    64                              <3>     ;     %ifctx local_ctx
    65                              <3>     ;         %if %0 == 3
    66                              <3>     ;             ; 带长度的字符串复制
    67                              <3>     ;             mov ecx, %3
    68                              <3>     ;             mov edi, ebp
    69                              <3>     ;             add edi, %$var_%1
    70                              <3>     ;             lea esi, [%2]
    71                              <3>     ;             rep movsb
    72                              <3>     ;         %else
    73                              <3>     ;             ; 以null结尾的字符串复制
    74                              <3>     ;             mov edi, ebp
    75                              <3>     ;             add edi, %$var_%1
    76                              <3>     ;             lea esi, [%2]
    77                              <3>     ;             %%copy_loop:
    78                              <3>     ;             lodsb
    79                              <3>     ;             stosb
    80                              <3>     ;             test al, al
    81                              <3>     ;             jnz %%copy_loop
    82                              <3>     ;         %endif
    83                              <3>     ;     %else
    84                              <3>     ;         %error "STR_COPY used outside local_ctx block"
    85                              <3>     ;     %endif
    86                              <3>     ; %endmacro
    87                              <3> 
    88                              <3>     ; %macro lstruct 1
    89                              <3>     ;     %assign %$local_offset %$local_offset+8   ; 累加偏移
    90                              <3>     ;     %define %$struct_%1 %$local_offset               ; 定义变量偏移
    91                              <3>     ;     %define %1  rbp - %$struct_%1
    92                              <3>     ;     %define %1.size 5
    93                              <3>     ;     sub rsp,%1.size
    94                              <3>     ; %endmacro
    95                              <3> 
    96                              <3>     ; ; 分配栈空间并保存寄存器
    97                              <3>     ; %macro lalloc 0
    98                              <3>     ;     %if %$local_offset > 0
    99                              <3>     ;         ; 16字节对齐
   100                              <3>     ;         %assign pad (16 - (%$local_offset % 16))
   101                              <3>     ;         %if pad < 16
   102                              <3>     ;             %assign %$local_offset %$local_offset + pad
   103                              <3>     ;         %endif
   104                              <3>     ;         sub rsp, %$local_offset
   105                              <3>     ;     %endif
   106                              <3>     ; %endmacro
   107                              <3> 
   108                              <3> 
   109                              <3>     ; ; 获取局部变量的访问表达式
   110                              <3>     ; %macro locvar 1-*
   111                              <3>     ;     ; [rbp - %$var_%1 ]
   112                              <3> 
   113                              <3>     ;     %ifctx local_ctx
   114                              <3>     ;         ; %ifidn %2, ""
   115                              <3>     ;             qword [rbp - %$var_%1]
   116                              <3>     ;         ; %else
   117                              <3>     ;         ;     [rbp - %$var_%1 - %2]
   118                              <3>     ;         ; %endif
   119                              <3>     ;     %endif
   120                              <3>     ; %endmacro
   121                              <3> 
   122                              <3>     ;     %macro locvar 1-2
   123                              <3>     ;     ; [rbp - %$var_%1 ]
   124                              <3> 
   125                              <3>     ;     %ifctx local_ctx
   126                              <3>     ;         %ifidn %2, ""
   127                              <3>     ;             [rbp - %$var_%1]
   128                              <3>     ;         %else
   129                              <3>     ;             [rbp - %$var_%1 - %2]
   130                              <3>     ;         %endif
   131                              <3>     ;     %endif
   132                              <3>     ; %endmacro
   133                              <3> 
   134                              <3> 
   135                              <3> %endif
   136                              <3> 
   137                              <3> ;-----------Calling Conventions Standard------------;
   138                              <3> %define USE_CC_STANDARD
   139                              <3> %ifdef USE_CC_STANDARD
   140                              <3> 
   141                              <3>     ;caller maintain the stack balance 
   142                              <3>         ; debug_times: db 0
   143                              <3>         ; cmp byte [rel debug_times],3
   144                              <3>         ; je debug_stop
   145                              <3>         ; add byte [rel debug_times],1
   146                              <3>     ; -------------------------------
   147                              <3>     ; 栈帧结构定义
   148                              <3>     ; -------------------------------
   149                              <3>     ; 调用后的栈布局:
   150                              <3>     ; [rsp+0x00] 返回地址 (8字节)
   151                              <3>     ; [rsp+0x08] 旧RBP     (8字节) <- rbp指向这里
   152                              <3>     ; [rsp+0x10] 参数1     (8字节)
   153                              <3>     ; [rsp+0x18] 参数2
   154                              <3>     ; ...
   155                              <3>     ; [rsp+X]    局部变量区
   156                              <3>     ; -------------------------------
   157                              <3> 
   158                              <3>     %define PARAM_OFFSET   16      ; 第一个参数的偏移量(返回地址8 + 旧RBP8)
   159                              <3>     %macro function 1-* ; 1=函数名, 2=返回参数数量, 3=参数列表
   160                              <3>         %assign param_count %0 - 2 ; 参数数量
   161                              <3>         
   162                              <3>         %if param_count < 0
   163                              <3>             %assign param_count 0 ; 如果没有参数，设置为 0
   164                              <3>         %endif
   165                              <3>         %if param_count < 1
   166                              <3>             %assign ret_param_count 0 ; 返回参数数量
   167                              <3>         %else
   168                              <3>             %assign ret_param_count %2 ; 返回参数数量
   169                              <3>         %endif
   170                              <3> 
   171                              <3>         ; 准备调用
   172                              <3>         prepare_call param_count, ret_param_count
   173                              <3> 
   174                              <3>         ; 如果有参数，将参数压入栈
   175                              <3>         %if param_count > 0
   176                              <3>             %assign i 0
   177                              <3>             ; mov [rsp-8], rax ; 保存返回地址
   178                              <3>             %rep param_count
   179                              <3>                 %rotate 1
   180                              <3>                 ; mov rax, %2
   181                              <3>                 ; mov [rsp + 8*i],qword %2 ; 将参数压入栈
   182                              <3>                 push qword %2
   183                              <3>                 pop qword [rsp + 8*i]
   184                              <3>                 %assign i i+1
   185                              <3>             %endrep
   186                              <3>             %rotate 1
   187                              <3>             %rotate 1
   188                              <3>             ; mov rax,[rsp-8]; 保存返回地址
   189                              <3>         %endif
   190                              <3> 
   191                              <3>         ; 调用函数
   192                              <3>         call %1
   193                              <3> 
   194                              <3>         ; 清理栈空间
   195                              <3>         cleanup_call param_count, ret_param_count
   196                              <3> 
   197                              <3>     %endmacro
   198                              <3> 
   199                              <3>     %macro align_stack_16 0
   200                              <3>         test rsp, 0xF
   201                              <3>         jz %%skip_align
   202                              <3>         sub rsp,8
   203                              <3>         %%skip_align:
   204                              <3>     %endmacro
   205                              <3> 
   206                              <3>     ; %macro prologue 0;local var size(bytes)
   207                              <3>     ;     push rbp
   208                              <3>     ;     mov rbp, rsp
   209                              <3> 
   210                              <3> 
   211                              <3>     ;     pushallq
   212                              <3>     ;     LOCAL_BEGIN
   213                              <3>         
   214                              <3> 
   215                              <3>     ;     ; 调试信息可以放在这里
   216                              <3>     ;     ; %ifdef DEBUG
   217                              <3>     ;     ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
   218                              <3>     ;     ; %endif
   219                              <3>     ; %endmacro
   220                              <3>     ; %macro epilogue 0
   221                              <3>     ;     %pop
   222                              <3>     ;     mov rax, rbp
   223                              <3>     ;     sub rax, 8*14
   224                              <3>     ;     mov rsp, rax
   225                              <3> 
   226                              <3>     ;     popallq
   227                              <3> 
   228                              <3>     ;     mov rsp, rbp
   229                              <3>     ;     pop rbp
   230                              <3>     ;     ret
   231                              <3>     ; %endmacro
   232                              <3> 
   233                              <3>     %macro prolog 1;local var size(bytes)
   234                              <3>         push rbp
   235                              <3>         mov rbp, rsp
   236                              <3> 
   237                              <3> 
   238                              <3>         mov [rbp-8],rax
   239                              <3>         mov rax, %1
   240                              <3>         add rax, 15
   241                              <3>         and rax, ~15
   242                              <3>         sub rsp, rax
   243                              <3>         mov rax,[rbp-8]
   244                              <3> 
   245                              <3>         pushallq
   246                              <3>         
   247                              <3>         ; 调试信息可以放在这里
   248                              <3>         ; %ifdef DEBUG
   249                              <3>         ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
   250                              <3>         ; %endif
   251                              <3>     %endmacro
   252                              <3> 
   253                              <3>     %macro epilog 0
   254                              <3>         popallq
   255                              <3> 
   256                              <3>         mov rsp, rbp
   257                              <3>         pop rbp
   258                              <3>         ret
   259                              <3>     %endmacro
   260                              <3> 
   261                              <3>     %macro get_param 2;1=register, 2=param index(from 1)
   262                              <3>         mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   263                              <3>     %endmacro
   264                              <3> 
   265                              <3>     %macro set_ret_param 2;1=register, 2=param index(from 1)
   266                              <3>         mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   267                              <3>     %endmacro
   268                              <3> 
   269                              <3>     %macro prepare_call 2;1=param count, 2=return param count
   270                              <3>         %assign total_space ((%1 + %2) * 8)
   271                              <3>         
   272                              <3>         %if (total_space % 16) != 0
   273                              <3>             %assign total_space total_space + 8  ; 添加填充
   274                              <3>         %endif
   275                              <3>         
   276                              <3>         sub rsp, total_space
   277                              <3>     %endmacro
   278                              <3> 
   279                              <3>     %macro cleanup_call 2;1=param count, 2=return param count
   280                              <3>         %assign total_space ((%1 + %2) * 8)
   281                              <3>         %if (total_space % 16) != 0
   282                              <3>             %assign total_space total_space + 8
   283                              <3>         %endif
   284                              <3>         add rsp, total_space
   285                              <3>     %endmacro
   286                              <3> 
   287                              <3>     %macro pushallq 0
   288                              <3>         push rax
   289                              <3>         push rbx
   290                              <3>         push rcx
   291                              <3>         push rdx
   292                              <3>         push rsi
   293                              <3>         push rdi
   294                              <3>         push r8
   295                              <3>         push r9
   296                              <3>         push r10
   297                              <3>         push r11
   298                              <3>         push r12
   299                              <3>         push r13
   300                              <3>         push r14
   301                              <3>         push r15
   302                              <3>     %endmacro
   303                              <3> 
   304                              <3>     %macro popallq 0
   305                              <3>         pop r15
   306                              <3>         pop r14
   307                              <3>         pop r13
   308                              <3>         pop r12
   309                              <3>         pop r11
   310                              <3>         pop r10
   311                              <3>         pop r9
   312                              <3>         pop r8
   313                              <3>         pop rdi
   314                              <3>         pop rsi
   315                              <3>         pop rdx
   316                              <3>         pop rcx
   317                              <3>         pop rbx
   318                              <3>         pop rax
   319                              <3>     %endmacro
   320                              <3> 
   321                              <3>     %endif
   322                              <3> ;---------------------ABI Standard------------------;
   323                              <3> %define USE_ABI_STANDARD
   324                              <3> %ifdef USE_ABI_STANDARD
   325                              <3> 
   326                              <3> 
   327                              <3>     %define ABI_File_None   0       ; 无文件类型
   328                              <3>     %define ABI_File_REL    1       ; 可重定位文件
   329                              <3>     %define ABI_File_EXEC   2       ; 可执行文件
   330                              <3>     %define ABI_File_DYN    3       ; 共享目标文件
   331                              <3>     %define ABI_File_CORE   4       ; 核心文件
   332                              <3> 
   333                              <3>     %define Section_Type_NULL    0      ; 未使用
   334                              <3>     %define Section_Type_LOAD    1      ; 可加载段
   335                              <3>     %define Section_Type_DYNAMIC 2      ; 动态链接信息
   336                              <3>     %define Section_Type_INTERP  3      ; 解释器路径
   337                              <3>     %define Section_Type_NOTE    4      ; 辅助信息
   338                              <3>     %define Section_Type_SHLIB   5      ; 保留
   339                              <3> 
   340                              <3>     %macro ABI_HEADER 4 ;1=File Type, 2=Entry Point Address, 3=Section Header Offset, 4=Section Header Count
   341                              <3>         db 0xA5, 'A', 'B', 'I'     ; ABI Magic Number
   342                              <3>         db 1                       ; Encode Type
   343                              <3>         db 1                       ; ABI Version
   344                              <3> 
   345                              <3>         dw %1                      ; ABI File Type
   346                              <3>         dq %2                      ; Entry Point Address
   347                              <3>         dw 32                      ; ABI Headers Size
   348                              <3> 
   349                              <3>         dq %3                      ; Section Header Offset
   350                              <3>         dw 32                      ; Section Header Size
   351                              <3>         dw %4                      ; Section Header Count
   352                              <3>         dw 0                       ; Symble Table Entry Size
   353                              <3>     %endmacro
   354                              <3>     STRUC struct_ABI_HEADER
   355                              <3>         .magic:         resb 4    ; ABI Magic Number (4 bytes)
   356                              <3>         .encode_type:   resb 1    ; Encode Type (1 byte)
   357                              <3>         .abi_version:   resb 1    ; ABI Version (1 byte)
   358                              <3>         .file_type:     resw 1    ; ABI File Type (2 bytes)
   359                              <3>         .entry_point:   resq 1    ; Entry Point Address (8 bytes)
   360                              <3>         .header_size:   resw 1    ; ABI Headers Size (2 bytes)
   361                              <3>         .section_offset: resq 1   ; Section Header Offset (8 bytes)
   362                              <3>         .section_size:  resw 1    ; Section Header Size (2 bytes)
   363                              <3>         .section_count: resw 1    ; Section Header Count (2 bytes)
   364                              <3>         .sym_table_size: resw 1   ; Symbol Table Entry Size (2 bytes)
   365                              <3>     ENDSTRUC
   366                              <3> 
   367                              <3>     %macro SECTION_HEADER 4 ;1=Section Type, 2=Virtual Address, 3=Section Offset, 4=Section Size
   368                              <3>         dq %1                  ; Section Type
   369                              <3>         dq %2                  ; Virtual Address
   370                              <3>         dq %3                  ; Section Offset
   371                              <3>         dq %4                  ; Section Size
   372                              <3>     %endmacro
   373                              <3>     STRUC struct_SECTION_HEADER
   374                              <3>         .type:      resq 1    ; Section Type (8 bytes)
   375                              <3>         .vaddr:     resq 1    ; Virtual Address (8 bytes)
   376                              <3>         .offset:    resq 1    ; Section Offset (8 bytes)
   377                              <3>         .size:      resq 1    ; Section Size (8 bytes)
   378                              <3>     ENDSTRUC
   379                              <3>     %endif
   380                              <3> 
   381                              <3> %endif
     6                              <2> 
     7                              <2> [BITS 64]
     8                              <2> 
     9 00001951 2D2D2D2D2D2D2D2D2D- <2> memory_physical_table db "-------------------------Physical Memory Table: %x-----------------------------\n", 0
     9 0000195A 2D2D2D2D2D2D2D2D2D- <2>
     9 00001963 2D2D2D2D2D2D2D5068- <2>
     9 0000196C 79736963616C204D65- <2>
     9 00001975 6D6F7279205461626C- <2>
     9 0000197E 653A2025782D2D2D2D- <2>
     9 00001987 2D2D2D2D2D2D2D2D2D- <2>
     9 00001990 2D2D2D2D2D2D2D2D2D- <2>
     9 00001999 2D2D2D2D2D2D2D5C6E- <2>
     9 000019A2 00                  <2>
    10 000019A3 2D2D2D2D2D2D2D2D2D- <2> memory_physical_usable db "-------------------------Physical Memory Usable: %x----------------------------\n", 0
    10 000019AC 2D2D2D2D2D2D2D2D2D- <2>
    10 000019B5 2D2D2D2D2D2D2D5068- <2>
    10 000019BE 79736963616C204D65- <2>
    10 000019C7 6D6F72792055736162- <2>
    10 000019D0 6C653A2025782D2D2D- <2>
    10 000019D9 2D2D2D2D2D2D2D2D2D- <2>
    10 000019E2 2D2D2D2D2D2D2D2D2D- <2>
    10 000019EB 2D2D2D2D2D2D2D5C6E- <2>
    10 000019F4 00                  <2>
    11 000019F5 546F74616C20506879- <2> memory_total_physical_usable_memory db "Total Physical Usable Meomry:%d\n", 0
    11 000019FE 736963616C20557361- <2>
    11 00001A07 626C65204D656F6D72- <2>
    11 00001A10 793A25645C6E00      <2>
    12                              <2> 
    13 00001A17 42697473206D617020- <2> memory_bits_map_addr    db "Bits map  addr:%x          ", 0
    13 00001A20 20616464723A257820- <2>
    13 00001A29 202020202020202020- <2>
    13 00001A32 00                  <2>
    14 00001A33 42697473206D617020- <2> memory_bits_map_size    db "Bits map  size:%x          ", 0
    14 00001A3C 2073697A653A257820- <2>
    14 00001A45 202020202020202020- <2>
    14 00001A4E 00                  <2>
    15 00001A4F 42697473206D617020- <2> memory_bits_map_count   db "Bits map count:%x          \n", 0
    15 00001A58 636F756E743A257820- <2>
    15 00001A61 202020202020202020- <2>
    15 00001A6A 5C6E00              <2>
    16                              <2> 
    17 00001A6D 506167657320202020- <2> memory_pages_addr       db "Pages     addr:%x          ", 0
    17 00001A76 20616464723A257820- <2>
    17 00001A7F 202020202020202020- <2>
    17 00001A88 00                  <2>
    18 00001A89 506167657320202020- <2> memory_pages_size       db "Pages     size:%x          ", 0
    18 00001A92 2073697A653A257820- <2>
    18 00001A9B 202020202020202020- <2>
    18 00001AA4 00                  <2>
    19 00001AA5 506167657320202020- <2> memory_pages_count      db "Pages    count:%x          \n", 0
    19 00001AAE 636F756E743A257820- <2>
    19 00001AB7 202020202020202020- <2>
    19 00001AC0 5C6E00              <2>
    20                              <2> 
    21 00001AC3 5A6F6E657320202020- <2> memory_zones_addr       db "Zones     addr:%x          ", 0
    21 00001ACC 20616464723A257820- <2>
    21 00001AD5 202020202020202020- <2>
    21 00001ADE 00                  <2>
    22 00001ADF 5A6F6E657320202020- <2> memory_zones_size       db "Zones     size:%x          ", 0
    22 00001AE8 2073697A653A257820- <2>
    22 00001AF1 202020202020202020- <2>
    22 00001AFA 00                  <2>
    23 00001AFB 5A6F6E657320202020- <2> memory_zones_count      db "Zones    count:%x          \n", 0
    23 00001B04 636F756E743A257820- <2>
    23 00001B0D 202020202020202020- <2>
    23 00001B16 5C6E00              <2>
    24                              <2> 
    25                              <2> 
    26                              <2> 
    27 00001B19 7A6F6E655F73746172- <2> zone_start_addr_msg db "zone_start_address:%x   ", 0
    27 00001B22 745F61646472657373- <2>
    27 00001B2B 3A257820202000      <2>
    28 00001B32 7A6F6E655F656E645F- <2> zone_end_addr_msg db "zone_end_address:%x   ", 0
    28 00001B3B 616464726573733A25- <2>
    28 00001B44 7820202000          <2>
    29 00001B49 7A6F6E655F6C656E67- <2> zone_length_msg db "zone_length:%x   ", 0
    29 00001B52 74683A257820202000  <2>
    30 00001B5B 70616765735F67726F- <2> pages_group_msg db "pages_group:%x   ", 0
    30 00001B64 75703A257820202000  <2>
    31 00001B6D 70616765735F6C656E- <2> pages_length_msg db "pages_length:%x\n", 0
    31 00001B76 6774683A25785C6E00  <2>
    32                              <2> 
    33                              <2> 
    34                              <2> 
    35 00001B7F 476C6F62616C20696E- <2> memory_global_info_length db "Global info length:%x\n", 0
    35 00001B88 666F206C656E677468- <2>
    35 00001B91 3A25785C6E00        <2>
    36                              <2> 
    37 00001B97 506879736963616C20- <2> memory_physical_address db "Physical address: %x", 0
    37 00001BA0 616464726573733A20- <2>
    37 00001BA9 257800              <2>
    38 00001BAC 202020202050687973- <2> memory_physical_length db "     Physical length: %x", 0
    38 00001BB5 6963616C206C656E67- <2>
    38 00001BBE 74683A20257800      <2>
    39 00001BC5 202020202050687973- <2> memory_physical_type db "     Physical type: %d\n", 0
    39 00001BCE 6963616C2074797065- <2>
    39 00001BD7 3A2025645C6E00      <2>
    40                              <2> 
    41                              <2> 
    42                              <2> 
    43                              <2> 
    44 00001BDE 476C6F62616C5F4352- <2> cr3_msg1 db "Global_CR3:%x", 0
    44 00001BE7 333A257800          <2>
    45 00001BEC 2A476C6F62616C5F43- <2> cr3_msg2 db "*Global_CR3:%x", 0
    45 00001BF5 52333A257800        <2>
    46 00001BFB 2A2A476C6F62616C5F- <2> cr3_msg3 db "**Global_CR3:%x\n", 0
    46 00001C04 4352333A25785C6E00  <2>
    47                              <2> 
    48                              <2> 
    49 00001C0D 616C6C6F635F706167- <2> alloc_pages_error_msg db "alloc_pages error zone_select index", 0
    49 00001C16 6573206572726F7220- <2>
    49 00001C1F 7A6F6E655F73656C65- <2>
    49 00001C28 637420696E64657800  <2>
    50 00001C31 00                  <2> null_str db 0
    51                              <2> 
    52 00001C32 0000000000000000    <2> Global_CR3: dq 0
    53                              <2> 
    54                              <2> 
    55 00001C3A 0000000000000000    <2> memory_hex_messages: dq 0
    56 00001C42 0000000000000000    <2> meomry_decimal_messages: dq 0
    57                              <2> 
    58                              <2> ; Define zone selection constants
    59                              <2> %define ZONE_DMA      0
    60                              <2> %define ZONE_NORMAL   1
    61                              <2> %define ZONE_UNMAPED  2
    62                              <2> 
    63 00001C4A 0000000000000000    <2> ZONE_DMA_INDEX:dq 0
    64 00001C52 0000000000000000    <2> ZONE_NORMAL_INDEX:dq 0
    65 00001C5A 0000000000000000    <2> ZONE_UNMAPED_INDEX:dq 0
    66                              <2> 
    67                              <2> ; Page attribute flags
    68                              <2> %define PG_PTable_Maped    (1 << 0)    ; Page table mapped flag
    69                              <2> %define PG_Kernel_Init     (1 << 1)    ; Kernel initialization flag  
    70                              <2> %define PG_Referenced      (1 << 2)    ; Page referenced flag
    71                              <2> %define PG_Dirty          (1 << 3)    ; Page dirty flag
    72                              <2> %define PG_Active         (1 << 4)    ; Page active flag
    73                              <2> %define PG_Up_To_Date     (1 << 5)    ; Page up to date flag
    74                              <2> %define PG_Device         (1 << 6)    ; Device page flag
    75                              <2> %define PG_Kernel         (1 << 7)    ; Kernel page flag
    76                              <2> %define PG_K_Share_To_U   (1 << 8)    ; Kernel shared to user flag
    77                              <2> %define PG_Slab           (1 << 9)    ; Slab allocator page flag
    78                              <2> 
    79                              <2> ; Add these constants at the top of the file
    80                              <2> %define MEMORY_PAGE_OFFSET	0xffff800000000000
    81                              <2> 
    82                              <2> ; Page size shifts
    83                              <2> %define MEMORY_PAGE_GDT_SHIFT	39
    84                              <2> %define MEMORY_PAGE_1G_SHIFT	30
    85                              <2> %define MEMORY_PAGE_2M_SHIFT	21
    86                              <2> %define MEMORY_PAGE_4K_SHIFT	12
    87                              <2> 
    88                              <2> ; Page sizes
    89                              <2> %define MEMORY_PAGE_2M_SIZE	(1 << MEMORY_PAGE_2M_SHIFT)
    90                              <2> %define MEMORY_PAGE_4K_SIZE	(1 << MEMORY_PAGE_4K_SHIFT)
    91                              <2> 
    92                              <2> ; Page masks for alignment
    93                              <2> %define MEMORY_PAGE_2M_MASK	(~ (MEMORY_PAGE_2M_SIZE - 1))
    94                              <2> %define MEMORY_PAGE_4K_MASK	(~ (MEMORY_PAGE_4K_SIZE - 1))
    95                              <2> 
    96                              <2> ; Address translation macros
    97                              <2> %macro Virt_To_Phy 1
    98                              <2>     ; Input: Virtual address in %1
    99                              <2>     ; Output: Physical address in %1
   100                              <2>     push %1
   101                              <2>     mov %1,MEMORY_PAGE_OFFSET
   102                              <2>     sub qword[rsp],%1
   103                              <2>     pop %1
   104                              <2> %endmacro
   105                              <2> 
   106                              <2> %macro Phy_To_Virt 1
   107                              <2>     ; Input: Physical address in %1
   108                              <2>     ; Output: Virtual address in %1
   109                              <2>     push %1
   110                              <2>     mov %1,MEMORY_PAGE_OFFSET
   111                              <2>     add qword[rsp],%1
   112                              <2>     pop %1
   113                              <2> %endmacro
   114                              <2> 
   115                              <2> %macro Virt_To_2M_Page 2
   116                              <2>     ; Input: Virtual address in %1
   117                              <2>     ; Output: Page structure pointer in %2
   118                              <2>     push rax
   119                              <2>     mov %2, %1
   120                              <2>     Virt_To_Phy %2
   121                              <2>     shr %2, MEMORY_PAGE_2M_SHIFT
   122                              <2>     mov rax, 40                            ; size of page_info struct
   123                              <2>     mul %2
   124                              <2>     mov %2, qword [rel global_memory_info_ptr + global_memory_info.pages_addr]
   125                              <2>     add %2, rax
   126                              <2>     pop rax
   127                              <2> %endmacro
   128                              <2> 
   129                              <2> %macro Phy_To_2M_Page 2
   130                              <2>     ; Input: Physical address in %1
   131                              <2>     ; Output: Page structure pointer in %2
   132                              <2>     push rax
   133                              <2>     mov %2, %1
   134                              <2>     shr %2, MEMORY_PAGE_2M_SHIFT
   135                              <2>     mov rax, 40                            ; size of page_info struct
   136                              <2>     mul %2
   137                              <2>     mov %2, qword [rel global_memory_info_ptr + global_memory_info.pages_addr]
   138                              <2>     add %2, rax
   139                              <2>     pop rax
   140                              <2> %endmacro
   141                              <2> 
   142                              <2> %macro MEMORY_PAGE_4K_ALIGN 1
   143                              <2>     ; Align the given address (argument 1) to the nearest 4K boundary
   144                              <2>     ; Formula: ((addr + PAGE_4K_SIZE - 1) & PAGE_4K_MASK)
   145                              <2> 
   146                              <2>     ; mov qword[rsp],%1
   147                              <2>     push %1
   148                              <2>     add qword[rsp],MEMORY_PAGE_4K_SIZE - 1
   149                              <2>     and qword[rsp],MEMORY_PAGE_4K_MASK
   150                              <2>     pop %1
   151                              <2>     ; mov %1,qword[rsp]
   152                              <2>     ; pop %1
   153                              <2> 
   154                              <2>     ; push %1
   155                              <2>     ; push rax
   156                              <2>     ; mov rax, %1                ; Load the address into rax
   157                              <2>     ; add rax, MEMORY_PAGE_4K_SIZE - 1     ; Add 4K size - 1 (PAGE_4K_SIZE - 1)
   158                              <2>     ; and rax, MEMORY_PAGE_4K_MASK  ; Apply the 4K mask (PAGE_4K_MASK)
   159                              <2>     ; mov %1, rax                ; Store the aligned address back
   160                              <2>     ; pop rax
   161                              <2>     ; pop %1
   162                              <2>     %endmacro
   163                              <2> 
   164                              <2> %macro MEMORY_PAGE_2M_ALIGN 1
   165                              <2>     ; Align the given address (argument 1) to the nearest 2M boundary
   166                              <2>     ; Formula: ((addr + PAGE_2M_SIZE - 1) & PAGE_2M_MASK)
   167                              <2>     ; push %1
   168                              <2> 
   169                              <2> 
   170                              <2>     push %1
   171                              <2>     add qword[rsp],MEMORY_PAGE_2M_SIZE - 1
   172                              <2>     and qword[rsp],MEMORY_PAGE_2M_MASK
   173                              <2>     pop %1
   174                              <2> 
   175                              <2>     ; mov qword[rsp-8],%1
   176                              <2>     ; add qword[rsp-8],MEMORY_PAGE_2M_SIZE - 1
   177                              <2>     ; and qword[rsp-8],MEMORY_PAGE_2M_MASK
   178                              <2>     ; mov %1,qword[rsp-8]
   179                              <2> 
   180                              <2>     ; push rax
   181                              <2>     ; mov rax, %1                ; Load the address into rax
   182                              <2>     ; add rax, MEMORY_PAGE_2M_SIZE - 1     ; Add 2M size - 1 (PAGE_2M_SIZE - 1)
   183                              <2>     ; and rax, MEMORY_PAGE_2M_MASK  ; Apply the 2M mask (PAGE_2M_MASK)
   184                              <2>     ; mov %1, rax                ; Store the aligned address back
   185                              <2>     ; pop rax
   186                              <2>     ; pop %1
   187                              <2>     %endmacro
   188                              <2> 
   189                              <2> struc global_memory_info
   190 00000000 ????????????????    <2>     .e820_addr:    resq 1  ; 0  32 e820 address
   191 00000008 ????????????????    <2>     .e820_size:    resq 1  ; 8  e820 usable meomory zone size
   192 00000010 ????????????????    <2>     .e820_count:   resq 1  ; 16 e820 usable meomory zone count
   193                              <2> 
   194 00000018 ????????????????    <2>     .bitmap_addr:  resq 1  ; 24 bitmap address
   195 00000020 ????????????????    <2>     .bitmap_size:  resq 1  ; 32 bitmap size
   196 00000028 ????????????????    <2>     .bitmap_count: resq 1  ; 40 bitmap count
   197                              <2> 
   198 00000030 ????????????????    <2>     .pages_addr:   resq 1  ; 48 pages address
   199 00000038 ????????????????    <2>     .pages_size:   resq 1  ; 56 pages size
   200 00000040 ????????????????    <2>     .pages_count:  resq 1  ; 64 pages count
   201                              <2> 
   202 00000048 ????????????????    <2>     .zones_addr:   resq 1  ; 72 zones address
   203 00000050 ????????????????    <2>     .zones_size:   resq 1  ; 80 zones size
   204 00000058 ????????????????    <2>     .zones_count:  resq 1  ; 88 zones count
   205                              <2> 
   206 00000060 ????????????????    <2>     .end_of_global_memory_info: resq 1  ; 96 end of global memory info
   207                              <2>     endstruc
   208                              <2> global_memory_info_ptr:;
   209                              <2>     istruc global_memory_info
   210                              <2> 
   211 00001C62 0000000000000000    <2>         at global_memory_info.e820_addr,    dq 0  ; 0  32 e820 address
   212 00001C6A 0000000000000000    <2>         at global_memory_info.e820_size,    dq 0  ; 8  e820 all meomory zone size
   213 00001C72 0000000000000000    <2>         at global_memory_info.e820_count,   dq 0  ; 16 e820 usable meomory zone count
   214                              <2> 
   215 00001C7A 0000000000000000    <2>         at global_memory_info.bitmap_addr,  dq 0  ; 24 bitmap address
   216 00001C82 0000000000000000    <2>         at global_memory_info.bitmap_size,  dq 0  ; 32 bitmap size
   217 00001C8A 0000000000000000    <2>         at global_memory_info.bitmap_count, dq 0  ; 40 bitmap count
   218                              <2> 
   219 00001C92 0000000000000000    <2>         at global_memory_info.pages_addr,   dq 0  ; 48 pages address
   220 00001C9A 0000000000000000    <2>         at global_memory_info.pages_size,   dq 0  ; 56 pages size
   221 00001CA2 0000000000000000    <2>         at global_memory_info.pages_count,  dq 0  ; 64 pages count
   222                              <2> 
   223 00001CAA 0000000000000000    <2>         at global_memory_info.zones_addr,   dq 0  ; 72 zones address
   224 00001CB2 0000000000000000    <2>         at global_memory_info.zones_size,   dq 0  ; 80 zones size
   225 00001CBA 0000000000000000    <2>         at global_memory_info.zones_count,  dq 0  ; 88 zones count
   226 00001CC2 0000000000000000    <2>         at global_memory_info.end_of_global_memory_info, dq 0  ; 96 end of global memory info
   227                              <2>     iend
   228                              <2> 
   229                              <2> struc e820_memory_info
   230 00000000 ????????            <2>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   231 00000004 ????????            <2>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   232 00000008 ????????            <2>     .length_low               resd 1    ; Lower 32 bits of the length
   233 0000000C ????????            <2>     .length_high              resd 1    ; Upper 32 bits of the length
   234 00000010 ????????            <2>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   235                              <2>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   236                              <2>     endstruc
   237                              <2> 
   238                              <2> struc page_info
   239 00000000 ????????????????    <2>     .zone_info_address:     resq 1  ; 0  parent zone_info_address
   240 00000008 ????????????????    <2>     .physical_address:      resq 1  ; 8  page start physical address
   241                              <2> 
   242 00000010 ????????????????    <2>     .page_attribute:        resq 1  ; 16 page attribute
   243 00000018 ????????????????    <2>     .reference_count:       resq 1  ; 24 reference count for multi map
   244                              <2> 
   245 00000020 ????????????????    <2>     .age:                   resq 1  ; 32
   246                              <2> 
   247                              <2>  endstruc
   248                              <2> 
   249                              <2> struc zone_info
   250 00000000 ????????????????    <2>     .pages_group:                   resq 1  ; 0  zone pages start address
   251 00000008 ????????????????    <2>     .pages_length:                  resq 1  ; 8  zone pages length
   252                              <2> 
   253 00000010 ????????????????    <2>     .zone_start_address:            resq 1  ; 16 zone_start_address
   254 00000018 ????????????????    <2>     .zone_end_address:              resq 1  ; 24 zone_end_address
   255 00000020 ????????????????    <2>     .zone_length:                   resq 1  ; 32 zone_length
   256 00000028 ????????????????    <2>     .zone_attribute:                resq 1  ; 40 zone_attribute
   257                              <2> 
   258 00000030 ????????????????    <2>     .global_memory_info_address:    resq 1  ; 48 global_memory_info_address
   259                              <2> 
   260 00000038 ????????????????    <2>     .page_using_count:              resq 1  ; 56 page_using_count
   261 00000040 ????????????????    <2>     .page_free_count:               resq 1  ; 64 page_free_count
   262 00000048 ????????????????    <2>     .total_pages_link:              resq 1  ; 72 total_pages_link
   263                              <2> 
   264                              <2>  endstruc
   265                              <2> memory_init:;input:kernel_end
   266                              <2>     prolog 2;
   234 00001CCA 55                  <3>  push rbp
   235 00001CCB 4889E5              <3>  mov rbp, rsp
   236                              <3> 
   237                              <3> 
   238 00001CCE 488945F8            <3>  mov [rbp-8],rax
   239 00001CD2 B802000000          <3>  mov rax, %1
   240 00001CD7 4883C00F            <3>  add rax, 15
   241 00001CDB 4883E0F0            <3>  and rax, ~15
   242 00001CDF 4829C4              <3>  sub rsp, rax
   243 00001CE2 488B45F8            <3>  mov rax,[rbp-8]
   244                              <3> 
   245                              <3>  pushallq
   288 00001CE6 50                  <4>  push rax
   289 00001CE7 53                  <4>  push rbx
   290 00001CE8 51                  <4>  push rcx
   291 00001CE9 52                  <4>  push rdx
   292 00001CEA 56                  <4>  push rsi
   293 00001CEB 57                  <4>  push rdi
   294 00001CEC 4150                <4>  push r8
   295 00001CEE 4151                <4>  push r9
   296 00001CF0 4152                <4>  push r10
   297 00001CF2 4153                <4>  push r11
   298 00001CF4 4154                <4>  push r12
   299 00001CF6 4155                <4>  push r13
   300 00001CF8 4156                <4>  push r14
   301 00001CFA 4157                <4>  push r15
   246                              <3> 
   247                              <3> 
   248                              <3> 
   249                              <3> 
   250                              <3> 
   267                              <2> 
   268                              <2>     get_param rsi, 1
   262 00001CFC 488B7510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   269                              <2>     function parse_e820
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00001D00 4883EC00            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00001D04 E8DB0F0000          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00001D09 4883C400            <4>  add rsp, total_space
   196                              <3> 
   270                              <2> 
   271                              <2>     ;Get total usable memory
   272 00001D0D 488B0D56FFFFFF      <2>         mov rcx, qword [rel global_memory_info_ptr + global_memory_info.e820_size]
   273 00001D14 41BE00000000        <2>         mov r14,0
   274 00001D1A 41B800000000        <2>         mov r8,0
   275 00001D20 41BD00000000        <2>         mov r13,0
   276                              <2>         .loop_e820_table:
   277 00001D26 4831C0              <2>             xor rax,rax
   278 00001D29 488B1D32FFFFFF      <2>             mov rbx,qword [rel global_memory_info_ptr + global_memory_info.e820_addr]
   279 00001D30 4C01F3              <2>             add rbx,r14
   280                              <2> 
   281 00001D33 8B4310              <2>             mov eax,dword [rbx + e820_memory_info.type]
   282                              <2> 
   283 00001D36 4883F801            <2>             cmp rax,1
   284 00001D3A 7536                <2>             jne .loop_e820_table_continue
   285 00001D3C 488B13              <2>             mov rdx,qword [rbx]
   286 00001D3F 4989D0              <2>             mov r8,rdx
   287                              <2>             MEMORY_PAGE_2M_ALIGN rdx
   165                              <3> 
   166                              <3> 
   167                              <3> 
   168                              <3> 
   169                              <3> 
   170 00001D42 52                  <3>  push %1
   171 00001D43 48810424FFFF1F00    <3>  add qword[rsp],MEMORY_PAGE_2M_SIZE - 1
   172 00001D4B 488124240000E0FF    <3>  and qword[rsp],MEMORY_PAGE_2M_MASK
   173 00001D53 5A                  <3>  pop %1
   174                              <3> 
   175                              <3> 
   176                              <3> 
   177                              <3> 
   178                              <3> 
   179                              <3> 
   180                              <3> 
   181                              <3> 
   182                              <3> 
   183                              <3> 
   184                              <3> 
   185                              <3> 
   186                              <3> 
   288 00001D54 488B4308            <2>             mov rax,qword [rbx + e820_memory_info.length_low]
   289 00001D58 4C01C0              <2>             add rax,r8
   290 00001D5B 48C1E815            <2>             shr rax,MEMORY_PAGE_2M_SHIFT
   291 00001D5F 48C1E015            <2>             shl rax,MEMORY_PAGE_2M_SHIFT
   292 00001D63 4839D0              <2>             cmp rax,rdx
   293 00001D66 7E0A                <2>             jle .loop_e820_table_continue
   294 00001D68 4829D0              <2>             sub rax,rdx
   295 00001D6B 48C1E815            <2>             shr rax,MEMORY_PAGE_2M_SHIFT
   296 00001D6F 4901C5              <2>             add r13,rax
   297                              <2> 
   298                              <2>             .loop_e820_table_continue:
   299 00001D72 4983C614            <2>                 add r14,20
   300 00001D76 E2AE                <2>                 loop .loop_e820_table
   301 00001D78 56                  <2>         push rsi
   302                              <2> 
   303 00001D79 4C892DC2FEFFFF      <2>         mov [rel meomry_decimal_messages], r13
   304 00001D80 488D356EFCFFFF      <2>         lea rsi, [rel memory_total_physical_usable_memory]
   305 00001D87 488D15B4FEFFFF      <2>         lea rdx, [rel meomry_decimal_messages]
   306                              <2>         function printk,1,rsi,rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00001D8E 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00001D92 56                  <4>  push qword %2
   183 00001D93 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00001D96 52                  <4>  push qword %2
   183 00001D97 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00001D9B E867EBFFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00001DA0 4883C420            <4>  add rsp, total_space
   196                              <3> 
   307 00001DA4 5E                  <2>         pop rsi
   308                              <2> 
   309                              <2>     ;Bits map init -->Get all zone physical memory to bitmap
   310 00001DA5 488B0DBEFEFFFF      <2>         mov rcx, qword [rel global_memory_info_ptr + global_memory_info.e820_size]
   311 00001DAC 4883E901            <2>         sub rcx,1
   312 00001DB0 B814000000          <2>         mov rax,20
   313 00001DB5 48F7E1              <2>         mul rcx
   314 00001DB8 488B1DA3FEFFFF      <2>         mov rbx,qword [rel global_memory_info_ptr + global_memory_info.e820_addr]
   315 00001DBF 4801C3              <2>         add rbx,rax
   316                              <2> 
   317 00001DC2 4831C0              <2>         xor rax,rax
   318 00001DC5 4831C9              <2>         xor rcx,rcx
   319 00001DC8 4831D2              <2>         xor rdx,rdx
   320 00001DCB 488B03              <2>         mov rax,qword [rbx]
   321 00001DCE 8B4B10              <2>         mov ecx,dword [rbx + e820_memory_info.type]
   322 00001DD1 488B5308            <2>         mov rdx,qword [rbx + e820_memory_info.length_low]
   323 00001DD5 4801D0              <2>         add rax,rdx;total memory contain unusable and empty block
   324                              <2>         ; inc rax
   325                              <2>         MEMORY_PAGE_4K_ALIGN rsi
   143                              <3> 
   144                              <3> 
   145                              <3> 
   146                              <3> 
   147 00001DD8 56                  <3>  push %1
   148 00001DD9 48810424FF0F0000    <3>  add qword[rsp],MEMORY_PAGE_4K_SIZE - 1
   149 00001DE1 4881242400F0FFFF    <3>  and qword[rsp],MEMORY_PAGE_4K_MASK
   150 00001DE9 5E                  <3>  pop %1
   151                              <3> 
   152                              <3> 
   153                              <3> 
   154                              <3> 
   155                              <3> 
   156                              <3> 
   157                              <3> 
   158                              <3> 
   159                              <3> 
   160                              <3> 
   161                              <3> 
   326 00001DEA 48893589FEFFFF      <2>         mov qword [rel global_memory_info_ptr + global_memory_info.bitmap_addr],rsi
   327 00001DF1 48C1E815            <2>         shr rax,MEMORY_PAGE_2M_SHIFT
   328 00001DF5 48890586FEFFFF      <2>         mov qword [rel global_memory_info_ptr + global_memory_info.bitmap_size],rax
   329 00001DFC 4889C1              <2>         mov rcx,rax
   330 00001DFF 4883C03F            <2>         add rax, 63                     ; Add 63 (bits_per_long - 1)
   331 00001E03 48C1E806            <2>         shr rax, 6                      ; Divide by 64 (bits per long)
   332 00001E07 48C1E003            <2>         shl rax, 3                      ; Multiply by 8 (bytes per long)
   333 00001E0B 4883E0F8            <2>         and rax, ~7                     ; Align to 8 bytes
   334                              <2> 
   335 00001E0F 48890574FEFFFF      <2>         mov qword [rel global_memory_info_ptr + global_memory_info.bitmap_count], rax ;bitmap bytes
   336                              <2> 
   337                              <2>         function kmemset,1,rsi,0xff,rax
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00001E16 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00001E1A 56                  <4>  push qword %2
   183 00001E1B 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00001E1E 68FF000000          <4>  push qword %2
   183 00001E23 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00001E27 50                  <4>  push qword %2
   183 00001E28 8F442410            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00001E2C E8990B0000          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00001E31 4883C420            <4>  add rsp, total_space
   196                              <3> 
   338                              <2> 
   339                              <2> 
   340                              <2> 
   341                              <2>     ;Pages init-->-->Get all zone physical memory to pages struct
   342 00001E35 4801C6              <2>         add rsi,rax
   343                              <2>         MEMORY_PAGE_4K_ALIGN rsi
   143                              <3> 
   144                              <3> 
   145                              <3> 
   146                              <3> 
   147 00001E38 56                  <3>  push %1
   148 00001E39 48810424FF0F0000    <3>  add qword[rsp],MEMORY_PAGE_4K_SIZE - 1
   149 00001E41 4881242400F0FFFF    <3>  and qword[rsp],MEMORY_PAGE_4K_MASK
   150 00001E49 5E                  <3>  pop %1
   151                              <3> 
   152                              <3> 
   153                              <3> 
   154                              <3> 
   155                              <3> 
   156                              <3> 
   157                              <3> 
   158                              <3> 
   159                              <3> 
   160                              <3> 
   161                              <3> 
   344 00001E4A 48893541FEFFFF      <2>         mov qword [rel global_memory_info_ptr + global_memory_info.pages_addr],rsi
   345 00001E51 4889C8              <2>         mov rax, rcx
   346 00001E54 48890D3FFEFFFF      <2>         mov qword [rel global_memory_info_ptr + global_memory_info.pages_size],rcx
   347                              <2> 
   348                              <2>             ; Calculate pages_count (total bytes needed for page structures)
   349 00001E5B 4889C8              <2>         mov rax, rcx                    ; Number of pages
   350 00001E5E BB28000000          <2>         mov rbx, 40        ; Size of page_info struct (40 bytes)
   351 00001E63 48F7E3              <2>         mul rbx                         ; rax = number of pages * size of page_info
   352 00001E66 4883C007            <2>         add rax, 7                      ; Add (sizeof(long) - 1)
   353 00001E6A 4883E0F8            <2>         and rax, ~7                     ; Align to 8 bytes
   354 00001E6E 4889052DFEFFFF      <2>         mov qword [rel global_memory_info_ptr + global_memory_info.pages_count], rax
   355                              <2> 
   356                              <2>         function kmemset, 1, rsi, 0, rax  ; Zero out the entire pages array
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00001E75 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00001E79 56                  <4>  push qword %2
   183 00001E7A 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00001E7D 6A00                <4>  push qword %2
   183 00001E7F 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00001E83 50                  <4>  push qword %2
   183 00001E84 8F442410            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00001E88 E83D0B0000          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00001E8D 4883C420            <4>  add rsp, total_space
   196                              <3> 
   357                              <2> 
   358                              <2> 
   359                              <2>     ;zones init -->
   360 00001E91 4801C6              <2>         add rsi, rax                    ; Add pages array size to current address
   361                              <2>         MEMORY_PAGE_4K_ALIGN rsi        ; Align zones address to 4K boundary
   143                              <3> 
   144                              <3> 
   145                              <3> 
   146                              <3> 
   147 00001E94 56                  <3>  push %1
   148 00001E95 48810424FF0F0000    <3>  add qword[rsp],MEMORY_PAGE_4K_SIZE - 1
   149 00001E9D 4881242400F0FFFF    <3>  and qword[rsp],MEMORY_PAGE_4K_MASK
   150 00001EA5 5E                  <3>  pop %1
   151                              <3> 
   152                              <3> 
   153                              <3> 
   154                              <3> 
   155                              <3> 
   156                              <3> 
   157                              <3> 
   158                              <3> 
   159                              <3> 
   160                              <3> 
   161                              <3> 
   362 00001EA6 488935FDFDFFFF      <2>         mov qword [rel global_memory_info_ptr + global_memory_info.zones_addr], rsi
   363                              <2>         
   364                              <2>         ; Set zones_size to 0
   365 00001EAD 4831C0              <2>         xor rax, rax
   366 00001EB0 488905FBFDFFFF      <2>         mov qword [rel global_memory_info_ptr + global_memory_info.zones_size], rax
   367                              <2>         
   368                              <2>         ; Calculate zones_count (5 zones * sizeof(zone_info) aligned to 8 bytes)
   369 00001EB7 B80F000000          <2>         mov rax, 0xf                      ; Number of zones
   370 00001EBC BB50000000          <2>         mov rbx, 80                     ; Size of zone_info struct (10 * 8 = 80 bytes)
   371 00001EC1 48F7E3              <2>         mul rbx                         ; rax = 5 * sizeof(zone_info)
   372 00001EC4 4883C007            <2>         add rax, 7                      ; Add (sizeof(long) - 1)
   373 00001EC8 4883E0F8            <2>         and rax, ~7                     ; Align to 8 bytes
   374 00001ECC 488905E7FDFFFF      <2>         mov qword [rel global_memory_info_ptr + global_memory_info.zones_count], rax
   375                              <2>         
   376                              <2>         ; Zero out the zones memory
   377                              <2>         function kmemset, 1, rsi, 0, rax  ; Zero initialize zones array
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00001ED3 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00001ED7 56                  <4>  push qword %2
   183 00001ED8 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00001EDB 6A00                <4>  push qword %2
   183 00001EDD 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00001EE1 50                  <4>  push qword %2
   183 00001EE2 8F442410            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00001EE6 E8DF0A0000          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00001EEB 4883C420            <4>  add rsp, total_space
   196                              <3> 
   378                              <2> 
   379                              <2> 
   380                              <2>     ;print global memory info
   381 00001EEF 4C8B2D84FDFFFF      <2>         mov r13,qword [rel global_memory_info_ptr + global_memory_info.bitmap_addr]
   382 00001EF6 4C892D3DFDFFFF      <2>         mov [rel memory_hex_messages], r13
   383 00001EFD 488D3513FBFFFF      <2>         lea rsi, [rel memory_bits_map_addr]
   384 00001F04 488D152FFDFFFF      <2>         lea rdx, [rel memory_hex_messages]
   385                              <2>         function printk,1,rsi,rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00001F0B 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00001F0F 56                  <4>  push qword %2
   183 00001F10 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00001F13 52                  <4>  push qword %2
   183 00001F14 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00001F18 E8EAE9FFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00001F1D 4883C420            <4>  add rsp, total_space
   196                              <3> 
   386                              <2> 
   387 00001F21 4C8B2D5AFDFFFF      <2>         mov r13,qword [rel global_memory_info_ptr + global_memory_info.bitmap_size]
   388 00001F28 4C892D0BFDFFFF      <2>         mov [rel memory_hex_messages], r13
   389 00001F2F 488D35FDFAFFFF      <2>         lea rsi, [rel memory_bits_map_size]
   390 00001F36 488D15FDFCFFFF      <2>         lea rdx, [rel memory_hex_messages]
   391                              <2>         function printk,1,rsi,rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00001F3D 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00001F41 56                  <4>  push qword %2
   183 00001F42 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00001F45 52                  <4>  push qword %2
   183 00001F46 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00001F4A E8B8E9FFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00001F4F 4883C420            <4>  add rsp, total_space
   196                              <3> 
   392                              <2> 
   393 00001F53 4C8B2D30FDFFFF      <2>         mov r13,qword [rel global_memory_info_ptr + global_memory_info.bitmap_count]
   394 00001F5A 4C892DD9FCFFFF      <2>         mov [rel memory_hex_messages], r13
   395 00001F61 488D35E7FAFFFF      <2>         lea rsi, [rel memory_bits_map_count]
   396 00001F68 488D15CBFCFFFF      <2>         lea rdx, [rel memory_hex_messages]
   397                              <2>         function printk,1,rsi,rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00001F6F 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00001F73 56                  <4>  push qword %2
   183 00001F74 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00001F77 52                  <4>  push qword %2
   183 00001F78 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00001F7C E886E9FFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00001F81 4883C420            <4>  add rsp, total_space
   196                              <3> 
   398                              <2> 
   399                              <2> 
   400                              <2> 
   401 00001F85 4C8B2D06FDFFFF      <2>         mov r13,qword [rel global_memory_info_ptr + global_memory_info.pages_addr]
   402 00001F8C 4C892DA7FCFFFF      <2>         mov [rel memory_hex_messages], r13
   403 00001F93 488D35D3FAFFFF      <2>         lea rsi, [rel memory_pages_addr]
   404 00001F9A 488D1599FCFFFF      <2>         lea rdx, [rel memory_hex_messages]
   405                              <2>         function printk,1,rsi,rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00001FA1 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00001FA5 56                  <4>  push qword %2
   183 00001FA6 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00001FA9 52                  <4>  push qword %2
   183 00001FAA 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00001FAE E854E9FFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00001FB3 4883C420            <4>  add rsp, total_space
   196                              <3> 
   406                              <2> 
   407 00001FB7 4C8B2DDCFCFFFF      <2>         mov r13,qword [rel global_memory_info_ptr + global_memory_info.pages_size]
   408 00001FBE 4C892D75FCFFFF      <2>         mov [rel memory_hex_messages], r13
   409 00001FC5 488D35BDFAFFFF      <2>         lea rsi, [rel memory_pages_size]
   410 00001FCC 488D1567FCFFFF      <2>         lea rdx, [rel memory_hex_messages]
   411                              <2>         function printk,1,rsi,rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00001FD3 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00001FD7 56                  <4>  push qword %2
   183 00001FD8 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00001FDB 52                  <4>  push qword %2
   183 00001FDC 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00001FE0 E822E9FFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00001FE5 4883C420            <4>  add rsp, total_space
   196                              <3> 
   412                              <2> 
   413 00001FE9 4C8B2DB2FCFFFF      <2>         mov r13,qword [rel global_memory_info_ptr + global_memory_info.pages_count]
   414 00001FF0 4C892D43FCFFFF      <2>         mov [rel memory_hex_messages], r13
   415 00001FF7 488D35A7FAFFFF      <2>         lea rsi, [rel memory_pages_count]
   416 00001FFE 488D1535FCFFFF      <2>         lea rdx, [rel memory_hex_messages]
   417                              <2>         function printk,1,rsi,rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00002005 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00002009 56                  <4>  push qword %2
   183 0000200A 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 0000200D 52                  <4>  push qword %2
   183 0000200E 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00002012 E8F0E8FFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00002017 4883C420            <4>  add rsp, total_space
   196                              <3> 
   418                              <2> 
   419                              <2> 
   420                              <2> 
   421 0000201B 4C8B2D88FCFFFF      <2>         mov r13,qword [rel global_memory_info_ptr + global_memory_info.zones_addr]
   422 00002022 4C892D11FCFFFF      <2>         mov [rel memory_hex_messages], r13
   423 00002029 488D3593FAFFFF      <2>         lea rsi, [rel memory_zones_addr]
   424 00002030 488D1503FCFFFF      <2>         lea rdx, [rel memory_hex_messages]
   425                              <2>         function printk,1,rsi,rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00002037 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 0000203B 56                  <4>  push qword %2
   183 0000203C 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 0000203F 52                  <4>  push qword %2
   183 00002040 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00002044 E8BEE8FFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00002049 4883C420            <4>  add rsp, total_space
   196                              <3> 
   426                              <2> 
   427 0000204D 4C8B2D5EFCFFFF      <2>         mov r13,qword [rel global_memory_info_ptr + global_memory_info.zones_size]
   428 00002054 4C892DDFFBFFFF      <2>         mov [rel memory_hex_messages], r13
   429 0000205B 488D357DFAFFFF      <2>         lea rsi, [rel memory_zones_size]
   430 00002062 488D15D1FBFFFF      <2>         lea rdx, [rel memory_hex_messages]
   431                              <2>         function printk,1,rsi,rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00002069 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 0000206D 56                  <4>  push qword %2
   183 0000206E 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00002071 52                  <4>  push qword %2
   183 00002072 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00002076 E88CE8FFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 0000207B 4883C420            <4>  add rsp, total_space
   196                              <3> 
   432                              <2> 
   433 0000207F 4C8B2D34FCFFFF      <2>         mov r13,qword [rel global_memory_info_ptr + global_memory_info.zones_count]
   434 00002086 4C892DADFBFFFF      <2>         mov [rel memory_hex_messages], r13
   435 0000208D 488D3567FAFFFF      <2>         lea rsi, [rel memory_zones_count]
   436 00002094 488D159FFBFFFF      <2>         lea rdx, [rel memory_hex_messages]
   437                              <2>         function printk,1,rsi,rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 0000209B 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 0000209F 56                  <4>  push qword %2
   183 000020A0 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 000020A3 52                  <4>  push qword %2
   183 000020A4 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 000020A8 E85AE8FFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 000020AD 4883C420            <4>  add rsp, total_space
   196                              <3> 
   438                              <2> 
   439                              <2> 
   440                              <2> 
   441                              <2> 
   442                              <2> 
   443                              <2> 
   444                              <2>     ;Loop through e820 entries to initialize zones
   445 000020B1 488B0DB2FBFFFF      <2>         mov rcx, qword [rel global_memory_info_ptr + global_memory_info.e820_size]
   446 000020B8 4D31F6              <2>         xor r14, r14                    ; i = 0 (e820 entry index)
   447 000020BB 4C8B3DE8FBFFFF      <2>         mov r15, qword [rel global_memory_info_ptr + global_memory_info.zones_addr] ; zones base address
   448                              <2> 
   449                              <2>         .loop_e820_zones:
   450 000020C2 51                  <2>             push rcx
   451 000020C3 488B1D98FBFFFF      <2>             mov rbx, qword [rel global_memory_info_ptr + global_memory_info.e820_addr]
   452 000020CA 4C01F3              <2>             add rbx, r14                    ; current e820 entry
   453                              <2> 
   454                              <2>             ; Check if type == 1 (usable memory)
   455 000020CD 8B4310              <2>             mov eax, dword [rbx + e820_memory_info.type]
   456 000020D0 83F801              <2>             cmp eax, 1
   457 000020D3 0F8513010000        <2>             jne .continue_e820_loop
   458                              <2> 
   459                              <2>             ; Calculate start address (PAGE_2M_ALIGN)
   460 000020D9 488B03              <2>             mov rax, qword [rbx]           ; e820 entry base address
   461 000020DC 50                  <2>             push rax
   462                              <2>             MEMORY_PAGE_2M_ALIGN rax
   165                              <3> 
   166                              <3> 
   167                              <3> 
   168                              <3> 
   169                              <3> 
   170 000020DD 50                  <3>  push %1
   171 000020DE 48810424FFFF1F00    <3>  add qword[rsp],MEMORY_PAGE_2M_SIZE - 1
   172 000020E6 488124240000E0FF    <3>  and qword[rsp],MEMORY_PAGE_2M_MASK
   173 000020EE 58                  <3>  pop %1
   174                              <3> 
   175                              <3> 
   176                              <3> 
   177                              <3> 
   178                              <3> 
   179                              <3> 
   180                              <3> 
   181                              <3> 
   182                              <3> 
   183                              <3> 
   184                              <3> 
   185                              <3> 
   186                              <3> 
   463 000020EF 4989C4              <2>             mov r12, rax                   ; r12 = start address
   464                              <2> 
   465                              <2>             ; Calculate end address
   466 000020F2 58                  <2>             pop rax                        ; original base address
   467                              <2> 
   468 000020F3 48034308            <2>             add rax, qword [rbx + e820_memory_info.length_low]
   469                              <2> 
   470 000020F7 48C1E815            <2>             shr rax, MEMORY_PAGE_2M_SHIFT
   471 000020FB 48C1E015            <2>             shl rax, MEMORY_PAGE_2M_SHIFT
   472 000020FF 4989C5              <2>             mov r13, rax                   ; r13 = end address
   473                              <2> 
   474                              <2>             ; Check if end <= start
   475 00002102 4D39E5              <2>             cmp r13, r12
   476 00002105 0F8EE1000000        <2>             jle .continue_e820_loop
   477                              <2> 
   478                              <2>             ; Initialize zone structure
   479 0000210B 4C89FF              <2>             mov rdi, r15                   ; Current zone structure
   480 0000210E 488B059DFBFFFF      <2>             mov rax, qword [rel global_memory_info_ptr + global_memory_info.zones_size]
   481 00002115 48FFC0              <2>             inc rax
   482 00002118 48890593FBFFFF      <2>             mov qword [rel global_memory_info_ptr + global_memory_info.zones_size], rax
   483                              <2> 
   484                              <2> 
   485                              <2>             ; Set zone fields
   486 0000211F 4C896710            <2>             mov qword [rdi + zone_info.zone_start_address], r12
   487 00002123 4C896F18            <2>             mov qword [rdi + zone_info.zone_end_address], r13
   488 00002127 4C89E8              <2>             mov rax, r13
   489 0000212A 4C29E0              <2>             sub rax, r12
   490 0000212D 48894720            <2>             mov qword [rdi + zone_info.zone_length], rax
   491                              <2> 
   492 00002131 48C7473800000000    <2>             mov qword [rdi + zone_info.page_using_count], 0
   493 00002139 48C1E815            <2>             shr rax, MEMORY_PAGE_2M_SHIFT
   494 0000213D 48894740            <2>             mov qword [rdi + zone_info.page_free_count], rax
   495 00002141 48C7474800000000    <2>             mov qword [rdi + zone_info.total_pages_link], 0
   496 00002149 48C7472800000000    <2>             mov qword [rdi + zone_info.zone_attribute], 0
   497                              <2> 
   498 00002151 50                  <2>             push rax
   499 00002152 488D0509FBFFFF      <2>             lea rax,qword [rel global_memory_info_ptr]
   500 00002159 48894730            <2>             mov qword [rdi + zone_info.global_memory_info_address],rax
   501 0000215D 58                  <2>             pop rax
   502                              <2> 
   503                              <2>             ; Set pages group info
   504 0000215E 48894708            <2>             mov qword [rdi + zone_info.pages_length], rax
   505 00002162 4C89E0              <2>             mov rax, r12
   506 00002165 48C1E815            <2>             shr rax, MEMORY_PAGE_2M_SHIFT
   507 00002169 BB28000000          <2>             mov rbx, 40                    ; size of page_info struct
   508 0000216E 48F7E3              <2>             mul rbx
   509 00002171 4803051AFBFFFF      <2>             add rax, qword [rel global_memory_info_ptr + global_memory_info.pages_addr]
   510 00002178 488907              <2>             mov qword [rdi + zone_info.pages_group], rax
   511                              <2> 
   512                              <2> 
   513                              <2>             ; Initialize pages in this zone
   514 0000217B 4889C6              <2>             mov rsi, rax                   ; rsi = first page
   515 0000217E 488B4F08            <2>             mov rcx, qword [rdi + zone_info.pages_length]
   516 00002182 4D31C9              <2>             xor r9,r9
   517                              <2>         .init_pages:
   518 00002185 51                  <2>             push rcx
   519 00002186 57                  <2>             push rdi
   520                              <2> 
   521                              <2>             ; Set page fields
   522 00002187 48893E              <2>             mov qword [rsi + page_info.zone_info_address], rdi
   523 0000218A B800002000          <2>             mov rax, MEMORY_PAGE_2M_SIZE
   524 0000218F 49F7E1              <2>             mul r9
   525 00002192 4C01E0              <2>             add rax, r12
   526 00002195 48894608            <2>             mov qword [rsi + page_info.physical_address], rax
   527 00002199 48C7461000000000    <2>             mov qword [rsi + page_info.page_attribute], 0
   528 000021A1 48C7461800000000    <2>             mov qword [rsi + page_info.reference_count], 0
   529 000021A9 48C7462000000000    <2>             mov qword [rsi + page_info.age], 0
   530                              <2> 
   531                              <2>             ; Update bitmap
   532 000021B1 488B4608            <2>             mov rax, qword [rsi + page_info.physical_address]
   533 000021B5 48C1E815            <2>             shr rax, MEMORY_PAGE_2M_SHIFT
   534 000021B9 4889C3              <2>             mov rbx, rax
   535 000021BC 48C1EB06            <2>             shr rbx, 6                     ; divide by 64 to get long index
   536                              <2> 
   537 000021C0 4883E03F            <2>             and rax, 63                    ; get bit position
   538 000021C4 4889C1              <2>             mov rcx,rax
   539 000021C7 BA01000000          <2>             mov rdx, 1
   540 000021CC 48D3E2              <2>             shl rdx, cl                   ; create bit mask
   541 000021CF 488B3DA4FAFFFF      <2>             mov rdi, qword [rel global_memory_info_ptr + global_memory_info.bitmap_addr]
   542 000021D6 483114DF            <2>             xor qword [rdi + rbx * 8], rdx ; toggle bit in bitmap
   543                              <2> 
   544 000021DA 5F                  <2>             pop rdi
   545 000021DB 59                  <2>             pop rcx
   546 000021DC 49FFC1              <2>             inc r9
   547 000021DF 4883C628            <2>             add rsi, 40                    ; move to next page
   548 000021E3 48FFC9              <2>             dec rcx
   549 000021E6 759D                <2>             jnz .init_pages
   550                              <2> 
   551 000021E8 4983C750            <2>             add r15, 80                    ; move to next zone struct
   552                              <2> 
   553                              <2>         .continue_e820_loop:
   554 000021EC 59                  <2>             pop rcx
   555 000021ED 4983C614            <2>             add r14, 20                    ; move to next e820 entry
   556                              <2> 
   557                              <2>             ; add r15, qword [rel global_memory_info_ptr + global_memory_info.zones_size]
   558 000021F1 48FFC9              <2>             dec rcx
   559 000021F4 0F85C8FEFFFF        <2>             jnz .loop_e820_zones
   560                              <2> 
   561                              <2>             ; Initialize page 0
   562 000021FA 488B3591FAFFFF      <2>             mov rsi, qword [rel global_memory_info_ptr + global_memory_info.pages_addr]
   563 00002201 488B3DA2FAFFFF      <2>             mov rdi, qword [rel global_memory_info_ptr + global_memory_info.zones_addr]
   564 00002208 48893E              <2>             mov qword [rsi + page_info.zone_info_address], rdi
   565 0000220B 48C7460800000000    <2>             mov qword [rsi + page_info.physical_address], 0
   566 00002213 48C7461000000000    <2>             mov qword [rsi + page_info.page_attribute], 0
   567 0000221B 48C7461800000000    <2>             mov qword [rsi + page_info.reference_count], 0
   568 00002223 48C7462000000000    <2>             mov qword [rsi + page_info.age], 0
   569                              <2> 
   570                              <2>             ; Update final zones length
   571 0000222B 488B0580FAFFFF      <2>             mov rax, qword [rel global_memory_info_ptr + global_memory_info.zones_size]
   572 00002232 BB50000000          <2>             mov rbx, 80                    ; sizeof(zone_info)
   573 00002237 48F7E3              <2>             mul rbx
   574 0000223A 4883C007            <2>             add rax, 7                     ; align to 8 bytes
   575 0000223E 4883E0F8            <2>             and rax, ~7
   576 00002242 48890571FAFFFF      <2>             mov qword [rel global_memory_info_ptr + global_memory_info.zones_count], rax
   577                              <2> 
   578                              <2> 
   579                              <2> 
   580                              <2>     ;Print memory management information
   581 00002249 4C8B2D2AFAFFFF      <2>         mov r13, qword [rel global_memory_info_ptr + global_memory_info.bitmap_addr]
   582 00002250 4C892DE3F9FFFF      <2>         mov [rel memory_hex_messages], r13
   583 00002257 488D35B9F7FFFF      <2>         lea rsi, [rel memory_bits_map_addr]
   584 0000225E 488D15D5F9FFFF      <2>         lea rdx, [rel memory_hex_messages]
   585                              <2>         function printk, 1, rsi, rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00002265 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00002269 56                  <4>  push qword %2
   183 0000226A 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 0000226D 52                  <4>  push qword %2
   183 0000226E 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00002272 E890E6FFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00002277 4883C420            <4>  add rsp, total_space
   196                              <3> 
   586                              <2> 
   587 0000227B 4C8B2D00FAFFFF      <2>         mov r13, qword [rel global_memory_info_ptr + global_memory_info.bitmap_size]
   588 00002282 4C892DB1F9FFFF      <2>         mov [rel memory_hex_messages], r13
   589 00002289 488D35A3F7FFFF      <2>         lea rsi, [rel memory_bits_map_size]
   590 00002290 488D15A3F9FFFF      <2>         lea rdx, [rel memory_hex_messages]
   591                              <2>         function printk, 1, rsi, rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00002297 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 0000229B 56                  <4>  push qword %2
   183 0000229C 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 0000229F 52                  <4>  push qword %2
   183 000022A0 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 000022A4 E85EE6FFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 000022A9 4883C420            <4>  add rsp, total_space
   196                              <3> 
   592                              <2> 
   593 000022AD 4C8B2DD6F9FFFF      <2>         mov r13, qword [rel global_memory_info_ptr + global_memory_info.bitmap_count]
   594 000022B4 4C892D7FF9FFFF      <2>         mov [rel memory_hex_messages], r13
   595 000022BB 488D358DF7FFFF      <2>         lea rsi, [rel memory_bits_map_count]
   596 000022C2 488D1571F9FFFF      <2>         lea rdx, [rel memory_hex_messages]
   597                              <2>         function printk, 1, rsi, rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 000022C9 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 000022CD 56                  <4>  push qword %2
   183 000022CE 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 000022D1 52                  <4>  push qword %2
   183 000022D2 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 000022D6 E82CE6FFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 000022DB 4883C420            <4>  add rsp, total_space
   196                              <3> 
   598                              <2> 
   599                              <2> 
   600                              <2> 
   601 000022DF 4C8B2DACF9FFFF      <2>         mov r13, qword [rel global_memory_info_ptr + global_memory_info.pages_addr]
   602 000022E6 4C892D4DF9FFFF      <2>         mov [rel memory_hex_messages], r13
   603 000022ED 488D3579F7FFFF      <2>         lea rsi, [rel memory_pages_addr]
   604 000022F4 488D153FF9FFFF      <2>         lea rdx, [rel memory_hex_messages]
   605                              <2>         function printk, 1, rsi, rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 000022FB 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 000022FF 56                  <4>  push qword %2
   183 00002300 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00002303 52                  <4>  push qword %2
   183 00002304 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00002308 E8FAE5FFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 0000230D 4883C420            <4>  add rsp, total_space
   196                              <3> 
   606                              <2> 
   607 00002311 4C8B2D82F9FFFF      <2>         mov r13, qword [rel global_memory_info_ptr + global_memory_info.pages_size]
   608 00002318 4C892D1BF9FFFF      <2>         mov [rel memory_hex_messages], r13
   609 0000231F 488D3563F7FFFF      <2>         lea rsi, [rel memory_pages_size]
   610 00002326 488D150DF9FFFF      <2>         lea rdx, [rel memory_hex_messages]
   611                              <2>         function printk, 1, rsi, rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 0000232D 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00002331 56                  <4>  push qword %2
   183 00002332 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00002335 52                  <4>  push qword %2
   183 00002336 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 0000233A E8C8E5FFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 0000233F 4883C420            <4>  add rsp, total_space
   196                              <3> 
   612                              <2> 
   613 00002343 4C8B2D58F9FFFF      <2>         mov r13, qword [rel global_memory_info_ptr + global_memory_info.pages_count]
   614 0000234A 4C892DE9F8FFFF      <2>         mov [rel memory_hex_messages], r13
   615 00002351 488D354DF7FFFF      <2>         lea rsi, [rel memory_pages_count]
   616 00002358 488D15DBF8FFFF      <2>         lea rdx, [rel memory_hex_messages]
   617                              <2>         function printk, 1, rsi, rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 0000235F 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00002363 56                  <4>  push qword %2
   183 00002364 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00002367 52                  <4>  push qword %2
   183 00002368 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 0000236C E896E5FFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00002371 4883C420            <4>  add rsp, total_space
   196                              <3> 
   618                              <2> 
   619                              <2> 
   620                              <2> 
   621 00002375 4C8B2D2EF9FFFF      <2>         mov r13, qword [rel global_memory_info_ptr + global_memory_info.zones_addr]
   622 0000237C 4C892DB7F8FFFF      <2>         mov [rel memory_hex_messages], r13
   623 00002383 488D3539F7FFFF      <2>         lea rsi, [rel memory_zones_addr]
   624 0000238A 488D15A9F8FFFF      <2>         lea rdx, [rel memory_hex_messages]
   625                              <2>         function printk, 1, rsi, rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00002391 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00002395 56                  <4>  push qword %2
   183 00002396 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00002399 52                  <4>  push qword %2
   183 0000239A 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 0000239E E864E5FFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 000023A3 4883C420            <4>  add rsp, total_space
   196                              <3> 
   626                              <2> 
   627 000023A7 4C8B2D04F9FFFF      <2>         mov r13, qword [rel global_memory_info_ptr + global_memory_info.zones_size]
   628 000023AE 4C892D85F8FFFF      <2>         mov [rel memory_hex_messages], r13
   629 000023B5 488D3523F7FFFF      <2>         lea rsi, [rel memory_zones_size]
   630 000023BC 488D1577F8FFFF      <2>         lea rdx, [rel memory_hex_messages]
   631                              <2>         function printk, 1, rsi, rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 000023C3 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 000023C7 56                  <4>  push qword %2
   183 000023C8 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 000023CB 52                  <4>  push qword %2
   183 000023CC 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 000023D0 E832E5FFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 000023D5 4883C420            <4>  add rsp, total_space
   196                              <3> 
   632                              <2> 
   633 000023D9 4C8B2DDAF8FFFF      <2>         mov r13, qword [rel global_memory_info_ptr + global_memory_info.zones_count]
   634 000023E0 4C892D53F8FFFF      <2>         mov [rel memory_hex_messages], r13
   635 000023E7 488D350DF7FFFF      <2>         lea rsi, [rel memory_zones_count]
   636 000023EE 488D1545F8FFFF      <2>         lea rdx, [rel memory_hex_messages]
   637                              <2>         function printk, 1, rsi, rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 000023F5 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 000023F9 56                  <4>  push qword %2
   183 000023FA 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 000023FD 52                  <4>  push qword %2
   183 000023FE 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00002402 E800E5FFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00002407 4883C420            <4>  add rsp, total_space
   196                              <3> 
   638                              <2> 
   639                              <2> 
   640                              <2> 
   641 0000240B 48C70534F8FFFF0000- <2>     mov qword [rel ZONE_DMA_INDEX], 0
   641 00002414 0000                <2>
   642 00002416 48C70531F8FFFF0000- <2>     mov qword [rel ZONE_NORMAL_INDEX], 0
   642 0000241F 0000                <2>
   643                              <2> 
   644                              <2> 
   645                              <2>     ; Add this code after the zone initialization loop
   646                              <2>     ; Print zone information
   647 00002421 488B0D8AF8FFFF      <2>     mov rcx, qword [rel global_memory_info_ptr + global_memory_info.zones_size]
   648 00002428 488B357BF8FFFF      <2>     mov rsi, qword [rel global_memory_info_ptr + global_memory_info.zones_addr]
   649                              <2> 
   650                              <2>     .print_zones_loop:
   651 0000242F 51                  <2>         push rcx
   652 00002430 56                  <2>         push rsi
   653                              <2>         
   654                              <2>         ; Print zone information
   655 00002431 488B4610            <2>         mov rax, qword [rsi + zone_info.zone_start_address]
   656 00002435 488905FEF7FFFF      <2>         mov [rel memory_hex_messages], rax
   657 0000243C 488D3DD6F6FFFF      <2>         lea rdi, [rel zone_start_addr_msg]
   658 00002443 488D15F0F7FFFF      <2>         lea rdx, [rel memory_hex_messages]
   659                              <2>         function printk, 1, rdi, rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 0000244A 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 0000244E 57                  <4>  push qword %2
   183 0000244F 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00002452 52                  <4>  push qword %2
   183 00002453 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00002457 E8ABE4FFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 0000245C 4883C420            <4>  add rsp, total_space
   196                              <3> 
   660                              <2>         
   661 00002460 488B4618            <2>         mov rax, qword [rsi + zone_info.zone_end_address]
   662 00002464 488905CFF7FFFF      <2>         mov [rel memory_hex_messages], rax
   663 0000246B 488D3DC0F6FFFF      <2>         lea rdi, [rel zone_end_addr_msg]
   664 00002472 488D15C1F7FFFF      <2>         lea rdx, [rel memory_hex_messages]
   665                              <2>         function printk, 1, rdi, rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00002479 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 0000247D 57                  <4>  push qword %2
   183 0000247E 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00002481 52                  <4>  push qword %2
   183 00002482 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00002486 E87CE4FFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 0000248B 4883C420            <4>  add rsp, total_space
   196                              <3> 
   666                              <2>         
   667 0000248F 488B4620            <2>         mov rax, qword [rsi + zone_info.zone_length]
   668 00002493 488905A0F7FFFF      <2>         mov [rel memory_hex_messages], rax
   669 0000249A 488D3DA8F6FFFF      <2>         lea rdi, [rel zone_length_msg]
   670 000024A1 488D1592F7FFFF      <2>         lea rdx, [rel memory_hex_messages]
   671                              <2>         function printk, 1, rdi, rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 000024A8 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 000024AC 57                  <4>  push qword %2
   183 000024AD 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 000024B0 52                  <4>  push qword %2
   183 000024B1 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 000024B5 E84DE4FFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 000024BA 4883C420            <4>  add rsp, total_space
   196                              <3> 
   672                              <2>         
   673 000024BE 488B06              <2>         mov rax, qword [rsi + zone_info.pages_group]
   674 000024C1 48890572F7FFFF      <2>         mov [rel memory_hex_messages], rax
   675 000024C8 488D3D8CF6FFFF      <2>         lea rdi, [rel pages_group_msg]
   676 000024CF 488D1564F7FFFF      <2>         lea rdx, [rel memory_hex_messages]
   677                              <2>         function printk, 1, rdi, rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 000024D6 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 000024DA 57                  <4>  push qword %2
   183 000024DB 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 000024DE 52                  <4>  push qword %2
   183 000024DF 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 000024E3 E81FE4FFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 000024E8 4883C420            <4>  add rsp, total_space
   196                              <3> 
   678                              <2>         
   679 000024EC 488B4608            <2>         mov rax, qword [rsi + zone_info.pages_length]
   680 000024F0 48890543F7FFFF      <2>         mov [rel memory_hex_messages], rax
   681 000024F7 488D3D6FF6FFFF      <2>         lea rdi, [rel pages_length_msg]
   682 000024FE 488D1535F7FFFF      <2>         lea rdx, [rel memory_hex_messages]
   683                              <2>         function printk, 1, rdi, rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00002505 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00002509 57                  <4>  push qword %2
   183 0000250A 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 0000250D 52                  <4>  push qword %2
   183 0000250E 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00002512 E8F0E3FFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00002517 4883C420            <4>  add rsp, total_space
   196                              <3> 
   684                              <2> 
   685                              <2>         ; Check if zone_start_address is 0x100000000
   686 0000251B 488B4610            <2>         mov rax, qword [rsi + zone_info.zone_start_address]
   687 0000251F 53                  <2>         push rbx
   688 00002520 48BB00000000010000- <2>         mov rbx, qword 0x100000000
   688 00002529 00                  <2>
   689 0000252A 4839D8              <2>         cmp rax, rbx
   690 0000252D 5B                  <2>         pop rbx
   691 0000252E 7511                <2>         jne .continue_zone_print
   692                              <2>         
   693                              <2>         ; Store current zone index as ZONE_UNMAPED_INDEX
   694 00002530 488B057BF7FFFF      <2>         mov rax, qword [rel global_memory_info_ptr + global_memory_info.zones_size]
   695 00002537 4829C8              <2>         sub rax, rcx
   696 0000253A 48890519F7FFFF      <2>         mov [rel ZONE_UNMAPED_INDEX], rax
   697                              <2> 
   698                              <2>     .continue_zone_print:
   699 00002541 5E                  <2>         pop rsi
   700 00002542 4883C650            <2>         add rsi, 80                    ; Move to next zone structure
   701 00002546 59                  <2>         pop rcx
   702 00002547 48FFC9              <2>         dec rcx
   703 0000254A 0F85DFFEFFFF        <2>         jnz .print_zones_loop
   704                              <2> 
   705                              <2>         ; Calculate end_of_struct address
   706 00002550 488B0553F7FFFF      <2>         mov rax, qword [rel global_memory_info_ptr + global_memory_info.zones_addr]    ; zones_struct address
   707 00002557 4803055CF7FFFF      <2>         add rax, qword [rel global_memory_info_ptr + global_memory_info.zones_count]   ; add zones_length
   708 0000255E 480500010000        <2>         add rax, 256                                                                   ; add sizeof(long) * 32
   709 00002564 4883E0F8            <2>         and rax, ~7                                                                    ; align to 8-byte boundary (~(sizeof(long) - 1))
   710 00002568 48890553F7FFFF      <2>         mov qword [rel global_memory_info_ptr + global_memory_info.end_of_global_memory_info], rax ; store result
   711                              <2> 
   712                              <2>         Virt_To_Phy rax
    98                              <3> 
    99                              <3> 
   100 0000256F 50                  <3>  push %1
   101 00002570 48B8000000000080FF- <3>  mov %1,MEMORY_PAGE_OFFSET
   101 00002579 FF                  <3>
   102 0000257A 48290424            <3>  sub qword[rsp],%1
   103 0000257E 58                  <3>  pop %1
   713                              <2> 
   714 0000257F 48C1E815            <2>         shr rax, MEMORY_PAGE_2M_SHIFT
   715                              <2> 
   716                              <2> 
   717                              <2>         ; Save number of pages to initialize (i value) in r12
   718 00002583 4989C4              <2>         mov r12, rax
   719                              <2>         
   720                              <2>         ; Initialize each page from 0 to i
   721 00002586 4D31ED              <2>         xor r13, r13                    ; j = 0
   722                              <2>     .init_kernel_pages:
   723                              <2>         ; Calculate current page address
   724 00002589 488B3D02F7FFFF      <2>         mov rdi, qword [rel global_memory_info_ptr + global_memory_info.pages_addr]
   725 00002590 4C89E8              <2>         mov rax, r13                    ; j
   726 00002593 BB28000000          <2>         mov rbx, 40                     ; sizeof(page_info)
   727 00002598 48F7E3              <2>         mul rbx                         ; j * sizeof(page_info)
   728 0000259B 4801C7              <2>         add rdi, rax                    ; pages_struct + j
   729                              <2>         
   730                              <2>         ; Set up flags
   731 0000259E BE93000000          <2>         mov esi, PG_PTable_Maped | PG_Kernel_Init | PG_Active | PG_Kernel
   732                              <2> 
   733                              <2>         ; Call page_init
   734 000025A3 4154                <2>         push r12
   735 000025A5 4155                <2>         push r13
   736                              <2>         function page_init, 1, rdi, rsi
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 000025A7 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 000025AB 57                  <4>  push qword %2
   183 000025AC 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 000025AF 56                  <4>  push qword %2
   183 000025B0 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 000025B4 E835020000          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 000025B9 4883C420            <4>  add rsp, total_space
   196                              <3> 
   737 000025BD 415D                <2>         pop r13
   738 000025BF 415C                <2>         pop r12
   739                              <2>         
   740                              <2>         ; Increment j and compare with i
   741 000025C1 49FFC5              <2>         inc r13
   742 000025C4 4D39E5              <2>         cmp r13, r12
   743 000025C7 7EC0                <2>         jle .init_kernel_pages          ; Continue if j <= i
   744                              <2> 
   745                              <2> 
   746                              <2> 
   747                              <2> 
   748                              <2>         ; Get CR3 value and store in Global_CR3
   749                              <2>         function Get_gdt,1,0
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 000025C9 4883EC10            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 000025CD 6A00                <4>  push qword %2
   183 000025CF 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 000025D2 E8C3010000          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 000025D7 4883C410            <4>  add rsp, total_space
   196                              <3> 
   750 000025DB 488B4424F8          <2>         mov rax,[rsp-8]
   751                              <2> 
   752 000025E0 4889054BF6FFFF      <2>         mov [rel Global_CR3], rax
   753                              <2> 
   754                              <2>         ; Print CR3 values
   755 000025E7 4889054CF6FFFF      <2>         mov [rel memory_hex_messages], rax
   756 000025EE 488D35E9F5FFFF      <2>         lea rsi, [rel cr3_msg1]
   757 000025F5 488D153EF6FFFF      <2>         lea rdx, [rel memory_hex_messages]
   758                              <2>         function printk, 1, rsi, rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 000025FC 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00002600 56                  <4>  push qword %2
   183 00002601 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00002604 52                  <4>  push qword %2
   183 00002605 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00002609 E8F9E2FFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 0000260E 4883C420            <4>  add rsp, total_space
   196                              <3> 
   759                              <2> 
   760                              <2>         ; Print *Global_CR3
   761 00002612 4889C7              <2>         mov rdi, rax
   762                              <2>         Phy_To_Virt rdi
   107                              <3> 
   108                              <3> 
   109 00002615 57                  <3>  push %1
   110 00002616 48BF000000000080FF- <3>  mov %1,MEMORY_PAGE_OFFSET
   110 0000261F FF                  <3>
   111 00002620 48013C24            <3>  add qword[rsp],%1
   112 00002624 5F                  <3>  pop %1
   763 00002625 488B07              <2>         mov rax, qword [rdi]
   764 00002628 482500FFFFFF        <2>         and rax, ~0xff
   765 0000262E 48890505F6FFFF      <2>         mov [rel memory_hex_messages], rax
   766 00002635 488D35B0F5FFFF      <2>         lea rsi, [rel cr3_msg2]
   767 0000263C 488D15F7F5FFFF      <2>         lea rdx, [rel memory_hex_messages]
   768                              <2>         function printk, 1, rsi, rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00002643 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00002647 56                  <4>  push qword %2
   183 00002648 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 0000264B 52                  <4>  push qword %2
   183 0000264C 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00002650 E8B2E2FFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00002655 4883C420            <4>  add rsp, total_space
   196                              <3> 
   769                              <2> 
   770                              <2>         ; Print **Global_CR3
   771 00002659 4889C7              <2>         mov rdi, rax
   772                              <2>         Phy_To_Virt rdi
   107                              <3> 
   108                              <3> 
   109 0000265C 57                  <3>  push %1
   110 0000265D 48BF000000000080FF- <3>  mov %1,MEMORY_PAGE_OFFSET
   110 00002666 FF                  <3>
   111 00002667 48013C24            <3>  add qword[rsp],%1
   112 0000266B 5F                  <3>  pop %1
   773 0000266C 488B07              <2>         mov rax, qword [rdi]
   774 0000266F 482500FFFFFF        <2>         and rax, ~0xff
   775 00002675 488905BEF5FFFF      <2>         mov [rel memory_hex_messages], rax
   776 0000267C 488D3578F5FFFF      <2>         lea rsi, [rel cr3_msg3]
   777 00002683 488D15B0F5FFFF      <2>         lea rdx, [rel memory_hex_messages]
   778                              <2>         function printk, 1, rsi, rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 0000268A 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 0000268E 56                  <4>  push qword %2
   183 0000268F 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00002692 52                  <4>  push qword %2
   183 00002693 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00002697 E86BE2FFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 0000269C 4883C420            <4>  add rsp, total_space
   196                              <3> 
   779                              <2> 
   780                              <2>         ; Clear first 10 CR3 entries
   781 000026A0 488B3D8BF5FFFF      <2>         mov rdi, [rel Global_CR3]
   782                              <2>         Phy_To_Virt rdi
   107                              <3> 
   108                              <3> 
   109 000026A7 57                  <3>  push %1
   110 000026A8 48BF000000000080FF- <3>  mov %1,MEMORY_PAGE_OFFSET
   110 000026B1 FF                  <3>
   111 000026B2 48013C24            <3>  add qword[rsp],%1
   112 000026B6 5F                  <3>  pop %1
   783 000026B7 4831C9              <2>         xor rcx, rcx
   784                              <2>     .clear_cr3_loop:
   785 000026BA 48C704CF00000000    <2>         mov qword [rdi + rcx * 8], 0
   786 000026C2 48FFC1              <2>         inc rcx
   787 000026C5 4883F90A            <2>         cmp rcx, 10
   788 000026C9 7CEF                <2>         jl .clear_cr3_loop
   789                              <2> 
   790                              <2>         ; Flush TLB
   791                              <2>         function flush_tlb
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 000026CB 4883EC00            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 000026CF E873000000          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 000026D4 4883C400            <4>  add rsp, total_space
   196                              <3> 
   792                              <2> 
   793                              <2> 
   794                              <2>         epilog
   254                              <3>  popallq
   305 000026D8 415F                <4>  pop r15
   306 000026DA 415E                <4>  pop r14
   307 000026DC 415D                <4>  pop r13
   308 000026DE 415C                <4>  pop r12
   309 000026E0 415B                <4>  pop r11
   310 000026E2 415A                <4>  pop r10
   311 000026E4 4159                <4>  pop r9
   312 000026E6 4158                <4>  pop r8
   313 000026E8 5F                  <4>  pop rdi
   314 000026E9 5E                  <4>  pop rsi
   315 000026EA 5A                  <4>  pop rdx
   316 000026EB 59                  <4>  pop rcx
   317 000026EC 5B                  <4>  pop rbx
   318 000026ED 58                  <4>  pop rax
   255                              <3> 
   256 000026EE 4889EC              <3>  mov rsp, rbp
   257 000026F1 5D                  <3>  pop rbp
   258 000026F2 C3                  <3>  ret
   795                              <2> 
   796                              <2> 
   797                              <2> ; Function to flush single TLB entry
   798                              <2> ; Input: rdi = virtual address to invalidate
   799                              <2> flush_tlb_one:
   800                              <2>     prolog 1
   234 000026F3 55                  <3>  push rbp
   235 000026F4 4889E5              <3>  mov rbp, rsp
   236                              <3> 
   237                              <3> 
   238 000026F7 488945F8            <3>  mov [rbp-8],rax
   239 000026FB B801000000          <3>  mov rax, %1
   240 00002700 4883C00F            <3>  add rax, 15
   241 00002704 4883E0F0            <3>  and rax, ~15
   242 00002708 4829C4              <3>  sub rsp, rax
   243 0000270B 488B45F8            <3>  mov rax,[rbp-8]
   244                              <3> 
   245                              <3>  pushallq
   288 0000270F 50                  <4>  push rax
   289 00002710 53                  <4>  push rbx
   290 00002711 51                  <4>  push rcx
   291 00002712 52                  <4>  push rdx
   292 00002713 56                  <4>  push rsi
   293 00002714 57                  <4>  push rdi
   294 00002715 4150                <4>  push r8
   295 00002717 4151                <4>  push r9
   296 00002719 4152                <4>  push r10
   297 0000271B 4153                <4>  push r11
   298 0000271D 4154                <4>  push r12
   299 0000271F 4155                <4>  push r13
   300 00002721 4156                <4>  push r14
   301 00002723 4157                <4>  push r15
   246                              <3> 
   247                              <3> 
   248                              <3> 
   249                              <3> 
   250                              <3> 
   801                              <2>     get_param rdi, 1
   262 00002725 488B7D10            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   802 00002729 0F013F              <2>     invlpg [rdi]
   803                              <2>     epilog
   254                              <3>  popallq
   305 0000272C 415F                <4>  pop r15
   306 0000272E 415E                <4>  pop r14
   307 00002730 415D                <4>  pop r13
   308 00002732 415C                <4>  pop r12
   309 00002734 415B                <4>  pop r11
   310 00002736 415A                <4>  pop r10
   311 00002738 4159                <4>  pop r9
   312 0000273A 4158                <4>  pop r8
   313 0000273C 5F                  <4>  pop rdi
   314 0000273D 5E                  <4>  pop rsi
   315 0000273E 5A                  <4>  pop rdx
   316 0000273F 59                  <4>  pop rcx
   317 00002740 5B                  <4>  pop rbx
   318 00002741 58                  <4>  pop rax
   255                              <3> 
   256 00002742 4889EC              <3>  mov rsp, rbp
   257 00002745 5D                  <3>  pop rbp
   258 00002746 C3                  <3>  ret
   804                              <2> 
   805                              <2> ; Function to flush entire TLB
   806                              <2> flush_tlb:
   807                              <2>     prolog 0
   234 00002747 55                  <3>  push rbp
   235 00002748 4889E5              <3>  mov rbp, rsp
   236                              <3> 
   237                              <3> 
   238 0000274B 488945F8            <3>  mov [rbp-8],rax
   239 0000274F B800000000          <3>  mov rax, %1
   240 00002754 4883C00F            <3>  add rax, 15
   241 00002758 4883E0F0            <3>  and rax, ~15
   242 0000275C 4829C4              <3>  sub rsp, rax
   243 0000275F 488B45F8            <3>  mov rax,[rbp-8]
   244                              <3> 
   245                              <3>  pushallq
   288 00002763 50                  <4>  push rax
   289 00002764 53                  <4>  push rbx
   290 00002765 51                  <4>  push rcx
   291 00002766 52                  <4>  push rdx
   292 00002767 56                  <4>  push rsi
   293 00002768 57                  <4>  push rdi
   294 00002769 4150                <4>  push r8
   295 0000276B 4151                <4>  push r9
   296 0000276D 4152                <4>  push r10
   297 0000276F 4153                <4>  push r11
   298 00002771 4154                <4>  push r12
   299 00002773 4155                <4>  push r13
   300 00002775 4156                <4>  push r14
   301 00002777 4157                <4>  push r15
   246                              <3> 
   247                              <3> 
   248                              <3> 
   249                              <3> 
   250                              <3> 
   808 00002779 0F20D8              <2>     mov rax, cr3      ; Get current CR3
   809 0000277C 0F22D8              <2>     mov cr3, rax      ; Write back to CR3 to flush TLB
   810                              <2>     epilog
   254                              <3>  popallq
   305 0000277F 415F                <4>  pop r15
   306 00002781 415E                <4>  pop r14
   307 00002783 415D                <4>  pop r13
   308 00002785 415C                <4>  pop r12
   309 00002787 415B                <4>  pop r11
   310 00002789 415A                <4>  pop r10
   311 0000278B 4159                <4>  pop r9
   312 0000278D 4158                <4>  pop r8
   313 0000278F 5F                  <4>  pop rdi
   314 00002790 5E                  <4>  pop rsi
   315 00002791 5A                  <4>  pop rdx
   316 00002792 59                  <4>  pop rcx
   317 00002793 5B                  <4>  pop rbx
   318 00002794 58                  <4>  pop rax
   255                              <3> 
   256 00002795 4889EC              <3>  mov rsp, rbp
   257 00002798 5D                  <3>  pop rbp
   258 00002799 C3                  <3>  ret
   811                              <2> 
   812                              <2> ; Function to get CR3 value (GDT base)
   813                              <2> Get_gdt:
   814                              <2>     prolog 0
   234 0000279A 55                  <3>  push rbp
   235 0000279B 4889E5              <3>  mov rbp, rsp
   236                              <3> 
   237                              <3> 
   238 0000279E 488945F8            <3>  mov [rbp-8],rax
   239 000027A2 B800000000          <3>  mov rax, %1
   240 000027A7 4883C00F            <3>  add rax, 15
   241 000027AB 4883E0F0            <3>  and rax, ~15
   242 000027AF 4829C4              <3>  sub rsp, rax
   243 000027B2 488B45F8            <3>  mov rax,[rbp-8]
   244                              <3> 
   245                              <3>  pushallq
   288 000027B6 50                  <4>  push rax
   289 000027B7 53                  <4>  push rbx
   290 000027B8 51                  <4>  push rcx
   291 000027B9 52                  <4>  push rdx
   292 000027BA 56                  <4>  push rsi
   293 000027BB 57                  <4>  push rdi
   294 000027BC 4150                <4>  push r8
   295 000027BE 4151                <4>  push r9
   296 000027C0 4152                <4>  push r10
   297 000027C2 4153                <4>  push r11
   298 000027C4 4154                <4>  push r12
   299 000027C6 4155                <4>  push r13
   300 000027C8 4156                <4>  push r14
   301 000027CA 4157                <4>  push r15
   246                              <3> 
   247                              <3> 
   248                              <3> 
   249                              <3> 
   250                              <3> 
   815 000027CC 0F20D8              <2>     mov rax, cr3      ; Get CR3 value
   816                              <2>     ; jmp $
   817                              <2>     set_ret_param rax, 2
   266 000027CF 48894518            <3>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   818                              <2>     epilog            ; Return value in rax
   254                              <3>  popallq
   305 000027D3 415F                <4>  pop r15
   306 000027D5 415E                <4>  pop r14
   307 000027D7 415D                <4>  pop r13
   308 000027D9 415C                <4>  pop r12
   309 000027DB 415B                <4>  pop r11
   310 000027DD 415A                <4>  pop r10
   311 000027DF 4159                <4>  pop r9
   312 000027E1 4158                <4>  pop r8
   313 000027E3 5F                  <4>  pop rdi
   314 000027E4 5E                  <4>  pop rsi
   315 000027E5 5A                  <4>  pop rdx
   316 000027E6 59                  <4>  pop rcx
   317 000027E7 5B                  <4>  pop rbx
   318 000027E8 58                  <4>  pop rax
   255                              <3> 
   256 000027E9 4889EC              <3>  mov rsp, rbp
   257 000027EC 5D                  <3>  pop rbp
   258 000027ED C3                  <3>  ret
   819                              <2> ; page_init function
   820                              <2> page_init:
   821                              <2>     prolog 2
   234 000027EE 55                  <3>  push rbp
   235 000027EF 4889E5              <3>  mov rbp, rsp
   236                              <3> 
   237                              <3> 
   238 000027F2 488945F8            <3>  mov [rbp-8],rax
   239 000027F6 B802000000          <3>  mov rax, %1
   240 000027FB 4883C00F            <3>  add rax, 15
   241 000027FF 4883E0F0            <3>  and rax, ~15
   242 00002803 4829C4              <3>  sub rsp, rax
   243 00002806 488B45F8            <3>  mov rax,[rbp-8]
   244                              <3> 
   245                              <3>  pushallq
   288 0000280A 50                  <4>  push rax
   289 0000280B 53                  <4>  push rbx
   290 0000280C 51                  <4>  push rcx
   291 0000280D 52                  <4>  push rdx
   292 0000280E 56                  <4>  push rsi
   293 0000280F 57                  <4>  push rdi
   294 00002810 4150                <4>  push r8
   295 00002812 4151                <4>  push r9
   296 00002814 4152                <4>  push r10
   297 00002816 4153                <4>  push r11
   298 00002818 4154                <4>  push r12
   299 0000281A 4155                <4>  push r13
   300 0000281C 4156                <4>  push r14
   301 0000281E 4157                <4>  push r15
   246                              <3> 
   247                              <3> 
   248                              <3> 
   249                              <3> 
   250                              <3> 
   822                              <2>     get_param rdi, 1      ; page struct pointer
   262 00002820 488B7D10            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   823                              <2>     get_param rsi, 2      ; flags
   262 00002824 488B7518            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   824                              <2> 
   825                              <2>     ; Check if page->attribute is 0
   826 00002828 48837F1000          <2>     cmp qword [rdi + page_info.page_attribute], 0
   827 0000282D 7543                <2>     jnz .page_has_attribute
   828                              <2> 
   829                              <2>     ; First initialization path
   830 0000282F 488B4708            <2>     mov rax, qword [rdi + page_info.physical_address]
   831 00002833 48C1E815            <2>     shr rax, MEMORY_PAGE_2M_SHIFT   ; Get page number
   832 00002837 4889C3              <2>     mov rbx, rax
   833 0000283A 48C1EB06            <2>     shr rbx, 6                      ; Get bitmap long index
   834                              <2> 
   835 0000283E 4883E03F            <2>     and rax, 63                     ; Get bit position
   836 00002842 4889C1              <2>     mov rcx, rax
   837 00002845 41B801000000        <2>     mov r8, 1
   838 0000284B 49D3E0              <2>     shl r8, cl                      ; Create bit mask
   839 0000284E 4C8B0D25F4FFFF      <2>     mov r9, qword [rel global_memory_info_ptr + global_memory_info.bitmap_addr]
   840 00002855 4D0904D9            <2>     or qword [r9 + rbx * 8], r8     ; Set bit in bitmap
   841                              <2> 
   842                              <2> 
   843                              <2>     ; Set page attributes
   844 00002859 48897710            <2>     mov qword [rdi + page_info.page_attribute], rsi
   845 0000285D 48FF4718            <2>     inc qword [rdi + page_info.reference_count]
   846                              <2>     
   847                              <2>     ; Update zone counters
   848 00002861 4C8B17              <2>     mov r10, qword [rdi + page_info.zone_info_address]
   849 00002864 49FF4238            <2>     inc qword [r10 + zone_info.page_using_count]
   850 00002868 49FF4A40            <2>     dec qword [r10 + zone_info.page_free_count]
   851 0000286C 49FF4248            <2>     inc qword [r10 + zone_info.total_pages_link]
   852 00002870 EB56                <2>     jmp .done
   853                              <2> 
   854                              <2>     .page_has_attribute:
   855                              <2>         ; Check for special flags
   856 00002872 488B4710            <2>         mov rax, qword [rdi + page_info.page_attribute]
   857 00002876 4889F2              <2>         mov rdx, rsi
   858 00002879 41B804010000        <2>         mov r8, PG_Referenced | PG_K_Share_To_U
   859 0000287F 4C85C0              <2>         test rax, r8
   860 00002882 7535                <2>         jnz .special_flags
   861 00002884 4C85C2              <2>         test rdx, r8
   862 00002887 7530                <2>         jnz .special_flags
   863                              <2> 
   864                              <2>         ; Regular update path
   865 00002889 488B4708            <2>         mov rax, qword [rdi + page_info.physical_address]
   866 0000288D 48C1E815            <2>         shr rax, MEMORY_PAGE_2M_SHIFT
   867 00002891 4889C2              <2>         mov rdx, rax
   868 00002894 48C1EA06            <2>         shr rdx, 6
   869 00002898 4883E03F            <2>         and rax, 63
   870 0000289C 4889C1              <2>         mov rcx, rax
   871 0000289F 41B801000000        <2>         mov r8, 1
   872 000028A5 49D3E0              <2>         shl r8, cl
   873 000028A8 4C8B0DCBF3FFFF      <2>         mov r9, qword [rel global_memory_info_ptr + global_memory_info.bitmap_addr]
   874 000028AF 4D0904D1            <2>         or qword [r9 + rdx * 8], r8
   875                              <2>         
   876 000028B3 48097710            <2>         or qword [rdi + page_info.page_attribute], rsi
   877 000028B7 EB0F                <2>         jmp .done
   878                              <2> 
   879                              <2>     .special_flags:
   880                              <2>         ; Update with reference counting
   881 000028B9 48097710            <2>         or qword [rdi + page_info.page_attribute], rsi
   882 000028BD 48FF4718            <2>         inc qword [rdi + page_info.reference_count]
   883 000028C1 4C8B17              <2>         mov r10, qword [rdi + page_info.zone_info_address]
   884 000028C4 49FF4248            <2>         inc qword [r10 + zone_info.total_pages_link]
   885                              <2> 
   886                              <2>     .done:
   887 000028C8 4831C0              <2>         xor rax, rax                    ; Return 0
   888                              <2>     epilog
   254                              <3>  popallq
   305 000028CB 415F                <4>  pop r15
   306 000028CD 415E                <4>  pop r14
   307 000028CF 415D                <4>  pop r13
   308 000028D1 415C                <4>  pop r12
   309 000028D3 415B                <4>  pop r11
   310 000028D5 415A                <4>  pop r10
   311 000028D7 4159                <4>  pop r9
   312 000028D9 4158                <4>  pop r8
   313 000028DB 5F                  <4>  pop rdi
   314 000028DC 5E                  <4>  pop rsi
   315 000028DD 5A                  <4>  pop rdx
   316 000028DE 59                  <4>  pop rcx
   317 000028DF 5B                  <4>  pop rbx
   318 000028E0 58                  <4>  pop rax
   255                              <3> 
   256 000028E1 4889EC              <3>  mov rsp, rbp
   257 000028E4 5D                  <3>  pop rbp
   258 000028E5 C3                  <3>  ret
   889                              <2> 
   890                              <2> page_clean:
   891                              <2>     prolog 2
   234 000028E6 55                  <3>  push rbp
   235 000028E7 4889E5              <3>  mov rbp, rsp
   236                              <3> 
   237                              <3> 
   238 000028EA 488945F8            <3>  mov [rbp-8],rax
   239 000028EE B802000000          <3>  mov rax, %1
   240 000028F3 4883C00F            <3>  add rax, 15
   241 000028F7 4883E0F0            <3>  and rax, ~15
   242 000028FB 4829C4              <3>  sub rsp, rax
   243 000028FE 488B45F8            <3>  mov rax,[rbp-8]
   244                              <3> 
   245                              <3>  pushallq
   288 00002902 50                  <4>  push rax
   289 00002903 53                  <4>  push rbx
   290 00002904 51                  <4>  push rcx
   291 00002905 52                  <4>  push rdx
   292 00002906 56                  <4>  push rsi
   293 00002907 57                  <4>  push rdi
   294 00002908 4150                <4>  push r8
   295 0000290A 4151                <4>  push r9
   296 0000290C 4152                <4>  push r10
   297 0000290E 4153                <4>  push r11
   298 00002910 4154                <4>  push r12
   299 00002912 4155                <4>  push r13
   300 00002914 4156                <4>  push r14
   301 00002916 4157                <4>  push r15
   246                              <3> 
   247                              <3> 
   248                              <3> 
   249                              <3> 
   250                              <3> 
   892                              <2>     get_param rdi, 1                ; page struct pointer
   262 00002918 488B7D10            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   893                              <2> 
   894                              <2>     ; Check if page->attribute is 0
   895 0000291C 48837F1000          <2>     cmp qword [rdi + page_info.page_attribute], 0
   896 00002921 750A                <2>     jnz .has_attribute
   897                              <2> 
   898                              <2>     ; No attribute case
   899 00002923 48C7471000000000    <2>     mov qword [rdi + page_info.page_attribute], 0
   900 0000292B EB7F                <2>     jmp .done
   901                              <2> 
   902                              <2>     .has_attribute:
   903                              <2>         ; Check for special flags
   904 0000292D 488B4710            <2>         mov rax, qword [rdi + page_info.page_attribute]
   905 00002931 41B804010000        <2>         mov r8, PG_Referenced | PG_K_Share_To_U
   906 00002937 4C85C0              <2>         test rax, r8
   907 0000293A 7424                <2>         jz .regular_clean
   908                              <2> 
   909                              <2>         ; Special flags cleanup
   910 0000293C 48FF4F18            <2>         dec qword [rdi + page_info.reference_count]
   911 00002940 4C8B17              <2>         mov r10, qword [rdi + page_info.zone_info_address]
   912 00002943 49FF4A48            <2>         dec qword [r10 + zone_info.total_pages_link]
   913                              <2>         
   914 00002947 48837F1800          <2>         cmp qword [rdi + page_info.reference_count], 0
   915 0000294C 755E                <2>         jnz .done
   916                              <2>         
   917                              <2>         ; Reference count reached 0
   918 0000294E 48C7471000000000    <2>         mov qword [rdi + page_info.page_attribute], 0
   919 00002956 49FF4A38            <2>         dec qword [r10 + zone_info.page_using_count]
   920 0000295A 49FF4240            <2>         inc qword [r10 + zone_info.page_free_count]
   921 0000295E EB4C                <2>         jmp .done
   922                              <2> 
   923                              <2>     .regular_clean:
   924                              <2>         ; Clear bit in bitmap
   925 00002960 488B4708            <2>         mov rax, qword [rdi + page_info.physical_address]
   926 00002964 48C1E815            <2>         shr rax, MEMORY_PAGE_2M_SHIFT
   927 00002968 4889C2              <2>         mov rdx, rax
   928 0000296B 48C1EA06            <2>         shr rdx, 6
   929 0000296F 4883E03F            <2>         and rax, 63
   930 00002973 4889C1              <2>         mov rcx, rax
   931 00002976 41B801000000        <2>         mov r8, 1
   932 0000297C 49D3E0              <2>         shl r8, cl
   933 0000297F 49F7D0              <2>         not r8
   934 00002982 4C8B0DF1F2FFFF      <2>         mov r9, qword [rel global_memory_info_ptr + global_memory_info.bitmap_addr]
   935 00002989 4D2104D1            <2>         and qword [r9 + rdx * 8], r8
   936                              <2> 
   937                              <2>         ; Reset page attributes and counters
   938 0000298D 48C7471000000000    <2>         mov qword [rdi + page_info.page_attribute], 0
   939 00002995 48C7471800000000    <2>         mov qword [rdi + page_info.reference_count], 0
   940 0000299D 4C8B17              <2>         mov r10, qword [rdi + page_info.zone_info_address]
   941 000029A0 49FF4A38            <2>         dec qword [r10 + zone_info.page_using_count]
   942 000029A4 49FF4240            <2>         inc qword [r10 + zone_info.page_free_count]
   943 000029A8 49FF4A48            <2>         dec qword [r10 + zone_info.total_pages_link]
   944                              <2> 
   945                              <2>     .done:
   946 000029AC 4831C0              <2>         xor rax, rax                    ; Return 0
   947                              <2>     epilog
   254                              <3>  popallq
   305 000029AF 415F                <4>  pop r15
   306 000029B1 415E                <4>  pop r14
   307 000029B3 415D                <4>  pop r13
   308 000029B5 415C                <4>  pop r12
   309 000029B7 415B                <4>  pop r11
   310 000029B9 415A                <4>  pop r10
   311 000029BB 4159                <4>  pop r9
   312 000029BD 4158                <4>  pop r8
   313 000029BF 5F                  <4>  pop rdi
   314 000029C0 5E                  <4>  pop rsi
   315 000029C1 5A                  <4>  pop rdx
   316 000029C2 59                  <4>  pop rcx
   317 000029C3 5B                  <4>  pop rbx
   318 000029C4 58                  <4>  pop rax
   255                              <3> 
   256 000029C5 4889EC              <3>  mov rsp, rbp
   257 000029C8 5D                  <3>  pop rbp
   258 000029C9 C3                  <3>  ret
   948                              <2> kmemset:;input:dest_addr,value,count
   949                              <2>     prolog 2;
   234 000029CA 55                  <3>  push rbp
   235 000029CB 4889E5              <3>  mov rbp, rsp
   236                              <3> 
   237                              <3> 
   238 000029CE 488945F8            <3>  mov [rbp-8],rax
   239 000029D2 B802000000          <3>  mov rax, %1
   240 000029D7 4883C00F            <3>  add rax, 15
   241 000029DB 4883E0F0            <3>  and rax, ~15
   242 000029DF 4829C4              <3>  sub rsp, rax
   243 000029E2 488B45F8            <3>  mov rax,[rbp-8]
   244                              <3> 
   245                              <3>  pushallq
   288 000029E6 50                  <4>  push rax
   289 000029E7 53                  <4>  push rbx
   290 000029E8 51                  <4>  push rcx
   291 000029E9 52                  <4>  push rdx
   292 000029EA 56                  <4>  push rsi
   293 000029EB 57                  <4>  push rdi
   294 000029EC 4150                <4>  push r8
   295 000029EE 4151                <4>  push r9
   296 000029F0 4152                <4>  push r10
   297 000029F2 4153                <4>  push r11
   298 000029F4 4154                <4>  push r12
   299 000029F6 4155                <4>  push r13
   300 000029F8 4156                <4>  push r14
   301 000029FA 4157                <4>  push r15
   246                              <3> 
   247                              <3> 
   248                              <3> 
   249                              <3> 
   250                              <3> 
   950                              <2>     get_param rdi,1 ;dest_addr
   262 000029FC 488B7D10            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   951                              <2>     get_param rsi,2 ;fill value
   262 00002A00 488B7518            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   952                              <2>     get_param rdx,3 ;count byte
   262 00002A04 488B5520            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   953                              <2> 
   954                              <2>     ; Extend the value to 64 bit
   955 00002A08 480FB6C6            <2>     movzx rax, sil 
   956                              <2> 
   957 00002A0C 4889C3              <2>     mov rbx, rax
   958                              <2> 
   959 00002A0F 48C1E008            <2>     shl rax, 8              
   960 00002A13 4809D8              <2>     or rax, rbx
   961                              <2> 
   962 00002A16 48C1E008            <2>     shl rax, 8             
   963 00002A1A 4809D8              <2>     or rax, rbx
   964                              <2> 
   965 00002A1D 48C1E008            <2>     shl rax, 8             
   966 00002A21 4809D8              <2>     or rax, rbx
   967                              <2> 
   968 00002A24 48C1E008            <2>     shl rax, 8             
   969 00002A28 4809D8              <2>     or rax, rbx    
   970                              <2> 
   971 00002A2B 48C1E008            <2>     shl rax, 8             
   972 00002A2F 4809D8              <2>     or rax, rbx
   973                              <2> 
   974 00002A32 48C1E008            <2>     shl rax, 8             
   975 00002A36 4809D8              <2>     or rax, rbx
   976                              <2> 
   977 00002A39 48C1E008            <2>     shl rax, 8             
   978 00002A3D 4809D8              <2>     or rax, rbx
   979                              <2> 
   980                              <2>     ;Fill the memory with the rax using the stosq instruction
   981 00002A40 4889D1              <2>     mov rcx, rdx            
   982 00002A43 48C1E903            <2>     shr rcx, 3              
   983 00002A47 F348AB              <2>     rep stosq               
   984                              <2> 
   985                              <2> 
   986                              <2>     ; deal with the remaining bytes
   987 00002A4A 4889D1              <2>     mov rcx, rdx
   988 00002A4D 4883E107            <2>     and rcx, 7              
   989 00002A51 F3AA                <2>     rep stosb              
   990                              <2> 
   991                              <2>     epilog
   254                              <3>  popallq
   305 00002A53 415F                <4>  pop r15
   306 00002A55 415E                <4>  pop r14
   307 00002A57 415D                <4>  pop r13
   308 00002A59 415C                <4>  pop r12
   309 00002A5B 415B                <4>  pop r11
   310 00002A5D 415A                <4>  pop r10
   311 00002A5F 4159                <4>  pop r9
   312 00002A61 4158                <4>  pop r8
   313 00002A63 5F                  <4>  pop rdi
   314 00002A64 5E                  <4>  pop rsi
   315 00002A65 5A                  <4>  pop rdx
   316 00002A66 59                  <4>  pop rcx
   317 00002A67 5B                  <4>  pop rbx
   318 00002A68 58                  <4>  pop rax
   255                              <3> 
   256 00002A69 4889EC              <3>  mov rsp, rbp
   257 00002A6C 5D                  <3>  pop rbp
   258 00002A6D C3                  <3>  ret
   992                              <2> 
   993                              <2> 
   994                              <2> 
   995                              <2> alloc_pages:; Input: rdi = zone_select, rsi = number, rdx = page_flags
   996                              <2>     prolog 8              ; Need local variables
   234 00002A6E 55                  <3>  push rbp
   235 00002A6F 4889E5              <3>  mov rbp, rsp
   236                              <3> 
   237                              <3> 
   238 00002A72 488945F8            <3>  mov [rbp-8],rax
   239 00002A76 B808000000          <3>  mov rax, %1
   240 00002A7B 4883C00F            <3>  add rax, 15
   241 00002A7F 4883E0F0            <3>  and rax, ~15
   242 00002A83 4829C4              <3>  sub rsp, rax
   243 00002A86 488B45F8            <3>  mov rax,[rbp-8]
   244                              <3> 
   245                              <3>  pushallq
   288 00002A8A 50                  <4>  push rax
   289 00002A8B 53                  <4>  push rbx
   290 00002A8C 51                  <4>  push rcx
   291 00002A8D 52                  <4>  push rdx
   292 00002A8E 56                  <4>  push rsi
   293 00002A8F 57                  <4>  push rdi
   294 00002A90 4150                <4>  push r8
   295 00002A92 4151                <4>  push r9
   296 00002A94 4152                <4>  push r10
   297 00002A96 4153                <4>  push r11
   298 00002A98 4154                <4>  push r12
   299 00002A9A 4155                <4>  push r13
   300 00002A9C 4156                <4>  push r14
   301 00002A9E 4157                <4>  push r15
   246                              <3> 
   247                              <3> 
   248                              <3> 
   249                              <3> 
   250                              <3> 
   997                              <2>     get_param rdi, 1      ; zone_select
   262 00002AA0 488B7D10            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   998                              <2>     get_param rsi, 2      ; number
   262 00002AA4 488B7518            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   999                              <2>     get_param rdx, 3      ; page_flags
   262 00002AA8 488B5520            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
  1000 00002AAC 488955F8            <2>     mov qword [rbp - 8], rdx
  1001                              <2>     ; Initialize local variables
  1002                              <2>     ; push 0                ; page = 0
  1003 00002AB0 41B800000000        <2>     mov r8, 0            ; zone_start = 0
  1004 00002AB6 41B900000000        <2>     mov r9, 0            ; zone_end = 0
  1005                              <2> 
  1006                              <2>     ; Switch on zone_select
  1007 00002ABC 4883FF00            <2>     cmp rdi, ZONE_DMA
  1008 00002AC0 740E                <2>     je .zone_dma
  1009 00002AC2 4883FF01            <2>     cmp rdi, ZONE_NORMAL
  1010 00002AC6 7417                <2>     je .zone_normal
  1011 00002AC8 4883FF02            <2>     cmp rdi, ZONE_UNMAPED
  1012 00002ACC 7421                <2>     je .zone_unmaped
  1013 00002ACE EB35                <2>     jmp .error_exit
  1014                              <2> 
  1015                              <2>     .zone_dma:
  1016 00002AD0 41B800000000        <2>         mov r8, 0                    ; zone_start = 0
  1017 00002AD6 4C8B0D6DF1FFFF      <2>         mov r9, [rel ZONE_DMA_INDEX] ; zone_end = ZONE_DMA_INDEX
  1018 00002ADD EB6C                <2>         jmp .search_zones
  1019                              <2> 
  1020                              <2>     .zone_normal:
  1021 00002ADF 4C8B0564F1FFFF      <2>         mov r8, [rel ZONE_DMA_INDEX]     ; zone_start = ZONE_DMA_INDEX
  1022 00002AE6 4C8B0D65F1FFFF      <2>         mov r9, [rel ZONE_NORMAL_INDEX]  ; zone_end = ZONE_NORMAL_INDEX
  1023 00002AED EB5C                <2>         jmp .search_zones
  1024                              <2> 
  1025                              <2>     .zone_unmaped:
  1026 00002AEF 4C8B0564F1FFFF      <2>         mov r8, [rel ZONE_UNMAPED_INDEX] ; zone_start = ZONE_UNMAPED_INDEX
  1027 00002AF6 488B05B5F1FFFF      <2>         mov rax, [rel global_memory_info_ptr + global_memory_info.zones_size]
  1028 00002AFD 48FFC8              <2>         dec rax
  1029 00002B00 4989C1              <2>         mov r9, rax                      ; zone_end = zones_size - 1
  1030 00002B03 EB46                <2>         jmp .search_zones
  1031                              <2> 
  1032                              <2>     .error_exit:
  1033                              <2>         ; Print error message
  1034 00002B05 488D3501F1FFFF      <2>         lea rsi, [rel alloc_pages_error_msg]
  1035 00002B0C 488D151EF1FFFF      <2>         lea rdx, [rel null_str]
  1036                              <2>         function printk, 1, rsi, rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00002B13 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00002B17 56                  <4>  push qword %2
   183 00002B18 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00002B1B 52                  <4>  push qword %2
   183 00002B1C 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00002B20 E8E2DDFFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00002B25 4883C420            <4>  add rsp, total_space
   196                              <3> 
  1037 00002B29 4831C0              <2>         xor rax, rax                     ; Return NULL
  1038                              <2>         set_ret_param rax, 4
   266 00002B2C 48894528            <3>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
  1039                              <2>         epilog
   254                              <3>  popallq
   305 00002B30 415F                <4>  pop r15
   306 00002B32 415E                <4>  pop r14
   307 00002B34 415D                <4>  pop r13
   308 00002B36 415C                <4>  pop r12
   309 00002B38 415B                <4>  pop r11
   310 00002B3A 415A                <4>  pop r10
   311 00002B3C 4159                <4>  pop r9
   312 00002B3E 4158                <4>  pop r8
   313 00002B40 5F                  <4>  pop rdi
   314 00002B41 5E                  <4>  pop rsi
   315 00002B42 5A                  <4>  pop rdx
   316 00002B43 59                  <4>  pop rcx
   317 00002B44 5B                  <4>  pop rbx
   318 00002B45 58                  <4>  pop rax
   255                              <3> 
   256 00002B46 4889EC              <3>  mov rsp, rbp
   257 00002B49 5D                  <3>  pop rbp
   258 00002B4A C3                  <3>  ret
  1040                              <2> 
  1041                              <2>     .search_zones:
  1042 00002B4B 4D89C4              <2>         mov r12, r8                      ; i = zone_start
  1043                              <2>     ; Input: 
  1044                              <2>     ; r12 = i (zone index)
  1045                              <2>     ; r9 = zone_end
  1046                              <2>     ; rsi = number (number of pages requested)
  1047                              <2>     ; rdx = page_flags
  1048                              <2> 
  1049                              <2>     .zone_loop:
  1050                              <2>         ; Get current zone pointer
  1051 00002B4E 4C8B2D55F1FFFF      <2>         mov r13, qword [rel global_memory_info_ptr + global_memory_info.zones_addr]
  1052 00002B55 4C89E0              <2>         mov rax, r12                    ; i
  1053 00002B58 BB50000000          <2>         mov rbx, 80                     ; sizeof(zone_info)
  1054 00002B5D 48F7E3              <2>         mul rbx
  1055 00002B60 4901C5              <2>         add r13, rax                    ; z = zones_struct + i
  1056                              <2> 
  1057                              <2>         ; Check if zone has enough free pages
  1058 00002B63 498B4540            <2>         mov rax, qword [r13 + zone_info.page_free_count]
  1059 00002B67 4839F0              <2>         cmp rax, rsi                    ; compare with number
  1060 00002B6A 0F8C46010000        <2>         jl .next_zone
  1061                              <2> 
  1062                              <2>         ; Calculate page range
  1063 00002B70 4D8B7510            <2>         mov r14, qword [r13 + zone_info.zone_start_address]
  1064 00002B74 49C1EE15            <2>         shr r14, MEMORY_PAGE_2M_SHIFT   ; start
  1065 00002B78 4D8B7D18            <2>         mov r15, qword [r13 + zone_info.zone_end_address]
  1066 00002B7C 49C1EF15            <2>         shr r15, MEMORY_PAGE_2M_SHIFT   ; end
  1067                              <2> 
  1068                              <2>         ; Calculate tmp = 64 - start % 64
  1069                              <2>         ; mov rax, r14
  1070                              <2>         ; mov rbx, 64
  1071                              <2>         ; xor rdx, rdx
  1072                              <2>         ; div rbx                         ; rdx = start % 64
  1073                              <2>         ; mov rax, 64
  1074                              <2>         ; sub rax, rdx
  1075                              <2>         ; mov rbx, rax                    ; rbx = tmp
  1076                              <2> 
  1077 00002B80 4C89F0              <2>         mov  rax, r14        ; start
  1078 00002B83 4883E03F            <2>         and  rax, 63         ; rax = start % 64
  1079 00002B87 BB40000000          <2>         mov  rbx, 64         ; rbx = 64
  1080 00002B8C 4829C3              <2>         sub  rbx, rax        ; rbx = 64 - (start % 64)
  1081                              <2> 
  1082                              <2> 
  1083                              <2>         ; For loop: j = start
  1084 00002B8F 4C89F1              <2>         mov rcx, r14                    ; j = start
  1085                              <2>     .page_search_loop:
  1086                              <2>         ; Calculate bitmap position
  1087 00002B92 4889C8              <2>         mov rax, rcx                    ; j
  1088 00002B95 41B840000000        <2>         mov r8, 64
  1089 00002B9B 4831D2              <2>         xor rdx, rdx
  1090 00002B9E 49F7F0              <2>         div r8                          ; rax = j/64, rdx = j%64
  1091                              <2> 
  1092                              <2>         ; Get bitmap pointer
  1093 00002BA1 4C8B15D2F0FFFF      <2>         mov r10, qword [rel global_memory_info_ptr + global_memory_info.bitmap_addr]
  1094 00002BA8 4D8D14C2            <2>         lea r10, [r10 + rax * 8]       ; p = bits_map + (j >> 6)
  1095                              <2> 
  1096                              <2>         ; Inner loop
  1097 00002BAC 4989D0              <2>         mov r8, rdx                     ; k = shift
  1098                              <2>     .inner_loop:
  1099                              <2>         ; Calculate ((*p >> k) | (*(p + 1) << (64 - k)))
  1100 00002BAF 498B02              <2>         mov rax, qword [r10]           ; *p
  1101 00002BB2 4D89C1              <2>         mov r9, r8
  1102                              <2> 
  1103 00002BB5 51                  <2>         push rcx
  1104 00002BB6 4C89C9              <2>         mov rcx,r9
  1105 00002BB9 48D3E8              <2>         shr rax, cl                    ; *p >> k
  1106 00002BBC 59                  <2>         pop rcx
  1107                              <2> 
  1108 00002BBD 498B5A08            <2>         mov rbx, qword [r10 + 8]       ; *(p + 1)
  1109 00002BC1 41B940000000        <2>         mov r9, 64
  1110 00002BC7 4D29C1              <2>         sub r9, r8                      ; 64 - k
  1111                              <2> 
  1112 00002BCA 51                  <2>         push rcx
  1113 00002BCB 4C89C9              <2>         mov rcx,r9
  1114 00002BCE 48D3E3              <2>         shl rbx, cl                    ; *(p + 1) << (64 - k)
  1115 00002BD1 59                  <2>         pop rcx
  1116                              <2>                
  1117                              <2> 
  1118 00002BD2 4809D8              <2>         or rax, rbx                    ; combine with OR
  1119                              <2> 
  1120                              <2>         ; Create mask based on number
  1121 00002BD5 4883FE40            <2>         cmp rsi, 64
  1122 00002BD9 7412                <2>         je .full_mask
  1123                              <2> 
  1124 00002BDB BB01000000          <2>         mov rbx, 1
  1125 00002BE0 51                  <2>         push rcx
  1126 00002BE1 4889F1              <2>         mov rcx, rsi
  1127 00002BE4 48D3E3              <2>         shl rbx, cl                    ; 1UL << number
  1128 00002BE7 59                  <2>         pop rcx
  1129 00002BE8 48FFCB              <2>         dec rbx                        ; (1UL << number) - 1
  1130 00002BEB EB07                <2>         jmp .check_mask
  1131                              <2> 
  1132                              <2>     .full_mask:
  1133 00002BED 48C7C3FFFFFFFF      <2>         mov rbx, -1                    ; 0xffffffffffffffff
  1134                              <2> 
  1135                              <2>     .check_mask:
  1136                              <2> 
  1137 00002BF4 4821D8              <2>         and rax, rbx                   ; Check against mask
  1138                              <2> 
  1139 00002BF7 0F8584000000        <2>         jnz .continue_inner
  1140                              <2> 
  1141                              <2>         ; Found free pages - initialize them
  1142 00002BFD 4889C8              <2>         mov rax,rcx
  1143 00002C00 4C01C0              <2>         add rax,r8
  1144                              <2>         ; lea rax, [rcx + r8]
  1145 00002C03 48FFC8              <2>         dec rax                        ; page = j + k - 1
  1146 00002C06 4989C3              <2>         mov r11, rax                   ; Save page number
  1147                              <2> 
  1148                              <2>         ; Initialize pages
  1149 00002C09 4889F1              <2>         mov rcx, rsi                   ; number of pages to init
  1150                              <2>     .init_pages:
  1151 00002C0C 51                  <2>         push rcx
  1152                              <2>         
  1153                              <2>         ; Calculate page address
  1154 00002C0D 488B3D7EF0FFFF      <2>         mov rdi, qword [rel global_memory_info_ptr + global_memory_info.pages_addr]
  1155 00002C14 4C89D8              <2>         mov rax, r11
  1156 00002C17 BB28000000          <2>         mov rbx, 40                    ; sizeof(page_info)
  1157 00002C1C 48F7E3              <2>         mul rbx
  1158 00002C1F 4801C7              <2>         add rdi, rax                   ; pages_struct + page
  1159                              <2> 
  1160 00002C22 4153                <2>         push r11
  1161 00002C24 4C8B5DF8            <2>         mov r11,qword [rbp - 8]
  1162                              <2> 
  1163                              <2>         function page_init, 1, rdi, r11
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00002C28 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00002C2C 57                  <4>  push qword %2
   183 00002C2D 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00002C30 4153                <4>  push qword %2
   183 00002C32 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00002C36 E8B3FBFFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00002C3B 4883C420            <4>  add rsp, total_space
   196                              <3> 
  1164 00002C3F 415B                <2>         pop r11
  1165                              <2> 
  1166 00002C41 49FFC3              <2>         inc r11
  1167 00002C44 59                  <2>         pop rcx
  1168 00002C45 48FFC9              <2>         dec rcx
  1169 00002C48 75C2                <2>         jnz .init_pages
  1170                              <2> 
  1171                              <2>         ; Return pointer to first page
  1172 00002C4A 488B1D41F0FFFF      <2>         mov rbx, qword [rel global_memory_info_ptr + global_memory_info.pages_addr]
  1173 00002C51 4C89D8              <2>         mov rax, r11
  1174 00002C54 4829F0              <2>         sub rax, rsi                   ; subtract number to get first page
  1175 00002C57 B928000000          <2>         mov rcx, 40                    ; sizeof(page_info)
  1176 00002C5C 48F7E1              <2>         mul rcx
  1177 00002C5F 4801D8              <2>         add rax, rbx
  1178                              <2> 
  1179                              <2>         set_ret_param rax, 4
   266 00002C62 48894528            <3>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
  1180                              <2>         epilog
   254                              <3>  popallq
   305 00002C66 415F                <4>  pop r15
   306 00002C68 415E                <4>  pop r14
   307 00002C6A 415D                <4>  pop r13
   308 00002C6C 415C                <4>  pop r12
   309 00002C6E 415B                <4>  pop r11
   310 00002C70 415A                <4>  pop r10
   311 00002C72 4159                <4>  pop r9
   312 00002C74 4158                <4>  pop r8
   313 00002C76 5F                  <4>  pop rdi
   314 00002C77 5E                  <4>  pop rsi
   315 00002C78 5A                  <4>  pop rdx
   316 00002C79 59                  <4>  pop rcx
   317 00002C7A 5B                  <4>  pop rbx
   318 00002C7B 58                  <4>  pop rax
   255                              <3> 
   256 00002C7C 4889EC              <3>  mov rsp, rbp
   257 00002C7F 5D                  <3>  pop rbp
   258 00002C80 C3                  <3>  ret
  1181                              <2> 
  1182                              <2>     .continue_inner:
  1183                              <2> 
  1184 00002C81 49FFC0              <2>         inc r8                        ; k++
  1185 00002C84 B840000000          <2>         mov rax, 64
  1186 00002C89 4829D0              <2>         sub rax, rdx                  ; 64 - shift
  1187 00002C8C 4939C0              <2>         cmp r8, rax
  1188 00002C8F 0F8C1AFFFFFF        <2>         jl .inner_loop
  1189                              <2> 
  1190                              <2>         ; Update j for next iteration
  1191 00002C95 4889C8              <2>         mov rax, rcx
  1192 00002C98 BB40000000          <2>         mov rbx, 64
  1193 00002C9D 4831D2              <2>         xor rdx, rdx
  1194 00002CA0 48F7F3              <2>         div rbx                       ; Get j % 64 in rdx
  1195 00002CA3 4885D2              <2>         test rdx, rdx
  1196 00002CA6 480F45C3            <2>         cmovnz rax, rbx              ; Use tmp if j % 64 != 0
  1197 00002CAA 4801C1              <2>         add rcx, rax                 ; j += (j % 64 ? tmp : 64)
  1198 00002CAD 4C39F9              <2>         cmp rcx, r15
  1199 00002CB0 0F8EDCFEFFFF        <2>         jle .page_search_loop
  1200                              <2> 
  1201                              <2>     .next_zone:
  1202 00002CB6 49FFC4              <2>         inc r12                      ; i++
  1203 00002CB9 4D39CC              <2>         cmp r12, r9
  1204 00002CBC 0F8E8CFEFFFF        <2>         jle .zone_loop
  1205                              <2> 
  1206                              <2>         ; No free pages found
  1207 00002CC2 4831C0              <2>         xor rax, rax                 ; Return NULL
  1208                              <2>         set_ret_param rax, 4
   266 00002CC5 48894528            <3>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
  1209                              <2>         epilog
   254                              <3>  popallq
   305 00002CC9 415F                <4>  pop r15
   306 00002CCB 415E                <4>  pop r14
   307 00002CCD 415D                <4>  pop r13
   308 00002CCF 415C                <4>  pop r12
   309 00002CD1 415B                <4>  pop r11
   310 00002CD3 415A                <4>  pop r10
   311 00002CD5 4159                <4>  pop r9
   312 00002CD7 4158                <4>  pop r8
   313 00002CD9 5F                  <4>  pop rdi
   314 00002CDA 5E                  <4>  pop rsi
   315 00002CDB 5A                  <4>  pop rdx
   316 00002CDC 59                  <4>  pop rcx
   317 00002CDD 5B                  <4>  pop rbx
   318 00002CDE 58                  <4>  pop rax
   255                              <3> 
   256 00002CDF 4889EC              <3>  mov rsp, rbp
   257 00002CE2 5D                  <3>  pop rbp
   258 00002CE3 C3                  <3>  ret
  1210                              <2> 
  1211                              <2> 
  1212                              <2> parse_e820:;get and print e820 info to global_memory_info
  1213                              <2>     prolog 2;
   234 00002CE4 55                  <3>  push rbp
   235 00002CE5 4889E5              <3>  mov rbp, rsp
   236                              <3> 
   237                              <3> 
   238 00002CE8 488945F8            <3>  mov [rbp-8],rax
   239 00002CEC B802000000          <3>  mov rax, %1
   240 00002CF1 4883C00F            <3>  add rax, 15
   241 00002CF5 4883E0F0            <3>  and rax, ~15
   242 00002CF9 4829C4              <3>  sub rsp, rax
   243 00002CFC 488B45F8            <3>  mov rax,[rbp-8]
   244                              <3> 
   245                              <3>  pushallq
   288 00002D00 50                  <4>  push rax
   289 00002D01 53                  <4>  push rbx
   290 00002D02 51                  <4>  push rcx
   291 00002D03 52                  <4>  push rdx
   292 00002D04 56                  <4>  push rsi
   293 00002D05 57                  <4>  push rdi
   294 00002D06 4150                <4>  push r8
   295 00002D08 4151                <4>  push r9
   296 00002D0A 4152                <4>  push r10
   297 00002D0C 4153                <4>  push r11
   298 00002D0E 4154                <4>  push r12
   299 00002D10 4155                <4>  push r13
   300 00002D12 4156                <4>  push r14
   301 00002D14 4157                <4>  push r15
   246                              <3> 
   247                              <3> 
   248                              <3> 
   249                              <3> 
   250                              <3> 
  1214                              <2> 
  1215 00002D16 4831C0              <2>     xor rax,rax
  1216 00002D19 4831DB              <2>     xor rbx,rbx
  1217 00002D1C 48BB008800000080FF- <2>     mov rbx,KernelSpaceUpperAddress+MemoryStructBufferAddr+ e820_memory_entry.base_addr_low
  1217 00002D25 FF                  <2>
  1218 00002D26 48891D35EFFFFF      <2>     mov qword [rel global_memory_info_ptr + global_memory_info.e820_addr],rbx
  1219                              <2> 
  1220 00002D2D 4883EB04            <2>     sub rbx,4
  1221 00002D31 488B03              <2>     mov rax,qword [rbx]
  1222                              <2> 
  1223 00002D34 4889052FEFFFFF      <2>     mov qword [rel global_memory_info_ptr + global_memory_info.e820_size],rax
  1224                              <2> 
  1225 00002D3B 48890500EFFFFF      <2>     mov [rel meomry_decimal_messages], rax
  1226 00002D42 488D3508ECFFFF      <2>     lea rsi, [rel memory_physical_table]
  1227 00002D49 488D15F2EEFFFF      <2>     lea rdx, [rel meomry_decimal_messages]
  1228                              <2>     function printk,1,rsi,rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00002D50 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00002D54 56                  <4>  push qword %2
   183 00002D55 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00002D58 52                  <4>  push qword %2
   183 00002D59 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00002D5D E8A5DBFFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00002D62 4883C420            <4>  add rsp, total_space
   196                              <3> 
  1229 00002D66 4889C1              <2>     mov rcx,rax
  1230 00002D69 41BE00000000        <2>     mov r14,0
  1231 00002D6F 41BD00000000        <2>     mov r13,0
  1232                              <2>     .loop_tale:
  1233 00002D75 4831C0              <2>         xor rax,rax
  1234 00002D78 48BB008800000080FF- <2>         mov rbx,KernelSpaceUpperAddress+MemoryStructBufferAddr+ e820_memory_entry.base_addr_low
  1234 00002D81 FF                  <2>
  1235 00002D82 4C01F3              <2>         add rbx,r14
  1236 00002D85 488B03              <2>         mov rax,qword [rbx]
  1237 00002D88 488905ABEEFFFF      <2>         mov [rel memory_hex_messages], rax
  1238 00002D8F 488D3501EEFFFF      <2>         lea rsi, [rel memory_physical_address]
  1239 00002D96 488D159DEEFFFF      <2>         lea rdx, [rel memory_hex_messages]
  1240                              <2>         function printk,1,rsi,rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00002D9D 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00002DA1 56                  <4>  push qword %2
   183 00002DA2 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00002DA5 52                  <4>  push qword %2
   183 00002DA6 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00002DAA E858DBFFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00002DAF 4883C420            <4>  add rsp, total_space
   196                              <3> 
  1241                              <2> 
  1242 00002DB3 4831C0              <2>         xor rax,rax
  1243 00002DB6 48BB088800000080FF- <2>         mov rbx,KernelSpaceUpperAddress+MemoryStructBufferAddr+ e820_memory_entry.length_low
  1243 00002DBF FF                  <2>
  1244 00002DC0 4C01F3              <2>         add rbx,r14
  1245 00002DC3 488B03              <2>         mov rax,qword [rbx]
  1246 00002DC6 4889056DEEFFFF      <2>         mov [rel memory_hex_messages], rax
  1247 00002DCD 488D35D8EDFFFF      <2>         lea rsi, [rel memory_physical_length]
  1248 00002DD4 488D155FEEFFFF      <2>         lea rdx, [rel memory_hex_messages]
  1249                              <2>         function printk,1,rsi,rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00002DDB 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00002DDF 56                  <4>  push qword %2
   183 00002DE0 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00002DE3 52                  <4>  push qword %2
   183 00002DE4 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00002DE8 E81ADBFFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00002DED 4883C420            <4>  add rsp, total_space
   196                              <3> 
  1250                              <2> 
  1251 00002DF1 4831C0              <2>         xor rax,rax
  1252 00002DF4 48BB108800000080FF- <2>         mov rbx,KernelSpaceUpperAddress+MemoryStructBufferAddr+ e820_memory_entry.type
  1252 00002DFD FF                  <2>
  1253 00002DFE 4C01F3              <2>         add rbx,r14
  1254 00002E01 8B03                <2>         mov eax,dword [rbx]
  1255 00002E03 4883F801            <2>         cmp rax,1
  1256 00002E07 7503                <2>         jne .count_skip
  1257 00002E09 49FFC5              <2>             inc r13
  1258                              <2>         .count_skip:
  1259 00002E0C 4889052FEEFFFF      <2>         mov [rel meomry_decimal_messages], rax
  1260 00002E13 488D35ABEDFFFF      <2>         lea rsi, [rel memory_physical_type]
  1261 00002E1A 488D1521EEFFFF      <2>         lea rdx, [rel meomry_decimal_messages]
  1262                              <2>         function printk,1,rsi,rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00002E21 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00002E25 56                  <4>  push qword %2
   183 00002E26 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00002E29 52                  <4>  push qword %2
   183 00002E2A 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00002E2E E8D4DAFFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00002E33 4883C420            <4>  add rsp, total_space
   196                              <3> 
  1263                              <2> 
  1264 00002E37 4983C614            <2>         add r14,20
  1265 00002E3B 48FFC9              <2>         dec rcx
  1266 00002E3E 0F8531FFFFFF        <2>         jnz .loop_tale
  1267                              <2> 
  1268 00002E44 4C892D27EEFFFF      <2>         mov qword [rel global_memory_info_ptr + global_memory_info.e820_count],r13
  1269                              <2> 
  1270 00002E4B 4C892DF0EDFFFF      <2>         mov [rel meomry_decimal_messages], r13
  1271 00002E52 488D354AEBFFFF      <2>         lea rsi, [rel memory_physical_usable]
  1272 00002E59 488D15E2EDFFFF      <2>         lea rdx, [rel meomry_decimal_messages]
  1273                              <2>         function printk,1,rsi,rdx
   160                              <3>  %assign param_count %0 - 2
   161                              <3> 
   162                              <3>  %if param_count < 0
   163                              <3>  %assign param_count 0
   164                              <3>  %endif
   165                              <3>  %if param_count < 1
   166                              <3>  %assign ret_param_count 0
   167                              <3>  %else
   168                              <3>  %assign ret_param_count %2
   169                              <3>  %endif
   170                              <3> 
   171                              <3> 
   172                              <3>  prepare_call param_count, ret_param_count
   270                              <4>  %assign total_space ((%1 + %2) * 8)
   271                              <4> 
   272                              <4>  %if (total_space % 16) != 0
   273                              <4>  %assign total_space total_space + 8
   274                              <4>  %endif
   275                              <4> 
   276 00002E60 4883EC20            <4>  sub rsp, total_space
   173                              <3> 
   174                              <3> 
   175                              <3>  %if param_count > 0
   176                              <3>  %assign i 0
   177                              <3> 
   178                              <3>  %rep param_count
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182                              <3>  push qword %2
   183                              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   185                              <3>  %endrep
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00002E64 56                  <4>  push qword %2
   183 00002E65 8F0424              <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   179                              <4>  %rotate 1
   180                              <4> 
   181                              <4> 
   182 00002E68 52                  <4>  push qword %2
   183 00002E69 8F442408            <4>  pop qword [rsp + 8*i]
   184                              <4>  %assign i i+1
   186                              <3>  %rotate 1
   187                              <3>  %rotate 1
   188                              <3> 
   189                              <3>  %endif
   190                              <3> 
   191                              <3> 
   192 00002E6D E895DAFFFF          <3>  call %1
   193                              <3> 
   194                              <3> 
   195                              <3>  cleanup_call param_count, ret_param_count
   280                              <4>  %assign total_space ((%1 + %2) * 8)
   281                              <4>  %if (total_space % 16) != 0
   282                              <4>  %assign total_space total_space + 8
   283                              <4>  %endif
   284 00002E72 4883C420            <4>  add rsp, total_space
   196                              <3> 
  1274                              <2>     epilog
   254                              <3>  popallq
   305 00002E76 415F                <4>  pop r15
   306 00002E78 415E                <4>  pop r14
   307 00002E7A 415D                <4>  pop r13
   308 00002E7C 415C                <4>  pop r12
   309 00002E7E 415B                <4>  pop r11
   310 00002E80 415A                <4>  pop r10
   311 00002E82 4159                <4>  pop r9
   312 00002E84 4158                <4>  pop r8
   313 00002E86 5F                  <4>  pop rdi
   314 00002E87 5E                  <4>  pop rsi
   315 00002E88 5A                  <4>  pop rdx
   316 00002E89 59                  <4>  pop rcx
   317 00002E8A 5B                  <4>  pop rbx
   318 00002E8B 58                  <4>  pop rax
   255                              <3> 
   256 00002E8C 4889EC              <3>  mov rsp, rbp
   257 00002E8F 5D                  <3>  pop rbp
   258 00002E90 C3                  <3>  ret
  1275                              <2> %endif
    12                              <1> 
    13                              <1> [BITS 64]
    14                              <1> 
    15 00002E91 706167652061747472- <1> page_info_msg1 db "page attribute:%x     ", 0
    15 00002E9A 69627574653A257820- <1>
    15 00002EA3 2020202000          <1>
    16                              <1> 
    17 00002EA8 706167652061646472- <1> page_info_msg2 db "page address:%x\n", 0
    17 00002EB1 6573733A25785C6E00  <1>
    18                              <1> 
    19                              <1> struc tss_table_info
    20 00000000 ????????            <1>     .reserved1:      resd 1
    21 00000004 ????????????????    <1>     .rsp0:           resq 1
    22 0000000C ????????????????    <1>     .rsp1:           resq 1
    23 00000014 ????????????????    <1>     .rsp2:           resq 1
    24 0000001C ????????????????    <1>     .reserved2:      resq 1
    25 00000024 ????????????????    <1>     .ist1:           resq 1
    26 0000002C ????????????????    <1>     .ist2:           resq 1
    27 00000034 ????????????????    <1>     .ist3:           resq 1
    28 0000003C ????????????????    <1>     .ist4:           resq 1
    29 00000044 ????????????????    <1>     .ist5:           resq 1
    30 0000004C ????????????????    <1>     .ist6:           resq 1
    31 00000054 ????????????????    <1>     .ist7:           resq 1
    32 0000005C ????????            <1>     .reserved3:      resd 1
    33 00000060 ????????            <1>     .reserved4:      resd 1
    34 00000064 ????????            <1>     .io_map_base:    resd 1
    35                              <1> endstruc
    36                              <1> struc tss_descriptor
    37 00000000 ????                <1>     .limit_low:      resw 1    ; 段界限的低 16 位
    38 00000002 ????                <1>     .base_low:       resw 1    ; 基地址的低 16 位
    39                              <1> 
    40 00000004 ??                  <1>     .base_mid:       resb 1    ; 基地址的中间 8 位
    41 00000005 ??                  <1>     .type:           resb 1    ; 类型和属性（包括 P 位、DPL、TYPE）
    42 00000006 ??                  <1>     .limit_high:     resb 1    ; 段界限的高 4 位和标志（G、AVL 等）
    43 00000007 ??                  <1>     .base_high:      resb 1    ; 基地址的高 8 位
    44                              <1> 
    45 00000008 ????????            <1>     .base_upper:     resd 1    ; 基地址的高 32 位（64 位地址支持）
    46 0000000C ????????            <1>     .reserved:       resd 1    ; 保留字段
    47                              <1> endstruc
    48                              <1> system_init:;input:kernel_end
    49                              <1>     prolog 0
   234 00002EBA 55                  <2>  push rbp
   235 00002EBB 4889E5              <2>  mov rbp, rsp
   236                              <2> 
   237                              <2> 
   238 00002EBE 488945F8            <2>  mov [rbp-8],rax
   239 00002EC2 B800000000          <2>  mov rax, %1
   240 00002EC7 4883C00F            <2>  add rax, 15
   241 00002ECB 4883E0F0            <2>  and rax, ~15
   242 00002ECF 4829C4              <2>  sub rsp, rax
   243 00002ED2 488B45F8            <2>  mov rax,[rbp-8]
   244                              <2> 
   245                              <2>  pushallq
   288 00002ED6 50                  <3>  push rax
   289 00002ED7 53                  <3>  push rbx
   290 00002ED8 51                  <3>  push rcx
   291 00002ED9 52                  <3>  push rdx
   292 00002EDA 56                  <3>  push rsi
   293 00002EDB 57                  <3>  push rdi
   294 00002EDC 4150                <3>  push r8
   295 00002EDE 4151                <3>  push r9
   296 00002EE0 4152                <3>  push r10
   297 00002EE2 4153                <3>  push r11
   298 00002EE4 4154                <3>  push r12
   299 00002EE6 4155                <3>  push r13
   300 00002EE8 4156                <3>  push r14
   301 00002EEA 4157                <3>  push r15
   246                              <2> 
   247                              <2> 
   248                              <2> 
   249                              <2> 
   250                              <2> 
    50                              <1>     get_param rsi, 1
   262 00002EEC 488B7510            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    51                              <1>     
    52                              <1>     function video_init
   160                              <2>  %assign param_count %0 - 2
   161                              <2> 
   162                              <2>  %if param_count < 0
   163                              <2>  %assign param_count 0
   164                              <2>  %endif
   165                              <2>  %if param_count < 1
   166                              <2>  %assign ret_param_count 0
   167                              <2>  %else
   168                              <2>  %assign ret_param_count %2
   169                              <2>  %endif
   170                              <2> 
   171                              <2> 
   172                              <2>  prepare_call param_count, ret_param_count
   270                              <3>  %assign total_space ((%1 + %2) * 8)
   271                              <3> 
   272                              <3>  %if (total_space % 16) != 0
   273                              <3>  %assign total_space total_space + 8
   274                              <3>  %endif
   275                              <3> 
   276 00002EF0 4883EC00            <3>  sub rsp, total_space
   173                              <2> 
   174                              <2> 
   175                              <2>  %if param_count > 0
   176                              <2>  %assign i 0
   177                              <2> 
   178                              <2>  %rep param_count
   179                              <2>  %rotate 1
   180                              <2> 
   181                              <2> 
   182                              <2>  push qword %2
   183                              <2>  pop qword [rsp + 8*i]
   184                              <2>  %assign i i+1
   185                              <2>  %endrep
   186                              <2>  %rotate 1
   187                              <2>  %rotate 1
   188                              <2> 
   189                              <2>  %endif
   190                              <2> 
   191                              <2> 
   192 00002EF4 E8F2D1FFFF          <2>  call %1
   193                              <2> 
   194                              <2> 
   195                              <2>  cleanup_call param_count, ret_param_count
   280                              <3>  %assign total_space ((%1 + %2) * 8)
   281                              <3>  %if (total_space % 16) != 0
   282                              <3>  %assign total_space total_space + 8
   283                              <3>  %endif
   284 00002EF9 4883C400            <3>  add rsp, total_space
   196                              <2> 
    53                              <1>     function printk_init
   160                              <2>  %assign param_count %0 - 2
   161                              <2> 
   162                              <2>  %if param_count < 0
   163                              <2>  %assign param_count 0
   164                              <2>  %endif
   165                              <2>  %if param_count < 1
   166                              <2>  %assign ret_param_count 0
   167                              <2>  %else
   168                              <2>  %assign ret_param_count %2
   169                              <2>  %endif
   170                              <2> 
   171                              <2> 
   172                              <2>  prepare_call param_count, ret_param_count
   270                              <3>  %assign total_space ((%1 + %2) * 8)
   271                              <3> 
   272                              <3>  %if (total_space % 16) != 0
   273                              <3>  %assign total_space total_space + 8
   274                              <3>  %endif
   275                              <3> 
   276 00002EFD 4883EC00            <3>  sub rsp, total_space
   173                              <2> 
   174                              <2> 
   175                              <2>  %if param_count > 0
   176                              <2>  %assign i 0
   177                              <2> 
   178                              <2>  %rep param_count
   179                              <2>  %rotate 1
   180                              <2> 
   181                              <2> 
   182                              <2>  push qword %2
   183                              <2>  pop qword [rsp + 8*i]
   184                              <2>  %assign i i+1
   185                              <2>  %endrep
   186                              <2>  %rotate 1
   187                              <2>  %rotate 1
   188                              <2> 
   189                              <2>  %endif
   190                              <2> 
   191                              <2> 
   192 00002F01 E80FD9FFFF          <2>  call %1
   193                              <2> 
   194                              <2> 
   195                              <2>  cleanup_call param_count, ret_param_count
   280                              <3>  %assign total_space ((%1 + %2) * 8)
   281                              <3>  %if (total_space % 16) != 0
   282                              <3>  %assign total_space total_space + 8
   283                              <3>  %endif
   284 00002F06 4883C400            <3>  add rsp, total_space
   196                              <2> 
    54                              <1>     function sys_vector_init
   160                              <2>  %assign param_count %0 - 2
   161                              <2> 
   162                              <2>  %if param_count < 0
   163                              <2>  %assign param_count 0
   164                              <2>  %endif
   165                              <2>  %if param_count < 1
   166                              <2>  %assign ret_param_count 0
   167                              <2>  %else
   168                              <2>  %assign ret_param_count %2
   169                              <2>  %endif
   170                              <2> 
   171                              <2> 
   172                              <2>  prepare_call param_count, ret_param_count
   270                              <3>  %assign total_space ((%1 + %2) * 8)
   271                              <3> 
   272                              <3>  %if (total_space % 16) != 0
   273                              <3>  %assign total_space total_space + 8
   274                              <3>  %endif
   275                              <3> 
   276 00002F0A 4883EC00            <3>  sub rsp, total_space
   173                              <2> 
   174                              <2> 
   175                              <2>  %if param_count > 0
   176                              <2>  %assign i 0
   177                              <2> 
   178                              <2>  %rep param_count
   179                              <2>  %rotate 1
   180                              <2> 
   181                              <2> 
   182                              <2>  push qword %2
   183                              <2>  pop qword [rsp + 8*i]
   184                              <2>  %assign i i+1
   185                              <2>  %endrep
   186                              <2>  %rotate 1
   187                              <2>  %rotate 1
   188                              <2> 
   189                              <2>  %endif
   190                              <2> 
   191                              <2> 
   192 00002F0E E839000000          <2>  call %1
   193                              <2> 
   194                              <2> 
   195                              <2>  cleanup_call param_count, ret_param_count
   280                              <3>  %assign total_space ((%1 + %2) * 8)
   281                              <3>  %if (total_space % 16) != 0
   282                              <3>  %assign total_space total_space + 8
   283                              <3>  %endif
   284 00002F13 4883C400            <3>  add rsp, total_space
   196                              <2> 
    55                              <1> 
    56                              <1> 
    57                              <1>     ; function memory_init,1,rsi
    58                              <1> 
    59                              <1> 
    60                              <1>     function test_printk
   160                              <2>  %assign param_count %0 - 2
   161                              <2> 
   162                              <2>  %if param_count < 0
   163                              <2>  %assign param_count 0
   164                              <2>  %endif
   165                              <2>  %if param_count < 1
   166                              <2>  %assign ret_param_count 0
   167                              <2>  %else
   168                              <2>  %assign ret_param_count %2
   169                              <2>  %endif
   170                              <2> 
   171                              <2> 
   172                              <2>  prepare_call param_count, ret_param_count
   270                              <3>  %assign total_space ((%1 + %2) * 8)
   271                              <3> 
   272                              <3>  %if (total_space % 16) != 0
   273                              <3>  %assign total_space total_space + 8
   274                              <3>  %endif
   275                              <3> 
   276 00002F17 4883EC00            <3>  sub rsp, total_space
   173                              <2> 
   174                              <2> 
   175                              <2>  %if param_count > 0
   176                              <2>  %assign i 0
   177                              <2> 
   178                              <2>  %rep param_count
   179                              <2>  %rotate 1
   180                              <2> 
   181                              <2> 
   182                              <2>  push qword %2
   183                              <2>  pop qword [rsp + 8*i]
   184                              <2>  %assign i i+1
   185                              <2>  %endrep
   186                              <2>  %rotate 1
   187                              <2>  %rotate 1
   188                              <2> 
   189                              <2>  %endif
   190                              <2> 
   191                              <2> 
   192 00002F1B E889010000          <2>  call %1
   193                              <2> 
   194                              <2> 
   195                              <2>  cleanup_call param_count, ret_param_count
   280                              <3>  %assign total_space ((%1 + %2) * 8)
   281                              <3>  %if (total_space % 16) != 0
   282                              <3>  %assign total_space total_space + 8
   283                              <3>  %endif
   284 00002F20 4883C400            <3>  add rsp, total_space
   196                              <2> 
    61                              <1>     function test_video
   160                              <2>  %assign param_count %0 - 2
   161                              <2> 
   162                              <2>  %if param_count < 0
   163                              <2>  %assign param_count 0
   164                              <2>  %endif
   165                              <2>  %if param_count < 1
   166                              <2>  %assign ret_param_count 0
   167                              <2>  %else
   168                              <2>  %assign ret_param_count %2
   169                              <2>  %endif
   170                              <2> 
   171                              <2> 
   172                              <2>  prepare_call param_count, ret_param_count
   270                              <3>  %assign total_space ((%1 + %2) * 8)
   271                              <3> 
   272                              <3>  %if (total_space % 16) != 0
   273                              <3>  %assign total_space total_space + 8
   274                              <3>  %endif
   275                              <3> 
   276 00002F24 4883EC00            <3>  sub rsp, total_space
   173                              <2> 
   174                              <2> 
   175                              <2>  %if param_count > 0
   176                              <2>  %assign i 0
   177                              <2> 
   178                              <2>  %rep param_count
   179                              <2>  %rotate 1
   180                              <2> 
   181                              <2> 
   182                              <2>  push qword %2
   183                              <2>  pop qword [rsp + 8*i]
   184                              <2>  %assign i i+1
   185                              <2>  %endrep
   186                              <2>  %rotate 1
   187                              <2>  %rotate 1
   188                              <2> 
   189                              <2>  %endif
   190                              <2> 
   191                              <2> 
   192 00002F28 E805020000          <2>  call %1
   193                              <2> 
   194                              <2> 
   195                              <2>  cleanup_call param_count, ret_param_count
   280                              <3>  %assign total_space ((%1 + %2) * 8)
   281                              <3>  %if (total_space % 16) != 0
   282                              <3>  %assign total_space total_space + 8
   283                              <3>  %endif
   284 00002F2D 4883C400            <3>  add rsp, total_space
   196                              <2> 
    62                              <1> 
    63                              <1>     ; function test_memory
    64                              <1> 
    65                              <1>     epilog
   254                              <2>  popallq
   305 00002F31 415F                <3>  pop r15
   306 00002F33 415E                <3>  pop r14
   307 00002F35 415D                <3>  pop r13
   308 00002F37 415C                <3>  pop r12
   309 00002F39 415B                <3>  pop r11
   310 00002F3B 415A                <3>  pop r10
   311 00002F3D 4159                <3>  pop r9
   312 00002F3F 4158                <3>  pop r8
   313 00002F41 5F                  <3>  pop rdi
   314 00002F42 5E                  <3>  pop rsi
   315 00002F43 5A                  <3>  pop rdx
   316 00002F44 59                  <3>  pop rcx
   317 00002F45 5B                  <3>  pop rbx
   318 00002F46 58                  <3>  pop rax
   255                              <2> 
   256 00002F47 4889EC              <2>  mov rsp, rbp
   257 00002F4A 5D                  <2>  pop rbp
   258 00002F4B C3                  <2>  ret
    66                              <1> sys_vector_init:;init system interrupt vector
    67                              <1>     prolog 0
   234 00002F4C 55                  <2>  push rbp
   235 00002F4D 4889E5              <2>  mov rbp, rsp
   236                              <2> 
   237                              <2> 
   238 00002F50 488945F8            <2>  mov [rbp-8],rax
   239 00002F54 B800000000          <2>  mov rax, %1
   240 00002F59 4883C00F            <2>  add rax, 15
   241 00002F5D 4883E0F0            <2>  and rax, ~15
   242 00002F61 4829C4              <2>  sub rsp, rax
   243 00002F64 488B45F8            <2>  mov rax,[rbp-8]
   244                              <2> 
   245                              <2>  pushallq
   288 00002F68 50                  <3>  push rax
   289 00002F69 53                  <3>  push rbx
   290 00002F6A 51                  <3>  push rcx
   291 00002F6B 52                  <3>  push rdx
   292 00002F6C 56                  <3>  push rsi
   293 00002F6D 57                  <3>  push rdi
   294 00002F6E 4150                <3>  push r8
   295 00002F70 4151                <3>  push r9
   296 00002F72 4152                <3>  push r10
   297 00002F74 4153                <3>  push r11
   298 00002F76 4154                <3>  push r12
   299 00002F78 4155                <3>  push r13
   300 00002F7A 4156                <3>  push r14
   301 00002F7C 4157                <3>  push r15
   246                              <2> 
   247                              <2> 
   248                              <2> 
   249                              <2> 
   250                              <2> 
    68                              <1>     function setup_default_tss
   160                              <2>  %assign param_count %0 - 2
   161                              <2> 
   162                              <2>  %if param_count < 0
   163                              <2>  %assign param_count 0
   164                              <2>  %endif
   165                              <2>  %if param_count < 1
   166                              <2>  %assign ret_param_count 0
   167                              <2>  %else
   168                              <2>  %assign ret_param_count %2
   169                              <2>  %endif
   170                              <2> 
   171                              <2> 
   172                              <2>  prepare_call param_count, ret_param_count
   270                              <3>  %assign total_space ((%1 + %2) * 8)
   271                              <3> 
   272                              <3>  %if (total_space % 16) != 0
   273                              <3>  %assign total_space total_space + 8
   274                              <3>  %endif
   275                              <3> 
   276 00002F7E 4883EC00            <3>  sub rsp, total_space
   173                              <2> 
   174                              <2> 
   175                              <2>  %if param_count > 0
   176                              <2>  %assign i 0
   177                              <2> 
   178                              <2>  %rep param_count
   179                              <2>  %rotate 1
   180                              <2> 
   181                              <2> 
   182                              <2>  push qword %2
   183                              <2>  pop qword [rsp + 8*i]
   184                              <2>  %assign i i+1
   185                              <2>  %endrep
   186                              <2>  %rotate 1
   187                              <2>  %rotate 1
   188                              <2> 
   189                              <2>  %endif
   190                              <2> 
   191                              <2> 
   192 00002F82 E839000000          <2>  call %1
   193                              <2> 
   194                              <2> 
   195                              <2>  cleanup_call param_count, ret_param_count
   280                              <3>  %assign total_space ((%1 + %2) * 8)
   281                              <3>  %if (total_space % 16) != 0
   282                              <3>  %assign total_space total_space + 8
   283                              <3>  %endif
   284 00002F87 4883C400            <3>  add rsp, total_space
   196                              <2> 
    69                              <1>     function init_expection
   160                              <2>  %assign param_count %0 - 2
   161                              <2> 
   162                              <2>  %if param_count < 0
   163                              <2>  %assign param_count 0
   164                              <2>  %endif
   165                              <2>  %if param_count < 1
   166                              <2>  %assign ret_param_count 0
   167                              <2>  %else
   168                              <2>  %assign ret_param_count %2
   169                              <2>  %endif
   170                              <2> 
   171                              <2> 
   172                              <2>  prepare_call param_count, ret_param_count
   270                              <3>  %assign total_space ((%1 + %2) * 8)
   271                              <3> 
   272                              <3>  %if (total_space % 16) != 0
   273                              <3>  %assign total_space total_space + 8
   274                              <3>  %endif
   275                              <3> 
   276 00002F8B 4883EC00            <3>  sub rsp, total_space
   173                              <2> 
   174                              <2> 
   175                              <2>  %if param_count > 0
   176                              <2>  %assign i 0
   177                              <2> 
   178                              <2>  %rep param_count
   179                              <2>  %rotate 1
   180                              <2> 
   181                              <2> 
   182                              <2>  push qword %2
   183                              <2>  pop qword [rsp + 8*i]
   184                              <2>  %assign i i+1
   185                              <2>  %endrep
   186                              <2>  %rotate 1
   187                              <2>  %rotate 1
   188                              <2> 
   189                              <2>  %endif
   190                              <2> 
   191                              <2> 
   192 00002F8F E866E1FFFF          <2>  call %1
   193                              <2> 
   194                              <2> 
   195                              <2>  cleanup_call param_count, ret_param_count
   280                              <3>  %assign total_space ((%1 + %2) * 8)
   281                              <3>  %if (total_space % 16) != 0
   282                              <3>  %assign total_space total_space + 8
   283                              <3>  %endif
   284 00002F94 4883C400            <3>  add rsp, total_space
   196                              <2> 
    70                              <1>     function init_interrupt
   160                              <2>  %assign param_count %0 - 2
   161                              <2> 
   162                              <2>  %if param_count < 0
   163                              <2>  %assign param_count 0
   164                              <2>  %endif
   165                              <2>  %if param_count < 1
   166                              <2>  %assign ret_param_count 0
   167                              <2>  %else
   168                              <2>  %assign ret_param_count %2
   169                              <2>  %endif
   170                              <2> 
   171                              <2> 
   172                              <2>  prepare_call param_count, ret_param_count
   270                              <3>  %assign total_space ((%1 + %2) * 8)
   271                              <3> 
   272                              <3>  %if (total_space % 16) != 0
   273                              <3>  %assign total_space total_space + 8
   274                              <3>  %endif
   275                              <3> 
   276 00002F98 4883EC00            <3>  sub rsp, total_space
   173                              <2> 
   174                              <2> 
   175                              <2>  %if param_count > 0
   176                              <2>  %assign i 0
   177                              <2> 
   178                              <2>  %rep param_count
   179                              <2>  %rotate 1
   180                              <2> 
   181                              <2> 
   182                              <2>  push qword %2
   183                              <2>  pop qword [rsp + 8*i]
   184                              <2>  %assign i i+1
   185                              <2>  %endrep
   186                              <2>  %rotate 1
   187                              <2>  %rotate 1
   188                              <2> 
   189                              <2>  %endif
   190                              <2> 
   191                              <2> 
   192 00002F9C E8BDE4FFFF          <2>  call %1
   193                              <2> 
   194                              <2> 
   195                              <2>  cleanup_call param_count, ret_param_count
   280                              <3>  %assign total_space ((%1 + %2) * 8)
   281                              <3>  %if (total_space % 16) != 0
   282                              <3>  %assign total_space total_space + 8
   283                              <3>  %endif
   284 00002FA1 4883C400            <3>  add rsp, total_space
   196                              <2> 
    71                              <1> 
    72                              <1>     epilog
   254                              <2>  popallq
   305 00002FA5 415F                <3>  pop r15
   306 00002FA7 415E                <3>  pop r14
   307 00002FA9 415D                <3>  pop r13
   308 00002FAB 415C                <3>  pop r12
   309 00002FAD 415B                <3>  pop r11
   310 00002FAF 415A                <3>  pop r10
   311 00002FB1 4159                <3>  pop r9
   312 00002FB3 4158                <3>  pop r8
   313 00002FB5 5F                  <3>  pop rdi
   314 00002FB6 5E                  <3>  pop rsi
   315 00002FB7 5A                  <3>  pop rdx
   316 00002FB8 59                  <3>  pop rcx
   317 00002FB9 5B                  <3>  pop rbx
   318 00002FBA 58                  <3>  pop rax
   255                              <2> 
   256 00002FBB 4889EC              <2>  mov rsp, rbp
   257 00002FBE 5D                  <2>  pop rbp
   258 00002FBF C3                  <2>  ret
    73                              <1> setup_default_tss:;setup tss
    74                              <1>     prolog 0;
   234 00002FC0 55                  <2>  push rbp
   235 00002FC1 4889E5              <2>  mov rbp, rsp
   236                              <2> 
   237                              <2> 
   238 00002FC4 488945F8            <2>  mov [rbp-8],rax
   239 00002FC8 B800000000          <2>  mov rax, %1
   240 00002FCD 4883C00F            <2>  add rax, 15
   241 00002FD1 4883E0F0            <2>  and rax, ~15
   242 00002FD5 4829C4              <2>  sub rsp, rax
   243 00002FD8 488B45F8            <2>  mov rax,[rbp-8]
   244                              <2> 
   245                              <2>  pushallq
   288 00002FDC 50                  <3>  push rax
   289 00002FDD 53                  <3>  push rbx
   290 00002FDE 51                  <3>  push rcx
   291 00002FDF 52                  <3>  push rdx
   292 00002FE0 56                  <3>  push rsi
   293 00002FE1 57                  <3>  push rdi
   294 00002FE2 4150                <3>  push r8
   295 00002FE4 4151                <3>  push r9
   296 00002FE6 4152                <3>  push r10
   297 00002FE8 4153                <3>  push r11
   298 00002FEA 4154                <3>  push r12
   299 00002FEC 4155                <3>  push r13
   300 00002FEE 4156                <3>  push r14
   301 00002FF0 4157                <3>  push r15
   246                              <2> 
   247                              <2> 
   248                              <2> 
   249                              <2> 
   250                              <2> 
    75                              <1> 
    76 00002FF2 48BB004010000080FF- <1>     mov rbx, GDTPointerUpperAddr
    76 00002FFB FF                  <1>
    77 00002FFC 488B5B02            <1>     mov rbx, [rbx + 2]
    78 00003000 4883C340            <1>     add rbx, 0x40
    79                              <1> 
    80 00003004 48B8144010000080FF- <1>     mov rax, TSSPointerUpperAddr
    80 0000300D FF                  <1>
    81 0000300E 668B10              <1>     mov  dx,word [rax]
    82 00003011 488B4002            <1>     mov rax, [rax + 2]
    83                              <1>     ; jmp $
    84 00003015 668913              <1>     mov word [rbx + tss_descriptor.limit_low], dx
    85 00003018 66894302            <1>     mov word [rbx + tss_descriptor.base_low], ax
    86 0000301C 48C1E810            <1>     shr rax, 16
    87                              <1> 
    88 00003020 884304              <1>     mov byte [rbx + tss_descriptor.base_mid], al
    89 00003023 C6430589            <1>     mov byte [rbx + tss_descriptor.type], 0x89
    90 00003027 C6430600            <1>     mov byte [rbx + tss_descriptor.limit_high], 0x00
    91 0000302B 48C1E808            <1>     shr rax, 8
    92                              <1> 
    93 0000302F 884307              <1>     mov byte [rbx + tss_descriptor.base_high], al
    94 00003032 48C1E808            <1>     shr rax, 8
    95                              <1> 
    96 00003036 894308              <1>     mov dword [rbx + tss_descriptor.base_upper], eax
    97 00003039 C7430C00000000      <1>     mov dword [rbx + tss_descriptor.reserved], 0x00
    98                              <1> 
    99                              <1> 
   100 00003040 48B8144010000080FF- <1>     mov rax, TSSPointerUpperAddr
   100 00003049 FF                  <1>
   101 0000304A 488B5802            <1>     mov rbx, [rax + 2]
   102                              <1> 
   103 0000304E 48B8007C00000080FF- <1>     mov rax, 0xffff800000007c00
   103 00003057 FF                  <1>
   104                              <1>     ; mov qword [rbx + tss_table_info.reserved1], 0x00
   105 00003058 48894304            <1>     mov qword [rbx + tss_table_info.rsp0], rax
   106 0000305C 4889430C            <1>     mov qword [rbx + tss_table_info.rsp1], rax
   107 00003060 48894314            <1>     mov qword [rbx + tss_table_info.rsp2], rax
   108                              <1>     ; mov qword [rbx + tss_table_info.reserved2], 0x00
   109 00003064 48894324            <1>     mov qword [rbx + tss_table_info.ist1], rax
   110 00003068 4889432C            <1>     mov qword [rbx + tss_table_info.ist2], rax
   111 0000306C 48894334            <1>     mov qword [rbx + tss_table_info.ist3], rax
   112 00003070 4889433C            <1>     mov qword [rbx + tss_table_info.ist4], rax
   113 00003074 48894344            <1>     mov qword [rbx + tss_table_info.ist5], rax
   114 00003078 4889434C            <1>     mov qword [rbx + tss_table_info.ist6], rax
   115 0000307C 48894354            <1>     mov qword [rbx + tss_table_info.ist7], rax
   116                              <1> 
   117                              <1>     ; mov qword [rbx + tss_table_info.reserved3], 0x00
   118                              <1>     ; mov qword [rbx + tss_table_info.reserved4], 0x00
   119                              <1> 
   120 00003080 C7436468000000      <1>     mov dword [rbx + tss_table_info.io_map_base], 104
   121                              <1>     
   122 00003087 66B94000            <1>     mov cx, 0x0040
   123 0000308B 0F00D9              <1>     ltr cx
   124                              <1>     
   125                              <1>     epilog
   254                              <2>  popallq
   305 0000308E 415F                <3>  pop r15
   306 00003090 415E                <3>  pop r14
   307 00003092 415D                <3>  pop r13
   308 00003094 415C                <3>  pop r12
   309 00003096 415B                <3>  pop r11
   310 00003098 415A                <3>  pop r10
   311 0000309A 4159                <3>  pop r9
   312 0000309C 4158                <3>  pop r8
   313 0000309E 5F                  <3>  pop rdi
   314 0000309F 5E                  <3>  pop rsi
   315 000030A0 5A                  <3>  pop rdx
   316 000030A1 59                  <3>  pop rcx
   317 000030A2 5B                  <3>  pop rbx
   318 000030A3 58                  <3>  pop rax
   255                              <2> 
   256 000030A4 4889EC              <2>  mov rsp, rbp
   257 000030A7 5D                  <2>  pop rbp
   258 000030A8 C3                  <2>  ret
   126                              <1> 
   127                              <1> 
   128                              <1> test_printk:;test printk
   129                              <1>     prolog 2;
   234 000030A9 55                  <2>  push rbp
   235 000030AA 4889E5              <2>  mov rbp, rsp
   236                              <2> 
   237                              <2> 
   238 000030AD 488945F8            <2>  mov [rbp-8],rax
   239 000030B1 B802000000          <2>  mov rax, %1
   240 000030B6 4883C00F            <2>  add rax, 15
   241 000030BA 4883E0F0            <2>  and rax, ~15
   242 000030BE 4829C4              <2>  sub rsp, rax
   243 000030C1 488B45F8            <2>  mov rax,[rbp-8]
   244                              <2> 
   245                              <2>  pushallq
   288 000030C5 50                  <3>  push rax
   289 000030C6 53                  <3>  push rbx
   290 000030C7 51                  <3>  push rcx
   291 000030C8 52                  <3>  push rdx
   292 000030C9 56                  <3>  push rsi
   293 000030CA 57                  <3>  push rdi
   294 000030CB 4150                <3>  push r8
   295 000030CD 4151                <3>  push r9
   296 000030CF 4152                <3>  push r10
   297 000030D1 4153                <3>  push r11
   298 000030D3 4154                <3>  push r12
   299 000030D5 4155                <3>  push r13
   300 000030D7 4156                <3>  push r14
   301 000030D9 4157                <3>  push r15
   246                              <2> 
   247                              <2> 
   248                              <2> 
   249                              <2> 
   250                              <2> 
   130                              <1> 
   131                              <1>     ; function draw_char,1,0,0,'A'
   132                              <1>     ; function print_char,1,'a'
   133                              <1>     ; function print_char,1,'b'
   134                              <1> 
   135                              <1>     ; function print_char,1,'a'
   136                              <1>     ; function print_char,1,'b'
   137                              <1>     ;     function print_char,1,'a'
   138                              <1>     ; function print_char,1,'b'
   139                              <1> 
   140                              <1>     ;     function print_char,1,'a'
   141                              <1>     ; function print_char,1,'b'
   142                              <1> 
   143                              <1> 
   144                              <1>     ;     lea rsi,[rel messages2]    
   145                              <1>     ;    function print_string,1,rsi
   146                              <1> 
   147                              <1>     ;     lea rsi,[rel messages1]
   148                              <1>     ;     function print_string,1,rsi
   149                              <1> 
   150                              <1>     ;     lea rsi,[rel messages2]    
   151                              <1>     ;    function print_string,1,rsi
   152                              <1> 
   153                              <1>     ;     lea rsi,[rel messages1]
   154                              <1>     ;     function print_string,1,rsi
   155                              <1> 
   156                              <1> 
   157                              <1> 
   158                              <1>     ; lea rsi,[rel decimal_messages]    
   159                              <1>     ; function print_decimal,1,rsi
   160                              <1> 
   161                              <1>     ; lea rsi,[rel hex_messages]    
   162                              <1>     ; function print_hex,1,rsi
   163                              <1> 
   164                              <1>     ; lea rsi,[rel hex_messages]    
   165                              <1>     ; function print_hex,1,rsi
   166                              <1> 
   167                              <1>     ; lea rsi, [rel format1]
   168                              <1>     ; lea rdx, [rel string1]
   169                              <1>     ; function printk,1,rsi,rdx
   170                              <1> 
   171                              <1>     ; lea rsi, [rel format1]
   172                              <1>     ; lea rdx, [rel string1]
   173                              <1>     ; function printk,1,rsi,rdx
   174                              <1> 
   175                              <1>     ;     lea rsi, [rel format1]
   176                              <1>     ; lea rdx, [rel string1]
   177                              <1>     ; function printk,1,rsi,rdx
   178                              <1> 
   179                              <1>     ;     lea rsi, [rel format1]
   180                              <1>     ; lea rdx, [rel string1]
   181                              <1>     ; function printk,1,rsi,rdx
   182                              <1> 
   183                              <1>     ; lea rsi, [rel format1]
   184                              <1>     ; lea rdx, [rel string1]
   185                              <1>     ; function printk,1,rsi,rdx
   186                              <1> 
   187                              <1> 
   188                              <1>     ;         lea rsi,[rel messages]    
   189                              <1>     ;    function print_string,1,rsi
   190                              <1> 
   191 000030DB 488D358E040000      <1>         lea rsi,[rel messages3]
   192                              <1>         function print_string,1,rsi
   160                              <2>  %assign param_count %0 - 2
   161                              <2> 
   162                              <2>  %if param_count < 0
   163                              <2>  %assign param_count 0
   164                              <2>  %endif
   165                              <2>  %if param_count < 1
   166                              <2>  %assign ret_param_count 0
   167                              <2>  %else
   168                              <2>  %assign ret_param_count %2
   169                              <2>  %endif
   170                              <2> 
   171                              <2> 
   172                              <2>  prepare_call param_count, ret_param_count
   270                              <3>  %assign total_space ((%1 + %2) * 8)
   271                              <3> 
   272                              <3>  %if (total_space % 16) != 0
   273                              <3>  %assign total_space total_space + 8
   274                              <3>  %endif
   275                              <3> 
   276 000030E2 4883EC10            <3>  sub rsp, total_space
   173                              <2> 
   174                              <2> 
   175                              <2>  %if param_count > 0
   176                              <2>  %assign i 0
   177                              <2> 
   178                              <2>  %rep param_count
   179                              <2>  %rotate 1
   180                              <2> 
   181                              <2> 
   182                              <2>  push qword %2
   183                              <2>  pop qword [rsp + 8*i]
   184                              <2>  %assign i i+1
   185                              <2>  %endrep
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 000030E6 56                  <3>  push qword %2
   183 000030E7 8F0424              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   186                              <2>  %rotate 1
   187                              <2>  %rotate 1
   188                              <2> 
   189                              <2>  %endif
   190                              <2> 
   191                              <2> 
   192 000030EA E845DBFFFF          <2>  call %1
   193                              <2> 
   194                              <2> 
   195                              <2>  cleanup_call param_count, ret_param_count
   280                              <3>  %assign total_space ((%1 + %2) * 8)
   281                              <3>  %if (total_space % 16) != 0
   282                              <3>  %assign total_space total_space + 8
   283                              <3>  %endif
   284 000030EF 4883C410            <3>  add rsp, total_space
   196                              <2> 
   193                              <1> 
   194 000030F3 488D35CC050000      <1>     lea rsi, [rel format1]
   195 000030FA 488D15F1050000      <1>     lea rdx, [rel string1]
   196                              <1>     function printk,1,rsi,rdx
   160                              <2>  %assign param_count %0 - 2
   161                              <2> 
   162                              <2>  %if param_count < 0
   163                              <2>  %assign param_count 0
   164                              <2>  %endif
   165                              <2>  %if param_count < 1
   166                              <2>  %assign ret_param_count 0
   167                              <2>  %else
   168                              <2>  %assign ret_param_count %2
   169                              <2>  %endif
   170                              <2> 
   171                              <2> 
   172                              <2>  prepare_call param_count, ret_param_count
   270                              <3>  %assign total_space ((%1 + %2) * 8)
   271                              <3> 
   272                              <3>  %if (total_space % 16) != 0
   273                              <3>  %assign total_space total_space + 8
   274                              <3>  %endif
   275                              <3> 
   276 00003101 4883EC20            <3>  sub rsp, total_space
   173                              <2> 
   174                              <2> 
   175                              <2>  %if param_count > 0
   176                              <2>  %assign i 0
   177                              <2> 
   178                              <2>  %rep param_count
   179                              <2>  %rotate 1
   180                              <2> 
   181                              <2> 
   182                              <2>  push qword %2
   183                              <2>  pop qword [rsp + 8*i]
   184                              <2>  %assign i i+1
   185                              <2>  %endrep
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 00003105 56                  <3>  push qword %2
   183 00003106 8F0424              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 00003109 52                  <3>  push qword %2
   183 0000310A 8F442408            <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   186                              <2>  %rotate 1
   187                              <2>  %rotate 1
   188                              <2> 
   189                              <2>  %endif
   190                              <2> 
   191                              <2> 
   192 0000310E E8F4D7FFFF          <2>  call %1
   193                              <2> 
   194                              <2> 
   195                              <2>  cleanup_call param_count, ret_param_count
   280                              <3>  %assign total_space ((%1 + %2) * 8)
   281                              <3>  %if (total_space % 16) != 0
   282                              <3>  %assign total_space total_space + 8
   283                              <3>  %endif
   284 00003113 4883C420            <3>  add rsp, total_space
   196                              <2> 
   197                              <1> 
   198                              <1>     ;     lea rsi, [rel format1]
   199                              <1>     ; lea rdx, [rel string1]
   200                              <1>     ; function printk,1,rsi,rdx
   201                              <1> 
   202                              <1>     ;     lea rsi, [rel format1]
   203                              <1>     ; lea rdx, [rel string1]
   204                              <1>     ; function printk,1,rsi,rdx
   205                              <1> 
   206                              <1>     ; lea rsi, [rel format1]
   207                              <1>     ; lea rdx, [rel string1]
   208                              <1>     ; function printk,1,rsi,rdx
   209                              <1> 
   210                              <1> 
   211                              <1>     ;         lea rsi,[rel messages]    
   212                              <1>     ;    function print_string,1,rsi
   213                              <1> 
   214                              <1>     ;     lea rsi,[rel messages3]
   215                              <1>     ;     function print_string,1,rsi
   216                              <1> 
   217                              <1>     ;         lea rsi, [rel format1]
   218                              <1>     ; lea rdx, [rel string1]
   219                              <1>     ; function printk,1,rsi,rdx
   220                              <1> 
   221                              <1>     ; lea rsi, [rel format1]
   222                              <1>     ; lea rdx, [rel string1]
   223                              <1>     ; function printk,1,rsi,rdx
   224                              <1> 
   225                              <1>     ;     lea rsi, [rel format1]
   226                              <1>     ; lea rdx, [rel string1]
   227                              <1>     ; function printk,1,rsi,rdx
   228                              <1> 
   229                              <1>     ;     lea rsi, [rel format1]
   230                              <1>     ; lea rdx, [rel string1]
   231                              <1>     ; function printk,1,rsi,rdx
   232                              <1> 
   233                              <1>     ; lea rsi, [rel format1]
   234                              <1>     ; lea rdx, [rel string1]
   235                              <1>     ; function printk,1,rsi,rdx
   236                              <1> 
   237                              <1> 
   238                              <1>     ;         lea rsi,[rel messages]    
   239                              <1>     ;    function print_string,1,rsi
   240                              <1> 
   241                              <1>     ;     lea rsi,[rel messages3]
   242                              <1>     ;     function print_string,1,rsi
   243                              <1> 
   244                              <1>     ;         lea rsi, [rel format1]
   245                              <1>     ; lea rdx, [rel string1]
   246                              <1>     ; function printk,1,rsi,rdx
   247                              <1> 
   248                              <1>     ; lea rsi, [rel format1]
   249                              <1>     ; lea rdx, [rel string1]
   250                              <1>     ; function printk,1,rsi,rdx
   251                              <1> 
   252                              <1>     ;     lea rsi, [rel format1]
   253                              <1>     ; lea rdx, [rel string1]
   254                              <1>     ; function printk,1,rsi,rdx
   255                              <1> 
   256                              <1>     ;     lea rsi, [rel format1]
   257                              <1>     ; lea rdx, [rel string1]
   258                              <1>     ; function printk,1,rsi,rdx
   259                              <1> 
   260                              <1>     ; lea rsi, [rel format1]
   261                              <1>     ; lea rdx, [rel string1]
   262                              <1>     ; function printk,1,rsi,rdx
   263                              <1> 
   264                              <1> 
   265                              <1>     ;         lea rsi,[rel messages]    
   266                              <1>     ;    function print_string,1,rsi
   267                              <1> 
   268                              <1>     ;     lea rsi,[rel messages3]
   269                              <1>     ;     function print_string,1,rsi
   270                              <1> 
   271                              <1>     
   272                              <1>     ; lea rsi, [rel format2]
   273                              <1>     ; lea rdx, [rel decimal_messages]
   274                              <1>     ; function printk,1,rsi,rdx
   275                              <1> 
   276                              <1>     ; lea rsi, [rel format3]
   277                              <1>     ; lea rdx, [rel hex_messages]
   278                              <1>     ; function printk,1,rsi,rdx
   279                              <1> 
   280                              <1> 
   281                              <1>     ;     lea rsi,[rel decimal_messages]    
   282                              <1>     ; function print_decimal,1,rsi
   283                              <1> 
   284                              <1>     ;     lea rsi,[rel decimal_messages]    
   285                              <1>     ; function print_decimal,1,rsi
   286                              <1> 
   287                              <1>     ; lea rsi,[rel messages1]
   288                              <1>     ; function draw_string,1,0,20,rsi
   289                              <1> 
   290                              <1>     ; lea rsi,[rel messages2]
   291                              <1>     ; function draw_string,1,0,40,rsi
   292                              <1> 
   293                              <1>     ; lea rsi,[rel messages3]
   294                              <1>     ; function draw_string,1,0,60,rsi
   295                              <1> 
   296                              <1>     ; lea rsi,[rel messages4]
   297                              <1>     ; function draw_string,1,0,80,rsi
   298                              <1> 
   299                              <1>     ; lea rsi,[rel hex_messages]
   300                              <1>     ; function draw_hex,1,0,100,rsi
   301                              <1> 
   302                              <1>     ; lea rsi,[rel decimal_messages]
   303                              <1>     ; function draw_decimal,1,0,120,rsi
   304                              <1> 
   305                              <1> 
   306                              <1> 
   307                              <1>     epilog
   254                              <2>  popallq
   305 00003117 415F                <3>  pop r15
   306 00003119 415E                <3>  pop r14
   307 0000311B 415D                <3>  pop r13
   308 0000311D 415C                <3>  pop r12
   309 0000311F 415B                <3>  pop r11
   310 00003121 415A                <3>  pop r10
   311 00003123 4159                <3>  pop r9
   312 00003125 4158                <3>  pop r8
   313 00003127 5F                  <3>  pop rdi
   314 00003128 5E                  <3>  pop rsi
   315 00003129 5A                  <3>  pop rdx
   316 0000312A 59                  <3>  pop rcx
   317 0000312B 5B                  <3>  pop rbx
   318 0000312C 58                  <3>  pop rax
   255                              <2> 
   256 0000312D 4889EC              <2>  mov rsp, rbp
   257 00003130 5D                  <2>  pop rbp
   258 00003131 C3                  <2>  ret
   308                              <1> 
   309                              <1> test_video:;test video
   310                              <1>     prolog 2;
   234 00003132 55                  <2>  push rbp
   235 00003133 4889E5              <2>  mov rbp, rsp
   236                              <2> 
   237                              <2> 
   238 00003136 488945F8            <2>  mov [rbp-8],rax
   239 0000313A B802000000          <2>  mov rax, %1
   240 0000313F 4883C00F            <2>  add rax, 15
   241 00003143 4883E0F0            <2>  and rax, ~15
   242 00003147 4829C4              <2>  sub rsp, rax
   243 0000314A 488B45F8            <2>  mov rax,[rbp-8]
   244                              <2> 
   245                              <2>  pushallq
   288 0000314E 50                  <3>  push rax
   289 0000314F 53                  <3>  push rbx
   290 00003150 51                  <3>  push rcx
   291 00003151 52                  <3>  push rdx
   292 00003152 56                  <3>  push rsi
   293 00003153 57                  <3>  push rdi
   294 00003154 4150                <3>  push r8
   295 00003156 4151                <3>  push r9
   296 00003158 4152                <3>  push r10
   297 0000315A 4153                <3>  push r11
   298 0000315C 4154                <3>  push r12
   299 0000315E 4155                <3>  push r13
   300 00003160 4156                <3>  push r14
   301 00003162 4157                <3>  push r15
   246                              <2> 
   247                              <2> 
   248                              <2> 
   249                              <2> 
   250                              <2> 
   311                              <1> 
   312 00003164 4831C0              <1>     xor rax,rax 
   313 00003167 4831D2              <1>     xor rdx,rdx
   314 0000316A 668B056DCFFFFF      <1>     mov ax,word [rel video_info_ptr + video_info.xpixel]
   315 00003171 48890588050000      <1>     mov [rel decimal_messages], rax
   316 00003178 488D3506030000      <1>     lea rsi, [rel init_video_xpixel]
   317 0000317F 488D157A050000      <1>     lea rdx, [rel decimal_messages]
   318                              <1>     function printk,1,rsi,rdx
   160                              <2>  %assign param_count %0 - 2
   161                              <2> 
   162                              <2>  %if param_count < 0
   163                              <2>  %assign param_count 0
   164                              <2>  %endif
   165                              <2>  %if param_count < 1
   166                              <2>  %assign ret_param_count 0
   167                              <2>  %else
   168                              <2>  %assign ret_param_count %2
   169                              <2>  %endif
   170                              <2> 
   171                              <2> 
   172                              <2>  prepare_call param_count, ret_param_count
   270                              <3>  %assign total_space ((%1 + %2) * 8)
   271                              <3> 
   272                              <3>  %if (total_space % 16) != 0
   273                              <3>  %assign total_space total_space + 8
   274                              <3>  %endif
   275                              <3> 
   276 00003186 4883EC20            <3>  sub rsp, total_space
   173                              <2> 
   174                              <2> 
   175                              <2>  %if param_count > 0
   176                              <2>  %assign i 0
   177                              <2> 
   178                              <2>  %rep param_count
   179                              <2>  %rotate 1
   180                              <2> 
   181                              <2> 
   182                              <2>  push qword %2
   183                              <2>  pop qword [rsp + 8*i]
   184                              <2>  %assign i i+1
   185                              <2>  %endrep
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 0000318A 56                  <3>  push qword %2
   183 0000318B 8F0424              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 0000318E 52                  <3>  push qword %2
   183 0000318F 8F442408            <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   186                              <2>  %rotate 1
   187                              <2>  %rotate 1
   188                              <2> 
   189                              <2>  %endif
   190                              <2> 
   191                              <2> 
   192 00003193 E86FD7FFFF          <2>  call %1
   193                              <2> 
   194                              <2> 
   195                              <2>  cleanup_call param_count, ret_param_count
   280                              <3>  %assign total_space ((%1 + %2) * 8)
   281                              <3>  %if (total_space % 16) != 0
   282                              <3>  %assign total_space total_space + 8
   283                              <3>  %endif
   284 00003198 4883C420            <3>  add rsp, total_space
   196                              <2> 
   319                              <1> 
   320 0000319C 4831C0              <1>     xor rax,rax 
   321 0000319F 4831D2              <1>     xor rdx,rdx
   322 000031A2 668B0537CFFFFF      <1>     mov ax,word [rel video_info_ptr + video_info.ypixel]
   323 000031A9 48890550050000      <1>     mov [rel decimal_messages], rax
   324 000031B0 488D35E9020000      <1>     lea rsi, [rel init_video_ypixel]
   325 000031B7 488D1542050000      <1>     lea rdx, [rel decimal_messages]
   326                              <1>     function printk,1,rsi,rdx
   160                              <2>  %assign param_count %0 - 2
   161                              <2> 
   162                              <2>  %if param_count < 0
   163                              <2>  %assign param_count 0
   164                              <2>  %endif
   165                              <2>  %if param_count < 1
   166                              <2>  %assign ret_param_count 0
   167                              <2>  %else
   168                              <2>  %assign ret_param_count %2
   169                              <2>  %endif
   170                              <2> 
   171                              <2> 
   172                              <2>  prepare_call param_count, ret_param_count
   270                              <3>  %assign total_space ((%1 + %2) * 8)
   271                              <3> 
   272                              <3>  %if (total_space % 16) != 0
   273                              <3>  %assign total_space total_space + 8
   274                              <3>  %endif
   275                              <3> 
   276 000031BE 4883EC20            <3>  sub rsp, total_space
   173                              <2> 
   174                              <2> 
   175                              <2>  %if param_count > 0
   176                              <2>  %assign i 0
   177                              <2> 
   178                              <2>  %rep param_count
   179                              <2>  %rotate 1
   180                              <2> 
   181                              <2> 
   182                              <2>  push qword %2
   183                              <2>  pop qword [rsp + 8*i]
   184                              <2>  %assign i i+1
   185                              <2>  %endrep
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 000031C2 56                  <3>  push qword %2
   183 000031C3 8F0424              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 000031C6 52                  <3>  push qword %2
   183 000031C7 8F442408            <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   186                              <2>  %rotate 1
   187                              <2>  %rotate 1
   188                              <2> 
   189                              <2>  %endif
   190                              <2> 
   191                              <2> 
   192 000031CB E837D7FFFF          <2>  call %1
   193                              <2> 
   194                              <2> 
   195                              <2>  cleanup_call param_count, ret_param_count
   280                              <3>  %assign total_space ((%1 + %2) * 8)
   281                              <3>  %if (total_space % 16) != 0
   282                              <3>  %assign total_space total_space + 8
   283                              <3>  %endif
   284 000031D0 4883C420            <3>  add rsp, total_space
   196                              <2> 
   327                              <1> 
   328 000031D4 4831C0              <1>     xor rax,rax 
   329 000031D7 4831D2              <1>     xor rdx,rdx
   330 000031DA 668B0501CFFFFF      <1>     mov ax,word [rel video_info_ptr + video_info.byte_per_pixel]
   331 000031E1 48890518050000      <1>     mov [rel decimal_messages], rax
   332 000031E8 488D35BF020000      <1>     lea rsi, [rel init_video_byteperpixel]
   333 000031EF 488D150A050000      <1>     lea rdx, [rel decimal_messages]
   334                              <1>     function printk,1,rsi,rdx
   160                              <2>  %assign param_count %0 - 2
   161                              <2> 
   162                              <2>  %if param_count < 0
   163                              <2>  %assign param_count 0
   164                              <2>  %endif
   165                              <2>  %if param_count < 1
   166                              <2>  %assign ret_param_count 0
   167                              <2>  %else
   168                              <2>  %assign ret_param_count %2
   169                              <2>  %endif
   170                              <2> 
   171                              <2> 
   172                              <2>  prepare_call param_count, ret_param_count
   270                              <3>  %assign total_space ((%1 + %2) * 8)
   271                              <3> 
   272                              <3>  %if (total_space % 16) != 0
   273                              <3>  %assign total_space total_space + 8
   274                              <3>  %endif
   275                              <3> 
   276 000031F6 4883EC20            <3>  sub rsp, total_space
   173                              <2> 
   174                              <2> 
   175                              <2>  %if param_count > 0
   176                              <2>  %assign i 0
   177                              <2> 
   178                              <2>  %rep param_count
   179                              <2>  %rotate 1
   180                              <2> 
   181                              <2> 
   182                              <2>  push qword %2
   183                              <2>  pop qword [rsp + 8*i]
   184                              <2>  %assign i i+1
   185                              <2>  %endrep
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 000031FA 56                  <3>  push qword %2
   183 000031FB 8F0424              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 000031FE 52                  <3>  push qword %2
   183 000031FF 8F442408            <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   186                              <2>  %rotate 1
   187                              <2>  %rotate 1
   188                              <2> 
   189                              <2>  %endif
   190                              <2> 
   191                              <2> 
   192 00003203 E8FFD6FFFF          <2>  call %1
   193                              <2> 
   194                              <2> 
   195                              <2>  cleanup_call param_count, ret_param_count
   280                              <3>  %assign total_space ((%1 + %2) * 8)
   281                              <3>  %if (total_space % 16) != 0
   282                              <3>  %assign total_space total_space + 8
   283                              <3>  %endif
   284 00003208 4883C420            <3>  add rsp, total_space
   196                              <2> 
   335                              <1> 
   336                              <1> 
   337                              <1> 
   338                              <1>     ; function draw_screen,0,0x00000000
   339                              <1>     function draw_pixel,1,1000,200,0x00FFFFFF
   160                              <2>  %assign param_count %0 - 2
   161                              <2> 
   162                              <2>  %if param_count < 0
   163                              <2>  %assign param_count 0
   164                              <2>  %endif
   165                              <2>  %if param_count < 1
   166                              <2>  %assign ret_param_count 0
   167                              <2>  %else
   168                              <2>  %assign ret_param_count %2
   169                              <2>  %endif
   170                              <2> 
   171                              <2> 
   172                              <2>  prepare_call param_count, ret_param_count
   270                              <3>  %assign total_space ((%1 + %2) * 8)
   271                              <3> 
   272                              <3>  %if (total_space % 16) != 0
   273                              <3>  %assign total_space total_space + 8
   274                              <3>  %endif
   275                              <3> 
   276 0000320C 4883EC20            <3>  sub rsp, total_space
   173                              <2> 
   174                              <2> 
   175                              <2>  %if param_count > 0
   176                              <2>  %assign i 0
   177                              <2> 
   178                              <2>  %rep param_count
   179                              <2>  %rotate 1
   180                              <2> 
   181                              <2> 
   182                              <2>  push qword %2
   183                              <2>  pop qword [rsp + 8*i]
   184                              <2>  %assign i i+1
   185                              <2>  %endrep
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 00003210 68E8030000          <3>  push qword %2
   183 00003215 8F0424              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 00003218 68C8000000          <3>  push qword %2
   183 0000321D 8F442408            <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 00003221 68FFFFFF00          <3>  push qword %2
   183 00003226 8F442410            <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   186                              <2>  %rotate 1
   187                              <2>  %rotate 1
   188                              <2> 
   189                              <2>  %endif
   190                              <2> 
   191                              <2> 
   192 0000322A E866CFFFFF          <2>  call %1
   193                              <2> 
   194                              <2> 
   195                              <2>  cleanup_call param_count, ret_param_count
   280                              <3>  %assign total_space ((%1 + %2) * 8)
   281                              <3>  %if (total_space % 16) != 0
   282                              <3>  %assign total_space total_space + 8
   283                              <3>  %endif
   284 0000322F 4883C420            <3>  add rsp, total_space
   196                              <2> 
   340                              <1>     function draw_line,1,1100,300,1300,500,0x00FFFFFF
   160                              <2>  %assign param_count %0 - 2
   161                              <2> 
   162                              <2>  %if param_count < 0
   163                              <2>  %assign param_count 0
   164                              <2>  %endif
   165                              <2>  %if param_count < 1
   166                              <2>  %assign ret_param_count 0
   167                              <2>  %else
   168                              <2>  %assign ret_param_count %2
   169                              <2>  %endif
   170                              <2> 
   171                              <2> 
   172                              <2>  prepare_call param_count, ret_param_count
   270                              <3>  %assign total_space ((%1 + %2) * 8)
   271                              <3> 
   272                              <3>  %if (total_space % 16) != 0
   273                              <3>  %assign total_space total_space + 8
   274                              <3>  %endif
   275                              <3> 
   276 00003233 4883EC30            <3>  sub rsp, total_space
   173                              <2> 
   174                              <2> 
   175                              <2>  %if param_count > 0
   176                              <2>  %assign i 0
   177                              <2> 
   178                              <2>  %rep param_count
   179                              <2>  %rotate 1
   180                              <2> 
   181                              <2> 
   182                              <2>  push qword %2
   183                              <2>  pop qword [rsp + 8*i]
   184                              <2>  %assign i i+1
   185                              <2>  %endrep
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 00003237 684C040000          <3>  push qword %2
   183 0000323C 8F0424              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 0000323F 682C010000          <3>  push qword %2
   183 00003244 8F442408            <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 00003248 6814050000          <3>  push qword %2
   183 0000324D 8F442410            <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 00003251 68F4010000          <3>  push qword %2
   183 00003256 8F442418            <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 0000325A 68FFFFFF00          <3>  push qword %2
   183 0000325F 8F442420            <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   186                              <2>  %rotate 1
   187                              <2>  %rotate 1
   188                              <2> 
   189                              <2>  %endif
   190                              <2> 
   191                              <2> 
   192 00003263 E8B4CFFFFF          <2>  call %1
   193                              <2> 
   194                              <2> 
   195                              <2>  cleanup_call param_count, ret_param_count
   280                              <3>  %assign total_space ((%1 + %2) * 8)
   281                              <3>  %if (total_space % 16) != 0
   282                              <3>  %assign total_space total_space + 8
   283                              <3>  %endif
   284 00003268 4883C430            <3>  add rsp, total_space
   196                              <2> 
   341                              <1>     function draw_line,1,1300,300,1100,500,0x00FFFFFF
   160                              <2>  %assign param_count %0 - 2
   161                              <2> 
   162                              <2>  %if param_count < 0
   163                              <2>  %assign param_count 0
   164                              <2>  %endif
   165                              <2>  %if param_count < 1
   166                              <2>  %assign ret_param_count 0
   167                              <2>  %else
   168                              <2>  %assign ret_param_count %2
   169                              <2>  %endif
   170                              <2> 
   171                              <2> 
   172                              <2>  prepare_call param_count, ret_param_count
   270                              <3>  %assign total_space ((%1 + %2) * 8)
   271                              <3> 
   272                              <3>  %if (total_space % 16) != 0
   273                              <3>  %assign total_space total_space + 8
   274                              <3>  %endif
   275                              <3> 
   276 0000326C 4883EC30            <3>  sub rsp, total_space
   173                              <2> 
   174                              <2> 
   175                              <2>  %if param_count > 0
   176                              <2>  %assign i 0
   177                              <2> 
   178                              <2>  %rep param_count
   179                              <2>  %rotate 1
   180                              <2> 
   181                              <2> 
   182                              <2>  push qword %2
   183                              <2>  pop qword [rsp + 8*i]
   184                              <2>  %assign i i+1
   185                              <2>  %endrep
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 00003270 6814050000          <3>  push qword %2
   183 00003275 8F0424              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 00003278 682C010000          <3>  push qword %2
   183 0000327D 8F442408            <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 00003281 684C040000          <3>  push qword %2
   183 00003286 8F442410            <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 0000328A 68F4010000          <3>  push qword %2
   183 0000328F 8F442418            <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 00003293 68FFFFFF00          <3>  push qword %2
   183 00003298 8F442420            <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   186                              <2>  %rotate 1
   187                              <2>  %rotate 1
   188                              <2> 
   189                              <2>  %endif
   190                              <2> 
   191                              <2> 
   192 0000329C E87BCFFFFF          <2>  call %1
   193                              <2> 
   194                              <2> 
   195                              <2>  cleanup_call param_count, ret_param_count
   280                              <3>  %assign total_space ((%1 + %2) * 8)
   281                              <3>  %if (total_space % 16) != 0
   282                              <3>  %assign total_space total_space + 8
   283                              <3>  %endif
   284 000032A1 4883C430            <3>  add rsp, total_space
   196                              <2> 
   342                              <1>     function draw_rect,1,1100,300,1300,500,0x00FFFFFF
   160                              <2>  %assign param_count %0 - 2
   161                              <2> 
   162                              <2>  %if param_count < 0
   163                              <2>  %assign param_count 0
   164                              <2>  %endif
   165                              <2>  %if param_count < 1
   166                              <2>  %assign ret_param_count 0
   167                              <2>  %else
   168                              <2>  %assign ret_param_count %2
   169                              <2>  %endif
   170                              <2> 
   171                              <2> 
   172                              <2>  prepare_call param_count, ret_param_count
   270                              <3>  %assign total_space ((%1 + %2) * 8)
   271                              <3> 
   272                              <3>  %if (total_space % 16) != 0
   273                              <3>  %assign total_space total_space + 8
   274                              <3>  %endif
   275                              <3> 
   276 000032A5 4883EC30            <3>  sub rsp, total_space
   173                              <2> 
   174                              <2> 
   175                              <2>  %if param_count > 0
   176                              <2>  %assign i 0
   177                              <2> 
   178                              <2>  %rep param_count
   179                              <2>  %rotate 1
   180                              <2> 
   181                              <2> 
   182                              <2>  push qword %2
   183                              <2>  pop qword [rsp + 8*i]
   184                              <2>  %assign i i+1
   185                              <2>  %endrep
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 000032A9 684C040000          <3>  push qword %2
   183 000032AE 8F0424              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 000032B1 682C010000          <3>  push qword %2
   183 000032B6 8F442408            <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 000032BA 6814050000          <3>  push qword %2
   183 000032BF 8F442410            <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 000032C3 68F4010000          <3>  push qword %2
   183 000032C8 8F442418            <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 000032CC 68FFFFFF00          <3>  push qword %2
   183 000032D1 8F442420            <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   186                              <2>  %rotate 1
   187                              <2>  %rotate 1
   188                              <2> 
   189                              <2>  %endif
   190                              <2> 
   191                              <2> 
   192 000032D5 E8A6D0FFFF          <2>  call %1
   193                              <2> 
   194                              <2> 
   195                              <2>  cleanup_call param_count, ret_param_count
   280                              <3>  %assign total_space ((%1 + %2) * 8)
   281                              <3>  %if (total_space % 16) != 0
   282                              <3>  %assign total_space total_space + 8
   283                              <3>  %endif
   284 000032DA 4883C430            <3>  add rsp, total_space
   196                              <2> 
   343                              <1>     function draw_circle,1,1200,400,100,0x00FFFFFF
   160                              <2>  %assign param_count %0 - 2
   161                              <2> 
   162                              <2>  %if param_count < 0
   163                              <2>  %assign param_count 0
   164                              <2>  %endif
   165                              <2>  %if param_count < 1
   166                              <2>  %assign ret_param_count 0
   167                              <2>  %else
   168                              <2>  %assign ret_param_count %2
   169                              <2>  %endif
   170                              <2> 
   171                              <2> 
   172                              <2>  prepare_call param_count, ret_param_count
   270                              <3>  %assign total_space ((%1 + %2) * 8)
   271                              <3> 
   272                              <3>  %if (total_space % 16) != 0
   273                              <3>  %assign total_space total_space + 8
   274                              <3>  %endif
   275                              <3> 
   276 000032DE 4883EC30            <3>  sub rsp, total_space
   173                              <2> 
   174                              <2> 
   175                              <2>  %if param_count > 0
   176                              <2>  %assign i 0
   177                              <2> 
   178                              <2>  %rep param_count
   179                              <2>  %rotate 1
   180                              <2> 
   181                              <2> 
   182                              <2>  push qword %2
   183                              <2>  pop qword [rsp + 8*i]
   184                              <2>  %assign i i+1
   185                              <2>  %endrep
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 000032E2 68B0040000          <3>  push qword %2
   183 000032E7 8F0424              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 000032EA 6890010000          <3>  push qword %2
   183 000032EF 8F442408            <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 000032F3 6A64                <3>  push qword %2
   183 000032F5 8F442410            <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 000032F9 68FFFFFF00          <3>  push qword %2
   183 000032FE 8F442418            <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   186                              <2>  %rotate 1
   187                              <2>  %rotate 1
   188                              <2> 
   189                              <2>  %endif
   190                              <2> 
   191                              <2> 
   192 00003302 E8FED2FFFF          <2>  call %1
   193                              <2> 
   194                              <2> 
   195                              <2>  cleanup_call param_count, ret_param_count
   280                              <3>  %assign total_space ((%1 + %2) * 8)
   281                              <3>  %if (total_space % 16) != 0
   282                              <3>  %assign total_space total_space + 8
   283                              <3>  %endif
   284 00003307 4883C430            <3>  add rsp, total_space
   196                              <2> 
   344                              <1>     function draw_triangle,1,1150,200,1250,200,1200,300,0x00FFFFFF
   160                              <2>  %assign param_count %0 - 2
   161                              <2> 
   162                              <2>  %if param_count < 0
   163                              <2>  %assign param_count 0
   164                              <2>  %endif
   165                              <2>  %if param_count < 1
   166                              <2>  %assign ret_param_count 0
   167                              <2>  %else
   168                              <2>  %assign ret_param_count %2
   169                              <2>  %endif
   170                              <2> 
   171                              <2> 
   172                              <2>  prepare_call param_count, ret_param_count
   270                              <3>  %assign total_space ((%1 + %2) * 8)
   271                              <3> 
   272                              <3>  %if (total_space % 16) != 0
   273                              <3>  %assign total_space total_space + 8
   274                              <3>  %endif
   275                              <3> 
   276 0000330B 4883EC40            <3>  sub rsp, total_space
   173                              <2> 
   174                              <2> 
   175                              <2>  %if param_count > 0
   176                              <2>  %assign i 0
   177                              <2> 
   178                              <2>  %rep param_count
   179                              <2>  %rotate 1
   180                              <2> 
   181                              <2> 
   182                              <2>  push qword %2
   183                              <2>  pop qword [rsp + 8*i]
   184                              <2>  %assign i i+1
   185                              <2>  %endrep
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 0000330F 687E040000          <3>  push qword %2
   183 00003314 8F0424              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 00003317 68C8000000          <3>  push qword %2
   183 0000331C 8F442408            <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 00003320 68E2040000          <3>  push qword %2
   183 00003325 8F442410            <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 00003329 68C8000000          <3>  push qword %2
   183 0000332E 8F442418            <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 00003332 68B0040000          <3>  push qword %2
   183 00003337 8F442420            <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 0000333B 682C010000          <3>  push qword %2
   183 00003340 8F442428            <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 00003344 68FFFFFF00          <3>  push qword %2
   183 00003349 8F442430            <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   186                              <2>  %rotate 1
   187                              <2>  %rotate 1
   188                              <2> 
   189                              <2>  %endif
   190                              <2> 
   191                              <2> 
   192 0000334D E8D7D1FFFF          <2>  call %1
   193                              <2> 
   194                              <2> 
   195                              <2>  cleanup_call param_count, ret_param_count
   280                              <3>  %assign total_space ((%1 + %2) * 8)
   281                              <3>  %if (total_space % 16) != 0
   282                              <3>  %assign total_space total_space + 8
   283                              <3>  %endif
   284 00003352 4883C440            <3>  add rsp, total_space
   196                              <2> 
   345                              <1> 
   346                              <1>     epilog    
   254                              <2>  popallq
   305 00003356 415F                <3>  pop r15
   306 00003358 415E                <3>  pop r14
   307 0000335A 415D                <3>  pop r13
   308 0000335C 415C                <3>  pop r12
   309 0000335E 415B                <3>  pop r11
   310 00003360 415A                <3>  pop r10
   311 00003362 4159                <3>  pop r9
   312 00003364 4158                <3>  pop r8
   313 00003366 5F                  <3>  pop rdi
   314 00003367 5E                  <3>  pop rsi
   315 00003368 5A                  <3>  pop rdx
   316 00003369 59                  <3>  pop rcx
   317 0000336A 5B                  <3>  pop rbx
   318 0000336B 58                  <3>  pop rax
   255                              <2> 
   256 0000336C 4889EC              <2>  mov rsp, rbp
   257 0000336F 5D                  <2>  pop rbp
   258 00003370 C3                  <2>  ret
   347                              <1> 
   348                              <1> test_memory:;test memory
   349                              <1>     prolog 2;
   234 00003371 55                  <2>  push rbp
   235 00003372 4889E5              <2>  mov rbp, rsp
   236                              <2> 
   237                              <2> 
   238 00003375 488945F8            <2>  mov [rbp-8],rax
   239 00003379 B802000000          <2>  mov rax, %1
   240 0000337E 4883C00F            <2>  add rax, 15
   241 00003382 4883E0F0            <2>  and rax, ~15
   242 00003386 4829C4              <2>  sub rsp, rax
   243 00003389 488B45F8            <2>  mov rax,[rbp-8]
   244                              <2> 
   245                              <2>  pushallq
   288 0000338D 50                  <3>  push rax
   289 0000338E 53                  <3>  push rbx
   290 0000338F 51                  <3>  push rcx
   291 00003390 52                  <3>  push rdx
   292 00003391 56                  <3>  push rsi
   293 00003392 57                  <3>  push rdi
   294 00003393 4150                <3>  push r8
   295 00003395 4151                <3>  push r9
   296 00003397 4152                <3>  push r10
   297 00003399 4153                <3>  push r11
   298 0000339B 4154                <3>  push r12
   299 0000339D 4155                <3>  push r13
   300 0000339F 4156                <3>  push r14
   301 000033A1 4157                <3>  push r15
   246                              <2> 
   247                              <2> 
   248                              <2> 
   249                              <2> 
   250                              <2> 
   350                              <1> 
   351                              <1>     ; After memory initialization, add:
   352                              <1> 
   353                              <1>     ; Allocate 64 pages from ZONE_NORMAL
   354 000033A3 BF01000000          <1>     mov rdi, ZONE_NORMAL
   355 000033A8 BE02000000          <1>     mov rsi, 2
   356 000033AD BA91000000          <1>     mov rdx, PG_PTable_Maped | PG_Active | PG_Kernel
   357                              <1> 
   358                              <1> 
   359                              <1>     function alloc_pages, 1, rdi, rsi, rdx
   160                              <2>  %assign param_count %0 - 2
   161                              <2> 
   162                              <2>  %if param_count < 0
   163                              <2>  %assign param_count 0
   164                              <2>  %endif
   165                              <2>  %if param_count < 1
   166                              <2>  %assign ret_param_count 0
   167                              <2>  %else
   168                              <2>  %assign ret_param_count %2
   169                              <2>  %endif
   170                              <2> 
   171                              <2> 
   172                              <2>  prepare_call param_count, ret_param_count
   270                              <3>  %assign total_space ((%1 + %2) * 8)
   271                              <3> 
   272                              <3>  %if (total_space % 16) != 0
   273                              <3>  %assign total_space total_space + 8
   274                              <3>  %endif
   275                              <3> 
   276 000033B2 4883EC20            <3>  sub rsp, total_space
   173                              <2> 
   174                              <2> 
   175                              <2>  %if param_count > 0
   176                              <2>  %assign i 0
   177                              <2> 
   178                              <2>  %rep param_count
   179                              <2>  %rotate 1
   180                              <2> 
   181                              <2> 
   182                              <2>  push qword %2
   183                              <2>  pop qword [rsp + 8*i]
   184                              <2>  %assign i i+1
   185                              <2>  %endrep
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 000033B6 57                  <3>  push qword %2
   183 000033B7 8F0424              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 000033BA 56                  <3>  push qword %2
   183 000033BB 8F442408            <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 000033BF 52                  <3>  push qword %2
   183 000033C0 8F442410            <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   186                              <2>  %rotate 1
   187                              <2>  %rotate 1
   188                              <2> 
   189                              <2>  %endif
   190                              <2> 
   191                              <2> 
   192 000033C4 E8A5F6FFFF          <2>  call %1
   193                              <2> 
   194                              <2> 
   195                              <2>  cleanup_call param_count, ret_param_count
   280                              <3>  %assign total_space ((%1 + %2) * 8)
   281                              <3>  %if (total_space % 16) != 0
   282                              <3>  %assign total_space total_space + 8
   283                              <3>  %endif
   284 000033C9 4883C420            <3>  add rsp, total_space
   196                              <2> 
   360                              <1> 
   361                              <1>     function alloc_pages, 1, rdi, rsi, rdx
   160                              <2>  %assign param_count %0 - 2
   161                              <2> 
   162                              <2>  %if param_count < 0
   163                              <2>  %assign param_count 0
   164                              <2>  %endif
   165                              <2>  %if param_count < 1
   166                              <2>  %assign ret_param_count 0
   167                              <2>  %else
   168                              <2>  %assign ret_param_count %2
   169                              <2>  %endif
   170                              <2> 
   171                              <2> 
   172                              <2>  prepare_call param_count, ret_param_count
   270                              <3>  %assign total_space ((%1 + %2) * 8)
   271                              <3> 
   272                              <3>  %if (total_space % 16) != 0
   273                              <3>  %assign total_space total_space + 8
   274                              <3>  %endif
   275                              <3> 
   276 000033CD 4883EC20            <3>  sub rsp, total_space
   173                              <2> 
   174                              <2> 
   175                              <2>  %if param_count > 0
   176                              <2>  %assign i 0
   177                              <2> 
   178                              <2>  %rep param_count
   179                              <2>  %rotate 1
   180                              <2> 
   181                              <2> 
   182                              <2>  push qword %2
   183                              <2>  pop qword [rsp + 8*i]
   184                              <2>  %assign i i+1
   185                              <2>  %endrep
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 000033D1 57                  <3>  push qword %2
   183 000033D2 8F0424              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 000033D5 56                  <3>  push qword %2
   183 000033D6 8F442408            <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 000033DA 52                  <3>  push qword %2
   183 000033DB 8F442410            <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   186                              <2>  %rotate 1
   187                              <2>  %rotate 1
   188                              <2> 
   189                              <2>  %endif
   190                              <2> 
   191                              <2> 
   192 000033DF E88AF6FFFF          <2>  call %1
   193                              <2> 
   194                              <2> 
   195                              <2>  cleanup_call param_count, ret_param_count
   280                              <3>  %assign total_space ((%1 + %2) * 8)
   281                              <3>  %if (total_space % 16) != 0
   282                              <3>  %assign total_space total_space + 8
   283                              <3>  %endif
   284 000033E4 4883C420            <3>  add rsp, total_space
   196                              <2> 
   362                              <1> 
   363                              <1> 
   364 000033E8 488B4424F8          <1>     mov rax,[rsp-8]
   365 000033ED 4989C4              <1>     mov r12, rax                    ; Save page pointer
   366                              <1> 
   367                              <1>     ; Print info for each pair of pages
   368 000033F0 4D31ED              <1>     xor r13, r13                    ; i = 0
   369 000033F3 4989F6              <1>     mov r14,rsi
   370                              <1>     .print_pages_loop:
   371                              <1>         ; Print first page of pair
   372                              <1>         ; mov [rel memory_hex_messages], r13
   373                              <1>         ; mov rax, [r12 + r13 * 40 + page_info.page_attribute]
   374                              <1> 
   375                              <1>         ; mov [rel memory_hex_messages + 8], rax
   376                              <1>         ; mov rax, [r12 + r13 * 40 + page_info.physical_address]
   377                              <1>         ; mov [rel memory_hex_messages + 16], rax
   378                              <1> 
   379 000033F6 4C89E8              <1>         mov rax,r13
   380 000033F9 B928000000          <1>         mov rcx,40
   381 000033FE 48F7E1              <1>         mul rcx
   382 00003401 4C01E0              <1>         add rax, r12
   383                              <1> 
   384 00003404 488B7010            <1>         mov rsi, [rax + page_info.page_attribute]
   385 00003408 488935E9020000      <1>         mov [rel hex_messages], rsi
   386 0000340F 488D357BFAFFFF      <1>         lea rsi, [rel page_info_msg1]
   387 00003416 488D15DB020000      <1>         lea rdx, [rel hex_messages]
   388                              <1>         function printk, 1, rsi, rdx
   160                              <2>  %assign param_count %0 - 2
   161                              <2> 
   162                              <2>  %if param_count < 0
   163                              <2>  %assign param_count 0
   164                              <2>  %endif
   165                              <2>  %if param_count < 1
   166                              <2>  %assign ret_param_count 0
   167                              <2>  %else
   168                              <2>  %assign ret_param_count %2
   169                              <2>  %endif
   170                              <2> 
   171                              <2> 
   172                              <2>  prepare_call param_count, ret_param_count
   270                              <3>  %assign total_space ((%1 + %2) * 8)
   271                              <3> 
   272                              <3>  %if (total_space % 16) != 0
   273                              <3>  %assign total_space total_space + 8
   274                              <3>  %endif
   275                              <3> 
   276 0000341D 4883EC20            <3>  sub rsp, total_space
   173                              <2> 
   174                              <2> 
   175                              <2>  %if param_count > 0
   176                              <2>  %assign i 0
   177                              <2> 
   178                              <2>  %rep param_count
   179                              <2>  %rotate 1
   180                              <2> 
   181                              <2> 
   182                              <2>  push qword %2
   183                              <2>  pop qword [rsp + 8*i]
   184                              <2>  %assign i i+1
   185                              <2>  %endrep
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 00003421 56                  <3>  push qword %2
   183 00003422 8F0424              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 00003425 52                  <3>  push qword %2
   183 00003426 8F442408            <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   186                              <2>  %rotate 1
   187                              <2>  %rotate 1
   188                              <2> 
   189                              <2>  %endif
   190                              <2> 
   191                              <2> 
   192 0000342A E8D8D4FFFF          <2>  call %1
   193                              <2> 
   194                              <2> 
   195                              <2>  cleanup_call param_count, ret_param_count
   280                              <3>  %assign total_space ((%1 + %2) * 8)
   281                              <3>  %if (total_space % 16) != 0
   282                              <3>  %assign total_space total_space + 8
   283                              <3>  %endif
   284 0000342F 4883C420            <3>  add rsp, total_space
   196                              <2> 
   389                              <1> 
   390 00003433 488B5008            <1>         mov rdx, [rax + page_info.physical_address]
   391 00003437 488915BA020000      <1>         mov [rel hex_messages], rdx
   392 0000343E 488D3563FAFFFF      <1>         lea rsi, [rel page_info_msg2]
   393 00003445 488D15AC020000      <1>         lea rdx, [rel hex_messages]
   394                              <1>         function printk, 1, rsi, rdx
   160                              <2>  %assign param_count %0 - 2
   161                              <2> 
   162                              <2>  %if param_count < 0
   163                              <2>  %assign param_count 0
   164                              <2>  %endif
   165                              <2>  %if param_count < 1
   166                              <2>  %assign ret_param_count 0
   167                              <2>  %else
   168                              <2>  %assign ret_param_count %2
   169                              <2>  %endif
   170                              <2> 
   171                              <2> 
   172                              <2>  prepare_call param_count, ret_param_count
   270                              <3>  %assign total_space ((%1 + %2) * 8)
   271                              <3> 
   272                              <3>  %if (total_space % 16) != 0
   273                              <3>  %assign total_space total_space + 8
   274                              <3>  %endif
   275                              <3> 
   276 0000344C 4883EC20            <3>  sub rsp, total_space
   173                              <2> 
   174                              <2> 
   175                              <2>  %if param_count > 0
   176                              <2>  %assign i 0
   177                              <2> 
   178                              <2>  %rep param_count
   179                              <2>  %rotate 1
   180                              <2> 
   181                              <2> 
   182                              <2>  push qword %2
   183                              <2>  pop qword [rsp + 8*i]
   184                              <2>  %assign i i+1
   185                              <2>  %endrep
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 00003450 56                  <3>  push qword %2
   183 00003451 8F0424              <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   179                              <3>  %rotate 1
   180                              <3> 
   181                              <3> 
   182 00003454 52                  <3>  push qword %2
   183 00003455 8F442408            <3>  pop qword [rsp + 8*i]
   184                              <3>  %assign i i+1
   186                              <2>  %rotate 1
   187                              <2>  %rotate 1
   188                              <2> 
   189                              <2>  %endif
   190                              <2> 
   191                              <2> 
   192 00003459 E8A9D4FFFF          <2>  call %1
   193                              <2> 
   194                              <2> 
   195                              <2>  cleanup_call param_count, ret_param_count
   280                              <3>  %assign total_space ((%1 + %2) * 8)
   281                              <3>  %if (total_space % 16) != 0
   282                              <3>  %assign total_space total_space + 8
   283                              <3>  %endif
   284 0000345E 4883C420            <3>  add rsp, total_space
   196                              <2> 
   395                              <1> 
   396                              <1>         ; Move to next pair
   397 00003462 49FFC5              <1>         inc r13
   398 00003465 4D39F5              <1>         cmp r13, r14
   399 00003468 7C8C                <1>         jl .print_pages_loop
   400                              <1> 
   401                              <1> 
   402                              <1> 
   403                              <1>     epilog
   254                              <2>  popallq
   305 0000346A 415F                <3>  pop r15
   306 0000346C 415E                <3>  pop r14
   307 0000346E 415D                <3>  pop r13
   308 00003470 415C                <3>  pop r12
   309 00003472 415B                <3>  pop r11
   310 00003474 415A                <3>  pop r10
   311 00003476 4159                <3>  pop r9
   312 00003478 4158                <3>  pop r8
   313 0000347A 5F                  <3>  pop rdi
   314 0000347B 5E                  <3>  pop rsi
   315 0000347C 5A                  <3>  pop rdx
   316 0000347D 59                  <3>  pop rcx
   317 0000347E 5B                  <3>  pop rbx
   318 0000347F 58                  <3>  pop rax
   255                              <2> 
   256 00003480 4889EC              <2>  mov rsp, rbp
   257 00003483 5D                  <2>  pop rbp
   258 00003484 C3                  <2>  ret
   404                              <1>     
   405                              <1> 
   406                              <1> 
   407                              <1> 
   408                              <1> 
   409                              <1> 
   410 00003485 5B766964656F20696E- <1> init_video_xpixel: db '[video info]     xpixel:%d',0
   410 0000348E 666F5D202020202078- <1>
   410 00003497 706978656C3A256400  <1>
   411 000034A0 202020207970697865- <1> init_video_ypixel: db '    ypixel:%d',0
   411 000034A9 6C3A256400          <1>
   412 000034AE 202020206279746520- <1> init_video_byteperpixel: db '    byte per pixel:%d\n',0
   412 000034B7 70657220706978656C- <1>
   412 000034C0 3A25645C6E00        <1>
   413                              <1> 
   414 000034C6 68656C6C6F20776F72- <1> messages: db 'hello world,here to show printk function\n', 0
   414 000034CF 6C642C686572652074- <1>
   414 000034D8 6F2073686F77207072- <1>
   414 000034E1 696E746B2066756E63- <1>
   414 000034EA 74696F6E5C6E00      <1>
   415                              <1> 
   416 000034F1 617364666768696A6B- <1> messages1: db 'asdfghijklmnopqrstuvwxyz_ASDFGHJKLZXCVBNM1234567890\n', 0
   416 000034FA 6C6D6E6F7071727374- <1>
   416 00003503 75767778797A5F4153- <1>
   416 0000350C 444647484A4B4C5A58- <1>
   416 00003515 4356424E4D31323334- <1>
   416 0000351E 3536373839305C6E00  <1>
   417 00003527 496D61676520666F72- <1> messages2: db 'Image format was not specified for ./hd60m.img and probing guessed raw\n', 0
   417 00003530 6D617420776173206E- <1>
   417 00003539 6F7420737065636966- <1>
   417 00003542 69656420666F72202E- <1>
   417 0000354B 2F686436306D2E696D- <1>
   417 00003554 6720616E642070726F- <1>
   417 0000355D 62696E672067756573- <1>
   417 00003566 736564207261775C6E- <1>
   417 0000356F 00                  <1>
   418 00003570 4175746F6D61746963- <1> messages3: db 'Automatically detecting the format is dangerous for raw images, write operations on block 0 will be restricted.\n', 0
   418 00003579 616C6C792064657465- <1>
   418 00003582 6374696E6720746865- <1>
   418 0000358B 20666F726D61742069- <1>
   418 00003594 732064616E6765726F- <1>
   418 0000359D 757320666F72207261- <1>
   418 000035A6 7720696D616765732C- <1>
   418 000035AF 207772697465206F70- <1>
   418 000035B8 65726174696F6E7320- <1>
   418 000035C1 6F6E20626C6F636B20- <1>
   418 000035CA 302077696C6C206265- <1>
   418 000035D3 207265737472696374- <1>
   418 000035DC 65642E5C6E00        <1>
   419                              <1> 
   420 000035E2 2E2E2F6B65726E656C- <1> messages4: db '../kernel/printk.asm:100: warning: word data exceeds bounds [-w+number-overflow]\n', 0
   420 000035EB 2F7072696E746B2E61- <1>
   420 000035F4 736D3A3130303A2077- <1>
   420 000035FD 61726E696E673A2077- <1>
   420 00003606 6F7264206461746120- <1>
   420 0000360F 657863656564732062- <1>
   420 00003618 6F756E6473205B2D77- <1>
   420 00003621 2B6E756D6265722D6F- <1>
   420 0000362A 766572666C6F775D5C- <1>
   420 00003633 6E00                <1>
   421 00003635 5741524E494E473A20- <1> messages5: db 'WARNING: Image format was not specified for ./hd60m.img and probing guessed raw.\n', 0
   421 0000363E 496D61676520666F72- <1>
   421 00003647 6D617420776173206E- <1>
   421 00003650 6F7420737065636966- <1>
   421 00003659 69656420666F72202E- <1>
   421 00003662 2F686436306D2E696D- <1>
   421 0000366B 6720616E642070726F- <1>
   421 00003674 62696E672067756573- <1>
   421 0000367D 736564207261772E5C- <1>
   421 00003686 6E00                <1>
   422 00003688 323530383820627974- <1> messages6: db '25088 bytes (25 kB, 24 KiB) copied, 0.000134717 s, 186 MB/s\n', 0
   422 00003691 657320283235206B42- <1>
   422 0000369A 2C203234204B694229- <1>
   422 000036A3 20636F706965642C20- <1>
   422 000036AC 302E30303031333437- <1>
   422 000036B5 313720732C20313836- <1>
   422 000036BE 204D422F735C6E00    <1>
   423                              <1> 
   424 000036C6 48656C6C6F2C202573- <1> format1 db "Hello, %s!\n", 0
   424 000036CF 215C6E00            <1>
   425 000036D3 506879736963616C20- <1> format2 db "Physical address: %d", 0
   425 000036DC 616464726573733A20- <1>
   425 000036E5 256400              <1>
   426                              <1> 
   427                              <1> 
   428 000036E8 4865783A2025785C6E- <1> format3 db "Hex: %x\n", 0
   428 000036F1 00                  <1>
   429 000036F2 576F726C6400        <1> string1 db "World", 0
   430                              <1> 
   431 000036F8 0000000000000000    <1> hex_messages: dq 0
   432 00003700 0000000000000000    <1> decimal_messages: dq 0
   433 00003708 4523010000000000-   <1> params: times 10 dq 0x12345
   433 00003708 <rep Ah>            <1>
   434 00003758 00<rep Ah>          <1> messagess: times 10 db 0
   435                              <1> 
   436                              <1> %endif
    38                                  
    39                                  
    40                                  kernel_end:
    41 00003762 00<rep 489Eh>           times 32768 - (($ - $$) % 32768) db 0
    42                                  init_pcb_ptr:;init process pcb
    43                                  
    44 00008000 00<rep 8000h>           times 32768 - (($ - $$) % 32768) db 0
    45                                  init_stack:;init stack
    46                                  section_end:
