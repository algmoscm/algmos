     1                                  %include "../bootloader/global_def.asm"
     1                              <1> %ifndef GLOBAL_DEF_ASM
     2                              <1> %define GLOBAL_DEF_ASM
     3                              <1> 
     4                              <1> 
     5                              <1> ;|----------------------|
     6                              <1> ;|	100000 ~ END	|
     7                              <1> ;|	   KERNEL	|
     8                              <1> ;|----------------------|
     9                              <1> ;|	E0000 ~ 100000	|
    10                              <1> ;| Extended System BIOS |
    11                              <1> ;|----------------------|
    12                              <1> ;|	C0000 ~ Dffff	|
    13                              <1> ;|     Expansion Area   |
    14                              <1> ;|----------------------|
    15                              <1> ;|	A0000 ~ bffff	|
    16                              <1> ;|   Legacy Video Area  |
    17                              <1> ;|----------------------|
    18                              <1> ;|	9f000 ~ A0000	|
    19                              <1> ;|	 BIOS reserve	|
    20                              <1> ;|----------------------|
    21                              <1> ;|	90000 ~ 9f000	|
    22                              <1> ;|	 kernel tmpbuf	|
    23                              <1> ;|----------------------|
    24                              <1> ;|	10000 ~ 90000	|
    25                              <1> ;|	   LOADER	|
    26                              <1> ;|----------------------|
    27                              <1> ;|	8000 ~ 10000	|
    28                              <1> ;|	  VBE info	|
    29                              <1> ;|----------------------|
    30                              <1> ;|	7e00 ~ 8000	|
    31                              <1> ;|	  mem info	|
    32                              <1> ;|----------------------|
    33                              <1> ;|	7c00 ~ 7e00	|
    34                              <1> ;|	 MBR (BOOT)	|
    35                              <1> ;|----------------------|
    36                              <1> ;|	0000 ~ 7c00	|
    37                              <1> ;|	 BIOS Code	|
    38                              <1> ;|----------------------|
    39                              <1> 
    40                              <1> 
    41                              <1> ;_______________________________________________________
    42                              <1> ; START	END	    SIZE	        USED
    43                              <1> ; FFFF0	FFFFF	16B	        BIOS System Entry
    44                              <1> ; F0000	FFFEF	64KB-16B	BIOS System Code
    45                              <1> ; C8000	EFFFF	160KB	    ROM/Mapped IO
    46                              <1> ; C0000	C7FFF	32KB	    Graphic Adapter BIOS
    47                              <1> ; B8000	BFFFF	32KB	    Chroma Text Video Buffer
    48                              <1> ; B0000	B7FFF	32KB	    Mono Text Video Buffer
    49                              <1> ; A0000	AFFFF	64KB	    Graphic Video Buffer
    50                              <1> ; 9FC00	9FFFF	1KB	        Extended BIOS Data Area
    51                              <1> ; 7E00	9FBFF	622080B     Useable 608KB	
    52                              <1> ; 7C00	7DFF	512B	    MBR
    53                              <1> ; 500	7BFF	30464B      Useable 30KB	
    54                              <1> ; 400	4FF	    256B	    BIOS Data Area
    55                              <1> ; 000	3FF	    1KB	        IVT
    56                              <1> ; _____________________________________________________
    57                              <1> 
    58                              <1> 
    59                              <1> 
    60                              <1> 
    61                              <1> 
    62                              <1> 
    63                              <1> 
    64                              <1> 
    65                              <1> 
    66                              <1> 
    67                              <1> 
    68                              <1> ;|----------------------|
    69                              <1> ;|	100000 ~ END	|
    70                              <1> ;|	   KERNEL	|
    71                              <1> ;|----------------------|
    72                              <1> ;|	E0000 ~ 100000	|
    73                              <1> ;| Extended System BIOS |
    74                              <1> ;|----------------------|
    75                              <1> ;|	C0000 ~ Dffff	|
    76                              <1> ;|     Expansion Area   |
    77                              <1> ;|----------------------|
    78                              <1> ;|	A0000 ~ bffff	|
    79                              <1> ;|   Legacy Video Area  |
    80                              <1> ;|----------------------|
    81                              <1> ;|	9F000 ~ A0000	|
    82                              <1> ;|	 BIOS reserve	|
    83                              <1> ;|----------------------|
    84                              <1> ;|	90000 ~ 9F000	|
    85                              <1> ;|	 kernel tmpbuf	|
    86                              <1> ;|----------------------|
    87                              <1> ;|	10000 ~ 90000	|
    88                              <1> ;|	   LOADER	|
    89                              <1> ;|----------------------|
    90                              <1> ;|	8000 ~ 10000	|
    91                              <1> ;|	  VBE info	|
    92                              <1> ;|----------------------|
    93                              <1> ;|	7E00 ~ 8000	|
    94                              <1> ;|	  mem info	|
    95                              <1> ;|----------------------|
    96                              <1> ;|	7C00 ~ 7E00	|
    97                              <1> ;|	 MBR (BOOT)	|
    98                              <1> ;|----------------------|
    99                              <1> ;|	0000 ~ 7C00	|
   100                              <1> ;|	 BIOS Code	|
   101                              <1> ;|----------------------|
   102                              <1> 
   103                              <1> 
   104                              <1> 
   105                              <1> 
   106                              <1> 
   107                              <1> 
   108                              <1> 
   109                              <1> 
   110                              <1> 
   111                              <1> 
   112                              <1> ;______________________________________________
   113                              <1> ; ----------------Vbe Info Block------------
   114                              <1> ; typedef struct {
   115                              <1> ;     unsigned char       vbe_signature;
   116                              <1> ;     unsigned short      vbe_version;
   117                              <1> ;     unsigned long       oem_string_ptr;
   118                              <1> ;     unsigned char       capabilities;
   119                              <1> ;     unsigned long       video_mode_ptr;
   120                              <1> ;     unsigned short      total_memory;
   121                              <1> ;     unsigned short      oem_software_rev;
   122                              <1> ;     unsigned long       oem_vendor_name_ptr;
   123                              <1> ;     unsigned long       oem_product_name_ptr;
   124                              <1> ;     unsigned long       oem_product_rev_ptr;
   125                              <1> ;     unsigned char       reserved[222];
   126                              <1> ;     unsigned char       oem_data[256];  
   127                              <1> ; } VbeInfoBlock;
   128                              <1> ;______________________________________________
   129                              <1> 
   130                              <1> 
   131                              <1> BaseOfKernelFile	equ	0x00
   132                              <1> OffsetOfKernelFile	equ	0x100000
   133                              <1> BaseTmpOfKernelAddr	equ	0x9000
   134                              <1> OffsetTmpOfKernelFile	equ	0x0000
   135                              <1> VBEStructBufferAddr	equ	0x8000
   136                              <1> VBEModeStructBufferAddr	equ	0x8200
   137                              <1> MemoryStructBufferAddr	equ	0x8800
   138                              <1> 
   139                              <1> 
   140                              <1> 
   141                              <1> KernelSpaceUpperAddress equ 0xFFFF800000000000
   142                              <1> 
   143                              <1> GDTPointerUpperAddr equ 0xFFFF800000104000
   144                              <1> IDTPointerUpperAddr equ 0xFFFF80000010400a
   145                              <1> TSSPointerUpperAddr equ 0xFFFF800000104014
   146                              <1> 
   147                              <1> VideoFrameBufferAddress equ 0xFFFF800003000000
   148                              <1> KernelStartSectorNum	equ	16
   149                              <1> 
   150                              <1> 
   151                              <1> %define PLATFORM_QEMU_X64 1
   152                              <1> %define PLATFORM_X64 2
   153                              <1> 
   154                              <1> %define DEBUG_PLATFORM PLATFORM_QEMU_X64
   155                              <1> %define DEBUG_MODE 1
   156                              <1> 
   157                              <1> 
   158                              <1> MasterSectorReadNumPort    equ	0x1F2
   159                              <1> MasterSectorReadPort    equ	0x1F0
   160                              <1> 
   161                              <1> SlaveReadNumPort    equ	0x172
   162                              <1> SlaveSectorReadPort    equ	0x170
   163                              <1> 
   164                              <1> SectorReadNumPort    equ	MasterSectorReadNumPort
   165                              <1> SectorReadPort    equ	MasterSectorReadPort
   166                              <1> 
   167                              <1> struc vbe_info_block
   168 00000000 ????????            <1>     .signature                 resb 4    ; 'VESA' signature (must be "VESA")
   169 00000004 ????                <1>     .version                   resw 1    ; VBE version (e.g., 0x0300 for VBE 3.0)
   170 00000006 ????????            <1>     .oem_string_ptr            resd 1    ; Pointer to OEM string
   171 0000000A ????????            <1>     .capabilities              resd 1    ; Capabilities of the video card
   172 0000000E ????????            <1>     .video_mode_ptr            resd 1    ; Pointer to supported video modes
   173 00000012 ????                <1>     .total_memory              resw 1    ; Total memory in 64KB blocks
   174                              <1> 
   175                              <1>     ; VBE 2.0+ fields
   176 00000014 ????                <1>     .oem_software_rev          resw 1    ; OEM software revision
   177 00000016 ????????            <1>     .oem_vendor_name_ptr       resd 1    ; Pointer to OEM vendor name string
   178 0000001A ????????            <1>     .oem_product_name_ptr      resd 1    ; Pointer to OEM product name string
   179 0000001E ????????            <1>     .oem_product_rev_ptr       resd 1    ; Pointer to OEM product revision string
   180 00000022 <res DEh>           <1>     .reserved                  resb 222  ; Reserved for VBE implementation
   181 00000100 <res 100h>          <1>     .oem_data                  resb 256  ; Data area for OEM-specific information
   182                              <1> endstruc
   183                              <1> 
   184                              <1> struc vbe_mode_info_block
   185 00000000 ????                <1>     .attributes                resw 1    ; Mode attributes
   186 00000002 ??                  <1>     .winA_attributes           resb 1    ; Window A attributes
   187 00000003 ??                  <1>     .winB_attributes           resb 1    ; Window B attributes
   188 00000004 ????                <1>     .win_granularity           resw 1    ; Window granularity in KB
   189 00000006 ????                <1>     .win_size                  resw 1    ; Window size in KB
   190 00000008 ????                <1>     .winA_segment              resw 1    ; Window A segment
   191 0000000A ????                <1>     .winB_segment              resw 1    ; Window B segment
   192 0000000C ????????            <1>     .win_func_ptr              resd 1    ; Pointer to window function
   193 00000010 ????                <1>     .bytes_per_scanline        resw 1    ; Bytes per scanline
   194                              <1> 
   195                              <1>     ; VBE 1.2+ fields
   196 00000012 ????                <1>     .x_resolution              resw 1    ; Horizontal resolution in pixels
   197 00000014 ????                <1>     .y_resolution              resw 1    ; Vertical resolution in pixels
   198 00000016 ??                  <1>     .x_char_size               resb 1    ; Character cell width in pixels
   199 00000017 ??                  <1>     .y_char_size               resb 1    ; Character cell height in pixels
   200 00000018 ??                  <1>     .number_of_planes          resb 1    ; Number of memory planes
   201 00000019 ??                  <1>     .bits_per_pixel            resb 1    ; Bits per pixel
   202 0000001A ??                  <1>     .number_of_banks           resb 1    ; Number of banks
   203 0000001B ??                  <1>     .memory_model              resb 1    ; Memory model type
   204 0000001C ??                  <1>     .bank_size                 resb 1    ; Bank size in KB
   205 0000001D ??                  <1>     .number_of_image_pages     resb 1    ; Number of images
   206 0000001E ??                  <1>     .reserved1                 resb 1    ; Reserved
   207                              <1> 
   208                              <1>     ; Direct Color fields (VBE 1.2+)
   209 0000001F ??                  <1>     .red_mask_size             resb 1    ; Size of direct color red mask
   210 00000020 ??                  <1>     .red_field_position        resb 1    ; Bit position of red mask
   211 00000021 ??                  <1>     .green_mask_size           resb 1    ; Size of direct color green mask
   212 00000022 ??                  <1>     .green_field_position      resb 1    ; Bit position of green mask
   213 00000023 ??                  <1>     .blue_mask_size            resb 1    ; Size of direct color blue mask
   214 00000024 ??                  <1>     .blue_field_position       resb 1    ; Bit position of blue mask
   215 00000025 ??                  <1>     .reserved_mask_size        resb 1    ; Size of direct color reserved mask
   216 00000026 ??                  <1>     .reserved_field_position   resb 1    ; Bit position of reserved mask
   217 00000027 ??                  <1>     .direct_color_mode_info    resb 1    ; Direct color mode attributes
   218                              <1> 
   219                              <1>     ; VBE 2.0+ fields
   220 00000028 ????????            <1>     .phys_base_ptr             resd 1    ; Physical address for flat memory frame buffer
   221 0000002C ????????            <1>     .reserved2                 resd 1    ; Reserved
   222 00000030 ????                <1>     .reserved3                 resw 1    ; Reserved
   223                              <1> 
   224                              <1>     ; VBE 3.0+ fields
   225 00000032 ????                <1>     .lin_bytes_per_scanline    resw 1    ; Bytes per scanline for linear modes
   226 00000034 ??                  <1>     .bnk_number_of_image_pages resb 1    ; Number of images for banked modes
   227 00000035 ??                  <1>     .lin_number_of_image_pages resb 1    ; Number of images for linear modes
   228 00000036 ??                  <1>     .lin_red_mask_size         resb 1    ; Size of direct color red mask (linear modes)
   229 00000037 ??                  <1>     .lin_red_field_position    resb 1    ; Bit position of red mask (linear modes)
   230 00000038 ??                  <1>     .lin_green_mask_size       resb 1    ; Size of direct color green mask (linear modes)
   231 00000039 ??                  <1>     .lin_green_field_position  resb 1    ; Bit position of green mask (linear modes)
   232 0000003A ??                  <1>     .lin_blue_mask_size        resb 1    ; Size of direct color blue mask (linear modes)
   233 0000003B ??                  <1>     .lin_blue_field_position   resb 1    ; Bit position of blue mask (linear modes)
   234 0000003C ??                  <1>     .lin_reserved_mask_size    resb 1    ; Size of direct color reserved mask (linear modes)
   235 0000003D ??                  <1>     .lin_reserved_field_position resb 1  ; Bit position of reserved mask (linear modes)
   236 0000003E ????????            <1>     .max_pixel_clock           resd 1    ; Maximum pixel clock (Hz)
   237 00000042 <res BEh>           <1>     .reserved4                 resb 190  ; Reserved for future expansion
   238                              <1> endstruc
   239                              <1> 
   240                              <1> struc e820_memory_entry
   241 00000000 ????????            <1>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   242 00000004 ????????            <1>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   243 00000008 ????????            <1>     .length_low               resd 1    ; Lower 32 bits of the length
   244 0000000C ????????            <1>     .length_high              resd 1    ; Upper 32 bits of the length
   245 00000010 ????????            <1>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   246                              <1>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   247                              <1> endstruc
   248                              <1> 
   249                              <1> %endif
     2                                  %include "../kernel/stddef.asm"
     1                              <1> %ifndef STDDEF_ASM
     2                              <1> %define STDDEF_ASM
     3                              <1> 
     4                              <1> ;-----------Calling Conventions Standard------------;
     5                              <1> %define USE_CC_STANDARD
     6                              <1> %ifdef USE_CC_STANDARD
     7                              <1> ;caller maintain the stack balance 
     8                              <1> 
     9                              <1> 
    10                              <1> ; -------------------------------
    11                              <1> ; 栈帧结构定义
    12                              <1> ; -------------------------------
    13                              <1> ; 调用后的栈布局:
    14                              <1> ; [rsp+0x00] 返回地址 (8字节)
    15                              <1> ; [rsp+0x08] 旧RBP     (8字节) <- rbp指向这里
    16                              <1> ; [rsp+0x10] 参数1     (8字节)
    17                              <1> ; [rsp+0x18] 参数2
    18                              <1> ; ...
    19                              <1> ; [rsp+X]    局部变量区
    20                              <1> ; -------------------------------
    21                              <1> 
    22                              <1> %define PARAM_OFFSET   16      ; 第一个参数的偏移量(返回地址8 + 旧RBP8)
    23                              <1> %macro function 1-* ; 1=函数名, 2=返回参数数量, 3=参数列表
    24                              <1>     %assign param_count %0 - 2 ; 参数数量
    25                              <1>     
    26                              <1>     %if param_count < 0
    27                              <1>         %assign param_count 0 ; 如果没有参数，设置为 0
    28                              <1>     %endif
    29                              <1>     %if param_count < 1
    30                              <1>         %assign ret_param_count 0 ; 返回参数数量
    31                              <1>     %else
    32                              <1>         %assign ret_param_count %2 ; 返回参数数量
    33                              <1>     %endif
    34                              <1> 
    35                              <1>     ; 准备调用
    36                              <1>     prepare_call param_count, ret_param_count
    37                              <1> 
    38                              <1>     ; 如果有参数，将参数压入栈
    39                              <1>     %if param_count > 0
    40                              <1>         %assign i 0
    41                              <1>         mov [rsp-8], rax ; 保存返回地址
    42                              <1>         %rep param_count
    43                              <1>             %rotate 1
    44                              <1>             mov rax, %2
    45                              <1>             mov [rsp + 8*i], rax ; 将参数压入栈
    46                              <1>             %assign i i+1
    47                              <1>         %endrep
    48                              <1>         ; mov rax,
    49                              <1>         %rotate 1
    50                              <1>         %rotate 1
    51                              <1>         mov rax,[rsp-8]; 保存返回地址
    52                              <1>     %endif
    53                              <1> 
    54                              <1>     ; 调用函数
    55                              <1>     call %1
    56                              <1> 
    57                              <1>     ; 清理栈空间
    58                              <1>     cleanup_call param_count, ret_param_count
    59                              <1> 
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> %macro prolog 1;local var size(bytes)
    63                              <1>     push rbp
    64                              <1>     mov rbp, rsp
    65                              <1>     mov [rbp-8],rax
    66                              <1>     mov rax, %1
    67                              <1>     add rax, 15
    68                              <1>     and rax, ~15
    69                              <1>     sub rsp, rax
    70                              <1>     mov rax,[rbp-8]
    71                              <1>     pushallq
    72                              <1>     
    73                              <1>     
    74                              <1>     ; 调试信息可以放在这里
    75                              <1>     ; %ifdef DEBUG
    76                              <1>     ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
    77                              <1>     ; %endif
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro epilog 0
    81                              <1>     popallq
    82                              <1> 
    83                              <1>     mov rsp, rbp
    84                              <1>     pop rbp
    85                              <1>     ret
    86                              <1> %endmacro
    87                              <1> 
    88                              <1> %macro get_param 2;1=register, 2=param index(from 1)
    89                              <1>     mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    90                              <1> %endmacro
    91                              <1> 
    92                              <1> %macro set_ret_param 2;1=register, 2=param index(from 1)
    93                              <1>     mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
    94                              <1> %endmacro
    95                              <1> 
    96                              <1> %macro prepare_call 2;1=param count, 2=return param count
    97                              <1>     %assign total_space ((%1 + %2) * 8)
    98                              <1>     
    99                              <1>     %if (total_space % 16) != 0
   100                              <1>         %assign total_space total_space + 8  ; 添加填充
   101                              <1>     %endif
   102                              <1>     
   103                              <1>     sub rsp, total_space
   104                              <1> %endmacro
   105                              <1> 
   106                              <1> %macro cleanup_call 2;1=param count, 2=return param count
   107                              <1>     %assign total_space ((%1 + %2) * 8)
   108                              <1>     %if (total_space % 16) != 0
   109                              <1>         %assign total_space total_space + 8
   110                              <1>     %endif
   111                              <1>     add rsp, total_space
   112                              <1> %endmacro
   113                              <1> 
   114                              <1> %macro pushallq 0
   115                              <1>     push rax
   116                              <1>     push rbx
   117                              <1>     push rcx
   118                              <1>     push rdx
   119                              <1>     push rsi
   120                              <1>     push rdi
   121                              <1>     push r8
   122                              <1>     push r9
   123                              <1>     push r10
   124                              <1>     push r11
   125                              <1>     push r12
   126                              <1>     push r13
   127                              <1>     push r14
   128                              <1>     push r15
   129                              <1> %endmacro
   130                              <1> 
   131                              <1> %macro popallq 0
   132                              <1>     pop r15
   133                              <1>     pop r14
   134                              <1>     pop r13
   135                              <1>     pop r12
   136                              <1>     pop r11
   137                              <1>     pop r10
   138                              <1>     pop r9
   139                              <1>     pop r8
   140                              <1>     pop rdi
   141                              <1>     pop rsi
   142                              <1>     pop rdx
   143                              <1>     pop rcx
   144                              <1>     pop rbx
   145                              <1>     pop rax
   146                              <1> %endmacro
   147                              <1> 
   148                              <1> %endif
   149                              <1> ;---------------------ABI Standard------------------;
   150                              <1> %define USE_ABI_STANDARD
   151                              <1> %ifdef USE_ABI_STANDARD
   152                              <1> 
   153                              <1> 
   154                              <1>     %define ABI_File_None   0       ; 无文件类型
   155                              <1>     %define ABI_File_REL    1       ; 可重定位文件
   156                              <1>     %define ABI_File_EXEC   2       ; 可执行文件
   157                              <1>     %define ABI_File_DYN    3       ; 共享目标文件
   158                              <1>     %define ABI_File_CORE   4       ; 核心文件
   159                              <1> 
   160                              <1>     %define Section_Type_NULL    0      ; 未使用
   161                              <1>     %define Section_Type_LOAD    1      ; 可加载段
   162                              <1>     %define Section_Type_DYNAMIC 2      ; 动态链接信息
   163                              <1>     %define Section_Type_INTERP  3      ; 解释器路径
   164                              <1>     %define Section_Type_NOTE    4      ; 辅助信息
   165                              <1>     %define Section_Type_SHLIB   5      ; 保留
   166                              <1> 
   167                              <1>     %macro ABI_HEADER 4 ;1=File Type, 2=Entry Point Address, 3=Section Header Offset, 4=Section Header Count
   168                              <1>         db 0xA5, 'A', 'B', 'I'     ; ABI Magic Number
   169                              <1>         db 1                       ; Encode Type
   170                              <1>         db 1                       ; ABI Version
   171                              <1> 
   172                              <1>         dw %1                      ; ABI File Type
   173                              <1>         dq %2                      ; Entry Point Address
   174                              <1>         dw 32                      ; ABI Headers Size
   175                              <1> 
   176                              <1>         dq %3                      ; Section Header Offset
   177                              <1>         dw 32                      ; Section Header Size
   178                              <1>         dw %4                      ; Section Header Count
   179                              <1>         dw 0                       ; Symble Table Entry Size
   180                              <1>     %endmacro
   181                              <1>     STRUC struct_ABI_HEADER
   182 00000000 ????????            <1>         .magic:         resb 4    ; ABI Magic Number (4 bytes)
   183 00000004 ??                  <1>         .encode_type:   resb 1    ; Encode Type (1 byte)
   184 00000005 ??                  <1>         .abi_version:   resb 1    ; ABI Version (1 byte)
   185 00000006 ????                <1>         .file_type:     resw 1    ; ABI File Type (2 bytes)
   186 00000008 ????????????????    <1>         .entry_point:   resq 1    ; Entry Point Address (8 bytes)
   187 00000010 ????                <1>         .header_size:   resw 1    ; ABI Headers Size (2 bytes)
   188 00000012 ????????????????    <1>         .section_offset: resq 1   ; Section Header Offset (8 bytes)
   189 0000001A ????                <1>         .section_size:  resw 1    ; Section Header Size (2 bytes)
   190 0000001C ????                <1>         .section_count: resw 1    ; Section Header Count (2 bytes)
   191 0000001E ????                <1>         .sym_table_size: resw 1   ; Symbol Table Entry Size (2 bytes)
   192                              <1>     ENDSTRUC
   193                              <1> 
   194                              <1>     %macro SECTION_HEADER 4 ;1=Section Type, 2=Virtual Address, 3=Section Offset, 4=Section Size
   195                              <1>         dq %1                  ; Section Type
   196                              <1>         dq %2                  ; Virtual Address
   197                              <1>         dq %3                  ; Section Offset
   198                              <1>         dq %4                  ; Section Size
   199                              <1>     %endmacro
   200                              <1>     STRUC struct_SECTION_HEADER
   201 00000000 ????????????????    <1>         .type:      resq 1    ; Section Type (8 bytes)
   202 00000008 ????????????????    <1>         .vaddr:     resq 1    ; Virtual Address (8 bytes)
   203 00000010 ????????????????    <1>         .offset:    resq 1    ; Section Offset (8 bytes)
   204 00000018 ????????????????    <1>         .size:      resq 1    ; Section Size (8 bytes)
   205                              <1>     ENDSTRUC
   206                              <1> %endif
   207                              <1> 
   208                              <1> %endif
     3                                  [BITS 64]          ; 0xFFFF800000106200
     4                                  ehdr:
     5                                      ABI_HEADER ABI_File_CORE, kernel_start, shdr,1
   168 00000000 A5414249            <1>  db 0xA5, 'A', 'B', 'I'
   169 00000004 01                  <1>  db 1
   170 00000005 01                  <1>  db 1
   171                              <1> 
   172 00000006 0400                <1>  dw %1
   173 00000008 [4000000000000000]  <1>  dq %2
   174 00000010 2000                <1>  dw 32
   175                              <1> 
   176 00000012 [2000000000000000]  <1>  dq %3
   177 0000001A 2000                <1>  dw 32
   178 0000001C 0100                <1>  dw %4
   179 0000001E 0000                <1>  dw 0
     6                                  shdr:
     7                                      SECTION_HEADER Section_Type_LOAD, 0, kernel_start,section_end-section_start
   195 00000020 0100000000000000    <1>  dq %1
   196 00000028 0000000000000000    <1>  dq %2
   197 00000030 [4000000000000000]  <1>  dq %3
   198 00000038 531B000000000000    <1>  dq %4
     8                                  section_start:
     9                                  kernel_start:
    10                                  
    11                                      function init_sys_vector
    24                              <1>  %assign param_count %0 - 2
    25                              <1> 
    26                              <1>  %if param_count < 0
    27                              <1>  %assign param_count 0
    28                              <1>  %endif
    29                              <1>  %if param_count < 1
    30                              <1>  %assign ret_param_count 0
    31                              <1>  %else
    32                              <1>  %assign ret_param_count %2
    33                              <1>  %endif
    34                              <1> 
    35                              <1> 
    36                              <1>  prepare_call param_count, ret_param_count
    97                              <2>  %assign total_space ((%1 + %2) * 8)
    98                              <2> 
    99                              <2>  %if (total_space % 16) != 0
   100                              <2>  %assign total_space total_space + 8
   101                              <2>  %endif
   102                              <2> 
   103 00000040 4883EC00            <2>  sub rsp, total_space
    37                              <1> 
    38                              <1> 
    39                              <1>  %if param_count > 0
    40                              <1>  %assign i 0
    41                              <1>  mov [rsp-8], rax
    42                              <1>  %rep param_count
    43                              <1>  %rotate 1
    44                              <1>  mov rax, %2
    45                              <1>  mov [rsp + 8*i], rax
    46                              <1>  %assign i i+1
    47                              <1>  %endrep
    48                              <1> 
    49                              <1>  %rotate 1
    50                              <1>  %rotate 1
    51                              <1>  mov rax,[rsp-8]
    52                              <1>  %endif
    53                              <1> 
    54                              <1> 
    55 00000044 E819130000          <1>  call %1
    56                              <1> 
    57                              <1> 
    58                              <1>  cleanup_call param_count, ret_param_count
   107                              <2>  %assign total_space ((%1 + %2) * 8)
   108                              <2>  %if (total_space % 16) != 0
   109                              <2>  %assign total_space total_space + 8
   110                              <2>  %endif
   111 00000049 4883C400            <2>  add rsp, total_space
    59                              <1> 
    12                                  
    13                                      function video_init
    24                              <1>  %assign param_count %0 - 2
    25                              <1> 
    26                              <1>  %if param_count < 0
    27                              <1>  %assign param_count 0
    28                              <1>  %endif
    29                              <1>  %if param_count < 1
    30                              <1>  %assign ret_param_count 0
    31                              <1>  %else
    32                              <1>  %assign ret_param_count %2
    33                              <1>  %endif
    34                              <1> 
    35                              <1> 
    36                              <1>  prepare_call param_count, ret_param_count
    97                              <2>  %assign total_space ((%1 + %2) * 8)
    98                              <2> 
    99                              <2>  %if (total_space % 16) != 0
   100                              <2>  %assign total_space total_space + 8
   101                              <2>  %endif
   102                              <2> 
   103 0000004D 4883EC00            <2>  sub rsp, total_space
    37                              <1> 
    38                              <1> 
    39                              <1>  %if param_count > 0
    40                              <1>  %assign i 0
    41                              <1>  mov [rsp-8], rax
    42                              <1>  %rep param_count
    43                              <1>  %rotate 1
    44                              <1>  mov rax, %2
    45                              <1>  mov [rsp + 8*i], rax
    46                              <1>  %assign i i+1
    47                              <1>  %endrep
    48                              <1> 
    49                              <1>  %rotate 1
    50                              <1>  %rotate 1
    51                              <1>  mov rax,[rsp-8]
    52                              <1>  %endif
    53                              <1> 
    54                              <1> 
    55 00000051 E8E2030000          <1>  call %1
    56                              <1> 
    57                              <1> 
    58                              <1>  cleanup_call param_count, ret_param_count
   107                              <2>  %assign total_space ((%1 + %2) * 8)
   108                              <2>  %if (total_space % 16) != 0
   109                              <2>  %assign total_space total_space + 8
   110                              <2>  %endif
   111 00000056 4883C400            <2>  add rsp, total_space
    59                              <1> 
    14                                      function printk_init
    24                              <1>  %assign param_count %0 - 2
    25                              <1> 
    26                              <1>  %if param_count < 0
    27                              <1>  %assign param_count 0
    28                              <1>  %endif
    29                              <1>  %if param_count < 1
    30                              <1>  %assign ret_param_count 0
    31                              <1>  %else
    32                              <1>  %assign ret_param_count %2
    33                              <1>  %endif
    34                              <1> 
    35                              <1> 
    36                              <1>  prepare_call param_count, ret_param_count
    97                              <2>  %assign total_space ((%1 + %2) * 8)
    98                              <2> 
    99                              <2>  %if (total_space % 16) != 0
   100                              <2>  %assign total_space total_space + 8
   101                              <2>  %endif
   102                              <2> 
   103 0000005A 4883EC00            <2>  sub rsp, total_space
    37                              <1> 
    38                              <1> 
    39                              <1>  %if param_count > 0
    40                              <1>  %assign i 0
    41                              <1>  mov [rsp-8], rax
    42                              <1>  %rep param_count
    43                              <1>  %rotate 1
    44                              <1>  mov rax, %2
    45                              <1>  mov [rsp + 8*i], rax
    46                              <1>  %assign i i+1
    47                              <1>  %endrep
    48                              <1> 
    49                              <1>  %rotate 1
    50                              <1>  %rotate 1
    51                              <1>  mov rax,[rsp-8]
    52                              <1>  %endif
    53                              <1> 
    54                              <1> 
    55 0000005E E8F70A0000          <1>  call %1
    56                              <1> 
    57                              <1> 
    58                              <1>  cleanup_call param_count, ret_param_count
   107                              <2>  %assign total_space ((%1 + %2) * 8)
   108                              <2>  %if (total_space % 16) != 0
   109                              <2>  %assign total_space total_space + 8
   110                              <2>  %endif
   111 00000063 4883C400            <2>  add rsp, total_space
    59                              <1> 
    15                                  
    16                                      ; jmp $
    17                                      ; jmp $
    18 00000067 B80A000000                  mov rax,10
    19 0000006C BB00000000                  mov rbx,0
    20 00000071 48F7F3                      div rbx
    21 00000074 B834120000                  mov rax,0x1234
    22                                      ; jmp $
    23                                  
    24                                      function test_printk
    24                              <1>  %assign param_count %0 - 2
    25                              <1> 
    26                              <1>  %if param_count < 0
    27                              <1>  %assign param_count 0
    28                              <1>  %endif
    29                              <1>  %if param_count < 1
    30                              <1>  %assign ret_param_count 0
    31                              <1>  %else
    32                              <1>  %assign ret_param_count %2
    33                              <1>  %endif
    34                              <1> 
    35                              <1> 
    36                              <1>  prepare_call param_count, ret_param_count
    97                              <2>  %assign total_space ((%1 + %2) * 8)
    98                              <2> 
    99                              <2>  %if (total_space % 16) != 0
   100                              <2>  %assign total_space total_space + 8
   101                              <2>  %endif
   102                              <2> 
   103 00000079 4883EC00            <2>  sub rsp, total_space
    37                              <1> 
    38                              <1> 
    39                              <1>  %if param_count > 0
    40                              <1>  %assign i 0
    41                              <1>  mov [rsp-8], rax
    42                              <1>  %rep param_count
    43                              <1>  %rotate 1
    44                              <1>  mov rax, %2
    45                              <1>  mov [rsp + 8*i], rax
    46                              <1>  %assign i i+1
    47                              <1>  %endrep
    48                              <1> 
    49                              <1>  %rotate 1
    50                              <1>  %rotate 1
    51                              <1>  mov rax,[rsp-8]
    52                              <1>  %endif
    53                              <1> 
    54                              <1> 
    55 0000007D E813000000          <1>  call %1
    56                              <1> 
    57                              <1> 
    58                              <1>  cleanup_call param_count, ret_param_count
   107                              <2>  %assign total_space ((%1 + %2) * 8)
   108                              <2>  %if (total_space % 16) != 0
   109                              <2>  %assign total_space total_space + 8
   110                              <2>  %endif
   111 00000082 4883C400            <2>  add rsp, total_space
    59                              <1> 
    25                                      function test_video
    24                              <1>  %assign param_count %0 - 2
    25                              <1> 
    26                              <1>  %if param_count < 0
    27                              <1>  %assign param_count 0
    28                              <1>  %endif
    29                              <1>  %if param_count < 1
    30                              <1>  %assign ret_param_count 0
    31                              <1>  %else
    32                              <1>  %assign ret_param_count %2
    33                              <1>  %endif
    34                              <1> 
    35                              <1> 
    36                              <1>  prepare_call param_count, ret_param_count
    97                              <2>  %assign total_space ((%1 + %2) * 8)
    98                              <2> 
    99                              <2>  %if (total_space % 16) != 0
   100                              <2>  %assign total_space total_space + 8
   101                              <2>  %endif
   102                              <2> 
   103 00000086 4883EC00            <2>  sub rsp, total_space
    37                              <1> 
    38                              <1> 
    39                              <1>  %if param_count > 0
    40                              <1>  %assign i 0
    41                              <1>  mov [rsp-8], rax
    42                              <1>  %rep param_count
    43                              <1>  %rotate 1
    44                              <1>  mov rax, %2
    45                              <1>  mov [rsp + 8*i], rax
    46                              <1>  %assign i i+1
    47                              <1>  %endrep
    48                              <1> 
    49                              <1>  %rotate 1
    50                              <1>  %rotate 1
    51                              <1>  mov rax,[rsp-8]
    52                              <1>  %endif
    53                              <1> 
    54                              <1> 
    55 0000008A E8A4010000          <1>  call %1
    56                              <1> 
    57                              <1> 
    58                              <1>  cleanup_call param_count, ret_param_count
   107                              <2>  %assign total_space ((%1 + %2) * 8)
   108                              <2>  %if (total_space % 16) != 0
   109                              <2>  %assign total_space total_space + 8
   110                              <2>  %endif
   111 0000008F 4883C400            <2>  add rsp, total_space
    59                              <1> 
    26                                  
    27                                  
    28                                  
    29                                  
    30                                      ; lea rsi,[rel messages]
    31                                      ; function draw_string,1,0,0,rsi
    32                                  
    33                                  
    34                                      ; lea rsi, [rel format1]
    35                                      ; lea rdx, [rel string1]
    36                                      ; function printk,1,rsi,rdx
    37                                  
    38                                      .endofkernel:
    39 00000093 EBFE                            jmp $
    40                                  test_printk:;test printk
    41                                      prolog 2;
    63 00000095 55                  <1>  push rbp
    64 00000096 4889E5              <1>  mov rbp, rsp
    65 00000099 488945F8            <1>  mov [rbp-8],rax
    66 0000009D B802000000          <1>  mov rax, %1
    67 000000A2 4883C00F            <1>  add rax, 15
    68 000000A6 4883E0F0            <1>  and rax, ~15
    69 000000AA 4829C4              <1>  sub rsp, rax
    70 000000AD 488B45F8            <1>  mov rax,[rbp-8]
    71                              <1>  pushallq
   115 000000B1 50                  <2>  push rax
   116 000000B2 53                  <2>  push rbx
   117 000000B3 51                  <2>  push rcx
   118 000000B4 52                  <2>  push rdx
   119 000000B5 56                  <2>  push rsi
   120 000000B6 57                  <2>  push rdi
   121 000000B7 4150                <2>  push r8
   122 000000B9 4151                <2>  push r9
   123 000000BB 4152                <2>  push r10
   124 000000BD 4153                <2>  push r11
   125 000000BF 4154                <2>  push r12
   126 000000C1 4155                <2>  push r13
   127 000000C3 4156                <2>  push r14
   128 000000C5 4157                <2>  push r15
    72                              <1> 
    73                              <1> 
    74                              <1> 
    75                              <1> 
    76                              <1> 
    77                              <1> 
    42                                      ; lea rsi,[rel messages]
    43                                      function draw_char,1,0,0,'A'
    24                              <1>  %assign param_count %0 - 2
    25                              <1> 
    26                              <1>  %if param_count < 0
    27                              <1>  %assign param_count 0
    28                              <1>  %endif
    29                              <1>  %if param_count < 1
    30                              <1>  %assign ret_param_count 0
    31                              <1>  %else
    32                              <1>  %assign ret_param_count %2
    33                              <1>  %endif
    34                              <1> 
    35                              <1> 
    36                              <1>  prepare_call param_count, ret_param_count
    97                              <2>  %assign total_space ((%1 + %2) * 8)
    98                              <2> 
    99                              <2>  %if (total_space % 16) != 0
   100                              <2>  %assign total_space total_space + 8
   101                              <2>  %endif
   102                              <2> 
   103 000000C7 4883EC20            <2>  sub rsp, total_space
    37                              <1> 
    38                              <1> 
    39                              <1>  %if param_count > 0
    40                              <1>  %assign i 0
    41 000000CB 48894424F8          <1>  mov [rsp-8], rax
    42                              <1>  %rep param_count
    43                              <1>  %rotate 1
    44                              <1>  mov rax, %2
    45                              <1>  mov [rsp + 8*i], rax
    46                              <1>  %assign i i+1
    47                              <1>  %endrep
    43                              <2>  %rotate 1
    44 000000D0 B800000000          <2>  mov rax, %2
    45 000000D5 48890424            <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 000000D9 B800000000          <2>  mov rax, %2
    45 000000DE 4889442408          <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 000000E3 B841000000          <2>  mov rax, %2
    45 000000E8 4889442410          <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    48                              <1> 
    49                              <1>  %rotate 1
    50                              <1>  %rotate 1
    51 000000ED 488B4424F8          <1>  mov rax,[rsp-8]
    52                              <1>  %endif
    53                              <1> 
    54                              <1> 
    55 000000F2 E8070F0000          <1>  call %1
    56                              <1> 
    57                              <1> 
    58                              <1>  cleanup_call param_count, ret_param_count
   107                              <2>  %assign total_space ((%1 + %2) * 8)
   108                              <2>  %if (total_space % 16) != 0
   109                              <2>  %assign total_space total_space + 8
   110                              <2>  %endif
   111 000000F7 4883C420            <2>  add rsp, total_space
    59                              <1> 
    44                                  
    45 000000FB 488D3543180000              lea rsi,[rel messages1]
    46                                      function draw_string,1,0,20,rsi
    24                              <1>  %assign param_count %0 - 2
    25                              <1> 
    26                              <1>  %if param_count < 0
    27                              <1>  %assign param_count 0
    28                              <1>  %endif
    29                              <1>  %if param_count < 1
    30                              <1>  %assign ret_param_count 0
    31                              <1>  %else
    32                              <1>  %assign ret_param_count %2
    33                              <1>  %endif
    34                              <1> 
    35                              <1> 
    36                              <1>  prepare_call param_count, ret_param_count
    97                              <2>  %assign total_space ((%1 + %2) * 8)
    98                              <2> 
    99                              <2>  %if (total_space % 16) != 0
   100                              <2>  %assign total_space total_space + 8
   101                              <2>  %endif
   102                              <2> 
   103 00000102 4883EC20            <2>  sub rsp, total_space
    37                              <1> 
    38                              <1> 
    39                              <1>  %if param_count > 0
    40                              <1>  %assign i 0
    41 00000106 48894424F8          <1>  mov [rsp-8], rax
    42                              <1>  %rep param_count
    43                              <1>  %rotate 1
    44                              <1>  mov rax, %2
    45                              <1>  mov [rsp + 8*i], rax
    46                              <1>  %assign i i+1
    47                              <1>  %endrep
    43                              <2>  %rotate 1
    44 0000010B B800000000          <2>  mov rax, %2
    45 00000110 48890424            <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 00000114 B814000000          <2>  mov rax, %2
    45 00000119 4889442408          <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 0000011E 4889F0              <2>  mov rax, %2
    45 00000121 4889442410          <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    48                              <1> 
    49                              <1>  %rotate 1
    50                              <1>  %rotate 1
    51 00000126 488B4424F8          <1>  mov rax,[rsp-8]
    52                              <1>  %endif
    53                              <1> 
    54                              <1> 
    55 0000012B E8D20F0000          <1>  call %1
    56                              <1> 
    57                              <1> 
    58                              <1>  cleanup_call param_count, ret_param_count
   107                              <2>  %assign total_space ((%1 + %2) * 8)
   108                              <2>  %if (total_space % 16) != 0
   109                              <2>  %assign total_space total_space + 8
   110                              <2>  %endif
   111 00000130 4883C420            <2>  add rsp, total_space
    59                              <1> 
    47                                  
    48 00000134 488D353E180000              lea rsi,[rel messages2]
    49                                      function draw_string,1,0,40,rsi
    24                              <1>  %assign param_count %0 - 2
    25                              <1> 
    26                              <1>  %if param_count < 0
    27                              <1>  %assign param_count 0
    28                              <1>  %endif
    29                              <1>  %if param_count < 1
    30                              <1>  %assign ret_param_count 0
    31                              <1>  %else
    32                              <1>  %assign ret_param_count %2
    33                              <1>  %endif
    34                              <1> 
    35                              <1> 
    36                              <1>  prepare_call param_count, ret_param_count
    97                              <2>  %assign total_space ((%1 + %2) * 8)
    98                              <2> 
    99                              <2>  %if (total_space % 16) != 0
   100                              <2>  %assign total_space total_space + 8
   101                              <2>  %endif
   102                              <2> 
   103 0000013B 4883EC20            <2>  sub rsp, total_space
    37                              <1> 
    38                              <1> 
    39                              <1>  %if param_count > 0
    40                              <1>  %assign i 0
    41 0000013F 48894424F8          <1>  mov [rsp-8], rax
    42                              <1>  %rep param_count
    43                              <1>  %rotate 1
    44                              <1>  mov rax, %2
    45                              <1>  mov [rsp + 8*i], rax
    46                              <1>  %assign i i+1
    47                              <1>  %endrep
    43                              <2>  %rotate 1
    44 00000144 B800000000          <2>  mov rax, %2
    45 00000149 48890424            <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 0000014D B828000000          <2>  mov rax, %2
    45 00000152 4889442408          <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 00000157 4889F0              <2>  mov rax, %2
    45 0000015A 4889442410          <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    48                              <1> 
    49                              <1>  %rotate 1
    50                              <1>  %rotate 1
    51 0000015F 488B4424F8          <1>  mov rax,[rsp-8]
    52                              <1>  %endif
    53                              <1> 
    54                              <1> 
    55 00000164 E8990F0000          <1>  call %1
    56                              <1> 
    57                              <1> 
    58                              <1>  cleanup_call param_count, ret_param_count
   107                              <2>  %assign total_space ((%1 + %2) * 8)
   108                              <2>  %if (total_space % 16) != 0
   109                              <2>  %assign total_space total_space + 8
   110                              <2>  %endif
   111 00000169 4883C420            <2>  add rsp, total_space
    59                              <1> 
    50                                  
    51 0000016D 488D354C180000              lea rsi,[rel messages3]
    52                                      function draw_string,1,0,60,rsi
    24                              <1>  %assign param_count %0 - 2
    25                              <1> 
    26                              <1>  %if param_count < 0
    27                              <1>  %assign param_count 0
    28                              <1>  %endif
    29                              <1>  %if param_count < 1
    30                              <1>  %assign ret_param_count 0
    31                              <1>  %else
    32                              <1>  %assign ret_param_count %2
    33                              <1>  %endif
    34                              <1> 
    35                              <1> 
    36                              <1>  prepare_call param_count, ret_param_count
    97                              <2>  %assign total_space ((%1 + %2) * 8)
    98                              <2> 
    99                              <2>  %if (total_space % 16) != 0
   100                              <2>  %assign total_space total_space + 8
   101                              <2>  %endif
   102                              <2> 
   103 00000174 4883EC20            <2>  sub rsp, total_space
    37                              <1> 
    38                              <1> 
    39                              <1>  %if param_count > 0
    40                              <1>  %assign i 0
    41 00000178 48894424F8          <1>  mov [rsp-8], rax
    42                              <1>  %rep param_count
    43                              <1>  %rotate 1
    44                              <1>  mov rax, %2
    45                              <1>  mov [rsp + 8*i], rax
    46                              <1>  %assign i i+1
    47                              <1>  %endrep
    43                              <2>  %rotate 1
    44 0000017D B800000000          <2>  mov rax, %2
    45 00000182 48890424            <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 00000186 B83C000000          <2>  mov rax, %2
    45 0000018B 4889442408          <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 00000190 4889F0              <2>  mov rax, %2
    45 00000193 4889442410          <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    48                              <1> 
    49                              <1>  %rotate 1
    50                              <1>  %rotate 1
    51 00000198 488B4424F8          <1>  mov rax,[rsp-8]
    52                              <1>  %endif
    53                              <1> 
    54                              <1> 
    55 0000019D E8600F0000          <1>  call %1
    56                              <1> 
    57                              <1> 
    58                              <1>  cleanup_call param_count, ret_param_count
   107                              <2>  %assign total_space ((%1 + %2) * 8)
   108                              <2>  %if (total_space % 16) != 0
   109                              <2>  %assign total_space total_space + 8
   110                              <2>  %endif
   111 000001A2 4883C420            <2>  add rsp, total_space
    59                              <1> 
    53                                  
    54 000001A6 488D3583180000              lea rsi,[rel messages4]
    55                                      function draw_string,1,0,80,rsi
    24                              <1>  %assign param_count %0 - 2
    25                              <1> 
    26                              <1>  %if param_count < 0
    27                              <1>  %assign param_count 0
    28                              <1>  %endif
    29                              <1>  %if param_count < 1
    30                              <1>  %assign ret_param_count 0
    31                              <1>  %else
    32                              <1>  %assign ret_param_count %2
    33                              <1>  %endif
    34                              <1> 
    35                              <1> 
    36                              <1>  prepare_call param_count, ret_param_count
    97                              <2>  %assign total_space ((%1 + %2) * 8)
    98                              <2> 
    99                              <2>  %if (total_space % 16) != 0
   100                              <2>  %assign total_space total_space + 8
   101                              <2>  %endif
   102                              <2> 
   103 000001AD 4883EC20            <2>  sub rsp, total_space
    37                              <1> 
    38                              <1> 
    39                              <1>  %if param_count > 0
    40                              <1>  %assign i 0
    41 000001B1 48894424F8          <1>  mov [rsp-8], rax
    42                              <1>  %rep param_count
    43                              <1>  %rotate 1
    44                              <1>  mov rax, %2
    45                              <1>  mov [rsp + 8*i], rax
    46                              <1>  %assign i i+1
    47                              <1>  %endrep
    43                              <2>  %rotate 1
    44 000001B6 B800000000          <2>  mov rax, %2
    45 000001BB 48890424            <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 000001BF B850000000          <2>  mov rax, %2
    45 000001C4 4889442408          <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 000001C9 4889F0              <2>  mov rax, %2
    45 000001CC 4889442410          <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    48                              <1> 
    49                              <1>  %rotate 1
    50                              <1>  %rotate 1
    51 000001D1 488B4424F8          <1>  mov rax,[rsp-8]
    52                              <1>  %endif
    53                              <1> 
    54                              <1> 
    55 000001D6 E8270F0000          <1>  call %1
    56                              <1> 
    57                              <1> 
    58                              <1>  cleanup_call param_count, ret_param_count
   107                              <2>  %assign total_space ((%1 + %2) * 8)
   108                              <2>  %if (total_space % 16) != 0
   109                              <2>  %assign total_space total_space + 8
   110                              <2>  %endif
   111 000001DB 4883C420            <2>  add rsp, total_space
    59                              <1> 
    56                                  
    57 000001DF 488D354B190000              lea rsi,[rel hex_messages]
    58                                      function draw_hex,1,0,100,rsi
    24                              <1>  %assign param_count %0 - 2
    25                              <1> 
    26                              <1>  %if param_count < 0
    27                              <1>  %assign param_count 0
    28                              <1>  %endif
    29                              <1>  %if param_count < 1
    30                              <1>  %assign ret_param_count 0
    31                              <1>  %else
    32                              <1>  %assign ret_param_count %2
    33                              <1>  %endif
    34                              <1> 
    35                              <1> 
    36                              <1>  prepare_call param_count, ret_param_count
    97                              <2>  %assign total_space ((%1 + %2) * 8)
    98                              <2> 
    99                              <2>  %if (total_space % 16) != 0
   100                              <2>  %assign total_space total_space + 8
   101                              <2>  %endif
   102                              <2> 
   103 000001E6 4883EC20            <2>  sub rsp, total_space
    37                              <1> 
    38                              <1> 
    39                              <1>  %if param_count > 0
    40                              <1>  %assign i 0
    41 000001EA 48894424F8          <1>  mov [rsp-8], rax
    42                              <1>  %rep param_count
    43                              <1>  %rotate 1
    44                              <1>  mov rax, %2
    45                              <1>  mov [rsp + 8*i], rax
    46                              <1>  %assign i i+1
    47                              <1>  %endrep
    43                              <2>  %rotate 1
    44 000001EF B800000000          <2>  mov rax, %2
    45 000001F4 48890424            <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 000001F8 B864000000          <2>  mov rax, %2
    45 000001FD 4889442408          <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 00000202 4889F0              <2>  mov rax, %2
    45 00000205 4889442410          <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    48                              <1> 
    49                              <1>  %rotate 1
    50                              <1>  %rotate 1
    51 0000020A 488B4424F8          <1>  mov rax,[rsp-8]
    52                              <1>  %endif
    53                              <1> 
    54                              <1> 
    55 0000020F E8870F0000          <1>  call %1
    56                              <1> 
    57                              <1> 
    58                              <1>  cleanup_call param_count, ret_param_count
   107                              <2>  %assign total_space ((%1 + %2) * 8)
   108                              <2>  %if (total_space % 16) != 0
   109                              <2>  %assign total_space total_space + 8
   110                              <2>  %endif
   111 00000214 4883C420            <2>  add rsp, total_space
    59                              <1> 
    59                                  
    60                                      epilog
    81                              <1>  popallq
   132 00000218 415F                <2>  pop r15
   133 0000021A 415E                <2>  pop r14
   134 0000021C 415D                <2>  pop r13
   135 0000021E 415C                <2>  pop r12
   136 00000220 415B                <2>  pop r11
   137 00000222 415A                <2>  pop r10
   138 00000224 4159                <2>  pop r9
   139 00000226 4158                <2>  pop r8
   140 00000228 5F                  <2>  pop rdi
   141 00000229 5E                  <2>  pop rsi
   142 0000022A 5A                  <2>  pop rdx
   143 0000022B 59                  <2>  pop rcx
   144 0000022C 5B                  <2>  pop rbx
   145 0000022D 58                  <2>  pop rax
    82                              <1> 
    83 0000022E 4889EC              <1>  mov rsp, rbp
    84 00000231 5D                  <1>  pop rbp
    85 00000232 C3                  <1>  ret
    61                                  
    62                                  test_video:;test video
    63                                      prolog 2;
    63 00000233 55                  <1>  push rbp
    64 00000234 4889E5              <1>  mov rbp, rsp
    65 00000237 488945F8            <1>  mov [rbp-8],rax
    66 0000023B B802000000          <1>  mov rax, %1
    67 00000240 4883C00F            <1>  add rax, 15
    68 00000244 4883E0F0            <1>  and rax, ~15
    69 00000248 4829C4              <1>  sub rsp, rax
    70 0000024B 488B45F8            <1>  mov rax,[rbp-8]
    71                              <1>  pushallq
   115 0000024F 50                  <2>  push rax
   116 00000250 53                  <2>  push rbx
   117 00000251 51                  <2>  push rcx
   118 00000252 52                  <2>  push rdx
   119 00000253 56                  <2>  push rsi
   120 00000254 57                  <2>  push rdi
   121 00000255 4150                <2>  push r8
   122 00000257 4151                <2>  push r9
   123 00000259 4152                <2>  push r10
   124 0000025B 4153                <2>  push r11
   125 0000025D 4154                <2>  push r12
   126 0000025F 4155                <2>  push r13
   127 00000261 4156                <2>  push r14
   128 00000263 4157                <2>  push r15
    72                              <1> 
    73                              <1> 
    74                              <1> 
    75                              <1> 
    76                              <1> 
    77                              <1> 
    64                                  
    65                                      ; function draw_screen,0,0x00000000
    66                                      function draw_pixel,1,100,200,0x00FFFFFF
    24                              <1>  %assign param_count %0 - 2
    25                              <1> 
    26                              <1>  %if param_count < 0
    27                              <1>  %assign param_count 0
    28                              <1>  %endif
    29                              <1>  %if param_count < 1
    30                              <1>  %assign ret_param_count 0
    31                              <1>  %else
    32                              <1>  %assign ret_param_count %2
    33                              <1>  %endif
    34                              <1> 
    35                              <1> 
    36                              <1>  prepare_call param_count, ret_param_count
    97                              <2>  %assign total_space ((%1 + %2) * 8)
    98                              <2> 
    99                              <2>  %if (total_space % 16) != 0
   100                              <2>  %assign total_space total_space + 8
   101                              <2>  %endif
   102                              <2> 
   103 00000265 4883EC20            <2>  sub rsp, total_space
    37                              <1> 
    38                              <1> 
    39                              <1>  %if param_count > 0
    40                              <1>  %assign i 0
    41 00000269 48894424F8          <1>  mov [rsp-8], rax
    42                              <1>  %rep param_count
    43                              <1>  %rotate 1
    44                              <1>  mov rax, %2
    45                              <1>  mov [rsp + 8*i], rax
    46                              <1>  %assign i i+1
    47                              <1>  %endrep
    43                              <2>  %rotate 1
    44 0000026E B864000000          <2>  mov rax, %2
    45 00000273 48890424            <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 00000277 B8C8000000          <2>  mov rax, %2
    45 0000027C 4889442408          <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 00000281 B8FFFFFF00          <2>  mov rax, %2
    45 00000286 4889442410          <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    48                              <1> 
    49                              <1>  %rotate 1
    50                              <1>  %rotate 1
    51 0000028B 488B4424F8          <1>  mov rax,[rsp-8]
    52                              <1>  %endif
    53                              <1> 
    54                              <1> 
    55 00000290 E84D020000          <1>  call %1
    56                              <1> 
    57                              <1> 
    58                              <1>  cleanup_call param_count, ret_param_count
   107                              <2>  %assign total_space ((%1 + %2) * 8)
   108                              <2>  %if (total_space % 16) != 0
   109                              <2>  %assign total_space total_space + 8
   110                              <2>  %endif
   111 00000295 4883C420            <2>  add rsp, total_space
    59                              <1> 
    67                                      function draw_line,1,100,200,300,400,0x00FFFFFF
    24                              <1>  %assign param_count %0 - 2
    25                              <1> 
    26                              <1>  %if param_count < 0
    27                              <1>  %assign param_count 0
    28                              <1>  %endif
    29                              <1>  %if param_count < 1
    30                              <1>  %assign ret_param_count 0
    31                              <1>  %else
    32                              <1>  %assign ret_param_count %2
    33                              <1>  %endif
    34                              <1> 
    35                              <1> 
    36                              <1>  prepare_call param_count, ret_param_count
    97                              <2>  %assign total_space ((%1 + %2) * 8)
    98                              <2> 
    99                              <2>  %if (total_space % 16) != 0
   100                              <2>  %assign total_space total_space + 8
   101                              <2>  %endif
   102                              <2> 
   103 00000299 4883EC30            <2>  sub rsp, total_space
    37                              <1> 
    38                              <1> 
    39                              <1>  %if param_count > 0
    40                              <1>  %assign i 0
    41 0000029D 48894424F8          <1>  mov [rsp-8], rax
    42                              <1>  %rep param_count
    43                              <1>  %rotate 1
    44                              <1>  mov rax, %2
    45                              <1>  mov [rsp + 8*i], rax
    46                              <1>  %assign i i+1
    47                              <1>  %endrep
    43                              <2>  %rotate 1
    44 000002A2 B864000000          <2>  mov rax, %2
    45 000002A7 48890424            <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 000002AB B8C8000000          <2>  mov rax, %2
    45 000002B0 4889442408          <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 000002B5 B82C010000          <2>  mov rax, %2
    45 000002BA 4889442410          <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 000002BF B890010000          <2>  mov rax, %2
    45 000002C4 4889442418          <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 000002C9 B8FFFFFF00          <2>  mov rax, %2
    45 000002CE 4889442420          <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    48                              <1> 
    49                              <1>  %rotate 1
    50                              <1>  %rotate 1
    51 000002D3 488B4424F8          <1>  mov rax,[rsp-8]
    52                              <1>  %endif
    53                              <1> 
    54                              <1> 
    55 000002D8 E88C020000          <1>  call %1
    56                              <1> 
    57                              <1> 
    58                              <1>  cleanup_call param_count, ret_param_count
   107                              <2>  %assign total_space ((%1 + %2) * 8)
   108                              <2>  %if (total_space % 16) != 0
   109                              <2>  %assign total_space total_space + 8
   110                              <2>  %endif
   111 000002DD 4883C430            <2>  add rsp, total_space
    59                              <1> 
    68                                      function draw_rect,1,200,300,400,500,0x00FFFFFF
    24                              <1>  %assign param_count %0 - 2
    25                              <1> 
    26                              <1>  %if param_count < 0
    27                              <1>  %assign param_count 0
    28                              <1>  %endif
    29                              <1>  %if param_count < 1
    30                              <1>  %assign ret_param_count 0
    31                              <1>  %else
    32                              <1>  %assign ret_param_count %2
    33                              <1>  %endif
    34                              <1> 
    35                              <1> 
    36                              <1>  prepare_call param_count, ret_param_count
    97                              <2>  %assign total_space ((%1 + %2) * 8)
    98                              <2> 
    99                              <2>  %if (total_space % 16) != 0
   100                              <2>  %assign total_space total_space + 8
   101                              <2>  %endif
   102                              <2> 
   103 000002E1 4883EC30            <2>  sub rsp, total_space
    37                              <1> 
    38                              <1> 
    39                              <1>  %if param_count > 0
    40                              <1>  %assign i 0
    41 000002E5 48894424F8          <1>  mov [rsp-8], rax
    42                              <1>  %rep param_count
    43                              <1>  %rotate 1
    44                              <1>  mov rax, %2
    45                              <1>  mov [rsp + 8*i], rax
    46                              <1>  %assign i i+1
    47                              <1>  %endrep
    43                              <2>  %rotate 1
    44 000002EA B8C8000000          <2>  mov rax, %2
    45 000002EF 48890424            <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 000002F3 B82C010000          <2>  mov rax, %2
    45 000002F8 4889442408          <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 000002FD B890010000          <2>  mov rax, %2
    45 00000302 4889442410          <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 00000307 B8F4010000          <2>  mov rax, %2
    45 0000030C 4889442418          <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 00000311 B8FFFFFF00          <2>  mov rax, %2
    45 00000316 4889442420          <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    48                              <1> 
    49                              <1>  %rotate 1
    50                              <1>  %rotate 1
    51 0000031B 488B4424F8          <1>  mov rax,[rsp-8]
    52                              <1>  %endif
    53                              <1> 
    54                              <1> 
    55 00000320 E8A8030000          <1>  call %1
    56                              <1> 
    57                              <1> 
    58                              <1>  cleanup_call param_count, ret_param_count
   107                              <2>  %assign total_space ((%1 + %2) * 8)
   108                              <2>  %if (total_space % 16) != 0
   109                              <2>  %assign total_space total_space + 8
   110                              <2>  %endif
   111 00000325 4883C430            <2>  add rsp, total_space
    59                              <1> 
    69                                      function draw_circle,1,300,400,100,0x00FFFFFF
    24                              <1>  %assign param_count %0 - 2
    25                              <1> 
    26                              <1>  %if param_count < 0
    27                              <1>  %assign param_count 0
    28                              <1>  %endif
    29                              <1>  %if param_count < 1
    30                              <1>  %assign ret_param_count 0
    31                              <1>  %else
    32                              <1>  %assign ret_param_count %2
    33                              <1>  %endif
    34                              <1> 
    35                              <1> 
    36                              <1>  prepare_call param_count, ret_param_count
    97                              <2>  %assign total_space ((%1 + %2) * 8)
    98                              <2> 
    99                              <2>  %if (total_space % 16) != 0
   100                              <2>  %assign total_space total_space + 8
   101                              <2>  %endif
   102                              <2> 
   103 00000329 4883EC30            <2>  sub rsp, total_space
    37                              <1> 
    38                              <1> 
    39                              <1>  %if param_count > 0
    40                              <1>  %assign i 0
    41 0000032D 48894424F8          <1>  mov [rsp-8], rax
    42                              <1>  %rep param_count
    43                              <1>  %rotate 1
    44                              <1>  mov rax, %2
    45                              <1>  mov [rsp + 8*i], rax
    46                              <1>  %assign i i+1
    47                              <1>  %endrep
    43                              <2>  %rotate 1
    44 00000332 B82C010000          <2>  mov rax, %2
    45 00000337 48890424            <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 0000033B B890010000          <2>  mov rax, %2
    45 00000340 4889442408          <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 00000345 B864000000          <2>  mov rax, %2
    45 0000034A 4889442410          <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 0000034F B8FFFFFF00          <2>  mov rax, %2
    45 00000354 4889442418          <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    48                              <1> 
    49                              <1>  %rotate 1
    50                              <1>  %rotate 1
    51 00000359 488B4424F8          <1>  mov rax,[rsp-8]
    52                              <1>  %endif
    53                              <1> 
    54                              <1> 
    55 0000035E E8EF050000          <1>  call %1
    56                              <1> 
    57                              <1> 
    58                              <1>  cleanup_call param_count, ret_param_count
   107                              <2>  %assign total_space ((%1 + %2) * 8)
   108                              <2>  %if (total_space % 16) != 0
   109                              <2>  %assign total_space total_space + 8
   110                              <2>  %endif
   111 00000363 4883C430            <2>  add rsp, total_space
    59                              <1> 
    70                                      function draw_triangle,1,100,100,200,100,100,200,0x00FFFFFF
    24                              <1>  %assign param_count %0 - 2
    25                              <1> 
    26                              <1>  %if param_count < 0
    27                              <1>  %assign param_count 0
    28                              <1>  %endif
    29                              <1>  %if param_count < 1
    30                              <1>  %assign ret_param_count 0
    31                              <1>  %else
    32                              <1>  %assign ret_param_count %2
    33                              <1>  %endif
    34                              <1> 
    35                              <1> 
    36                              <1>  prepare_call param_count, ret_param_count
    97                              <2>  %assign total_space ((%1 + %2) * 8)
    98                              <2> 
    99                              <2>  %if (total_space % 16) != 0
   100                              <2>  %assign total_space total_space + 8
   101                              <2>  %endif
   102                              <2> 
   103 00000367 4883EC40            <2>  sub rsp, total_space
    37                              <1> 
    38                              <1> 
    39                              <1>  %if param_count > 0
    40                              <1>  %assign i 0
    41 0000036B 48894424F8          <1>  mov [rsp-8], rax
    42                              <1>  %rep param_count
    43                              <1>  %rotate 1
    44                              <1>  mov rax, %2
    45                              <1>  mov [rsp + 8*i], rax
    46                              <1>  %assign i i+1
    47                              <1>  %endrep
    43                              <2>  %rotate 1
    44 00000370 B864000000          <2>  mov rax, %2
    45 00000375 48890424            <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 00000379 B864000000          <2>  mov rax, %2
    45 0000037E 4889442408          <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 00000383 B8C8000000          <2>  mov rax, %2
    45 00000388 4889442410          <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 0000038D B864000000          <2>  mov rax, %2
    45 00000392 4889442418          <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 00000397 B864000000          <2>  mov rax, %2
    45 0000039C 4889442420          <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 000003A1 B8C8000000          <2>  mov rax, %2
    45 000003A6 4889442428          <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    43                              <2>  %rotate 1
    44 000003AB B8FFFFFF00          <2>  mov rax, %2
    45 000003B0 4889442430          <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    48                              <1> 
    49                              <1>  %rotate 1
    50                              <1>  %rotate 1
    51 000003B5 488B4424F8          <1>  mov rax,[rsp-8]
    52                              <1>  %endif
    53                              <1> 
    54                              <1> 
    55 000003BA E8B7040000          <1>  call %1
    56                              <1> 
    57                              <1> 
    58                              <1>  cleanup_call param_count, ret_param_count
   107                              <2>  %assign total_space ((%1 + %2) * 8)
   108                              <2>  %if (total_space % 16) != 0
   109                              <2>  %assign total_space total_space + 8
   110                              <2>  %endif
   111 000003BF 4883C440            <2>  add rsp, total_space
    59                              <1> 
    71                                  
    72                                      epilog    
    81                              <1>  popallq
   132 000003C3 415F                <2>  pop r15
   133 000003C5 415E                <2>  pop r14
   134 000003C7 415D                <2>  pop r13
   135 000003C9 415C                <2>  pop r12
   136 000003CB 415B                <2>  pop r11
   137 000003CD 415A                <2>  pop r10
   138 000003CF 4159                <2>  pop r9
   139 000003D1 4158                <2>  pop r8
   140 000003D3 5F                  <2>  pop rdi
   141 000003D4 5E                  <2>  pop rsi
   142 000003D5 5A                  <2>  pop rdx
   143 000003D6 59                  <2>  pop rcx
   144 000003D7 5B                  <2>  pop rbx
   145 000003D8 58                  <2>  pop rax
    82                              <1> 
    83 000003D9 4889EC              <1>  mov rsp, rbp
    84 000003DC 5D                  <1>  pop rbp
    85 000003DD C3                  <1>  ret
    73                                  
    74                                  parse_system_params:
    75                                      prolog 2;
    63 000003DE 55                  <1>  push rbp
    64 000003DF 4889E5              <1>  mov rbp, rsp
    65 000003E2 488945F8            <1>  mov [rbp-8],rax
    66 000003E6 B802000000          <1>  mov rax, %1
    67 000003EB 4883C00F            <1>  add rax, 15
    68 000003EF 4883E0F0            <1>  and rax, ~15
    69 000003F3 4829C4              <1>  sub rsp, rax
    70 000003F6 488B45F8            <1>  mov rax,[rbp-8]
    71                              <1>  pushallq
   115 000003FA 50                  <2>  push rax
   116 000003FB 53                  <2>  push rbx
   117 000003FC 51                  <2>  push rcx
   118 000003FD 52                  <2>  push rdx
   119 000003FE 56                  <2>  push rsi
   120 000003FF 57                  <2>  push rdi
   121 00000400 4150                <2>  push r8
   122 00000402 4151                <2>  push r9
   123 00000404 4152                <2>  push r10
   124 00000406 4153                <2>  push r11
   125 00000408 4154                <2>  push r12
   126 0000040A 4155                <2>  push r13
   127 0000040C 4156                <2>  push r14
   128 0000040E 4157                <2>  push r15
    72                              <1> 
    73                              <1> 
    74                              <1> 
    75                              <1> 
    76                              <1> 
    77                              <1> 
    76                                  
    77                                  
    78                                      epilog
    81                              <1>  popallq
   132 00000410 415F                <2>  pop r15
   133 00000412 415E                <2>  pop r14
   134 00000414 415D                <2>  pop r13
   135 00000416 415C                <2>  pop r12
   136 00000418 415B                <2>  pop r11
   137 0000041A 415A                <2>  pop r10
   138 0000041C 4159                <2>  pop r9
   139 0000041E 4158                <2>  pop r8
   140 00000420 5F                  <2>  pop rdi
   141 00000421 5E                  <2>  pop rsi
   142 00000422 5A                  <2>  pop rdx
   143 00000423 59                  <2>  pop rcx
   144 00000424 5B                  <2>  pop rbx
   145 00000425 58                  <2>  pop rax
    82                              <1> 
    83 00000426 4889EC              <1>  mov rsp, rbp
    84 00000429 5D                  <1>  pop rbp
    85 0000042A C3                  <1>  ret
    79                                      
    80                                  %include "../kernel/printk.asm"
     1                              <1> %ifndef PRINTK_ASM
     2                              <1> %define PRINTK_ASM
     3                              <1> 
     4                              <1> %include "../bootloader/global_def.asm"
     1                              <2> %ifndef GLOBAL_DEF_ASM
     2                              <2> %define GLOBAL_DEF_ASM
     3                              <2> 
     4                              <2> 
     5                              <2> ;|----------------------|
     6                              <2> ;|	100000 ~ END	|
     7                              <2> ;|	   KERNEL	|
     8                              <2> ;|----------------------|
     9                              <2> ;|	E0000 ~ 100000	|
    10                              <2> ;| Extended System BIOS |
    11                              <2> ;|----------------------|
    12                              <2> ;|	C0000 ~ Dffff	|
    13                              <2> ;|     Expansion Area   |
    14                              <2> ;|----------------------|
    15                              <2> ;|	A0000 ~ bffff	|
    16                              <2> ;|   Legacy Video Area  |
    17                              <2> ;|----------------------|
    18                              <2> ;|	9f000 ~ A0000	|
    19                              <2> ;|	 BIOS reserve	|
    20                              <2> ;|----------------------|
    21                              <2> ;|	90000 ~ 9f000	|
    22                              <2> ;|	 kernel tmpbuf	|
    23                              <2> ;|----------------------|
    24                              <2> ;|	10000 ~ 90000	|
    25                              <2> ;|	   LOADER	|
    26                              <2> ;|----------------------|
    27                              <2> ;|	8000 ~ 10000	|
    28                              <2> ;|	  VBE info	|
    29                              <2> ;|----------------------|
    30                              <2> ;|	7e00 ~ 8000	|
    31                              <2> ;|	  mem info	|
    32                              <2> ;|----------------------|
    33                              <2> ;|	7c00 ~ 7e00	|
    34                              <2> ;|	 MBR (BOOT)	|
    35                              <2> ;|----------------------|
    36                              <2> ;|	0000 ~ 7c00	|
    37                              <2> ;|	 BIOS Code	|
    38                              <2> ;|----------------------|
    39                              <2> 
    40                              <2> 
    41                              <2> ;_______________________________________________________
    42                              <2> ; START	END	    SIZE	        USED
    43                              <2> ; FFFF0	FFFFF	16B	        BIOS System Entry
    44                              <2> ; F0000	FFFEF	64KB-16B	BIOS System Code
    45                              <2> ; C8000	EFFFF	160KB	    ROM/Mapped IO
    46                              <2> ; C0000	C7FFF	32KB	    Graphic Adapter BIOS
    47                              <2> ; B8000	BFFFF	32KB	    Chroma Text Video Buffer
    48                              <2> ; B0000	B7FFF	32KB	    Mono Text Video Buffer
    49                              <2> ; A0000	AFFFF	64KB	    Graphic Video Buffer
    50                              <2> ; 9FC00	9FFFF	1KB	        Extended BIOS Data Area
    51                              <2> ; 7E00	9FBFF	622080B     Useable 608KB	
    52                              <2> ; 7C00	7DFF	512B	    MBR
    53                              <2> ; 500	7BFF	30464B      Useable 30KB	
    54                              <2> ; 400	4FF	    256B	    BIOS Data Area
    55                              <2> ; 000	3FF	    1KB	        IVT
    56                              <2> ; _____________________________________________________
    57                              <2> 
    58                              <2> 
    59                              <2> 
    60                              <2> 
    61                              <2> 
    62                              <2> 
    63                              <2> 
    64                              <2> 
    65                              <2> 
    66                              <2> 
    67                              <2> 
    68                              <2> ;|----------------------|
    69                              <2> ;|	100000 ~ END	|
    70                              <2> ;|	   KERNEL	|
    71                              <2> ;|----------------------|
    72                              <2> ;|	E0000 ~ 100000	|
    73                              <2> ;| Extended System BIOS |
    74                              <2> ;|----------------------|
    75                              <2> ;|	C0000 ~ Dffff	|
    76                              <2> ;|     Expansion Area   |
    77                              <2> ;|----------------------|
    78                              <2> ;|	A0000 ~ bffff	|
    79                              <2> ;|   Legacy Video Area  |
    80                              <2> ;|----------------------|
    81                              <2> ;|	9F000 ~ A0000	|
    82                              <2> ;|	 BIOS reserve	|
    83                              <2> ;|----------------------|
    84                              <2> ;|	90000 ~ 9F000	|
    85                              <2> ;|	 kernel tmpbuf	|
    86                              <2> ;|----------------------|
    87                              <2> ;|	10000 ~ 90000	|
    88                              <2> ;|	   LOADER	|
    89                              <2> ;|----------------------|
    90                              <2> ;|	8000 ~ 10000	|
    91                              <2> ;|	  VBE info	|
    92                              <2> ;|----------------------|
    93                              <2> ;|	7E00 ~ 8000	|
    94                              <2> ;|	  mem info	|
    95                              <2> ;|----------------------|
    96                              <2> ;|	7C00 ~ 7E00	|
    97                              <2> ;|	 MBR (BOOT)	|
    98                              <2> ;|----------------------|
    99                              <2> ;|	0000 ~ 7C00	|
   100                              <2> ;|	 BIOS Code	|
   101                              <2> ;|----------------------|
   102                              <2> 
   103                              <2> 
   104                              <2> 
   105                              <2> 
   106                              <2> 
   107                              <2> 
   108                              <2> 
   109                              <2> 
   110                              <2> 
   111                              <2> 
   112                              <2> ;______________________________________________
   113                              <2> ; ----------------Vbe Info Block------------
   114                              <2> ; typedef struct {
   115                              <2> ;     unsigned char       vbe_signature;
   116                              <2> ;     unsigned short      vbe_version;
   117                              <2> ;     unsigned long       oem_string_ptr;
   118                              <2> ;     unsigned char       capabilities;
   119                              <2> ;     unsigned long       video_mode_ptr;
   120                              <2> ;     unsigned short      total_memory;
   121                              <2> ;     unsigned short      oem_software_rev;
   122                              <2> ;     unsigned long       oem_vendor_name_ptr;
   123                              <2> ;     unsigned long       oem_product_name_ptr;
   124                              <2> ;     unsigned long       oem_product_rev_ptr;
   125                              <2> ;     unsigned char       reserved[222];
   126                              <2> ;     unsigned char       oem_data[256];  
   127                              <2> ; } VbeInfoBlock;
   128                              <2> ;______________________________________________
   129                              <2> 
   130                              <2> 
   131                              <2> BaseOfKernelFile	equ	0x00
   132                              <2> OffsetOfKernelFile	equ	0x100000
   133                              <2> BaseTmpOfKernelAddr	equ	0x9000
   134                              <2> OffsetTmpOfKernelFile	equ	0x0000
   135                              <2> VBEStructBufferAddr	equ	0x8000
   136                              <2> VBEModeStructBufferAddr	equ	0x8200
   137                              <2> MemoryStructBufferAddr	equ	0x8800
   138                              <2> 
   139                              <2> 
   140                              <2> 
   141                              <2> KernelSpaceUpperAddress equ 0xFFFF800000000000
   142                              <2> 
   143                              <2> GDTPointerUpperAddr equ 0xFFFF800000104000
   144                              <2> IDTPointerUpperAddr equ 0xFFFF80000010400a
   145                              <2> TSSPointerUpperAddr equ 0xFFFF800000104014
   146                              <2> 
   147                              <2> VideoFrameBufferAddress equ 0xFFFF800003000000
   148                              <2> KernelStartSectorNum	equ	16
   149                              <2> 
   150                              <2> 
   151                              <2> %define PLATFORM_QEMU_X64 1
   152                              <2> %define PLATFORM_X64 2
   153                              <2> 
   154                              <2> %define DEBUG_PLATFORM PLATFORM_QEMU_X64
   155                              <2> %define DEBUG_MODE 1
   156                              <2> 
   157                              <2> 
   158                              <2> MasterSectorReadNumPort    equ	0x1F2
   159                              <2> MasterSectorReadPort    equ	0x1F0
   160                              <2> 
   161                              <2> SlaveReadNumPort    equ	0x172
   162                              <2> SlaveSectorReadPort    equ	0x170
   163                              <2> 
   164                              <2> SectorReadNumPort    equ	MasterSectorReadNumPort
   165                              <2> SectorReadPort    equ	MasterSectorReadPort
   166                              <2> 
   167                              <2> struc vbe_info_block
   168                              <2>     .signature                 resb 4    ; 'VESA' signature (must be "VESA")
   169                              <2>     .version                   resw 1    ; VBE version (e.g., 0x0300 for VBE 3.0)
   170                              <2>     .oem_string_ptr            resd 1    ; Pointer to OEM string
   171                              <2>     .capabilities              resd 1    ; Capabilities of the video card
   172                              <2>     .video_mode_ptr            resd 1    ; Pointer to supported video modes
   173                              <2>     .total_memory              resw 1    ; Total memory in 64KB blocks
   174                              <2> 
   175                              <2>     ; VBE 2.0+ fields
   176                              <2>     .oem_software_rev          resw 1    ; OEM software revision
   177                              <2>     .oem_vendor_name_ptr       resd 1    ; Pointer to OEM vendor name string
   178                              <2>     .oem_product_name_ptr      resd 1    ; Pointer to OEM product name string
   179                              <2>     .oem_product_rev_ptr       resd 1    ; Pointer to OEM product revision string
   180                              <2>     .reserved                  resb 222  ; Reserved for VBE implementation
   181                              <2>     .oem_data                  resb 256  ; Data area for OEM-specific information
   182                              <2> endstruc
   183                              <2> 
   184                              <2> struc vbe_mode_info_block
   185                              <2>     .attributes                resw 1    ; Mode attributes
   186                              <2>     .winA_attributes           resb 1    ; Window A attributes
   187                              <2>     .winB_attributes           resb 1    ; Window B attributes
   188                              <2>     .win_granularity           resw 1    ; Window granularity in KB
   189                              <2>     .win_size                  resw 1    ; Window size in KB
   190                              <2>     .winA_segment              resw 1    ; Window A segment
   191                              <2>     .winB_segment              resw 1    ; Window B segment
   192                              <2>     .win_func_ptr              resd 1    ; Pointer to window function
   193                              <2>     .bytes_per_scanline        resw 1    ; Bytes per scanline
   194                              <2> 
   195                              <2>     ; VBE 1.2+ fields
   196                              <2>     .x_resolution              resw 1    ; Horizontal resolution in pixels
   197                              <2>     .y_resolution              resw 1    ; Vertical resolution in pixels
   198                              <2>     .x_char_size               resb 1    ; Character cell width in pixels
   199                              <2>     .y_char_size               resb 1    ; Character cell height in pixels
   200                              <2>     .number_of_planes          resb 1    ; Number of memory planes
   201                              <2>     .bits_per_pixel            resb 1    ; Bits per pixel
   202                              <2>     .number_of_banks           resb 1    ; Number of banks
   203                              <2>     .memory_model              resb 1    ; Memory model type
   204                              <2>     .bank_size                 resb 1    ; Bank size in KB
   205                              <2>     .number_of_image_pages     resb 1    ; Number of images
   206                              <2>     .reserved1                 resb 1    ; Reserved
   207                              <2> 
   208                              <2>     ; Direct Color fields (VBE 1.2+)
   209                              <2>     .red_mask_size             resb 1    ; Size of direct color red mask
   210                              <2>     .red_field_position        resb 1    ; Bit position of red mask
   211                              <2>     .green_mask_size           resb 1    ; Size of direct color green mask
   212                              <2>     .green_field_position      resb 1    ; Bit position of green mask
   213                              <2>     .blue_mask_size            resb 1    ; Size of direct color blue mask
   214                              <2>     .blue_field_position       resb 1    ; Bit position of blue mask
   215                              <2>     .reserved_mask_size        resb 1    ; Size of direct color reserved mask
   216                              <2>     .reserved_field_position   resb 1    ; Bit position of reserved mask
   217                              <2>     .direct_color_mode_info    resb 1    ; Direct color mode attributes
   218                              <2> 
   219                              <2>     ; VBE 2.0+ fields
   220                              <2>     .phys_base_ptr             resd 1    ; Physical address for flat memory frame buffer
   221                              <2>     .reserved2                 resd 1    ; Reserved
   222                              <2>     .reserved3                 resw 1    ; Reserved
   223                              <2> 
   224                              <2>     ; VBE 3.0+ fields
   225                              <2>     .lin_bytes_per_scanline    resw 1    ; Bytes per scanline for linear modes
   226                              <2>     .bnk_number_of_image_pages resb 1    ; Number of images for banked modes
   227                              <2>     .lin_number_of_image_pages resb 1    ; Number of images for linear modes
   228                              <2>     .lin_red_mask_size         resb 1    ; Size of direct color red mask (linear modes)
   229                              <2>     .lin_red_field_position    resb 1    ; Bit position of red mask (linear modes)
   230                              <2>     .lin_green_mask_size       resb 1    ; Size of direct color green mask (linear modes)
   231                              <2>     .lin_green_field_position  resb 1    ; Bit position of green mask (linear modes)
   232                              <2>     .lin_blue_mask_size        resb 1    ; Size of direct color blue mask (linear modes)
   233                              <2>     .lin_blue_field_position   resb 1    ; Bit position of blue mask (linear modes)
   234                              <2>     .lin_reserved_mask_size    resb 1    ; Size of direct color reserved mask (linear modes)
   235                              <2>     .lin_reserved_field_position resb 1  ; Bit position of reserved mask (linear modes)
   236                              <2>     .max_pixel_clock           resd 1    ; Maximum pixel clock (Hz)
   237                              <2>     .reserved4                 resb 190  ; Reserved for future expansion
   238                              <2> endstruc
   239                              <2> 
   240                              <2> struc e820_memory_entry
   241                              <2>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   242                              <2>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   243                              <2>     .length_low               resd 1    ; Lower 32 bits of the length
   244                              <2>     .length_high              resd 1    ; Upper 32 bits of the length
   245                              <2>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   246                              <2>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   247                              <2> endstruc
   248                              <2> 
   249                              <2> %endif
     5                              <1> %include "../kernel/video.asm"
     1                              <2> %ifndef VIDEO_ASM
     2                              <2> %define VIDEO_ASM
     3                              <2> %include "../bootloader/global_def.asm"
     1                              <3> %ifndef GLOBAL_DEF_ASM
     2                              <3> %define GLOBAL_DEF_ASM
     3                              <3> 
     4                              <3> 
     5                              <3> ;|----------------------|
     6                              <3> ;|	100000 ~ END	|
     7                              <3> ;|	   KERNEL	|
     8                              <3> ;|----------------------|
     9                              <3> ;|	E0000 ~ 100000	|
    10                              <3> ;| Extended System BIOS |
    11                              <3> ;|----------------------|
    12                              <3> ;|	C0000 ~ Dffff	|
    13                              <3> ;|     Expansion Area   |
    14                              <3> ;|----------------------|
    15                              <3> ;|	A0000 ~ bffff	|
    16                              <3> ;|   Legacy Video Area  |
    17                              <3> ;|----------------------|
    18                              <3> ;|	9f000 ~ A0000	|
    19                              <3> ;|	 BIOS reserve	|
    20                              <3> ;|----------------------|
    21                              <3> ;|	90000 ~ 9f000	|
    22                              <3> ;|	 kernel tmpbuf	|
    23                              <3> ;|----------------------|
    24                              <3> ;|	10000 ~ 90000	|
    25                              <3> ;|	   LOADER	|
    26                              <3> ;|----------------------|
    27                              <3> ;|	8000 ~ 10000	|
    28                              <3> ;|	  VBE info	|
    29                              <3> ;|----------------------|
    30                              <3> ;|	7e00 ~ 8000	|
    31                              <3> ;|	  mem info	|
    32                              <3> ;|----------------------|
    33                              <3> ;|	7c00 ~ 7e00	|
    34                              <3> ;|	 MBR (BOOT)	|
    35                              <3> ;|----------------------|
    36                              <3> ;|	0000 ~ 7c00	|
    37                              <3> ;|	 BIOS Code	|
    38                              <3> ;|----------------------|
    39                              <3> 
    40                              <3> 
    41                              <3> ;_______________________________________________________
    42                              <3> ; START	END	    SIZE	        USED
    43                              <3> ; FFFF0	FFFFF	16B	        BIOS System Entry
    44                              <3> ; F0000	FFFEF	64KB-16B	BIOS System Code
    45                              <3> ; C8000	EFFFF	160KB	    ROM/Mapped IO
    46                              <3> ; C0000	C7FFF	32KB	    Graphic Adapter BIOS
    47                              <3> ; B8000	BFFFF	32KB	    Chroma Text Video Buffer
    48                              <3> ; B0000	B7FFF	32KB	    Mono Text Video Buffer
    49                              <3> ; A0000	AFFFF	64KB	    Graphic Video Buffer
    50                              <3> ; 9FC00	9FFFF	1KB	        Extended BIOS Data Area
    51                              <3> ; 7E00	9FBFF	622080B     Useable 608KB	
    52                              <3> ; 7C00	7DFF	512B	    MBR
    53                              <3> ; 500	7BFF	30464B      Useable 30KB	
    54                              <3> ; 400	4FF	    256B	    BIOS Data Area
    55                              <3> ; 000	3FF	    1KB	        IVT
    56                              <3> ; _____________________________________________________
    57                              <3> 
    58                              <3> 
    59                              <3> 
    60                              <3> 
    61                              <3> 
    62                              <3> 
    63                              <3> 
    64                              <3> 
    65                              <3> 
    66                              <3> 
    67                              <3> 
    68                              <3> ;|----------------------|
    69                              <3> ;|	100000 ~ END	|
    70                              <3> ;|	   KERNEL	|
    71                              <3> ;|----------------------|
    72                              <3> ;|	E0000 ~ 100000	|
    73                              <3> ;| Extended System BIOS |
    74                              <3> ;|----------------------|
    75                              <3> ;|	C0000 ~ Dffff	|
    76                              <3> ;|     Expansion Area   |
    77                              <3> ;|----------------------|
    78                              <3> ;|	A0000 ~ bffff	|
    79                              <3> ;|   Legacy Video Area  |
    80                              <3> ;|----------------------|
    81                              <3> ;|	9F000 ~ A0000	|
    82                              <3> ;|	 BIOS reserve	|
    83                              <3> ;|----------------------|
    84                              <3> ;|	90000 ~ 9F000	|
    85                              <3> ;|	 kernel tmpbuf	|
    86                              <3> ;|----------------------|
    87                              <3> ;|	10000 ~ 90000	|
    88                              <3> ;|	   LOADER	|
    89                              <3> ;|----------------------|
    90                              <3> ;|	8000 ~ 10000	|
    91                              <3> ;|	  VBE info	|
    92                              <3> ;|----------------------|
    93                              <3> ;|	7E00 ~ 8000	|
    94                              <3> ;|	  mem info	|
    95                              <3> ;|----------------------|
    96                              <3> ;|	7C00 ~ 7E00	|
    97                              <3> ;|	 MBR (BOOT)	|
    98                              <3> ;|----------------------|
    99                              <3> ;|	0000 ~ 7C00	|
   100                              <3> ;|	 BIOS Code	|
   101                              <3> ;|----------------------|
   102                              <3> 
   103                              <3> 
   104                              <3> 
   105                              <3> 
   106                              <3> 
   107                              <3> 
   108                              <3> 
   109                              <3> 
   110                              <3> 
   111                              <3> 
   112                              <3> ;______________________________________________
   113                              <3> ; ----------------Vbe Info Block------------
   114                              <3> ; typedef struct {
   115                              <3> ;     unsigned char       vbe_signature;
   116                              <3> ;     unsigned short      vbe_version;
   117                              <3> ;     unsigned long       oem_string_ptr;
   118                              <3> ;     unsigned char       capabilities;
   119                              <3> ;     unsigned long       video_mode_ptr;
   120                              <3> ;     unsigned short      total_memory;
   121                              <3> ;     unsigned short      oem_software_rev;
   122                              <3> ;     unsigned long       oem_vendor_name_ptr;
   123                              <3> ;     unsigned long       oem_product_name_ptr;
   124                              <3> ;     unsigned long       oem_product_rev_ptr;
   125                              <3> ;     unsigned char       reserved[222];
   126                              <3> ;     unsigned char       oem_data[256];  
   127                              <3> ; } VbeInfoBlock;
   128                              <3> ;______________________________________________
   129                              <3> 
   130                              <3> 
   131                              <3> BaseOfKernelFile	equ	0x00
   132                              <3> OffsetOfKernelFile	equ	0x100000
   133                              <3> BaseTmpOfKernelAddr	equ	0x9000
   134                              <3> OffsetTmpOfKernelFile	equ	0x0000
   135                              <3> VBEStructBufferAddr	equ	0x8000
   136                              <3> VBEModeStructBufferAddr	equ	0x8200
   137                              <3> MemoryStructBufferAddr	equ	0x8800
   138                              <3> 
   139                              <3> 
   140                              <3> 
   141                              <3> KernelSpaceUpperAddress equ 0xFFFF800000000000
   142                              <3> 
   143                              <3> GDTPointerUpperAddr equ 0xFFFF800000104000
   144                              <3> IDTPointerUpperAddr equ 0xFFFF80000010400a
   145                              <3> TSSPointerUpperAddr equ 0xFFFF800000104014
   146                              <3> 
   147                              <3> VideoFrameBufferAddress equ 0xFFFF800003000000
   148                              <3> KernelStartSectorNum	equ	16
   149                              <3> 
   150                              <3> 
   151                              <3> %define PLATFORM_QEMU_X64 1
   152                              <3> %define PLATFORM_X64 2
   153                              <3> 
   154                              <3> %define DEBUG_PLATFORM PLATFORM_QEMU_X64
   155                              <3> %define DEBUG_MODE 1
   156                              <3> 
   157                              <3> 
   158                              <3> MasterSectorReadNumPort    equ	0x1F2
   159                              <3> MasterSectorReadPort    equ	0x1F0
   160                              <3> 
   161                              <3> SlaveReadNumPort    equ	0x172
   162                              <3> SlaveSectorReadPort    equ	0x170
   163                              <3> 
   164                              <3> SectorReadNumPort    equ	MasterSectorReadNumPort
   165                              <3> SectorReadPort    equ	MasterSectorReadPort
   166                              <3> 
   167                              <3> struc vbe_info_block
   168                              <3>     .signature                 resb 4    ; 'VESA' signature (must be "VESA")
   169                              <3>     .version                   resw 1    ; VBE version (e.g., 0x0300 for VBE 3.0)
   170                              <3>     .oem_string_ptr            resd 1    ; Pointer to OEM string
   171                              <3>     .capabilities              resd 1    ; Capabilities of the video card
   172                              <3>     .video_mode_ptr            resd 1    ; Pointer to supported video modes
   173                              <3>     .total_memory              resw 1    ; Total memory in 64KB blocks
   174                              <3> 
   175                              <3>     ; VBE 2.0+ fields
   176                              <3>     .oem_software_rev          resw 1    ; OEM software revision
   177                              <3>     .oem_vendor_name_ptr       resd 1    ; Pointer to OEM vendor name string
   178                              <3>     .oem_product_name_ptr      resd 1    ; Pointer to OEM product name string
   179                              <3>     .oem_product_rev_ptr       resd 1    ; Pointer to OEM product revision string
   180                              <3>     .reserved                  resb 222  ; Reserved for VBE implementation
   181                              <3>     .oem_data                  resb 256  ; Data area for OEM-specific information
   182                              <3> endstruc
   183                              <3> 
   184                              <3> struc vbe_mode_info_block
   185                              <3>     .attributes                resw 1    ; Mode attributes
   186                              <3>     .winA_attributes           resb 1    ; Window A attributes
   187                              <3>     .winB_attributes           resb 1    ; Window B attributes
   188                              <3>     .win_granularity           resw 1    ; Window granularity in KB
   189                              <3>     .win_size                  resw 1    ; Window size in KB
   190                              <3>     .winA_segment              resw 1    ; Window A segment
   191                              <3>     .winB_segment              resw 1    ; Window B segment
   192                              <3>     .win_func_ptr              resd 1    ; Pointer to window function
   193                              <3>     .bytes_per_scanline        resw 1    ; Bytes per scanline
   194                              <3> 
   195                              <3>     ; VBE 1.2+ fields
   196                              <3>     .x_resolution              resw 1    ; Horizontal resolution in pixels
   197                              <3>     .y_resolution              resw 1    ; Vertical resolution in pixels
   198                              <3>     .x_char_size               resb 1    ; Character cell width in pixels
   199                              <3>     .y_char_size               resb 1    ; Character cell height in pixels
   200                              <3>     .number_of_planes          resb 1    ; Number of memory planes
   201                              <3>     .bits_per_pixel            resb 1    ; Bits per pixel
   202                              <3>     .number_of_banks           resb 1    ; Number of banks
   203                              <3>     .memory_model              resb 1    ; Memory model type
   204                              <3>     .bank_size                 resb 1    ; Bank size in KB
   205                              <3>     .number_of_image_pages     resb 1    ; Number of images
   206                              <3>     .reserved1                 resb 1    ; Reserved
   207                              <3> 
   208                              <3>     ; Direct Color fields (VBE 1.2+)
   209                              <3>     .red_mask_size             resb 1    ; Size of direct color red mask
   210                              <3>     .red_field_position        resb 1    ; Bit position of red mask
   211                              <3>     .green_mask_size           resb 1    ; Size of direct color green mask
   212                              <3>     .green_field_position      resb 1    ; Bit position of green mask
   213                              <3>     .blue_mask_size            resb 1    ; Size of direct color blue mask
   214                              <3>     .blue_field_position       resb 1    ; Bit position of blue mask
   215                              <3>     .reserved_mask_size        resb 1    ; Size of direct color reserved mask
   216                              <3>     .reserved_field_position   resb 1    ; Bit position of reserved mask
   217                              <3>     .direct_color_mode_info    resb 1    ; Direct color mode attributes
   218                              <3> 
   219                              <3>     ; VBE 2.0+ fields
   220                              <3>     .phys_base_ptr             resd 1    ; Physical address for flat memory frame buffer
   221                              <3>     .reserved2                 resd 1    ; Reserved
   222                              <3>     .reserved3                 resw 1    ; Reserved
   223                              <3> 
   224                              <3>     ; VBE 3.0+ fields
   225                              <3>     .lin_bytes_per_scanline    resw 1    ; Bytes per scanline for linear modes
   226                              <3>     .bnk_number_of_image_pages resb 1    ; Number of images for banked modes
   227                              <3>     .lin_number_of_image_pages resb 1    ; Number of images for linear modes
   228                              <3>     .lin_red_mask_size         resb 1    ; Size of direct color red mask (linear modes)
   229                              <3>     .lin_red_field_position    resb 1    ; Bit position of red mask (linear modes)
   230                              <3>     .lin_green_mask_size       resb 1    ; Size of direct color green mask (linear modes)
   231                              <3>     .lin_green_field_position  resb 1    ; Bit position of green mask (linear modes)
   232                              <3>     .lin_blue_mask_size        resb 1    ; Size of direct color blue mask (linear modes)
   233                              <3>     .lin_blue_field_position   resb 1    ; Bit position of blue mask (linear modes)
   234                              <3>     .lin_reserved_mask_size    resb 1    ; Size of direct color reserved mask (linear modes)
   235                              <3>     .lin_reserved_field_position resb 1  ; Bit position of reserved mask (linear modes)
   236                              <3>     .max_pixel_clock           resd 1    ; Maximum pixel clock (Hz)
   237                              <3>     .reserved4                 resb 190  ; Reserved for future expansion
   238                              <3> endstruc
   239                              <3> 
   240                              <3> struc e820_memory_entry
   241                              <3>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   242                              <3>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   243                              <3>     .length_low               resd 1    ; Lower 32 bits of the length
   244                              <3>     .length_high              resd 1    ; Upper 32 bits of the length
   245                              <3>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   246                              <3>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   247                              <3> endstruc
   248                              <3> 
   249                              <3> %endif
     4                              <2> %include "../kernel/stddef.asm"
     1                              <3> %ifndef STDDEF_ASM
     2                              <3> %define STDDEF_ASM
     3                              <3> 
     4                              <3> ;-----------Calling Conventions Standard------------;
     5                              <3> %define USE_CC_STANDARD
     6                              <3> %ifdef USE_CC_STANDARD
     7                              <3> ;caller maintain the stack balance 
     8                              <3> 
     9                              <3> 
    10                              <3> ; -------------------------------
    11                              <3> ; 栈帧结构定义
    12                              <3> ; -------------------------------
    13                              <3> ; 调用后的栈布局:
    14                              <3> ; [rsp+0x00] 返回地址 (8字节)
    15                              <3> ; [rsp+0x08] 旧RBP     (8字节) <- rbp指向这里
    16                              <3> ; [rsp+0x10] 参数1     (8字节)
    17                              <3> ; [rsp+0x18] 参数2
    18                              <3> ; ...
    19                              <3> ; [rsp+X]    局部变量区
    20                              <3> ; -------------------------------
    21                              <3> 
    22                              <3> %define PARAM_OFFSET   16      ; 第一个参数的偏移量(返回地址8 + 旧RBP8)
    23                              <3> %macro function 1-* ; 1=函数名, 2=返回参数数量, 3=参数列表
    24                              <3>     %assign param_count %0 - 2 ; 参数数量
    25                              <3>     
    26                              <3>     %if param_count < 0
    27                              <3>         %assign param_count 0 ; 如果没有参数，设置为 0
    28                              <3>     %endif
    29                              <3>     %if param_count < 1
    30                              <3>         %assign ret_param_count 0 ; 返回参数数量
    31                              <3>     %else
    32                              <3>         %assign ret_param_count %2 ; 返回参数数量
    33                              <3>     %endif
    34                              <3> 
    35                              <3>     ; 准备调用
    36                              <3>     prepare_call param_count, ret_param_count
    37                              <3> 
    38                              <3>     ; 如果有参数，将参数压入栈
    39                              <3>     %if param_count > 0
    40                              <3>         %assign i 0
    41                              <3>         mov [rsp-8], rax ; 保存返回地址
    42                              <3>         %rep param_count
    43                              <3>             %rotate 1
    44                              <3>             mov rax, %2
    45                              <3>             mov [rsp + 8*i], rax ; 将参数压入栈
    46                              <3>             %assign i i+1
    47                              <3>         %endrep
    48                              <3>         ; mov rax,
    49                              <3>         %rotate 1
    50                              <3>         %rotate 1
    51                              <3>         mov rax,[rsp-8]; 保存返回地址
    52                              <3>     %endif
    53                              <3> 
    54                              <3>     ; 调用函数
    55                              <3>     call %1
    56                              <3> 
    57                              <3>     ; 清理栈空间
    58                              <3>     cleanup_call param_count, ret_param_count
    59                              <3> 
    60                              <3> %endmacro
    61                              <3> 
    62                              <3> %macro prolog 1;local var size(bytes)
    63                              <3>     push rbp
    64                              <3>     mov rbp, rsp
    65                              <3>     mov [rbp-8],rax
    66                              <3>     mov rax, %1
    67                              <3>     add rax, 15
    68                              <3>     and rax, ~15
    69                              <3>     sub rsp, rax
    70                              <3>     mov rax,[rbp-8]
    71                              <3>     pushallq
    72                              <3>     
    73                              <3>     
    74                              <3>     ; 调试信息可以放在这里
    75                              <3>     ; %ifdef DEBUG
    76                              <3>     ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
    77                              <3>     ; %endif
    78                              <3> %endmacro
    79                              <3> 
    80                              <3> %macro epilog 0
    81                              <3>     popallq
    82                              <3> 
    83                              <3>     mov rsp, rbp
    84                              <3>     pop rbp
    85                              <3>     ret
    86                              <3> %endmacro
    87                              <3> 
    88                              <3> %macro get_param 2;1=register, 2=param index(from 1)
    89                              <3>     mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    90                              <3> %endmacro
    91                              <3> 
    92                              <3> %macro set_ret_param 2;1=register, 2=param index(from 1)
    93                              <3>     mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
    94                              <3> %endmacro
    95                              <3> 
    96                              <3> %macro prepare_call 2;1=param count, 2=return param count
    97                              <3>     %assign total_space ((%1 + %2) * 8)
    98                              <3>     
    99                              <3>     %if (total_space % 16) != 0
   100                              <3>         %assign total_space total_space + 8  ; 添加填充
   101                              <3>     %endif
   102                              <3>     
   103                              <3>     sub rsp, total_space
   104                              <3> %endmacro
   105                              <3> 
   106                              <3> %macro cleanup_call 2;1=param count, 2=return param count
   107                              <3>     %assign total_space ((%1 + %2) * 8)
   108                              <3>     %if (total_space % 16) != 0
   109                              <3>         %assign total_space total_space + 8
   110                              <3>     %endif
   111                              <3>     add rsp, total_space
   112                              <3> %endmacro
   113                              <3> 
   114                              <3> %macro pushallq 0
   115                              <3>     push rax
   116                              <3>     push rbx
   117                              <3>     push rcx
   118                              <3>     push rdx
   119                              <3>     push rsi
   120                              <3>     push rdi
   121                              <3>     push r8
   122                              <3>     push r9
   123                              <3>     push r10
   124                              <3>     push r11
   125                              <3>     push r12
   126                              <3>     push r13
   127                              <3>     push r14
   128                              <3>     push r15
   129                              <3> %endmacro
   130                              <3> 
   131                              <3> %macro popallq 0
   132                              <3>     pop r15
   133                              <3>     pop r14
   134                              <3>     pop r13
   135                              <3>     pop r12
   136                              <3>     pop r11
   137                              <3>     pop r10
   138                              <3>     pop r9
   139                              <3>     pop r8
   140                              <3>     pop rdi
   141                              <3>     pop rsi
   142                              <3>     pop rdx
   143                              <3>     pop rcx
   144                              <3>     pop rbx
   145                              <3>     pop rax
   146                              <3> %endmacro
   147                              <3> 
   148                              <3> %endif
   149                              <3> ;---------------------ABI Standard------------------;
   150                              <3> %define USE_ABI_STANDARD
   151                              <3> %ifdef USE_ABI_STANDARD
   152                              <3> 
   153                              <3> 
   154                              <3>     %define ABI_File_None   0       ; 无文件类型
   155                              <3>     %define ABI_File_REL    1       ; 可重定位文件
   156                              <3>     %define ABI_File_EXEC   2       ; 可执行文件
   157                              <3>     %define ABI_File_DYN    3       ; 共享目标文件
   158                              <3>     %define ABI_File_CORE   4       ; 核心文件
   159                              <3> 
   160                              <3>     %define Section_Type_NULL    0      ; 未使用
   161                              <3>     %define Section_Type_LOAD    1      ; 可加载段
   162                              <3>     %define Section_Type_DYNAMIC 2      ; 动态链接信息
   163                              <3>     %define Section_Type_INTERP  3      ; 解释器路径
   164                              <3>     %define Section_Type_NOTE    4      ; 辅助信息
   165                              <3>     %define Section_Type_SHLIB   5      ; 保留
   166                              <3> 
   167                              <3>     %macro ABI_HEADER 4 ;1=File Type, 2=Entry Point Address, 3=Section Header Offset, 4=Section Header Count
   168                              <3>         db 0xA5, 'A', 'B', 'I'     ; ABI Magic Number
   169                              <3>         db 1                       ; Encode Type
   170                              <3>         db 1                       ; ABI Version
   171                              <3> 
   172                              <3>         dw %1                      ; ABI File Type
   173                              <3>         dq %2                      ; Entry Point Address
   174                              <3>         dw 32                      ; ABI Headers Size
   175                              <3> 
   176                              <3>         dq %3                      ; Section Header Offset
   177                              <3>         dw 32                      ; Section Header Size
   178                              <3>         dw %4                      ; Section Header Count
   179                              <3>         dw 0                       ; Symble Table Entry Size
   180                              <3>     %endmacro
   181                              <3>     STRUC struct_ABI_HEADER
   182                              <3>         .magic:         resb 4    ; ABI Magic Number (4 bytes)
   183                              <3>         .encode_type:   resb 1    ; Encode Type (1 byte)
   184                              <3>         .abi_version:   resb 1    ; ABI Version (1 byte)
   185                              <3>         .file_type:     resw 1    ; ABI File Type (2 bytes)
   186                              <3>         .entry_point:   resq 1    ; Entry Point Address (8 bytes)
   187                              <3>         .header_size:   resw 1    ; ABI Headers Size (2 bytes)
   188                              <3>         .section_offset: resq 1   ; Section Header Offset (8 bytes)
   189                              <3>         .section_size:  resw 1    ; Section Header Size (2 bytes)
   190                              <3>         .section_count: resw 1    ; Section Header Count (2 bytes)
   191                              <3>         .sym_table_size: resw 1   ; Symbol Table Entry Size (2 bytes)
   192                              <3>     ENDSTRUC
   193                              <3> 
   194                              <3>     %macro SECTION_HEADER 4 ;1=Section Type, 2=Virtual Address, 3=Section Offset, 4=Section Size
   195                              <3>         dq %1                  ; Section Type
   196                              <3>         dq %2                  ; Virtual Address
   197                              <3>         dq %3                  ; Section Offset
   198                              <3>         dq %4                  ; Section Size
   199                              <3>     %endmacro
   200                              <3>     STRUC struct_SECTION_HEADER
   201                              <3>         .type:      resq 1    ; Section Type (8 bytes)
   202                              <3>         .vaddr:     resq 1    ; Virtual Address (8 bytes)
   203                              <3>         .offset:    resq 1    ; Section Offset (8 bytes)
   204                              <3>         .size:      resq 1    ; Section Size (8 bytes)
   205                              <3>     ENDSTRUC
   206                              <3> %endif
   207                              <3> 
   208                              <3> %endif
     5                              <2> [BITS 64]
     6                              <2> struc video_info
     7                              <2>     .start:
     8 00000000 ????                <2>     .xpixel:            resw 1      
     9 00000002 ????                <2>     .ypixel:            resw 1       
    10 00000004 ??                  <2>     .byte_per_pixel:    resb 1     
    11 00000005 ????????????????    <2>     .video_framebuffer: resq 1
    12                              <2>     .end:
    13                              <2>     endstruc
    14                              <2> video_info_ptr:
    15                              <2>     istruc video_info
    16 0000042B 0000                <2>         at video_info.xpixel, dw 0
    17 0000042D 0000                <2>         at video_info.ypixel, dw 0
    18 0000042F 00                  <2>         at video_info.byte_per_pixel, db 0
    19 00000430 0000000000000000    <2>         at video_info.video_framebuffer, dq 0
    20                              <2>     iend
    21                              <2> 
    22                              <2> video_init:;ARGB
    23                              <2>     prolog 0;
    63 00000438 55                  <3>  push rbp
    64 00000439 4889E5              <3>  mov rbp, rsp
    65 0000043C 488945F8            <3>  mov [rbp-8],rax
    66 00000440 B800000000          <3>  mov rax, %1
    67 00000445 4883C00F            <3>  add rax, 15
    68 00000449 4883E0F0            <3>  and rax, ~15
    69 0000044D 4829C4              <3>  sub rsp, rax
    70 00000450 488B45F8            <3>  mov rax,[rbp-8]
    71                              <3>  pushallq
   115 00000454 50                  <4>  push rax
   116 00000455 53                  <4>  push rbx
   117 00000456 51                  <4>  push rcx
   118 00000457 52                  <4>  push rdx
   119 00000458 56                  <4>  push rsi
   120 00000459 57                  <4>  push rdi
   121 0000045A 4150                <4>  push r8
   122 0000045C 4151                <4>  push r9
   123 0000045E 4152                <4>  push r10
   124 00000460 4153                <4>  push r11
   125 00000462 4154                <4>  push r12
   126 00000464 4155                <4>  push r13
   127 00000466 4156                <4>  push r14
   128 00000468 4157                <4>  push r15
    72                              <3> 
    73                              <3> 
    74                              <3> 
    75                              <3> 
    76                              <3> 
    77                              <3> 
    24 0000046A 48BE128200000080FF- <2>     mov rsi,KernelSpaceUpperAddress + VBEModeStructBufferAddr + vbe_mode_info_block.x_resolution
    24 00000473 FF                  <2>
    25 00000474 BB00000000          <2>     mov rbx,0
    26 00000479 668B1E              <2>     mov  bx, word [rsi]
    27 0000047C 66891DA8FFFFFF      <2>     mov word [rel video_info_ptr + video_info.xpixel],bx
    28                              <2> 
    29 00000483 48BE148200000080FF- <2>     mov rsi,KernelSpaceUpperAddress + VBEModeStructBufferAddr + vbe_mode_info_block.y_resolution
    29 0000048C FF                  <2>
    30 0000048D BB00000000          <2>     mov rbx,0
    31 00000492 668B1E              <2>     mov  bx, word [rsi]
    32 00000495 66891D91FFFFFF      <2>     mov word [rel video_info_ptr + video_info.ypixel],bx
    33                              <2> 
    34 0000049C 48BE198200000080FF- <2>     mov rsi,KernelSpaceUpperAddress + VBEModeStructBufferAddr + vbe_mode_info_block.bits_per_pixel
    34 000004A5 FF                  <2>
    35 000004A6 BB00000000          <2>     mov rbx,0
    36 000004AB 8A1E                <2>     mov bl, byte [rsi]
    37 000004AD C0EB03              <2>     shr bl,3
    38 000004B0 881D79FFFFFF        <2>     mov byte [rel video_info_ptr + video_info.byte_per_pixel],bl
    39                              <2> 
    40                              <2>     ; mov rsi,KernelSpaceUpperAddress + VBEModeStructBufferAddr + vbe_mode_info_block.y_resolution
    41                              <2>     ; mov rbx,0
    42                              <2>     ; mov  bx, word [rsi]
    43 000004B6 48BE000000030080FF- <2>     mov rsi,VideoFrameBufferAddress
    43 000004BF FF                  <2>
    44 000004C0 48893569FFFFFF      <2>     mov qword [rel video_info_ptr + video_info.video_framebuffer],rsi
    45                              <2> 
    46                              <2>     epilog
    81                              <3>  popallq
   132 000004C7 415F                <4>  pop r15
   133 000004C9 415E                <4>  pop r14
   134 000004CB 415D                <4>  pop r13
   135 000004CD 415C                <4>  pop r12
   136 000004CF 415B                <4>  pop r11
   137 000004D1 415A                <4>  pop r10
   138 000004D3 4159                <4>  pop r9
   139 000004D5 4158                <4>  pop r8
   140 000004D7 5F                  <4>  pop rdi
   141 000004D8 5E                  <4>  pop rsi
   142 000004D9 5A                  <4>  pop rdx
   143 000004DA 59                  <4>  pop rcx
   144 000004DB 5B                  <4>  pop rbx
   145 000004DC 58                  <4>  pop rax
    82                              <3> 
    83 000004DD 4889EC              <3>  mov rsp, rbp
    84 000004E0 5D                  <3>  pop rbp
    85 000004E1 C3                  <3>  ret
    47                              <2> 
    48                              <2> draw_pixel:; Input: x,y,color
    49                              <2>     prolog 2;
    63 000004E2 55                  <3>  push rbp
    64 000004E3 4889E5              <3>  mov rbp, rsp
    65 000004E6 488945F8            <3>  mov [rbp-8],rax
    66 000004EA B802000000          <3>  mov rax, %1
    67 000004EF 4883C00F            <3>  add rax, 15
    68 000004F3 4883E0F0            <3>  and rax, ~15
    69 000004F7 4829C4              <3>  sub rsp, rax
    70 000004FA 488B45F8            <3>  mov rax,[rbp-8]
    71                              <3>  pushallq
   115 000004FE 50                  <4>  push rax
   116 000004FF 53                  <4>  push rbx
   117 00000500 51                  <4>  push rcx
   118 00000501 52                  <4>  push rdx
   119 00000502 56                  <4>  push rsi
   120 00000503 57                  <4>  push rdi
   121 00000504 4150                <4>  push r8
   122 00000506 4151                <4>  push r9
   123 00000508 4152                <4>  push r10
   124 0000050A 4153                <4>  push r11
   125 0000050C 4154                <4>  push r12
   126 0000050E 4155                <4>  push r13
   127 00000510 4156                <4>  push r14
   128 00000512 4157                <4>  push r15
    72                              <3> 
    73                              <3> 
    74                              <3> 
    75                              <3> 
    76                              <3> 
    77                              <3> 
    50                              <2>     get_param rdi, 1   ; x
    89 00000514 488B7D10            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    51                              <2>     get_param rsi, 2   ; y
    89 00000518 488B7518            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    52                              <2>     get_param rdx, 3   ; c
    89 0000051C 488B5520            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    53 00000520 52                  <2>     push rdx
    54                              <2>     ; mov []
    55 00000521 488D1D03FFFFFF      <2>     lea rbx, [rel video_info_ptr] ; Load video info structure address
    56                              <2> 
    57                              <2> 
    58                              <2> 
    59                              <2>     ; Calculate pixel offset
    60 00000528 B800000000          <2>     mov rax,0
    61 0000052D 480FB703            <2>     movzx rax, word [rbx + video_info.xpixel] ; Screen width
    62                              <2> 
    63 00000531 48F7E6              <2>     mul rsi                                 ; y * screen width
    64                              <2>         ; jmp $
    65 00000534 4801F8              <2>     add rax, rdi                             ; Add x
    66 00000537 480FB64B04          <2>     movzx rcx, byte [rbx + video_info.byte_per_pixel] ; Bytes per pixel
    67 0000053C 480FAFC1            <2>     imul rax, rcx                          ; Offset = (y * width + x) * bytes_per_pixel
    68                              <2> 
    69                              <2>     ; Write color to framebuffer
    70 00000540 488B5B05            <2>     mov rbx, qword [rbx + video_info.video_framebuffer] ; Framebuffer address
    71 00000544 4801C3              <2>     add rbx, rax                          ; rbx = framebuffer + offset
    72                              <2> 
    73 00000547 5A                  <2>     pop rdx
    74 00000548 8913                <2>     mov dword [rbx], edx                        ; Write color (assumes 32-bit color)
    75                              <2> 
    76                              <2>         ; jmp $
    77                              <2>     set_ret_param rax,4
    93 0000054A 48894528            <3>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
    78                              <2>     epilog
    81                              <3>  popallq
   132 0000054E 415F                <4>  pop r15
   133 00000550 415E                <4>  pop r14
   134 00000552 415D                <4>  pop r13
   135 00000554 415C                <4>  pop r12
   136 00000556 415B                <4>  pop r11
   137 00000558 415A                <4>  pop r10
   138 0000055A 4159                <4>  pop r9
   139 0000055C 4158                <4>  pop r8
   140 0000055E 5F                  <4>  pop rdi
   141 0000055F 5E                  <4>  pop rsi
   142 00000560 5A                  <4>  pop rdx
   143 00000561 59                  <4>  pop rcx
   144 00000562 5B                  <4>  pop rbx
   145 00000563 58                  <4>  pop rax
    82                              <3> 
    83 00000564 4889EC              <3>  mov rsp, rbp
    84 00000567 5D                  <3>  pop rbp
    85 00000568 C3                  <3>  ret
    79                              <2> 
    80                              <2> draw_line:; Bresenham's line algorithm Input: x1,y1,x2,y2,color
    81                              <2>     prolog 2;
    63 00000569 55                  <3>  push rbp
    64 0000056A 4889E5              <3>  mov rbp, rsp
    65 0000056D 488945F8            <3>  mov [rbp-8],rax
    66 00000571 B802000000          <3>  mov rax, %1
    67 00000576 4883C00F            <3>  add rax, 15
    68 0000057A 4883E0F0            <3>  and rax, ~15
    69 0000057E 4829C4              <3>  sub rsp, rax
    70 00000581 488B45F8            <3>  mov rax,[rbp-8]
    71                              <3>  pushallq
   115 00000585 50                  <4>  push rax
   116 00000586 53                  <4>  push rbx
   117 00000587 51                  <4>  push rcx
   118 00000588 52                  <4>  push rdx
   119 00000589 56                  <4>  push rsi
   120 0000058A 57                  <4>  push rdi
   121 0000058B 4150                <4>  push r8
   122 0000058D 4151                <4>  push r9
   123 0000058F 4152                <4>  push r10
   124 00000591 4153                <4>  push r11
   125 00000593 4154                <4>  push r12
   126 00000595 4155                <4>  push r13
   127 00000597 4156                <4>  push r14
   128 00000599 4157                <4>  push r15
    72                              <3> 
    73                              <3> 
    74                              <3> 
    75                              <3> 
    76                              <3> 
    77                              <3> 
    82                              <2>     get_param rdi, 1    ; x1
    89 0000059B 488B7D10            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    83                              <2>     get_param rsi, 2    ; y1
    89 0000059F 488B7518            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    84                              <2>     get_param rdx, 3    ; x2
    89 000005A3 488B5520            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    85                              <2>     get_param rcx, 4    ; y2
    89 000005A7 488B4D28            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    86                              <2>     get_param r8,  5    ; color
    89 000005AB 4C8B4530            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    87                              <2> 
    88                              <2>     ; Calculate dx and dy
    89 000005AF 4989D1              <2>     mov r9, rdx         ; r9 = x2
    90 000005B2 4929F9              <2>     sub r9, rdi         ; dx = x2 - x1
    91 000005B5 4989CA              <2>     mov r10, rcx        ; r10 = y2
    92 000005B8 4929F2              <2>     sub r10, rsi        ; dy = y2 - y1
    93                              <2> 
    94                              <2>     ; Determine the absolute values of dx and dy
    95 000005BB 4D89CB              <2>     mov r11, r9         ; r11 = dx
    96 000005BE 4D85DB              <2>     test r11, r11
    97 000005C1 7903                <2>     jns .dx_positive
    98 000005C3 49F7DB              <2>     neg r11             ; r11 = abs(dx)
    99                              <2>     .dx_positive:
   100 000005C6 4D89D4              <2>         mov r12, r10        ; r12 = dy
   101 000005C9 4D85E4              <2>         test r12, r12
   102 000005CC 7903                <2>         jns .dy_positive
   103 000005CE 49F7DC              <2>         neg r12             ; r12 = abs(dy)
   104                              <2>     .dy_positive:
   105                              <2> 
   106                              <2>         ; Determine the direction of the line
   107 000005D1 41BD01000000        <2>         mov r13, 1          ; x_step = 1
   108 000005D7 4D85C9              <2>         test r9, r9
   109 000005DA 7907                <2>         jns .x_step_positive
   110 000005DC 49C7C5FFFFFFFF      <2>         mov r13, -1         ; x_step = -1
   111                              <2>     .x_step_positive:
   112 000005E3 41BE01000000        <2>         mov r14, 1          ; y_step = 1
   113 000005E9 4D85D2              <2>         test r10, r10
   114 000005EC 7907                <2>         jns .y_step_positive
   115 000005EE 49C7C6FFFFFFFF      <2>         mov r14, -1         ; y_step = -1
   116                              <2>     .y_step_positive:
   117                              <2> 
   118 000005F5 4D39E3              <2>     cmp r11, r12        ; Compare abs(dx) and abs(dy)
   119 000005F8 7D21                <2>     jge .steep_x        ; If abs(dx) >= abs(dy), use x-major line
   120 000005FA 4D89DF              <2>     mov r15, r11        ; error = abs(dx)
   121 000005FD 49D1E7              <2>     shl r15, 1          ; error = 2 * abs(dx)
   122 00000600 4D29E7              <2>     sub r15, r12         ; error = 2 * abs(dx) - abs(dy)
   123                              <2> 
   124 00000603 4D89D9              <2>     mov r9, r11         ; r9 = abs(dx)
   125 00000606 49D1E1              <2>     shl r9, 1           ; delta_error = 2 * abs(dx)
   126                              <2> 
   127 00000609 4D89CA              <2>     mov r10,r9
   128 0000060C 4157                <2>     push r15
   129 0000060E 4D89E7              <2>     mov r15, r12
   130 00000611 49D1E7              <2>     shl r15, 1           ; delta_error = 2 * abs(dy)
   131 00000614 4D29FA              <2>     sub r10,r15
   132 00000617 415F                <2>     pop r15
   133 00000619 EB21                <2>     jmp .draw_loop_dy
   134                              <2>     .steep_x:
   135 0000061B 4D89E7              <2>         mov r15, r12        ; error = abs(dy)
   136 0000061E 49D1E7              <2>         shl r15, 1          ; error = 2 * abs(dy)
   137 00000621 4D29DF              <2>         sub r15, r11         ; error = 2 * abs(dy) - abs(dx)
   138                              <2> 
   139 00000624 4D89E1              <2>         mov r9, r12         ; r9 = abs(dy)
   140 00000627 49D1E1              <2>         shl r9, 1           ; delta_error = 2 * abs(dy)
   141                              <2> 
   142 0000062A 4D89CA              <2>         mov r10,r9
   143 0000062D 4157                <2>         push r15
   144 0000062F 4D89DF              <2>         mov r15, r11
   145 00000632 49D1E7              <2>         shl r15, 1           ; delta_error = 2 * abs(dx)
   146 00000635 4D29FA              <2>         sub r10,r15
   147 00000638 415F                <2>         pop r15
   148 0000063A EB39                <2>         jmp .draw_loop_dx
   149                              <2>     .draw_loop_dy:
   150 0000063C 4839CE              <2>         cmp rsi, rcx        ; Compare y1 with y2
   151 0000063F 746D                <2>         je .done            ; If both match, we're done
   152                              <2> 
   153 00000641 4983FF00            <2>         cmp r15,0
   154 00000645 7D08                <2>         jge .yup1
   155 00000647 4C01F6              <2>         add rsi, r14        ; y += y_step
   156 0000064A 4D01CF              <2>         add r15,r9
   157 0000064D EB09                <2>         jmp .ydrawloop
   158                              <2>         .yup1:
   159 0000064F 4C01EF              <2>             add rdi, r13        ; x += x_step
   160 00000652 4C01F6              <2>             add rsi, r14        ; y += y_step
   161 00000655 4D01D7              <2>             add r15,r10
   162                              <2>         .ydrawloop:
   163                              <2>             ; Draw the current pixel
   164                              <2>             prepare_call 3,1
    97                              <3>  %assign total_space ((%1 + %2) * 8)
    98                              <3> 
    99                              <3>  %if (total_space % 16) != 0
   100                              <3>  %assign total_space total_space + 8
   101                              <3>  %endif
   102                              <3> 
   103 00000658 4883EC20            <3>  sub rsp, total_space
   165 0000065C 4C89442410          <2>             mov qword [rsp+16], r8
   166 00000661 4889742408          <2>             mov qword [rsp+8], rsi
   167 00000666 48893C24            <2>             mov qword [rsp], rdi
   168 0000066A E873FEFFFF          <2>             call draw_pixel
   169                              <2>             cleanup_call 3,1
   107                              <3>  %assign total_space ((%1 + %2) * 8)
   108                              <3>  %if (total_space % 16) != 0
   109                              <3>  %assign total_space total_space + 8
   110                              <3>  %endif
   111 0000066F 4883C420            <3>  add rsp, total_space
   170                              <2>             ; mov rax, [rsp-8]
   171 00000673 EBC7                <2>             jmp .draw_loop_dy            ; If both match, we're done
   172                              <2> 
   173                              <2>     .draw_loop_dx:
   174 00000675 4839D7              <2>         cmp rdi, rdx        ; Compare y1 with y2
   175 00000678 7434                <2>         je .done            ; If both match, we're done
   176                              <2> 
   177 0000067A 4983FF00            <2>         cmp r15,0
   178 0000067E 7D08                <2>         jge .xup1
   179 00000680 4C01EF              <2>         add rdi, r13        ; y += y_step
   180 00000683 4D01CF              <2>         add r15,r9
   181 00000686 EB09                <2>         jmp .xdrawloop
   182                              <2>         .xup1:
   183 00000688 4C01EF              <2>             add rdi, r13        ; x += x_step
   184 0000068B 4C01F6              <2>             add rsi, r14        ; y += y_step
   185 0000068E 4D01D7              <2>             add r15,r10
   186                              <2>         .xdrawloop:
   187                              <2>             ; Draw the current pixel
   188                              <2>             prepare_call 3,1
    97                              <3>  %assign total_space ((%1 + %2) * 8)
    98                              <3> 
    99                              <3>  %if (total_space % 16) != 0
   100                              <3>  %assign total_space total_space + 8
   101                              <3>  %endif
   102                              <3> 
   103 00000691 4883EC20            <3>  sub rsp, total_space
   189 00000695 4C89442410          <2>             mov qword [rsp+16], r8
   190 0000069A 4889742408          <2>             mov qword [rsp+8], rsi
   191 0000069F 48893C24            <2>             mov qword [rsp], rdi
   192 000006A3 E83AFEFFFF          <2>             call draw_pixel
   193                              <2>             cleanup_call 3,1
   107                              <3>  %assign total_space ((%1 + %2) * 8)
   108                              <3>  %if (total_space % 16) != 0
   109                              <3>  %assign total_space total_space + 8
   110                              <3>  %endif
   111 000006A8 4883C420            <3>  add rsp, total_space
   194                              <2>             ; mov rax, [rsp-8]
   195 000006AC EBC7                <2>             jmp .draw_loop_dx            ; If both match, we're done
   196                              <2>         
   197                              <2>     .done:
   198                              <2>         set_ret_param rcx,6
    93 000006AE 48894D38            <3>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   199                              <2>         epilog
    81                              <3>  popallq
   132 000006B2 415F                <4>  pop r15
   133 000006B4 415E                <4>  pop r14
   134 000006B6 415D                <4>  pop r13
   135 000006B8 415C                <4>  pop r12
   136 000006BA 415B                <4>  pop r11
   137 000006BC 415A                <4>  pop r10
   138 000006BE 4159                <4>  pop r9
   139 000006C0 4158                <4>  pop r8
   140 000006C2 5F                  <4>  pop rdi
   141 000006C3 5E                  <4>  pop rsi
   142 000006C4 5A                  <4>  pop rdx
   143 000006C5 59                  <4>  pop rcx
   144 000006C6 5B                  <4>  pop rbx
   145 000006C7 58                  <4>  pop rax
    82                              <3> 
    83 000006C8 4889EC              <3>  mov rsp, rbp
    84 000006CB 5D                  <3>  pop rbp
    85 000006CC C3                  <3>  ret
   200                              <2> 
   201                              <2> draw_rect:; Input: x1,y1,x2,y2,color
   202                              <2>     prolog 2;
    63 000006CD 55                  <3>  push rbp
    64 000006CE 4889E5              <3>  mov rbp, rsp
    65 000006D1 488945F8            <3>  mov [rbp-8],rax
    66 000006D5 B802000000          <3>  mov rax, %1
    67 000006DA 4883C00F            <3>  add rax, 15
    68 000006DE 4883E0F0            <3>  and rax, ~15
    69 000006E2 4829C4              <3>  sub rsp, rax
    70 000006E5 488B45F8            <3>  mov rax,[rbp-8]
    71                              <3>  pushallq
   115 000006E9 50                  <4>  push rax
   116 000006EA 53                  <4>  push rbx
   117 000006EB 51                  <4>  push rcx
   118 000006EC 52                  <4>  push rdx
   119 000006ED 56                  <4>  push rsi
   120 000006EE 57                  <4>  push rdi
   121 000006EF 4150                <4>  push r8
   122 000006F1 4151                <4>  push r9
   123 000006F3 4152                <4>  push r10
   124 000006F5 4153                <4>  push r11
   125 000006F7 4154                <4>  push r12
   126 000006F9 4155                <4>  push r13
   127 000006FB 4156                <4>  push r14
   128 000006FD 4157                <4>  push r15
    72                              <3> 
    73                              <3> 
    74                              <3> 
    75                              <3> 
    76                              <3> 
    77                              <3> 
   203                              <2>     get_param rdi, 1    ; x1
    89 000006FF 488B7D10            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   204                              <2>     get_param rsi, 2    ; y1
    89 00000703 488B7518            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   205                              <2>     get_param rdx, 3    ; x2
    89 00000707 488B5520            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   206                              <2>     get_param rcx, 4    ; y2
    89 0000070B 488B4D28            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   207                              <2>     get_param r8,  5    ; color
    89 0000070F 4C8B4530            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   208                              <2>     ; jmp $
   209                              <2>     .line1:
   210                              <2>         prepare_call 5,1
    97                              <3>  %assign total_space ((%1 + %2) * 8)
    98                              <3> 
    99                              <3>  %if (total_space % 16) != 0
   100                              <3>  %assign total_space total_space + 8
   101                              <3>  %endif
   102                              <3> 
   103 00000713 4883EC30            <3>  sub rsp, total_space
   211 00000717 48C7442420FFFFFF00  <2>         mov qword [rsp+32], 0x00FFFFFF
   212 00000720 4889742418          <2>         mov qword [rsp+24], rsi
   213 00000725 4889542410          <2>         mov qword [rsp+16], rdx
   214                              <2> 
   215 0000072A 4889742408          <2>         mov qword [rsp+8], rsi
   216 0000072F 48893C24            <2>         mov qword [rsp], rdi
   217 00000733 E831FEFFFF          <2>         call draw_line
   218                              <2>         cleanup_call 5,1
   107                              <3>  %assign total_space ((%1 + %2) * 8)
   108                              <3>  %if (total_space % 16) != 0
   109                              <3>  %assign total_space total_space + 8
   110                              <3>  %endif
   111 00000738 4883C430            <3>  add rsp, total_space
   219 0000073C 488B4424F8          <2>         mov rax, [rsp-8]
   220                              <2>     .line2:
   221                              <2>         prepare_call 5,1
    97                              <3>  %assign total_space ((%1 + %2) * 8)
    98                              <3> 
    99                              <3>  %if (total_space % 16) != 0
   100                              <3>  %assign total_space total_space + 8
   101                              <3>  %endif
   102                              <3> 
   103 00000741 4883EC30            <3>  sub rsp, total_space
   222 00000745 48C7442420FFFFFF00  <2>         mov qword [rsp+32], 0x00FFFFFF
   223 0000074E 48894C2418          <2>         mov qword [rsp+24], rcx
   224 00000753 4889542410          <2>         mov qword [rsp+16], rdx
   225                              <2> 
   226 00000758 4889742408          <2>         mov qword [rsp+8], rsi
   227 0000075D 48891424            <2>         mov qword [rsp], rdx
   228 00000761 E803FEFFFF          <2>         call draw_line
   229                              <2>         cleanup_call 5,1
   107                              <3>  %assign total_space ((%1 + %2) * 8)
   108                              <3>  %if (total_space % 16) != 0
   109                              <3>  %assign total_space total_space + 8
   110                              <3>  %endif
   111 00000766 4883C430            <3>  add rsp, total_space
   230 0000076A 488B4424F8          <2>         mov rax, [rsp-8]
   231                              <2>     .line3:
   232                              <2>         prepare_call 5,1
    97                              <3>  %assign total_space ((%1 + %2) * 8)
    98                              <3> 
    99                              <3>  %if (total_space % 16) != 0
   100                              <3>  %assign total_space total_space + 8
   101                              <3>  %endif
   102                              <3> 
   103 0000076F 4883EC30            <3>  sub rsp, total_space
   233 00000773 48C7442420FFFFFF00  <2>         mov qword [rsp+32], 0x00FFFFFF
   234 0000077C 48894C2418          <2>         mov qword [rsp+24], rcx
   235 00000781 48897C2410          <2>         mov qword [rsp+16], rdi
   236                              <2> 
   237 00000786 48894C2408          <2>         mov qword [rsp+8], rcx
   238 0000078B 48891424            <2>         mov qword [rsp], rdx
   239 0000078F E8D5FDFFFF          <2>         call draw_line
   240                              <2>         cleanup_call 5,1
   107                              <3>  %assign total_space ((%1 + %2) * 8)
   108                              <3>  %if (total_space % 16) != 0
   109                              <3>  %assign total_space total_space + 8
   110                              <3>  %endif
   111 00000794 4883C430            <3>  add rsp, total_space
   241 00000798 488B4424F8          <2>         mov rax, [rsp-8]
   242                              <2>     .line4:
   243                              <2>         prepare_call 5,1
    97                              <3>  %assign total_space ((%1 + %2) * 8)
    98                              <3> 
    99                              <3>  %if (total_space % 16) != 0
   100                              <3>  %assign total_space total_space + 8
   101                              <3>  %endif
   102                              <3> 
   103 0000079D 4883EC30            <3>  sub rsp, total_space
   244 000007A1 48C7442420FFFFFF00  <2>         mov qword [rsp+32], 0x00FFFFFF
   245 000007AA 4889742418          <2>         mov qword [rsp+24], rsi
   246 000007AF 48897C2410          <2>         mov qword [rsp+16], rdi
   247                              <2> 
   248 000007B4 48894C2408          <2>         mov qword [rsp+8], rcx
   249 000007B9 48893C24            <2>         mov qword [rsp], rdi
   250 000007BD E8A7FDFFFF          <2>         call draw_line
   251                              <2>         cleanup_call 5,1
   107                              <3>  %assign total_space ((%1 + %2) * 8)
   108                              <3>  %if (total_space % 16) != 0
   109                              <3>  %assign total_space total_space + 8
   110                              <3>  %endif
   111 000007C2 4883C430            <3>  add rsp, total_space
   252 000007C6 488B4424F8          <2>         mov rax, [rsp-8]
   253                              <2>     .done:
   254                              <2>         set_ret_param rcx,6
    93 000007CB 48894D38            <3>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   255                              <2>         epilog
    81                              <3>  popallq
   132 000007CF 415F                <4>  pop r15
   133 000007D1 415E                <4>  pop r14
   134 000007D3 415D                <4>  pop r13
   135 000007D5 415C                <4>  pop r12
   136 000007D7 415B                <4>  pop r11
   137 000007D9 415A                <4>  pop r10
   138 000007DB 4159                <4>  pop r9
   139 000007DD 4158                <4>  pop r8
   140 000007DF 5F                  <4>  pop rdi
   141 000007E0 5E                  <4>  pop rsi
   142 000007E1 5A                  <4>  pop rdx
   143 000007E2 59                  <4>  pop rcx
   144 000007E3 5B                  <4>  pop rbx
   145 000007E4 58                  <4>  pop rax
    82                              <3> 
    83 000007E5 4889EC              <3>  mov rsp, rbp
    84 000007E8 5D                  <3>  pop rbp
    85 000007E9 C3                  <3>  ret
   256                              <2> 
   257                              <2> draw_screen:;Input:color
   258                              <2>     prolog 2;
    63 000007EA 55                  <3>  push rbp
    64 000007EB 4889E5              <3>  mov rbp, rsp
    65 000007EE 488945F8            <3>  mov [rbp-8],rax
    66 000007F2 B802000000          <3>  mov rax, %1
    67 000007F7 4883C00F            <3>  add rax, 15
    68 000007FB 4883E0F0            <3>  and rax, ~15
    69 000007FF 4829C4              <3>  sub rsp, rax
    70 00000802 488B45F8            <3>  mov rax,[rbp-8]
    71                              <3>  pushallq
   115 00000806 50                  <4>  push rax
   116 00000807 53                  <4>  push rbx
   117 00000808 51                  <4>  push rcx
   118 00000809 52                  <4>  push rdx
   119 0000080A 56                  <4>  push rsi
   120 0000080B 57                  <4>  push rdi
   121 0000080C 4150                <4>  push r8
   122 0000080E 4151                <4>  push r9
   123 00000810 4152                <4>  push r10
   124 00000812 4153                <4>  push r11
   125 00000814 4154                <4>  push r12
   126 00000816 4155                <4>  push r13
   127 00000818 4156                <4>  push r14
   128 0000081A 4157                <4>  push r15
    72                              <3> 
    73                              <3> 
    74                              <3> 
    75                              <3> 
    76                              <3> 
    77                              <3> 
   259                              <2> 
   260                              <2>     get_param rdi, 1   ; x
    89 0000081C 488B7D10            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   261                              <2> 
   262 00000820 488D1D04FCFFFF      <2>     lea rbx, [rel video_info_ptr] ; Load video info structure address
   263                              <2>     ; Calculate pixel offset
   264 00000827 B800000000          <2>     mov rax,0
   265 0000082C 480FB703            <2>     movzx rax, word [rbx + video_info.xpixel] ; Screen width
   266                              <2> 
   267 00000830 B900000000          <2>     mov rcx,0
   268 00000835 480FB74B02          <2>     movzx rcx, word [rbx + video_info.ypixel] ; Screen height
   269                              <2> 
   270 0000083A 48F7E1              <2>     mul rcx
   271                              <2> 
   272 0000083D 4889C1              <2>     mov rcx,rax
   273 00000840 480FB65304          <2>     movzx rdx, byte [rbx + video_info.byte_per_pixel] ; Bytes per pixel
   274 00000845 48F7E2              <2>     mul rdx                          ; Offset = (y * width + x) * bytes_per_pixel
   275                              <2> 
   276 00000848 488B5B05            <2>     mov rbx, qword [rbx + video_info.video_framebuffer] ; Framebuffer address
   277 0000084C 4801C3              <2>     add rbx,rax
   278                              <2>     .write_color:
   279                              <2>         ; Write color to framebuffer
   280                              <2>         
   281 0000084F 893B                <2>         mov dword [rbx], edi                        ; Write color (assumes 32-bit color)
   282 00000851 4883EB04            <2>         sub rbx,4                          ; rbx = framebuffer + offset
   283 00000855 E2F8                <2>         loop .write_color
   284                              <2> 
   285                              <2>         ; jmp $
   286                              <2>     set_ret_param rax,2
    93 00000857 48894518            <3>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   287                              <2> 
   288                              <2>     epilog
    81                              <3>  popallq
   132 0000085B 415F                <4>  pop r15
   133 0000085D 415E                <4>  pop r14
   134 0000085F 415D                <4>  pop r13
   135 00000861 415C                <4>  pop r12
   136 00000863 415B                <4>  pop r11
   137 00000865 415A                <4>  pop r10
   138 00000867 4159                <4>  pop r9
   139 00000869 4158                <4>  pop r8
   140 0000086B 5F                  <4>  pop rdi
   141 0000086C 5E                  <4>  pop rsi
   142 0000086D 5A                  <4>  pop rdx
   143 0000086E 59                  <4>  pop rcx
   144 0000086F 5B                  <4>  pop rbx
   145 00000870 58                  <4>  pop rax
    82                              <3> 
    83 00000871 4889EC              <3>  mov rsp, rbp
    84 00000874 5D                  <3>  pop rbp
    85 00000875 C3                  <3>  ret
   289                              <2> 
   290                              <2> 
   291                              <2> draw_triangle: ; Input: x1, y1, x2, y2, x3, y3, color
   292                              <2>     prolog 2;
    63 00000876 55                  <3>  push rbp
    64 00000877 4889E5              <3>  mov rbp, rsp
    65 0000087A 488945F8            <3>  mov [rbp-8],rax
    66 0000087E B802000000          <3>  mov rax, %1
    67 00000883 4883C00F            <3>  add rax, 15
    68 00000887 4883E0F0            <3>  and rax, ~15
    69 0000088B 4829C4              <3>  sub rsp, rax
    70 0000088E 488B45F8            <3>  mov rax,[rbp-8]
    71                              <3>  pushallq
   115 00000892 50                  <4>  push rax
   116 00000893 53                  <4>  push rbx
   117 00000894 51                  <4>  push rcx
   118 00000895 52                  <4>  push rdx
   119 00000896 56                  <4>  push rsi
   120 00000897 57                  <4>  push rdi
   121 00000898 4150                <4>  push r8
   122 0000089A 4151                <4>  push r9
   123 0000089C 4152                <4>  push r10
   124 0000089E 4153                <4>  push r11
   125 000008A0 4154                <4>  push r12
   126 000008A2 4155                <4>  push r13
   127 000008A4 4156                <4>  push r14
   128 000008A6 4157                <4>  push r15
    72                              <3> 
    73                              <3> 
    74                              <3> 
    75                              <3> 
    76                              <3> 
    77                              <3> 
   293                              <2>     get_param rdi, 1    ; x1
    89 000008A8 488B7D10            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   294                              <2>     get_param rsi, 2    ; y1
    89 000008AC 488B7518            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   295                              <2>     get_param rdx, 3    ; x2
    89 000008B0 488B5520            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   296                              <2>     get_param rcx, 4    ; y2
    89 000008B4 488B4D28            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   297                              <2>     get_param r8,  5    ; x3
    89 000008B8 4C8B4530            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   298                              <2>     get_param r9,  6    ; y3
    89 000008BC 4C8B4D38            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   299                              <2>     get_param r10, 7    ; color
    89 000008C0 4C8B5540            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   300                              <2> 
   301                              <2>     ; Draw line from (x1, y1) to (x2, y2)
   302                              <2>     prepare_call 5, 1
    97                              <3>  %assign total_space ((%1 + %2) * 8)
    98                              <3> 
    99                              <3>  %if (total_space % 16) != 0
   100                              <3>  %assign total_space total_space + 8
   101                              <3>  %endif
   102                              <3> 
   103 000008C4 4883EC30            <3>  sub rsp, total_space
   303 000008C8 4C89542420          <2>     mov qword [rsp+32], r10 ; color
   304 000008CD 48894C2418          <2>     mov qword [rsp+24], rcx ; y2
   305 000008D2 4889542410          <2>     mov qword [rsp+16], rdx ; x2
   306 000008D7 4889742408          <2>     mov qword [rsp+8], rsi  ; y1
   307 000008DC 48893C24            <2>     mov qword [rsp], rdi    ; x1
   308 000008E0 E884FCFFFF          <2>     call draw_line
   309                              <2>     cleanup_call 5, 1
   107                              <3>  %assign total_space ((%1 + %2) * 8)
   108                              <3>  %if (total_space % 16) != 0
   109                              <3>  %assign total_space total_space + 8
   110                              <3>  %endif
   111 000008E5 4883C430            <3>  add rsp, total_space
   310                              <2> 
   311                              <2>     ; Draw line from (x2, y2) to (x3, y3)
   312                              <2>     prepare_call 5, 1
    97                              <3>  %assign total_space ((%1 + %2) * 8)
    98                              <3> 
    99                              <3>  %if (total_space % 16) != 0
   100                              <3>  %assign total_space total_space + 8
   101                              <3>  %endif
   102                              <3> 
   103 000008E9 4883EC30            <3>  sub rsp, total_space
   313 000008ED 4C89542420          <2>     mov qword [rsp+32], r10 ; color
   314 000008F2 4C894C2418          <2>     mov qword [rsp+24], r9  ; y3
   315 000008F7 4C89442410          <2>     mov qword [rsp+16], r8  ; x3
   316 000008FC 48894C2408          <2>     mov qword [rsp+8], rcx  ; y2
   317 00000901 48891424            <2>     mov qword [rsp], rdx    ; x2
   318 00000905 E85FFCFFFF          <2>     call draw_line
   319                              <2>     cleanup_call 5, 1
   107                              <3>  %assign total_space ((%1 + %2) * 8)
   108                              <3>  %if (total_space % 16) != 0
   109                              <3>  %assign total_space total_space + 8
   110                              <3>  %endif
   111 0000090A 4883C430            <3>  add rsp, total_space
   320                              <2> 
   321                              <2>     ; Draw line from (x3, y3) to (x1, y1)
   322                              <2>     prepare_call 5, 1
    97                              <3>  %assign total_space ((%1 + %2) * 8)
    98                              <3> 
    99                              <3>  %if (total_space % 16) != 0
   100                              <3>  %assign total_space total_space + 8
   101                              <3>  %endif
   102                              <3> 
   103 0000090E 4883EC30            <3>  sub rsp, total_space
   323 00000912 4C89542420          <2>     mov qword [rsp+32], r10 ; color
   324 00000917 4889742418          <2>     mov qword [rsp+24], rsi ; y1
   325 0000091C 48897C2410          <2>     mov qword [rsp+16], rdi ; x1
   326 00000921 4C894C2408          <2>     mov qword [rsp+8], r9   ; y3
   327 00000926 4C890424            <2>     mov qword [rsp], r8     ; x3
   328 0000092A E83AFCFFFF          <2>     call draw_line
   329                              <2>     cleanup_call 5, 1
   107                              <3>  %assign total_space ((%1 + %2) * 8)
   108                              <3>  %if (total_space % 16) != 0
   109                              <3>  %assign total_space total_space + 8
   110                              <3>  %endif
   111 0000092F 4883C430            <3>  add rsp, total_space
   330                              <2> 
   331                              <2>     set_ret_param rax, 8
    93 00000933 48894548            <3>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   332                              <2>     epilog
    81                              <3>  popallq
   132 00000937 415F                <4>  pop r15
   133 00000939 415E                <4>  pop r14
   134 0000093B 415D                <4>  pop r13
   135 0000093D 415C                <4>  pop r12
   136 0000093F 415B                <4>  pop r11
   137 00000941 415A                <4>  pop r10
   138 00000943 4159                <4>  pop r9
   139 00000945 4158                <4>  pop r8
   140 00000947 5F                  <4>  pop rdi
   141 00000948 5E                  <4>  pop rsi
   142 00000949 5A                  <4>  pop rdx
   143 0000094A 59                  <4>  pop rcx
   144 0000094B 5B                  <4>  pop rbx
   145 0000094C 58                  <4>  pop rax
    82                              <3> 
    83 0000094D 4889EC              <3>  mov rsp, rbp
    84 00000950 5D                  <3>  pop rbp
    85 00000951 C3                  <3>  ret
   333                              <2> 
   334                              <2> draw_circle: ; Input: x_center, y_center, radius, color
   335                              <2>     prolog 2;
    63 00000952 55                  <3>  push rbp
    64 00000953 4889E5              <3>  mov rbp, rsp
    65 00000956 488945F8            <3>  mov [rbp-8],rax
    66 0000095A B802000000          <3>  mov rax, %1
    67 0000095F 4883C00F            <3>  add rax, 15
    68 00000963 4883E0F0            <3>  and rax, ~15
    69 00000967 4829C4              <3>  sub rsp, rax
    70 0000096A 488B45F8            <3>  mov rax,[rbp-8]
    71                              <3>  pushallq
   115 0000096E 50                  <4>  push rax
   116 0000096F 53                  <4>  push rbx
   117 00000970 51                  <4>  push rcx
   118 00000971 52                  <4>  push rdx
   119 00000972 56                  <4>  push rsi
   120 00000973 57                  <4>  push rdi
   121 00000974 4150                <4>  push r8
   122 00000976 4151                <4>  push r9
   123 00000978 4152                <4>  push r10
   124 0000097A 4153                <4>  push r11
   125 0000097C 4154                <4>  push r12
   126 0000097E 4155                <4>  push r13
   127 00000980 4156                <4>  push r14
   128 00000982 4157                <4>  push r15
    72                              <3> 
    73                              <3> 
    74                              <3> 
    75                              <3> 
    76                              <3> 
    77                              <3> 
   336                              <2>     get_param rdi, 1    ; x_center
    89 00000984 488B7D10            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   337                              <2>     get_param rsi, 2    ; y_center
    89 00000988 488B7518            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   338                              <2>     get_param rdx, 3    ; radius
    89 0000098C 488B5520            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   339                              <2>     get_param rcx, 4    ; color
    89 00000990 488B4D28            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   340                              <2> 
   341                              <2>     ; Initialize variables
   342 00000994 41B800000000        <2>     mov r8, 0           ; x = 0
   343 0000099A 4989D1              <2>     mov r9, rdx         ; y = radius
   344 0000099D 41BA03000000        <2>     mov r10, 3          ; decision = 1 - radius
   345 000009A3 4889D0              <2>     mov rax, rdx         ; r = radius
   346 000009A6 BB02000000          <2>     mov rbx,2
   347 000009AB 48F7E3              <2>     mul rbx
   348 000009AE 4929C2              <2>     sub r10,rax
   349                              <2>     ; d = 3 - 2 * r;
   350                              <2> 
   351                              <2>     .circle_loop:
   352                              <2>         ; Draw the 8 symmetric points of the circle
   353                              <2>         prepare_call 3, 1
    97                              <3>  %assign total_space ((%1 + %2) * 8)
    98                              <3> 
    99                              <3>  %if (total_space % 16) != 0
   100                              <3>  %assign total_space total_space + 8
   101                              <3>  %endif
   102                              <3> 
   103 000009B1 4883EC20            <3>  sub rsp, total_space
   354 000009B5 48894C2410          <2>         mov qword [rsp+16], rcx
   355 000009BA 4889742408          <2>         mov qword [rsp+8], rsi
   356 000009BF 48893C24            <2>         mov qword [rsp], rdi
   357 000009C3 4C010424            <2>         add qword [rsp], r8
   358 000009C7 4C014C2408          <2>         add qword [rsp+8], r9
   359 000009CC E811FBFFFF          <2>         call draw_pixel
   360                              <2>         cleanup_call 3, 1
   107                              <3>  %assign total_space ((%1 + %2) * 8)
   108                              <3>  %if (total_space % 16) != 0
   109                              <3>  %assign total_space total_space + 8
   110                              <3>  %endif
   111 000009D1 4883C420            <3>  add rsp, total_space
   361                              <2> 
   362                              <2>         prepare_call 3, 1
    97                              <3>  %assign total_space ((%1 + %2) * 8)
    98                              <3> 
    99                              <3>  %if (total_space % 16) != 0
   100                              <3>  %assign total_space total_space + 8
   101                              <3>  %endif
   102                              <3> 
   103 000009D5 4883EC20            <3>  sub rsp, total_space
   363 000009D9 48894C2410          <2>         mov qword [rsp+16], rcx
   364 000009DE 4889742408          <2>         mov qword [rsp+8], rsi
   365 000009E3 48893C24            <2>         mov qword [rsp], rdi
   366 000009E7 4C290424            <2>         sub qword [rsp], r8
   367 000009EB 4C014C2408          <2>         add qword [rsp+8], r9
   368 000009F0 E8EDFAFFFF          <2>         call draw_pixel
   369                              <2>         cleanup_call 3, 1
   107                              <3>  %assign total_space ((%1 + %2) * 8)
   108                              <3>  %if (total_space % 16) != 0
   109                              <3>  %assign total_space total_space + 8
   110                              <3>  %endif
   111 000009F5 4883C420            <3>  add rsp, total_space
   370                              <2> 
   371                              <2>         prepare_call 3, 1
    97                              <3>  %assign total_space ((%1 + %2) * 8)
    98                              <3> 
    99                              <3>  %if (total_space % 16) != 0
   100                              <3>  %assign total_space total_space + 8
   101                              <3>  %endif
   102                              <3> 
   103 000009F9 4883EC20            <3>  sub rsp, total_space
   372 000009FD 48894C2410          <2>         mov qword [rsp+16], rcx
   373 00000A02 4889742408          <2>         mov qword [rsp+8], rsi
   374 00000A07 48893C24            <2>         mov qword [rsp], rdi
   375 00000A0B 4C010424            <2>         add qword [rsp], r8
   376 00000A0F 4C294C2408          <2>         sub qword [rsp+8], r9
   377 00000A14 E8C9FAFFFF          <2>         call draw_pixel
   378                              <2>         cleanup_call 3, 1
   107                              <3>  %assign total_space ((%1 + %2) * 8)
   108                              <3>  %if (total_space % 16) != 0
   109                              <3>  %assign total_space total_space + 8
   110                              <3>  %endif
   111 00000A19 4883C420            <3>  add rsp, total_space
   379                              <2> 
   380                              <2>         prepare_call 3, 1
    97                              <3>  %assign total_space ((%1 + %2) * 8)
    98                              <3> 
    99                              <3>  %if (total_space % 16) != 0
   100                              <3>  %assign total_space total_space + 8
   101                              <3>  %endif
   102                              <3> 
   103 00000A1D 4883EC20            <3>  sub rsp, total_space
   381 00000A21 48894C2410          <2>         mov qword [rsp+16], rcx
   382 00000A26 4889742408          <2>         mov qword [rsp+8], rsi
   383 00000A2B 48893C24            <2>         mov qword [rsp], rdi
   384 00000A2F 4C290424            <2>         sub qword [rsp], r8
   385 00000A33 4C294C2408          <2>         sub qword [rsp+8], r9
   386 00000A38 E8A5FAFFFF          <2>         call draw_pixel
   387                              <2>         cleanup_call 3, 1
   107                              <3>  %assign total_space ((%1 + %2) * 8)
   108                              <3>  %if (total_space % 16) != 0
   109                              <3>  %assign total_space total_space + 8
   110                              <3>  %endif
   111 00000A3D 4883C420            <3>  add rsp, total_space
   388                              <2> 
   389                              <2>         prepare_call 3, 1
    97                              <3>  %assign total_space ((%1 + %2) * 8)
    98                              <3> 
    99                              <3>  %if (total_space % 16) != 0
   100                              <3>  %assign total_space total_space + 8
   101                              <3>  %endif
   102                              <3> 
   103 00000A41 4883EC20            <3>  sub rsp, total_space
   390 00000A45 48894C2410          <2>         mov qword [rsp+16], rcx
   391 00000A4A 4889742408          <2>         mov qword [rsp+8], rsi
   392 00000A4F 48893C24            <2>         mov qword [rsp], rdi
   393 00000A53 4C010C24            <2>         add qword [rsp], r9
   394 00000A57 4C01442408          <2>         add qword [rsp+8], r8
   395 00000A5C E881FAFFFF          <2>         call draw_pixel
   396                              <2>         cleanup_call 3, 1
   107                              <3>  %assign total_space ((%1 + %2) * 8)
   108                              <3>  %if (total_space % 16) != 0
   109                              <3>  %assign total_space total_space + 8
   110                              <3>  %endif
   111 00000A61 4883C420            <3>  add rsp, total_space
   397                              <2> 
   398                              <2>         prepare_call 3, 1
    97                              <3>  %assign total_space ((%1 + %2) * 8)
    98                              <3> 
    99                              <3>  %if (total_space % 16) != 0
   100                              <3>  %assign total_space total_space + 8
   101                              <3>  %endif
   102                              <3> 
   103 00000A65 4883EC20            <3>  sub rsp, total_space
   399 00000A69 48894C2410          <2>         mov qword [rsp+16], rcx
   400 00000A6E 4889742408          <2>         mov qword [rsp+8], rsi
   401 00000A73 48893C24            <2>         mov qword [rsp], rdi
   402 00000A77 4C290C24            <2>         sub qword [rsp], r9
   403 00000A7B 4C01442408          <2>         add qword [rsp+8], r8
   404 00000A80 E85DFAFFFF          <2>         call draw_pixel
   405                              <2>         cleanup_call 3, 1
   107                              <3>  %assign total_space ((%1 + %2) * 8)
   108                              <3>  %if (total_space % 16) != 0
   109                              <3>  %assign total_space total_space + 8
   110                              <3>  %endif
   111 00000A85 4883C420            <3>  add rsp, total_space
   406                              <2> 
   407                              <2>         prepare_call 3, 1
    97                              <3>  %assign total_space ((%1 + %2) * 8)
    98                              <3> 
    99                              <3>  %if (total_space % 16) != 0
   100                              <3>  %assign total_space total_space + 8
   101                              <3>  %endif
   102                              <3> 
   103 00000A89 4883EC20            <3>  sub rsp, total_space
   408 00000A8D 48894C2410          <2>         mov qword [rsp+16], rcx
   409 00000A92 4889742408          <2>         mov qword [rsp+8], rsi
   410 00000A97 48893C24            <2>         mov qword [rsp], rdi
   411 00000A9B 4C010C24            <2>         add qword [rsp], r9
   412 00000A9F 4C29442408          <2>         sub qword [rsp+8], r8
   413 00000AA4 E839FAFFFF          <2>         call draw_pixel
   414                              <2>         cleanup_call 3, 1
   107                              <3>  %assign total_space ((%1 + %2) * 8)
   108                              <3>  %if (total_space % 16) != 0
   109                              <3>  %assign total_space total_space + 8
   110                              <3>  %endif
   111 00000AA9 4883C420            <3>  add rsp, total_space
   415                              <2> 
   416                              <2>         prepare_call 3, 1
    97                              <3>  %assign total_space ((%1 + %2) * 8)
    98                              <3> 
    99                              <3>  %if (total_space % 16) != 0
   100                              <3>  %assign total_space total_space + 8
   101                              <3>  %endif
   102                              <3> 
   103 00000AAD 4883EC20            <3>  sub rsp, total_space
   417 00000AB1 48894C2410          <2>         mov qword [rsp+16], rcx
   418 00000AB6 4889742408          <2>         mov qword [rsp+8], rsi
   419 00000ABB 48893C24            <2>         mov qword [rsp], rdi
   420 00000ABF 4C290C24            <2>         sub qword [rsp], r9
   421 00000AC3 4C29442408          <2>         sub qword [rsp+8], r8
   422 00000AC8 E815FAFFFF          <2>         call draw_pixel
   423                              <2>         cleanup_call 3, 1
   107                              <3>  %assign total_space ((%1 + %2) * 8)
   108                              <3>  %if (total_space % 16) != 0
   109                              <3>  %assign total_space total_space + 8
   110                              <3>  %endif
   111 00000ACD 4883C420            <3>  add rsp, total_space
   424                              <2> 
   425                              <2>         ; Update decision parameter and coordinates
   426                              <2> 
   427                              <2> 
   428                              <2>         ;     if (d < 0) {
   429                              <2>         ;         d = d + 4 * x + 6;
   430                              <2>         ;     } else {
   431                              <2>         ;         d = d + 4 * (x - y) + 10;
   432                              <2>         ;         y --;
   433                              <2>         ;     }
   434                              <2>         ;     x ++;
   435                              <2>         ; }
   436                              <2>         ; r10
   437 00000AD1 4983FA00            <2>         cmp r10, 0
   438 00000AD5 7C1B                <2>         jl .update_y
   439 00000AD7 4C89C0              <2>         mov rax, r8
   440 00000ADA 4C29C8              <2>         sub rax, r9
   441                              <2>         
   442 00000ADD BB04000000          <2>         mov rbx,4
   443 00000AE2 48F7E3              <2>         mul rbx
   444 00000AE5 4883C00A            <2>         add rax,10
   445 00000AE9 4901C2              <2>         add r10, rax         ; d = d + 4 * (x - y) + 10;
   446                              <2> 
   447 00000AEC 4983E901            <2>         sub r9, 1           ; y--
   448 00000AF0 EB12                <2>         jmp .update_x
   449                              <2>         .update_y:
   450 00000AF2 4C89C0              <2>             mov rax, r8
   451                              <2> 
   452 00000AF5 BB04000000          <2>             mov rbx,4
   453 00000AFA 48F7E3              <2>             mul rbx
   454                              <2> 
   455 00000AFD 4883C006            <2>             add rax,6
   456 00000B01 4901C2              <2>             add r10, rax         ;d = d + 4 * x + 6;
   457                              <2>         .update_x:
   458 00000B04 4983C001            <2>             add r8, 1           ; x++
   459 00000B08 4D39C8              <2>             cmp r8, r9
   460 00000B0B 0F8EA0FEFFFF        <2>             jle .circle_loop
   461                              <2> 
   462                              <2>         set_ret_param rax, 5
    93 00000B11 48894530            <3>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   463                              <2>         epilog
    81                              <3>  popallq
   132 00000B15 415F                <4>  pop r15
   133 00000B17 415E                <4>  pop r14
   134 00000B19 415D                <4>  pop r13
   135 00000B1B 415C                <4>  pop r12
   136 00000B1D 415B                <4>  pop r11
   137 00000B1F 415A                <4>  pop r10
   138 00000B21 4159                <4>  pop r9
   139 00000B23 4158                <4>  pop r8
   140 00000B25 5F                  <4>  pop rdi
   141 00000B26 5E                  <4>  pop rsi
   142 00000B27 5A                  <4>  pop rdx
   143 00000B28 59                  <4>  pop rcx
   144 00000B29 5B                  <4>  pop rbx
   145 00000B2A 58                  <4>  pop rax
    82                              <3> 
    83 00000B2B 4889EC              <3>  mov rsp, rbp
    84 00000B2E 5D                  <3>  pop rbp
    85 00000B2F C3                  <3>  ret
   464                              <2> 
   465                              <2> %endif
     6                              <1>     
     7                              <1> [BITS 64]
     8                              <1>     ; struc cursor_info
     9                              <1>     ;     .print_xpixel:            resw 1      
    10                              <1>     ;     .print_ypixel:            resw 1       
    11                              <1>     ;     .current_xpixel:          resw 1      
    12                              <1>     ;     .current_ypixel:          resw 1
    13                              <1>     ; endstruc
    14                              <1>     ; cursor_info_ptr:
    15                              <1>     ;     istruc cursor_info
    16                              <1>     ;         at cursor_info.print_xpixel, dw 0
    17                              <1>     ;         at cursor_info.print_ypixel, dw 0
    18                              <1>     ;         at cursor_info.current_xpixel, dw 0
    19                              <1>     ;         at cursor_info.current_ypixel, dw 0
    20                              <1>     ;     iend
    21                              <1> 
    22                              <1>     ; struc font_info
    23                              <1>     ;     .font_base_address:    resq 1
    24                              <1>     ;     .font_size:            resq 1
    25                              <1>     ;     .font_width:           resq 1
    26                              <1>     ;     .font_height:          resq 1
    27                              <1>     ; endstruc
    28                              <1>     ; font_info_ptr:
    29                              <1>     ;     istruc font_info
    30                              <1>     ;         at font_info.font_base_address, dq 0
    31                              <1>     ;         at font_info.font_size, dq 0
    32                              <1>     ;         at font_info.font_width, dq 0
    33                              <1>     ;         at font_info.font_height, dq 0
    34                              <1>     ;     iend
    35                              <1> 
    36                              <1> struc print_info
    37 00000000 ????                <1>     .cursor_current_xpixel:     resw 1
    38 00000002 ????                <1>     .cursor_current_ypixel:     resw 1
    39 00000004 ????                <1>     .cursor_current_line:       resw 1
    40                              <1> 
    41 00000006 ????                <1>     .cursor_print_xpixel:       resw 1
    42 00000008 ????                <1>     .cursor_print_ypixel:       resw 1
    43 0000000A ????                <1>     .cursor_print_line:         resw 1
    44 0000000C ????????????????    <1>     .cursor_print_address:      resq 1
    45                              <1> 
    46 00000014 ????????????????    <1>     .font_base_address:         resq 1
    47 0000001C ????                <1>     .font_size:                 resw 1
    48 0000001E ????                <1>     .font_width:                resw 1
    49 00000020 ????                <1>     .font_height:               resw 1
    50                              <1> 
    51 00000022 ????                <1>     .pixel_line_start:          resw 1
    52 00000024 ????                <1>     .pixel_per_line:            resw 1 
    53                              <1> 
    54 00000026 ????                <1>     .default_color:             resw 1
    55 00000028 ????                <1>     .current_color:             resw 1
    56                              <1>  endstruc
    57                              <1> print_info_ptr:
    58                              <1>     istruc print_info
    59 00000B30 0000                <1>         at print_info.cursor_current_xpixel, dw 0
    60 00000B32 0000                <1>         at print_info.cursor_current_ypixel, dw 0
    61 00000B34 0000                <1>         at print_info.cursor_current_line, dw 0
    62                              <1> 
    63 00000B36 0000                <1>         at print_info.cursor_print_xpixel, dw 0
    64 00000B38 0000                <1>         at print_info.cursor_print_ypixel, dw 0
    65 00000B3A 0000                <1>         at print_info.cursor_print_line, dw 0
    66 00000B3C 0000000000000000    <1>         at print_info.cursor_print_address, dq 0
    67                              <1> 
    68 00000B44 0000000000000000    <1>         at print_info.font_base_address, dq 0
    69 00000B4C 0000                <1>         at print_info.font_size, dw 0
    70 00000B4E 0000                <1>         at print_info.font_width, dw 0
    71 00000B50 0000                <1>         at print_info.font_height, dw 0
    72                              <1> 
    73 00000B52 0000                <1>         at print_info.pixel_line_start, dw 0
    74 00000B54 0000                <1>         at print_info.pixel_per_line, dw 0
    75                              <1> 
    76 00000B56 0000                <1>         at print_info.default_color, dw 0
    77 00000B58 0000                <1>         at print_info.current_color, dw 0
    78                              <1>     iend
    79                              <1> 
    80                              <1> printk_init:
    81                              <1> 
    82                              <1>     ; mov rsi,KernelSpaceUpperAddress + VBEModeStructBufferAddr + vbe_mode_info_block.x_resolution
    83                              <1>     ; mov rbx,0
    84                              <1>     ; mov  bx, word [rsi]
    85                              <1>     prolog 0;
    63 00000B5A 55                  <2>  push rbp
    64 00000B5B 4889E5              <2>  mov rbp, rsp
    65 00000B5E 488945F8            <2>  mov [rbp-8],rax
    66 00000B62 B800000000          <2>  mov rax, %1
    67 00000B67 4883C00F            <2>  add rax, 15
    68 00000B6B 4883E0F0            <2>  and rax, ~15
    69 00000B6F 4829C4              <2>  sub rsp, rax
    70 00000B72 488B45F8            <2>  mov rax,[rbp-8]
    71                              <2>  pushallq
   115 00000B76 50                  <3>  push rax
   116 00000B77 53                  <3>  push rbx
   117 00000B78 51                  <3>  push rcx
   118 00000B79 52                  <3>  push rdx
   119 00000B7A 56                  <3>  push rsi
   120 00000B7B 57                  <3>  push rdi
   121 00000B7C 4150                <3>  push r8
   122 00000B7E 4151                <3>  push r9
   123 00000B80 4152                <3>  push r10
   124 00000B82 4153                <3>  push r11
   125 00000B84 4154                <3>  push r12
   126 00000B86 4155                <3>  push r13
   127 00000B88 4156                <3>  push r14
   128 00000B8A 4157                <3>  push r15
    72                              <2> 
    73                              <2> 
    74                              <2> 
    75                              <2> 
    76                              <2> 
    77                              <2> 
    86                              <1> 
    87 00000B8C 66C705A1FFFFFF0000  <1>     mov word [rel print_info_ptr + print_info.cursor_print_xpixel],0
    88 00000B95 66C7059AFFFFFFC800  <1>     mov word [rel print_info_ptr + print_info.cursor_print_ypixel],200
    89 00000B9E 66C70593FFFFFF0A00  <1>     mov word [rel print_info_ptr + print_info.cursor_print_line],10
    90 00000BA7 48C7058AFFFFFF00DC- <1>     mov qword [rel print_info_ptr + print_info.cursor_print_address],0x5DC00
    90 00000BB0 0500                <1>
    91                              <1> 
    92 00000BB2 66C70575FFFFFF0000  <1>     mov word [rel print_info_ptr + print_info.cursor_current_xpixel],0
    93 00000BBB 66C7056EFFFFFF0000  <1>     mov word [rel print_info_ptr + print_info.cursor_current_ypixel],0    
    94 00000BC4 66C70567FFFFFF0A00  <1>     mov word [rel print_info_ptr + print_info.cursor_current_line],10
    95                              <1> 
    96 00000BCD 48BE005210000080FF- <1>     mov rsi,0xFFFF800000105200
    96 00000BD6 FF                  <1>
    97 00000BD7 48893566FFFFFF      <1>     mov qword [rel print_info_ptr + print_info.font_base_address],rsi
    98 00000BDE 66C70565FFFFFF1000  <1>     mov word [rel print_info_ptr + print_info.font_size],16
    99 00000BE7 66C7055EFFFFFF0800  <1>     mov word [rel print_info_ptr + print_info.font_width],8
   100 00000BF0 66C70557FFFFFF1000  <1>     mov word [rel print_info_ptr + print_info.font_height],16
   101                              <1> 
   102 00000BF9 66C70550FFFFFF0400  <1>     mov word [rel print_info_ptr + print_info.pixel_line_start],4
   103 00000C02 66C70549FFFFFF1400  <1>     mov word [rel print_info_ptr + print_info.pixel_per_line],20
   104                              <1> 
   105                              <1>     ; mov word [rel print_info_ptr + print_info.default_color],0x00FFFFFF
   106                              <1>     ; mov word [rel print_info_ptr + print_info.current_color],0x00FFFFFF
   107                              <1> 
   108                              <1>     epilog
    81                              <2>  popallq
   132 00000C0B 415F                <3>  pop r15
   133 00000C0D 415E                <3>  pop r14
   134 00000C0F 415D                <3>  pop r13
   135 00000C11 415C                <3>  pop r12
   136 00000C13 415B                <3>  pop r11
   137 00000C15 415A                <3>  pop r10
   138 00000C17 4159                <3>  pop r9
   139 00000C19 4158                <3>  pop r8
   140 00000C1B 5F                  <3>  pop rdi
   141 00000C1C 5E                  <3>  pop rsi
   142 00000C1D 5A                  <3>  pop rdx
   143 00000C1E 59                  <3>  pop rcx
   144 00000C1F 5B                  <3>  pop rbx
   145 00000C20 58                  <3>  pop rax
    82                              <2> 
    83 00000C21 4889EC              <2>  mov rsp, rbp
    84 00000C24 5D                  <2>  pop rbp
    85 00000C25 C3                  <2>  ret
   109                              <1> 
   110                              <1> printk:; input: format string,pointer to arguments
   111                              <1>     prolog 2
    63 00000C26 55                  <2>  push rbp
    64 00000C27 4889E5              <2>  mov rbp, rsp
    65 00000C2A 488945F8            <2>  mov [rbp-8],rax
    66 00000C2E B802000000          <2>  mov rax, %1
    67 00000C33 4883C00F            <2>  add rax, 15
    68 00000C37 4883E0F0            <2>  and rax, ~15
    69 00000C3B 4829C4              <2>  sub rsp, rax
    70 00000C3E 488B45F8            <2>  mov rax,[rbp-8]
    71                              <2>  pushallq
   115 00000C42 50                  <3>  push rax
   116 00000C43 53                  <3>  push rbx
   117 00000C44 51                  <3>  push rcx
   118 00000C45 52                  <3>  push rdx
   119 00000C46 56                  <3>  push rsi
   120 00000C47 57                  <3>  push rdi
   121 00000C48 4150                <3>  push r8
   122 00000C4A 4151                <3>  push r9
   123 00000C4C 4152                <3>  push r10
   124 00000C4E 4153                <3>  push r11
   125 00000C50 4154                <3>  push r12
   126 00000C52 4155                <3>  push r13
   127 00000C54 4156                <3>  push r14
   128 00000C56 4157                <3>  push r15
    72                              <2> 
    73                              <2> 
    74                              <2> 
    75                              <2> 
    76                              <2> 
    77                              <2> 
   112                              <1>     get_param rsi, 1   ; rsi = format string
    89 00000C58 488B7510            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   113                              <1>     get_param rdx, 2   ; rdx = pointer to arguments
    89 00000C5C 488B5518            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   114                              <1> 
   115                              <1>     ; mov word [rel print_info_ptr + print_info.cursor_current_xpixel],0
   116                              <1>     ; mov word [rel print_info_ptr + print_info.cursor_current_ypixel],200
   117                              <1>     ; mov word [rel print_info_ptr + print_info.cursor_current_line],10
   118                              <1>     ; mov word [rel print_info_ptr + print_info.cursor_print_line],10
   119                              <1>     ; mov word [rel print_info_ptr + print_info.cursor_print_xpixel],0
   120                              <1>     ; mov word [rel print_info_ptr + print_info.cursor_print_ypixel],200
   121                              <1> 
   122 00000C60 B800000000          <1>     mov rax, 0
   123 00000C65 668B05CCFEFFFF      <1>     mov ax, word [rel print_info_ptr + print_info.cursor_print_ypixel]
   124 00000C6C BB00000000          <1>     mov rbx,0
   125 00000C71 668B1DB3F7FFFF      <1>     mov bx,word [rel video_info_ptr + video_info.xpixel]
   126 00000C78 480FAFC3            <1>     imul rax,rbx
   127 00000C7C B900000000          <1>     mov rcx,0
   128 00000C81 668B0DAEFEFFFF      <1>     mov cx,word [rel print_info_ptr + print_info.cursor_print_xpixel]
   129 00000C88 4801C8              <1>     add rax, rcx
   130 00000C8B BB00000000          <1>     mov rbx,0
   131 00000C90 8A1D99F7FFFF        <1>     mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   132 00000C96 480FAFC3            <1>     imul rax,rbx
   133                              <1>     ; jmp $
   134 00000C9A 488B3D8FF7FFFF      <1>     mov rdi, qword [rel video_info_ptr + video_info.video_framebuffer]
   135 00000CA1 4801C7              <1>     add rdi, rax
   136 00000CA4 B800000000          <1>     mov rax,0
   137                              <1> 
   138                              <1>     .next_char:
   139 00000CA9 AC                  <1>         lodsb                  ; Load next character from format string into AL
   140 00000CAA 84C0                <1>         test al, al            ; Check if end of string
   141 00000CAC 0F84A4000000        <1>         jz .done
   142                              <1> 
   143 00000CB2 3C25                <1>         cmp al, '%'            ; Check for format specifier
   144 00000CB4 750F                <1>         jne .print_char
   145                              <1>     ; jmp $
   146 00000CB6 AC                  <1>         lodsb                  ; Load format specifier
   147 00000CB7 3C64                <1>         cmp al, 'd'            ; Check for %d
   148 00000CB9 7440                <1>         je .print_decimal
   149 00000CBB 3C78                <1>         cmp al, 'x'            ; Check for %x
   150 00000CBD 744C                <1>         je .print_hex
   151 00000CBF 3C73                <1>         cmp al, 's'            ; Check for %s
   152 00000CC1 7458                <1>         je .print_string
   153 00000CC3 EBE4                <1>         jmp .next_char         ; Skip unknown specifier
   154                              <1> 
   155                              <1>     .print_char:
   156 00000CC5 BB00000000          <1>         mov rbx, 0
   157 00000CCA 88C3                <1>         mov bl, al             ; Character to print
   158                              <1> 
   159                              <1>         prepare_call 2,1
    97                              <2>  %assign total_space ((%1 + %2) * 8)
    98                              <2> 
    99                              <2>  %if (total_space % 16) != 0
   100                              <2>  %assign total_space total_space + 8
   101                              <2>  %endif
   102                              <2> 
   103 00000CCC 4883EC20            <2>  sub rsp, total_space
   160 00000CD0 48897C2408          <1>         mov qword [rsp+8], rdi
   161 00000CD5 48891C24            <1>         mov qword [rsp], rbx
   162 00000CD9 E893000000          <1>         call putc
   163                              <1>         cleanup_call 2,1
   107                              <2>  %assign total_space ((%1 + %2) * 8)
   108                              <2>  %if (total_space % 16) != 0
   109                              <2>  %assign total_space total_space + 8
   110                              <2>  %endif
   111 00000CDE 4883C420            <2>  add rsp, total_space
   164 00000CE2 488B4424F8          <1>         mov rax, [rsp-8]
   165                              <1> 
   166 00000CE7 BB00000000          <1>         mov rbx,0
   167 00000CEC 8A1D3DF7FFFF        <1>         mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   168 00000CF2 486BDB08            <1>         imul rbx,8        
   169 00000CF6 4801DF              <1>         add rdi, rbx
   170                              <1> 
   171 00000CF9 EBAE                <1>         jmp .next_char
   172                              <1> 
   173                              <1>     .print_decimal:
   174 00000CFB 52                  <1>         push rdx               ; Save argument pointer
   175 00000CFC 488B02              <1>         mov rax, [rdx]         ; Load integer argument
   176 00000CFF 4883C208            <1>         add rdx, 8             ; Move to next argument
   177 00000D03 E85F010000          <1>         call print_decimal     ; Convert and print integer
   178 00000D08 5A                  <1>         pop rdx                ; Restore argument pointer
   179 00000D09 EB9E                <1>         jmp .next_char
   180                              <1> 
   181                              <1>     .print_hex:
   182 00000D0B 52                  <1>         push rdx               ; Save argument pointer
   183 00000D0C 488B02              <1>         mov rax, [rdx]         ; Load integer argument
   184 00000D0F 4883C208            <1>         add rdx, 8             ; Move to next argument
   185 00000D13 E88F010000          <1>         call print_hex         ; Convert and print hexadecimal
   186 00000D18 5A                  <1>         pop rdx                ; Restore argument pointer
   187 00000D19 EB8E                <1>         jmp .next_char
   188                              <1> 
   189                              <1>     .print_string:
   190                              <1> 
   191                              <1> 
   192                              <1> 
   193                              <1>             prepare_call 3,1
    97                              <2>  %assign total_space ((%1 + %2) * 8)
    98                              <2> 
    99                              <2>  %if (total_space % 16) != 0
   100                              <2>  %assign total_space total_space + 8
   101                              <2>  %endif
   102                              <2> 
   103 00000D1B 4883EC20            <2>  sub rsp, total_space
   194                              <1> 
   195 00000D1F 488B32              <1>     mov rsi, [rdx]         ; Load string pointer
   196 00000D22 4889742410          <1>     mov qword [rsp+16], rsi
   197                              <1> 
   198 00000D27 48C74424083C000000  <1>     mov qword [rsp+8], 60
   199 00000D30 48C7042400000000    <1>     mov qword [rsp], 0
   200 00000D38 E8C5030000          <1>     call draw_string
   201                              <1>     cleanup_call 3,1
   107                              <2>  %assign total_space ((%1 + %2) * 8)
   108                              <2>  %if (total_space % 16) != 0
   109                              <2>  %assign total_space total_space + 8
   110                              <2>  %endif
   111 00000D3D 4883C420            <2>  add rsp, total_space
   202 00000D41 488B4424F8          <1>     mov rax, [rsp-8]
   203                              <1> 
   204 00000D46 52                  <1>         push rdx               ; Save argument pointer
   205                              <1>         
   206 00000D47 4883C208            <1>         add rdx, 8             ; Move to next argument
   207 00000D4B E8B2030000          <1>         call draw_string       ; Print string
   208 00000D50 5A                  <1>         pop rdx                ; Restore argument pointer
   209 00000D51 E953FFFFFF          <1>         jmp .next_char
   210                              <1> 
   211                              <1>     .done:
   212                              <1>         epilog
    81                              <2>  popallq
   132 00000D56 415F                <3>  pop r15
   133 00000D58 415E                <3>  pop r14
   134 00000D5A 415D                <3>  pop r13
   135 00000D5C 415C                <3>  pop r12
   136 00000D5E 415B                <3>  pop r11
   137 00000D60 415A                <3>  pop r10
   138 00000D62 4159                <3>  pop r9
   139 00000D64 4158                <3>  pop r8
   140 00000D66 5F                  <3>  pop rdi
   141 00000D67 5E                  <3>  pop rsi
   142 00000D68 5A                  <3>  pop rdx
   143 00000D69 59                  <3>  pop rcx
   144 00000D6A 5B                  <3>  pop rbx
   145 00000D6B 58                  <3>  pop rax
    82                              <2> 
    83 00000D6C 4889EC              <2>  mov rsp, rbp
    84 00000D6F 5D                  <2>  pop rbp
    85 00000D70 C3                  <2>  ret
   213                              <1> 
   214                              <1> putc: ; input: rbx=char,rdi=vga_address ;draw a character
   215                              <1> 
   216                              <1>     prolog 2;
    63 00000D71 55                  <2>  push rbp
    64 00000D72 4889E5              <2>  mov rbp, rsp
    65 00000D75 488945F8            <2>  mov [rbp-8],rax
    66 00000D79 B802000000          <2>  mov rax, %1
    67 00000D7E 4883C00F            <2>  add rax, 15
    68 00000D82 4883E0F0            <2>  and rax, ~15
    69 00000D86 4829C4              <2>  sub rsp, rax
    70 00000D89 488B45F8            <2>  mov rax,[rbp-8]
    71                              <2>  pushallq
   115 00000D8D 50                  <3>  push rax
   116 00000D8E 53                  <3>  push rbx
   117 00000D8F 51                  <3>  push rcx
   118 00000D90 52                  <3>  push rdx
   119 00000D91 56                  <3>  push rsi
   120 00000D92 57                  <3>  push rdi
   121 00000D93 4150                <3>  push r8
   122 00000D95 4151                <3>  push r9
   123 00000D97 4152                <3>  push r10
   124 00000D99 4153                <3>  push r11
   125 00000D9B 4154                <3>  push r12
   126 00000D9D 4155                <3>  push r13
   127 00000D9F 4156                <3>  push r14
   128 00000DA1 4157                <3>  push r15
    72                              <2> 
    73                              <2> 
    74                              <2> 
    75                              <2> 
    76                              <2> 
    77                              <2> 
   217                              <1>     get_param rbx, 1   ; x
    89 00000DA3 488B5D10            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   218                              <1>     get_param rdi, 2   ; y
    89 00000DA7 488B7D18            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   219                              <1> 
   220 00000DAB 4831C0              <1>     xor rax, rax
   221 00000DAE 88D8                <1>     mov al, bl
   222 00000DB0 48C1E004            <1>     shl rax, 4                 ; 乘以16(每个字符16字节)
   223                              <1> 
   224 00000DB4 56                  <1>     push rsi
   225 00000DB5 488B3588FDFFFF      <1>     mov rsi, [rel print_info_ptr + print_info.font_base_address]
   226 00000DBC 4801C6              <1>     add rsi, rax         ; RSI = 字符数据地址
   227 00000DBF 4889F0              <1>     mov rax,rsi
   228 00000DC2 4889C3              <1>     mov rbx,rax
   229 00000DC5 5E                  <1>     pop rsi
   230 00000DC6 B910000000          <1>     mov rcx, 16                ; 16行高度
   231 00000DCB 57                  <1>     push rdi               ; 保存当前行起始位置
   232                              <1>     .next_line:
   233 00000DCC 57                  <1>         push rdi               ; 保存当前行起始位置
   234                              <1>         
   235                              <1>         ; 处理一行(8像素)
   236 00000DCD 8A13                <1>         mov dl, [rbx]          ; 获取字模数据
   237 00000DCF B608                <1>         mov dh, 8              ; 8位/行
   238                              <1>         .next_pixel:
   239 00000DD1 4831C0              <1>             xor rax,rax
   240 00000DD4 8A0555F6FFFF        <1>             mov al,byte [rel video_info_ptr + video_info.byte_per_pixel]
   241                              <1> 
   242 00000DDA F6C280              <1>             test dl, 0x80       ; 测试最高位
   243 00000DDD 7413                <1>             jz .skip_pixel
   244                              <1> 
   245                              <1> 
   246 00000DDF 3C04                <1>             cmp al,4
   247 00000DE1 7208                <1>             jb .pixel_2byte
   248 00000DE3 C64702FF            <1>             mov byte [rdi+2], 0xFF ; 绘制像素(白色)
   249 00000DE7 C6470300            <1>             mov byte [rdi+3], 0x00 ; 绘制像素(白色)
   250                              <1>             .pixel_2byte:
   251 00000DEB C607FF              <1>                 mov byte [rdi], 0xFF ; 绘制像素(白色)
   252 00000DEE C64701FF            <1>                 mov byte [rdi+1], 0xFF ; 绘制像素(白色)
   253                              <1>             ; jmp $
   254                              <1>         .skip_pixel:
   255 00000DF2 D0E2                <1>             shl dl, 1           ; 移到下一位
   256 00000DF4 4801C7              <1>             add rdi,rax
   257 00000DF7 FECE                <1>             dec dh
   258 00000DF9 75D6                <1>             jnz .next_pixel
   259                              <1>         
   260 00000DFB 5F                  <1>         pop rdi                 ; 恢复行起始位置
   261 00000DFC 4831C0              <1>         xor rax,rax
   262 00000DFF 668B0525F6FFFF      <1>         mov ax,word [rel video_info_ptr + video_info.xpixel]
   263                              <1> 
   264 00000E06 4989D8              <1>         mov r8,rbx
   265 00000E09 BB00000000          <1>         mov rbx,0
   266 00000E0E 8A1D1BF6FFFF        <1>         mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   267 00000E14 480FAFC3            <1>         imul rax,rbx
   268 00000E18 4C89C3              <1>         mov rbx,r8
   269 00000E1B 4801C7              <1>         add rdi,rax; 移到下一行(320=屏幕宽度)
   270                              <1>         ; jmp $
   271 00000E1E 48FFC3              <1>         inc rbx                 ; 下一个字模字节
   272                              <1> 
   273 00000E21 E2A9                <1>         loop .next_line
   274                              <1>                 ; jmp $
   275 00000E23 5F                  <1>     pop rdi                 ; 恢复行起始位置
   276                              <1>     epilog
    81                              <2>  popallq
   132 00000E24 415F                <3>  pop r15
   133 00000E26 415E                <3>  pop r14
   134 00000E28 415D                <3>  pop r13
   135 00000E2A 415C                <3>  pop r12
   136 00000E2C 415B                <3>  pop r11
   137 00000E2E 415A                <3>  pop r10
   138 00000E30 4159                <3>  pop r9
   139 00000E32 4158                <3>  pop r8
   140 00000E34 5F                  <3>  pop rdi
   141 00000E35 5E                  <3>  pop rsi
   142 00000E36 5A                  <3>  pop rdx
   143 00000E37 59                  <3>  pop rcx
   144 00000E38 5B                  <3>  pop rbx
   145 00000E39 58                  <3>  pop rax
    82                              <2> 
    83 00000E3A 4889EC              <2>  mov rsp, rbp
    84 00000E3D 5D                  <2>  pop rbp
    85 00000E3E C3                  <2>  ret
   277                              <1> 
   278                              <1> print:
   279 00000E3F 4883F900            <1>     cmp rcx, 0
   280 00000E43 7421                <1>     je .done
   281 00000E45 53                  <1>     push rbx
   282 00000E46 BBA0000000          <1>     mov rbx,    160
   283 00000E4B 48F7E3              <1>     mul rbx
   284 00000E4E 4801C7              <1>     add rdi, rax
   285 00000E51 5B                  <1>     pop rbx
   286                              <1>     .str:
   287 00000E52 8A06                <1>         mov al, [rsi]
   288 00000E54 8807                <1>         mov [rdi], al
   289 00000E56 4883C702            <1>         add rdi,2
   290 00000E5A 48FFC6              <1>         inc rsi
   291 00000E5D 48FFC9              <1>         dec rcx
   292 00000E60 4883F900            <1>         cmp rcx, 0
   293 00000E64 75EC                <1>         jne .str
   294                              <1>     .done:
   295 00000E66 C3                  <1>         ret
   296                              <1> print_decimal:
   297 00000E67 53                  <1>     push rbx
   298 00000E68 51                  <1>     push rcx
   299 00000E69 52                  <1>     push rdx
   300 00000E6A 4831DB              <1>     xor rbx, rbx
   301 00000E6D BB0A000000          <1>     mov rbx, 10              ; Base 10
   302 00000E72 4831C9              <1>     xor rcx, rcx             ; Digit counter
   303                              <1> 
   304                              <1>     .convert_loop:
   305 00000E75 4831D2              <1>         xor rdx, rdx
   306 00000E78 48F7F3              <1>         div rbx              ; Divide rax by 10, remainder in rdx
   307 00000E7B 52                  <1>         push rdx             ; Save remainder (digit)
   308 00000E7C 48FFC1              <1>         inc rcx              ; Increment digit counter
   309 00000E7F 4885C0              <1>         test rax, rax
   310 00000E82 75F1                <1>         jnz .convert_loop    ; Repeat until rax == 0
   311                              <1> 
   312                              <1>     .print_digits:
   313 00000E84 5A                  <1>         pop rdx              ; Get digit from stack
   314 00000E85 80C230              <1>         add dl, '0'          ; Convert to ASCII
   315 00000E88 4889D3              <1>         mov rbx, rdx
   316                              <1>         prepare_call 2, 1
    97                              <2>  %assign total_space ((%1 + %2) * 8)
    98                              <2> 
    99                              <2>  %if (total_space % 16) != 0
   100                              <2>  %assign total_space total_space + 8
   101                              <2>  %endif
   102                              <2> 
   103 00000E8B 4883EC20            <2>  sub rsp, total_space
   317 00000E8F 48897C2408          <1>         mov qword [rsp+8], rdi ; VGA address
   318 00000E94 48891C24            <1>         mov qword [rsp], rbx   ; Character
   319 00000E98 E8D4FEFFFF          <1>         call putc
   320                              <1>         cleanup_call 2, 1
   107                              <2>  %assign total_space ((%1 + %2) * 8)
   108                              <2>  %if (total_space % 16) != 0
   109                              <2>  %assign total_space total_space + 8
   110                              <2>  %endif
   111 00000E9D 4883C420            <2>  add rsp, total_space
   321 00000EA1 E2E1                <1>         loop .print_digits
   322                              <1> 
   323 00000EA3 5A                  <1>     pop rdx
   324 00000EA4 59                  <1>     pop rcx
   325 00000EA5 5B                  <1>     pop rbx
   326 00000EA6 C3                  <1>     ret
   327                              <1> 
   328                              <1> print_hex:
   329 00000EA7 53                  <1>     push rbx
   330 00000EA8 51                  <1>     push rcx
   331 00000EA9 52                  <1>     push rdx
   332 00000EAA B910000000          <1>     mov rcx, 16              ; Process 16 digits (64-bit number)
   333                              <1>     .convert_loop:
   334 00000EAF 48C1C004            <1>         rol rax, 4           ; Rotate left by 4 bits
   335 00000EB3 88C2                <1>         mov dl, al           ; Extract lower nibble
   336 00000EB5 80E20F              <1>         and dl, 0x0F         ; Mask to get a single hex digit
   337 00000EB8 80FA0A              <1>         cmp dl, 10
   338 00000EBB 7C05                <1>         jl .digit
   339 00000EBD 80C237              <1>         add dl, 'A' - 10     ; Convert to 'A'-'F'
   340 00000EC0 EB03                <1>         jmp .output
   341                              <1>     .digit:
   342 00000EC2 80C230              <1>         add dl, '0'          ; Convert to '0'-'9'
   343                              <1>     .output:
   344 00000EC5 4889D3              <1>         mov rbx, rdx
   345                              <1>         prepare_call 2, 1
    97                              <2>  %assign total_space ((%1 + %2) * 8)
    98                              <2> 
    99                              <2>  %if (total_space % 16) != 0
   100                              <2>  %assign total_space total_space + 8
   101                              <2>  %endif
   102                              <2> 
   103 00000EC8 4883EC20            <2>  sub rsp, total_space
   346 00000ECC 48897C2408          <1>         mov qword [rsp+8], rdi ; VGA address
   347 00000ED1 48891C24            <1>         mov qword [rsp], rbx   ; Character
   348 00000ED5 E897FEFFFF          <1>         call putc
   349                              <1>         cleanup_call 2, 1
   107                              <2>  %assign total_space ((%1 + %2) * 8)
   108                              <2>  %if (total_space % 16) != 0
   109                              <2>  %assign total_space total_space + 8
   110                              <2>  %endif
   111 00000EDA 4883C420            <2>  add rsp, total_space
   350 00000EDE E2CF                <1>         loop .convert_loop
   351                              <1> 
   352 00000EE0 5A                  <1>     pop rdx
   353 00000EE1 59                  <1>     pop rcx
   354 00000EE2 5B                  <1>     pop rbx
   355 00000EE3 C3                  <1>     ret
   356                              <1> print_hex_str:
   357 00000EE4 4883F900            <1>     cmp rcx, 0
   358 00000EE8 743D                <1>     je .done
   359                              <1> 
   360 00000EEA 50                  <1>     push rax
   361 00000EEB B880070000          <1>     mov rax,    1920
   362 00000EF0 48F7E3              <1>     mul rbx
   363 00000EF3 4889C3              <1>     mov rbx,rax
   364 00000EF6 58                  <1>     pop rax
   365 00000EF7 4801D8              <1>     add rax ,rbx
   366 00000EFA 4889C3              <1>     mov rbx,rax
   367                              <1> 
   368 00000EFD B804000000          <1>     mov rax,4
   369 00000F02 48F7E3              <1>     mul rbx
   370 00000F05 4801C7              <1>     add rdi, rax
   371                              <1> 
   372                              <1>     .str:
   373 00000F08 51                  <1>         push rcx
   374 00000F09 E81A000000          <1>         call print_hex_byte
   375                              <1> 
   376 00000F0E 48FFC6              <1>         inc rsi
   377 00000F11 E812000000          <1>         call print_hex_byte
   378                              <1>                 ; jmp $
   379 00000F16 48FFC6              <1>         inc rsi
   380 00000F19 4883C720            <1>         add rdi,32
   381 00000F1D 59                  <1>         pop rcx
   382 00000F1E 48FFC9              <1>         dec rcx
   383 00000F21 4883F900            <1>         cmp rcx, 0
   384 00000F25 75E1                <1>         jne .str
   385                              <1>     .done:
   386 00000F27 C3                  <1>         ret
   387                              <1> print_hex_byte:
   388 00000F28 4831C0              <1>         xor rax,rax
   389 00000F2B 4831DB              <1>         xor rbx,rbx
   390 00000F2E 8A1E                <1>         mov bl, [rsi]
   391                              <1>         .h4:
   392 00000F30 88D8                <1>             mov al, bl
   393 00000F32 C0E804              <1>             shr al, 4
   394                              <1> 
   395 00000F35 3C0A                <1>             cmp al, 10
   396 00000F37 7C02                <1>             jl .digit_h4
   397 00000F39 0407                <1>             add al, 'A'-'0'-10   ; 转换为A-F
   398                              <1>             .digit_h4:
   399 00000F3B 0430                <1>                 add al, '0'          ; 转换为0-9
   400 00000F3D 88C3                <1>                 mov bl, al
   401 00000F3F E82DFEFFFF          <1>                 call putc
   402                              <1>                 ; mov [rdi], al
   403                              <1>                 ; add rdi,2
   404 00000F44 4883C720            <1>                 add rdi,32
   405                              <1> 
   406                              <1>         .l4:
   407 00000F48 4831C0              <1>                 xor rax,rax
   408 00000F4B 4831DB              <1>         xor rbx,rbx
   409 00000F4E 8A1E                <1>         mov bl, [rsi]
   410 00000F50 88D8                <1>             mov al, bl
   411 00000F52 240F                <1>             and al, 0x0F
   412 00000F54 3C0A                <1>             cmp al, 10
   413 00000F56 7C02                <1>             jl .digit_l4
   414 00000F58 0407                <1>             add al, 'A'-'0'-10   ; 转换为A-F
   415                              <1>             .digit_l4:
   416 00000F5A 0430                <1>                 add al, '0'          ; 转换为0-9
   417 00000F5C 88C3                <1>                 mov bl, al
   418 00000F5E E80EFEFFFF          <1>                 call putc
   419 00000F63 4883C720            <1>                 add rdi,32
   420                              <1>                 ; mov [rdi], al
   421                              <1>                 ; add rdi,2
   422 00000F67 C3                  <1>         ret
   423                              <1> 
   424                              <1> 
   425                              <1> flush_framebuffer:
   426                              <1>     prolog 0;
    63 00000F68 55                  <2>  push rbp
    64 00000F69 4889E5              <2>  mov rbp, rsp
    65 00000F6C 488945F8            <2>  mov [rbp-8],rax
    66 00000F70 B800000000          <2>  mov rax, %1
    67 00000F75 4883C00F            <2>  add rax, 15
    68 00000F79 4883E0F0            <2>  and rax, ~15
    69 00000F7D 4829C4              <2>  sub rsp, rax
    70 00000F80 488B45F8            <2>  mov rax,[rbp-8]
    71                              <2>  pushallq
   115 00000F84 50                  <3>  push rax
   116 00000F85 53                  <3>  push rbx
   117 00000F86 51                  <3>  push rcx
   118 00000F87 52                  <3>  push rdx
   119 00000F88 56                  <3>  push rsi
   120 00000F89 57                  <3>  push rdi
   121 00000F8A 4150                <3>  push r8
   122 00000F8C 4151                <3>  push r9
   123 00000F8E 4152                <3>  push r10
   124 00000F90 4153                <3>  push r11
   125 00000F92 4154                <3>  push r12
   126 00000F94 4155                <3>  push r13
   127 00000F96 4156                <3>  push r14
   128 00000F98 4157                <3>  push r15
    72                              <2> 
    73                              <2> 
    74                              <2> 
    75                              <2> 
    76                              <2> 
    77                              <2> 
   427 00000F9A B800000000          <1>     mov rax, 0
   428 00000F9F 668B0592FBFFFF      <1>     mov ax, word [rel print_info_ptr + print_info.cursor_print_ypixel]
   429 00000FA6 BB00000000          <1>     mov rbx,0
   430 00000FAB 668B1D79F4FFFF      <1>     mov bx,word [rel video_info_ptr + video_info.xpixel]
   431 00000FB2 480FAFC3            <1>     imul rax,rbx
   432 00000FB6 B900000000          <1>     mov rcx,0
   433 00000FBB 668B0D74FBFFFF      <1>     mov cx,word [rel print_info_ptr + print_info.cursor_print_xpixel]
   434 00000FC2 4801C8              <1>     add rax, rcx
   435 00000FC5 BB00000000          <1>     mov rbx,0
   436 00000FCA 8A1D5FF4FFFF        <1>     mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   437 00000FD0 480FAFC3            <1>     imul rax,rbx
   438                              <1>     ; jmp $
   439 00000FD4 488B3D55F4FFFF      <1>     mov rdi, qword [rel video_info_ptr + video_info.video_framebuffer]
   440 00000FDB 4801C7              <1>     add rdi, rax
   441 00000FDE B800000000          <1>     mov rax,0
   442                              <1>     epilog
    81                              <2>  popallq
   132 00000FE3 415F                <3>  pop r15
   133 00000FE5 415E                <3>  pop r14
   134 00000FE7 415D                <3>  pop r13
   135 00000FE9 415C                <3>  pop r12
   136 00000FEB 415B                <3>  pop r11
   137 00000FED 415A                <3>  pop r10
   138 00000FEF 4159                <3>  pop r9
   139 00000FF1 4158                <3>  pop r8
   140 00000FF3 5F                  <3>  pop rdi
   141 00000FF4 5E                  <3>  pop rsi
   142 00000FF5 5A                  <3>  pop rdx
   143 00000FF6 59                  <3>  pop rcx
   144 00000FF7 5B                  <3>  pop rbx
   145 00000FF8 58                  <3>  pop rax
    82                              <2> 
    83 00000FF9 4889EC              <2>  mov rsp, rbp
    84 00000FFC 5D                  <2>  pop rbp
    85 00000FFD C3                  <2>  ret
   443                              <1> 
   444                              <1> 
   445                              <1> 
   446                              <1> 
   447                              <1> 
   448                              <1> draw_char:; input: x,y,char; draw a character
   449                              <1>     prolog 2;
    63 00000FFE 55                  <2>  push rbp
    64 00000FFF 4889E5              <2>  mov rbp, rsp
    65 00001002 488945F8            <2>  mov [rbp-8],rax
    66 00001006 B802000000          <2>  mov rax, %1
    67 0000100B 4883C00F            <2>  add rax, 15
    68 0000100F 4883E0F0            <2>  and rax, ~15
    69 00001013 4829C4              <2>  sub rsp, rax
    70 00001016 488B45F8            <2>  mov rax,[rbp-8]
    71                              <2>  pushallq
   115 0000101A 50                  <3>  push rax
   116 0000101B 53                  <3>  push rbx
   117 0000101C 51                  <3>  push rcx
   118 0000101D 52                  <3>  push rdx
   119 0000101E 56                  <3>  push rsi
   120 0000101F 57                  <3>  push rdi
   121 00001020 4150                <3>  push r8
   122 00001022 4151                <3>  push r9
   123 00001024 4152                <3>  push r10
   124 00001026 4153                <3>  push r11
   125 00001028 4154                <3>  push r12
   126 0000102A 4155                <3>  push r13
   127 0000102C 4156                <3>  push r14
   128 0000102E 4157                <3>  push r15
    72                              <2> 
    73                              <2> 
    74                              <2> 
    75                              <2> 
    76                              <2> 
    77                              <2> 
   450                              <1>     get_param r8, 1   ; x
    89 00001030 4C8B4510            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   451                              <1>     get_param r9, 2   ; y
    89 00001034 4C8B4D18            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   452                              <1>     get_param rsi, 3   ; char
    89 00001038 488B7520            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   453                              <1> 
   454 0000103C B800000000          <1>     mov rax, 0
   455 00001041 4C89C8              <1>     mov rax, r9
   456                              <1> 
   457 00001044 BB00000000          <1>     mov rbx,0
   458 00001049 668B1DDBF3FFFF      <1>     mov bx,word [rel video_info_ptr + video_info.xpixel]
   459 00001050 480FAFC3            <1>     imul rax,rbx
   460                              <1> 
   461 00001054 B900000000          <1>     mov rcx,0
   462 00001059 4C89C1              <1>     mov rcx,r8
   463 0000105C 4801C8              <1>     add rax, rcx
   464                              <1> 
   465 0000105F BB00000000          <1>     mov rbx,0
   466 00001064 8A1DC5F3FFFF        <1>     mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   467 0000106A 480FAFC3            <1>     imul rax,rbx
   468                              <1>     ; jmp $
   469 0000106E 488B3DBBF3FFFF      <1>     mov rdi, qword [rel video_info_ptr + video_info.video_framebuffer]
   470 00001075 4801C7              <1>     add rdi, rax        ;rdi=屏幕地址
   471                              <1> 
   472                              <1> 
   473 00001078 4831C0              <1>     xor rax, rax
   474 0000107B 4889F0              <1>     mov rax,rsi
   475                              <1> 
   476 0000107E 48C1E004            <1>     shl rax, 4                 ; 乘以16(每个字符16字节)
   477 00001082 488B1DBBFAFFFF      <1>     mov rbx, [rel print_info_ptr + print_info.font_base_address]
   478 00001089 4801C3              <1>     add rbx, rax         ; RSI = 字符数据地址
   479 0000108C 4889DE              <1>     mov rsi,rbx
   480                              <1> 
   481                              <1> 
   482 0000108F B910000000          <1>     mov rcx, 16                ; 16行高度
   483 00001094 57                  <1>     push rdi               ; 保存当前行起始位置
   484                              <1>     .next_line:
   485 00001095 57                  <1>         push rdi               ; 保存当前行起始位置
   486                              <1>         
   487                              <1>         ; 处理一行(8像素)
   488 00001096 8A16                <1>         mov dl, [rsi]          ; 获取字模数据
   489 00001098 B608                <1>         mov dh, 8              ; 8位/行
   490                              <1>         .next_pixel:
   491 0000109A 4831C0              <1>             xor rax,rax
   492 0000109D 8A058CF3FFFF        <1>             mov al,byte [rel video_info_ptr + video_info.byte_per_pixel]
   493                              <1> 
   494 000010A3 F6C280              <1>             test dl, 0x80       ; 测试最高位
   495 000010A6 7413                <1>             jz .skip_pixel
   496                              <1> 
   497                              <1> 
   498 000010A8 3C04                <1>             cmp al,4
   499 000010AA 7208                <1>             jb .pixel_2byte
   500 000010AC C64702FF            <1>             mov byte [rdi+2], 0xFF ; 绘制像素(白色)
   501 000010B0 C6470300            <1>             mov byte [rdi+3], 0x00 ; 绘制像素(白色)
   502                              <1>             .pixel_2byte:
   503 000010B4 C607FF              <1>                 mov byte [rdi], 0xFF ; 绘制像素(白色)
   504 000010B7 C64701FF            <1>                 mov byte [rdi+1], 0xFF ; 绘制像素(白色)
   505                              <1>             ; jmp $
   506                              <1>         .skip_pixel:
   507 000010BB D0E2                <1>             shl dl, 1           ; 移到下一位
   508 000010BD 4801C7              <1>             add rdi,rax
   509 000010C0 FECE                <1>             dec dh
   510 000010C2 75D6                <1>             jnz .next_pixel
   511                              <1>         
   512 000010C4 5F                  <1>         pop rdi                 ; 恢复行起始位置
   513                              <1> 
   514 000010C5 4831C0              <1>         xor rax,rax
   515 000010C8 668B055CF3FFFF      <1>         mov ax,word [rel video_info_ptr + video_info.xpixel]
   516                              <1> 
   517 000010CF BB00000000          <1>         mov rbx,0
   518 000010D4 8A1D55F3FFFF        <1>         mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   519 000010DA 480FAFC3            <1>         imul rax,rbx
   520 000010DE 4801C7              <1>         add rdi,rax
   521 000010E1 48FFC6              <1>         inc rsi                 ; next char font
   522 000010E4 E2AF                <1>         loop .next_line
   523                              <1>                 ; jmp $
   524 000010E6 5F                  <1>     pop rdi                 ; 恢复行起始位置
   525                              <1>     epilog
    81                              <2>  popallq
   132 000010E7 415F                <3>  pop r15
   133 000010E9 415E                <3>  pop r14
   134 000010EB 415D                <3>  pop r13
   135 000010ED 415C                <3>  pop r12
   136 000010EF 415B                <3>  pop r11
   137 000010F1 415A                <3>  pop r10
   138 000010F3 4159                <3>  pop r9
   139 000010F5 4158                <3>  pop r8
   140 000010F7 5F                  <3>  pop rdi
   141 000010F8 5E                  <3>  pop rsi
   142 000010F9 5A                  <3>  pop rdx
   143 000010FA 59                  <3>  pop rcx
   144 000010FB 5B                  <3>  pop rbx
   145 000010FC 58                  <3>  pop rax
    82                              <2> 
    83 000010FD 4889EC              <2>  mov rsp, rbp
    84 00001100 5D                  <2>  pop rbp
    85 00001101 C3                  <2>  ret
   526                              <1> 
   527                              <1> 
   528                              <1> 
   529                              <1> draw_string:; input: x,y,string; draw string
   530                              <1>     prolog 2;
    63 00001102 55                  <2>  push rbp
    64 00001103 4889E5              <2>  mov rbp, rsp
    65 00001106 488945F8            <2>  mov [rbp-8],rax
    66 0000110A B802000000          <2>  mov rax, %1
    67 0000110F 4883C00F            <2>  add rax, 15
    68 00001113 4883E0F0            <2>  and rax, ~15
    69 00001117 4829C4              <2>  sub rsp, rax
    70 0000111A 488B45F8            <2>  mov rax,[rbp-8]
    71                              <2>  pushallq
   115 0000111E 50                  <3>  push rax
   116 0000111F 53                  <3>  push rbx
   117 00001120 51                  <3>  push rcx
   118 00001121 52                  <3>  push rdx
   119 00001122 56                  <3>  push rsi
   120 00001123 57                  <3>  push rdi
   121 00001124 4150                <3>  push r8
   122 00001126 4151                <3>  push r9
   123 00001128 4152                <3>  push r10
   124 0000112A 4153                <3>  push r11
   125 0000112C 4154                <3>  push r12
   126 0000112E 4155                <3>  push r13
   127 00001130 4156                <3>  push r14
   128 00001132 4157                <3>  push r15
    72                              <2> 
    73                              <2> 
    74                              <2> 
    75                              <2> 
    76                              <2> 
    77                              <2> 
   531                              <1>     get_param r8, 1   ; x
    89 00001134 4C8B4510            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   532                              <1>     get_param r9, 2   ; y
    89 00001138 4C8B4D18            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   533                              <1>     get_param rsi, 3   ; string
    89 0000113C 488B7520            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   534                              <1> 
   535                              <1>     ; mov rax, 0
   536                              <1>     ; mov rax, r9
   537                              <1>     ; mov rbx,0
   538                              <1>     ; mov bx,word [rel video_info_ptr + video_info.xpixel]
   539                              <1>     ; imul rax,rbx
   540                              <1>     ; add rax, r8
   541                              <1> 
   542                              <1>     ; mov rax, 8
   543                              <1>     ; mov rbx,0
   544                              <1>     ; mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   545                              <1>     ; imul rax,rbx
   546                              <1> 
   547                              <1>     ; jmp $
   548                              <1>     ; mov rdi, qword [rel video_info_ptr + video_info.video_framebuffer]
   549                              <1>     ; add rdi, rax
   550                              <1>     ; mov rax,0
   551                              <1>     ; jmp $
   552                              <1>     .next_char:
   553 00001140 AC                  <1>         lodsb                  
   554 00001141 84C0                <1>         test al, al
   555                              <1>         ; jmp $
   556 00001143 743B                <1>         jz .done
   557 00001145 BB00000000          <1>         mov rbx, 0
   558 0000114A 88C3                <1>         mov bl, al
   559                              <1> 
   560                              <1>         ; prepare_call 2,1
   561                              <1>         ; mov qword [rsp+8], rdi
   562                              <1>         ; mov qword [rsp], rbx
   563                              <1>         ; call putc
   564                              <1>         ; cleanup_call 2,1
   565                              <1>         ; mov rax, [rsp-8]
   566                              <1> 
   567                              <1>         function draw_char,1,r8,r9,rbx
    24                              <2>  %assign param_count %0 - 2
    25                              <2> 
    26                              <2>  %if param_count < 0
    27                              <2>  %assign param_count 0
    28                              <2>  %endif
    29                              <2>  %if param_count < 1
    30                              <2>  %assign ret_param_count 0
    31                              <2>  %else
    32                              <2>  %assign ret_param_count %2
    33                              <2>  %endif
    34                              <2> 
    35                              <2> 
    36                              <2>  prepare_call param_count, ret_param_count
    97                              <3>  %assign total_space ((%1 + %2) * 8)
    98                              <3> 
    99                              <3>  %if (total_space % 16) != 0
   100                              <3>  %assign total_space total_space + 8
   101                              <3>  %endif
   102                              <3> 
   103 0000114C 4883EC20            <3>  sub rsp, total_space
    37                              <2> 
    38                              <2> 
    39                              <2>  %if param_count > 0
    40                              <2>  %assign i 0
    41 00001150 48894424F8          <2>  mov [rsp-8], rax
    42                              <2>  %rep param_count
    43                              <2>  %rotate 1
    44                              <2>  mov rax, %2
    45                              <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    47                              <2>  %endrep
    43                              <3>  %rotate 1
    44 00001155 4C89C0              <3>  mov rax, %2
    45 00001158 48890424            <3>  mov [rsp + 8*i], rax
    46                              <3>  %assign i i+1
    43                              <3>  %rotate 1
    44 0000115C 4C89C8              <3>  mov rax, %2
    45 0000115F 4889442408          <3>  mov [rsp + 8*i], rax
    46                              <3>  %assign i i+1
    43                              <3>  %rotate 1
    44 00001164 4889D8              <3>  mov rax, %2
    45 00001167 4889442410          <3>  mov [rsp + 8*i], rax
    46                              <3>  %assign i i+1
    48                              <2> 
    49                              <2>  %rotate 1
    50                              <2>  %rotate 1
    51 0000116C 488B4424F8          <2>  mov rax,[rsp-8]
    52                              <2>  %endif
    53                              <2> 
    54                              <2> 
    55 00001171 E888FEFFFF          <2>  call %1
    56                              <2> 
    57                              <2> 
    58                              <2>  cleanup_call param_count, ret_param_count
   107                              <3>  %assign total_space ((%1 + %2) * 8)
   108                              <3>  %if (total_space % 16) != 0
   109                              <3>  %assign total_space total_space + 8
   110                              <3>  %endif
   111 00001176 4883C420            <3>  add rsp, total_space
    59                              <2> 
   568 0000117A 4983C008            <1>         add r8, 8
   569                              <1>         ; mov rbx,0
   570                              <1>         ; mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   571                              <1>         ; imul rbx,8        
   572                              <1>         ; add rdi, rbx
   573                              <1>                 
   574 0000117E EBC0                <1>         jmp .next_char
   575                              <1>     .done:
   576                              <1>     epilog
    81                              <2>  popallq
   132 00001180 415F                <3>  pop r15
   133 00001182 415E                <3>  pop r14
   134 00001184 415D                <3>  pop r13
   135 00001186 415C                <3>  pop r12
   136 00001188 415B                <3>  pop r11
   137 0000118A 415A                <3>  pop r10
   138 0000118C 4159                <3>  pop r9
   139 0000118E 4158                <3>  pop r8
   140 00001190 5F                  <3>  pop rdi
   141 00001191 5E                  <3>  pop rsi
   142 00001192 5A                  <3>  pop rdx
   143 00001193 59                  <3>  pop rcx
   144 00001194 5B                  <3>  pop rbx
   145 00001195 58                  <3>  pop rax
    82                              <2> 
    83 00001196 4889EC              <2>  mov rsp, rbp
    84 00001199 5D                  <2>  pop rbp
    85 0000119A C3                  <2>  ret
   577                              <1> 
   578                              <1> draw_hex:; input: x,y,hex; draw hex
   579                              <1>     prolog 2;
    63 0000119B 55                  <2>  push rbp
    64 0000119C 4889E5              <2>  mov rbp, rsp
    65 0000119F 488945F8            <2>  mov [rbp-8],rax
    66 000011A3 B802000000          <2>  mov rax, %1
    67 000011A8 4883C00F            <2>  add rax, 15
    68 000011AC 4883E0F0            <2>  and rax, ~15
    69 000011B0 4829C4              <2>  sub rsp, rax
    70 000011B3 488B45F8            <2>  mov rax,[rbp-8]
    71                              <2>  pushallq
   115 000011B7 50                  <3>  push rax
   116 000011B8 53                  <3>  push rbx
   117 000011B9 51                  <3>  push rcx
   118 000011BA 52                  <3>  push rdx
   119 000011BB 56                  <3>  push rsi
   120 000011BC 57                  <3>  push rdi
   121 000011BD 4150                <3>  push r8
   122 000011BF 4151                <3>  push r9
   123 000011C1 4152                <3>  push r10
   124 000011C3 4153                <3>  push r11
   125 000011C5 4154                <3>  push r12
   126 000011C7 4155                <3>  push r13
   127 000011C9 4156                <3>  push r14
   128 000011CB 4157                <3>  push r15
    72                              <2> 
    73                              <2> 
    74                              <2> 
    75                              <2> 
    76                              <2> 
    77                              <2> 
   580                              <1>     get_param r8, 1   ; x
    89 000011CD 4C8B4510            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   581                              <1>     get_param r9, 2   ; y
    89 000011D1 4C8B4D18            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   582                              <1>     get_param rsi, 3   ; hex
    89 000011D5 488B7520            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   583                              <1> 
   584 000011D9 BB30000000          <1>     mov rbx,'0'
   585                              <1>     function draw_char,1,r8,r9,rbx
    24                              <2>  %assign param_count %0 - 2
    25                              <2> 
    26                              <2>  %if param_count < 0
    27                              <2>  %assign param_count 0
    28                              <2>  %endif
    29                              <2>  %if param_count < 1
    30                              <2>  %assign ret_param_count 0
    31                              <2>  %else
    32                              <2>  %assign ret_param_count %2
    33                              <2>  %endif
    34                              <2> 
    35                              <2> 
    36                              <2>  prepare_call param_count, ret_param_count
    97                              <3>  %assign total_space ((%1 + %2) * 8)
    98                              <3> 
    99                              <3>  %if (total_space % 16) != 0
   100                              <3>  %assign total_space total_space + 8
   101                              <3>  %endif
   102                              <3> 
   103 000011DE 4883EC20            <3>  sub rsp, total_space
    37                              <2> 
    38                              <2> 
    39                              <2>  %if param_count > 0
    40                              <2>  %assign i 0
    41 000011E2 48894424F8          <2>  mov [rsp-8], rax
    42                              <2>  %rep param_count
    43                              <2>  %rotate 1
    44                              <2>  mov rax, %2
    45                              <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    47                              <2>  %endrep
    43                              <3>  %rotate 1
    44 000011E7 4C89C0              <3>  mov rax, %2
    45 000011EA 48890424            <3>  mov [rsp + 8*i], rax
    46                              <3>  %assign i i+1
    43                              <3>  %rotate 1
    44 000011EE 4C89C8              <3>  mov rax, %2
    45 000011F1 4889442408          <3>  mov [rsp + 8*i], rax
    46                              <3>  %assign i i+1
    43                              <3>  %rotate 1
    44 000011F6 4889D8              <3>  mov rax, %2
    45 000011F9 4889442410          <3>  mov [rsp + 8*i], rax
    46                              <3>  %assign i i+1
    48                              <2> 
    49                              <2>  %rotate 1
    50                              <2>  %rotate 1
    51 000011FE 488B4424F8          <2>  mov rax,[rsp-8]
    52                              <2>  %endif
    53                              <2> 
    54                              <2> 
    55 00001203 E8F6FDFFFF          <2>  call %1
    56                              <2> 
    57                              <2> 
    58                              <2>  cleanup_call param_count, ret_param_count
   107                              <3>  %assign total_space ((%1 + %2) * 8)
   108                              <3>  %if (total_space % 16) != 0
   109                              <3>  %assign total_space total_space + 8
   110                              <3>  %endif
   111 00001208 4883C420            <3>  add rsp, total_space
    59                              <2> 
   586 0000120C 4983C008            <1>     add r8, 8
   587                              <1> 
   588 00001210 BB78000000          <1>     mov rbx, 'x'
   589                              <1>     function draw_char,1,r8,r9,rbx    
    24                              <2>  %assign param_count %0 - 2
    25                              <2> 
    26                              <2>  %if param_count < 0
    27                              <2>  %assign param_count 0
    28                              <2>  %endif
    29                              <2>  %if param_count < 1
    30                              <2>  %assign ret_param_count 0
    31                              <2>  %else
    32                              <2>  %assign ret_param_count %2
    33                              <2>  %endif
    34                              <2> 
    35                              <2> 
    36                              <2>  prepare_call param_count, ret_param_count
    97                              <3>  %assign total_space ((%1 + %2) * 8)
    98                              <3> 
    99                              <3>  %if (total_space % 16) != 0
   100                              <3>  %assign total_space total_space + 8
   101                              <3>  %endif
   102                              <3> 
   103 00001215 4883EC20            <3>  sub rsp, total_space
    37                              <2> 
    38                              <2> 
    39                              <2>  %if param_count > 0
    40                              <2>  %assign i 0
    41 00001219 48894424F8          <2>  mov [rsp-8], rax
    42                              <2>  %rep param_count
    43                              <2>  %rotate 1
    44                              <2>  mov rax, %2
    45                              <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    47                              <2>  %endrep
    43                              <3>  %rotate 1
    44 0000121E 4C89C0              <3>  mov rax, %2
    45 00001221 48890424            <3>  mov [rsp + 8*i], rax
    46                              <3>  %assign i i+1
    43                              <3>  %rotate 1
    44 00001225 4C89C8              <3>  mov rax, %2
    45 00001228 4889442408          <3>  mov [rsp + 8*i], rax
    46                              <3>  %assign i i+1
    43                              <3>  %rotate 1
    44 0000122D 4889D8              <3>  mov rax, %2
    45 00001230 4889442410          <3>  mov [rsp + 8*i], rax
    46                              <3>  %assign i i+1
    48                              <2> 
    49                              <2>  %rotate 1
    50                              <2>  %rotate 1
    51 00001235 488B4424F8          <2>  mov rax,[rsp-8]
    52                              <2>  %endif
    53                              <2> 
    54                              <2> 
    55 0000123A E8BFFDFFFF          <2>  call %1
    56                              <2> 
    57                              <2> 
    58                              <2>  cleanup_call param_count, ret_param_count
   107                              <3>  %assign total_space ((%1 + %2) * 8)
   108                              <3>  %if (total_space % 16) != 0
   109                              <3>  %assign total_space total_space + 8
   110                              <3>  %endif
   111 0000123F 4883C420            <3>  add rsp, total_space
    59                              <2> 
   590 00001243 4983C008            <1>     add r8, 8
   591                              <1> 
   592                              <1> 
   593 00001247 4831C0              <1>     xor rax, rax
   594 0000124A 4831DB              <1>     xor rbx, rbx
   595 0000124D 4831D2              <1>     xor rdx, rdx
   596 00001250 488B06              <1>     mov rax, [rsi]
   597                              <1>     ; jmp $
   598 00001253 B910000000          <1>     mov rcx, 16              ; Process 16 digits (64-bit number)
   599                              <1>     .convert_loopqq:
   600 00001258 48C1C004            <1>         rol rax, 4           ; Rotate left by 4 bits
   601                              <1>         ; jmp $
   602 0000125C 88C2                <1>         mov dl, al           ; Extract lower nibble
   603                              <1> 
   604 0000125E 80E20F              <1>         and dl, 0x0F         ; Mask to get a single hex digit
   605                              <1> 
   606 00001261 80FA0A              <1>         cmp dl, 10
   607 00001264 7C05                <1>         jl .digitqq
   608 00001266 80C237              <1>         add dl, 'A' - 10     ; Convert to 'A'-'F'
   609 00001269 EB03                <1>         jmp .outputqq
   610                              <1>     .digitqq:
   611 0000126B 80C230              <1>         add dl, '0'          ; Convert to '0'-'9'
   612                              <1>     .outputqq:
   613 0000126E 4889D3              <1>         mov rbx, rdx
   614                              <1> 
   615                              <1>         function draw_char,1,r8,r9,rbx
    24                              <2>  %assign param_count %0 - 2
    25                              <2> 
    26                              <2>  %if param_count < 0
    27                              <2>  %assign param_count 0
    28                              <2>  %endif
    29                              <2>  %if param_count < 1
    30                              <2>  %assign ret_param_count 0
    31                              <2>  %else
    32                              <2>  %assign ret_param_count %2
    33                              <2>  %endif
    34                              <2> 
    35                              <2> 
    36                              <2>  prepare_call param_count, ret_param_count
    97                              <3>  %assign total_space ((%1 + %2) * 8)
    98                              <3> 
    99                              <3>  %if (total_space % 16) != 0
   100                              <3>  %assign total_space total_space + 8
   101                              <3>  %endif
   102                              <3> 
   103 00001271 4883EC20            <3>  sub rsp, total_space
    37                              <2> 
    38                              <2> 
    39                              <2>  %if param_count > 0
    40                              <2>  %assign i 0
    41 00001275 48894424F8          <2>  mov [rsp-8], rax
    42                              <2>  %rep param_count
    43                              <2>  %rotate 1
    44                              <2>  mov rax, %2
    45                              <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    47                              <2>  %endrep
    43                              <3>  %rotate 1
    44 0000127A 4C89C0              <3>  mov rax, %2
    45 0000127D 48890424            <3>  mov [rsp + 8*i], rax
    46                              <3>  %assign i i+1
    43                              <3>  %rotate 1
    44 00001281 4C89C8              <3>  mov rax, %2
    45 00001284 4889442408          <3>  mov [rsp + 8*i], rax
    46                              <3>  %assign i i+1
    43                              <3>  %rotate 1
    44 00001289 4889D8              <3>  mov rax, %2
    45 0000128C 4889442410          <3>  mov [rsp + 8*i], rax
    46                              <3>  %assign i i+1
    48                              <2> 
    49                              <2>  %rotate 1
    50                              <2>  %rotate 1
    51 00001291 488B4424F8          <2>  mov rax,[rsp-8]
    52                              <2>  %endif
    53                              <2> 
    54                              <2> 
    55 00001296 E863FDFFFF          <2>  call %1
    56                              <2> 
    57                              <2> 
    58                              <2>  cleanup_call param_count, ret_param_count
   107                              <3>  %assign total_space ((%1 + %2) * 8)
   108                              <3>  %if (total_space % 16) != 0
   109                              <3>  %assign total_space total_space + 8
   110                              <3>  %endif
   111 0000129B 4883C420            <3>  add rsp, total_space
    59                              <2> 
   616                              <1>         
   617 0000129F 4983C008            <1>         add r8, 8
   618 000012A3 E2B3                <1>         loop .convert_loopqq
   619                              <1>         ; .stop:
   620                              <1>         ; add rcx,0x1000
   621                              <1>         ;     jmp $
   622                              <1>     epilog
    81                              <2>  popallq
   132 000012A5 415F                <3>  pop r15
   133 000012A7 415E                <3>  pop r14
   134 000012A9 415D                <3>  pop r13
   135 000012AB 415C                <3>  pop r12
   136 000012AD 415B                <3>  pop r11
   137 000012AF 415A                <3>  pop r10
   138 000012B1 4159                <3>  pop r9
   139 000012B3 4158                <3>  pop r8
   140 000012B5 5F                  <3>  pop rdi
   141 000012B6 5E                  <3>  pop rsi
   142 000012B7 5A                  <3>  pop rdx
   143 000012B8 59                  <3>  pop rcx
   144 000012B9 5B                  <3>  pop rbx
   145 000012BA 58                  <3>  pop rax
    82                              <2> 
    83 000012BB 4889EC              <2>  mov rsp, rbp
    84 000012BE 5D                  <2>  pop rbp
    85 000012BF C3                  <2>  ret
   623                              <1> draw_decimal:; input: x,y,dec; draw dec
   624                              <1>     prolog 2;
    63 000012C0 55                  <2>  push rbp
    64 000012C1 4889E5              <2>  mov rbp, rsp
    65 000012C4 488945F8            <2>  mov [rbp-8],rax
    66 000012C8 B802000000          <2>  mov rax, %1
    67 000012CD 4883C00F            <2>  add rax, 15
    68 000012D1 4883E0F0            <2>  and rax, ~15
    69 000012D5 4829C4              <2>  sub rsp, rax
    70 000012D8 488B45F8            <2>  mov rax,[rbp-8]
    71                              <2>  pushallq
   115 000012DC 50                  <3>  push rax
   116 000012DD 53                  <3>  push rbx
   117 000012DE 51                  <3>  push rcx
   118 000012DF 52                  <3>  push rdx
   119 000012E0 56                  <3>  push rsi
   120 000012E1 57                  <3>  push rdi
   121 000012E2 4150                <3>  push r8
   122 000012E4 4151                <3>  push r9
   123 000012E6 4152                <3>  push r10
   124 000012E8 4153                <3>  push r11
   125 000012EA 4154                <3>  push r12
   126 000012EC 4155                <3>  push r13
   127 000012EE 4156                <3>  push r14
   128 000012F0 4157                <3>  push r15
    72                              <2> 
    73                              <2> 
    74                              <2> 
    75                              <2> 
    76                              <2> 
    77                              <2> 
   625                              <1>     get_param r8, 1   ; x
    89 000012F2 4C8B4510            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   626                              <1>     get_param r9, 2   ; y
    89 000012F6 4C8B4D18            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   627                              <1>     get_param rsi, 3   ; dec
    89 000012FA 488B7520            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   628                              <1> 
   629 000012FE B800000000          <1>     mov rax, 0
   630 00001303 668B052EF8FFFF      <1>     mov ax, word [rel print_info_ptr + print_info.cursor_print_ypixel]
   631 0000130A BB00000000          <1>     mov rbx,0
   632 0000130F 668B1D15F1FFFF      <1>     mov bx,word [rel video_info_ptr + video_info.xpixel]
   633 00001316 480FAFC3            <1>     imul rax,rbx
   634 0000131A B900000000          <1>     mov rcx,0
   635 0000131F 668B0D10F8FFFF      <1>     mov cx,word [rel print_info_ptr + print_info.cursor_print_xpixel]
   636 00001326 4801C8              <1>     add rax, rcx
   637 00001329 BB00000000          <1>     mov rbx,0
   638 0000132E 8A1DFBF0FFFF        <1>     mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   639 00001334 480FAFC3            <1>     imul rax,rbx
   640                              <1>     ; jmp $
   641 00001338 488B3DF1F0FFFF      <1>     mov rdi, qword [rel video_info_ptr + video_info.video_framebuffer]
   642 0000133F 4801C7              <1>     add rdi, rax
   643 00001342 B800000000          <1>     mov rax,0
   644                              <1>     epilog
    81                              <2>  popallq
   132 00001347 415F                <3>  pop r15
   133 00001349 415E                <3>  pop r14
   134 0000134B 415D                <3>  pop r13
   135 0000134D 415C                <3>  pop r12
   136 0000134F 415B                <3>  pop r11
   137 00001351 415A                <3>  pop r10
   138 00001353 4159                <3>  pop r9
   139 00001355 4158                <3>  pop r8
   140 00001357 5F                  <3>  pop rdi
   141 00001358 5E                  <3>  pop rsi
   142 00001359 5A                  <3>  pop rdx
   143 0000135A 59                  <3>  pop rcx
   144 0000135B 5B                  <3>  pop rbx
   145 0000135C 58                  <3>  pop rax
    82                              <2> 
    83 0000135D 4889EC              <2>  mov rsp, rbp
    84 00001360 5D                  <2>  pop rbp
    85 00001361 C3                  <2>  ret
   645                              <1> %endif
    81                                  ; %include "../kernel/expection.asm"
    82                                  ; %include "../kernel/interrupt.asm"
    83                                  %include "../kernel/init.asm"
     1                              <1> %ifndef INIT_ASM
     2                              <1> %define INIT_ASM
     3                              <1> 
     4                              <1> %include "../bootloader/global_def.asm"
     1                              <2> %ifndef GLOBAL_DEF_ASM
     2                              <2> %define GLOBAL_DEF_ASM
     3                              <2> 
     4                              <2> 
     5                              <2> ;|----------------------|
     6                              <2> ;|	100000 ~ END	|
     7                              <2> ;|	   KERNEL	|
     8                              <2> ;|----------------------|
     9                              <2> ;|	E0000 ~ 100000	|
    10                              <2> ;| Extended System BIOS |
    11                              <2> ;|----------------------|
    12                              <2> ;|	C0000 ~ Dffff	|
    13                              <2> ;|     Expansion Area   |
    14                              <2> ;|----------------------|
    15                              <2> ;|	A0000 ~ bffff	|
    16                              <2> ;|   Legacy Video Area  |
    17                              <2> ;|----------------------|
    18                              <2> ;|	9f000 ~ A0000	|
    19                              <2> ;|	 BIOS reserve	|
    20                              <2> ;|----------------------|
    21                              <2> ;|	90000 ~ 9f000	|
    22                              <2> ;|	 kernel tmpbuf	|
    23                              <2> ;|----------------------|
    24                              <2> ;|	10000 ~ 90000	|
    25                              <2> ;|	   LOADER	|
    26                              <2> ;|----------------------|
    27                              <2> ;|	8000 ~ 10000	|
    28                              <2> ;|	  VBE info	|
    29                              <2> ;|----------------------|
    30                              <2> ;|	7e00 ~ 8000	|
    31                              <2> ;|	  mem info	|
    32                              <2> ;|----------------------|
    33                              <2> ;|	7c00 ~ 7e00	|
    34                              <2> ;|	 MBR (BOOT)	|
    35                              <2> ;|----------------------|
    36                              <2> ;|	0000 ~ 7c00	|
    37                              <2> ;|	 BIOS Code	|
    38                              <2> ;|----------------------|
    39                              <2> 
    40                              <2> 
    41                              <2> ;_______________________________________________________
    42                              <2> ; START	END	    SIZE	        USED
    43                              <2> ; FFFF0	FFFFF	16B	        BIOS System Entry
    44                              <2> ; F0000	FFFEF	64KB-16B	BIOS System Code
    45                              <2> ; C8000	EFFFF	160KB	    ROM/Mapped IO
    46                              <2> ; C0000	C7FFF	32KB	    Graphic Adapter BIOS
    47                              <2> ; B8000	BFFFF	32KB	    Chroma Text Video Buffer
    48                              <2> ; B0000	B7FFF	32KB	    Mono Text Video Buffer
    49                              <2> ; A0000	AFFFF	64KB	    Graphic Video Buffer
    50                              <2> ; 9FC00	9FFFF	1KB	        Extended BIOS Data Area
    51                              <2> ; 7E00	9FBFF	622080B     Useable 608KB	
    52                              <2> ; 7C00	7DFF	512B	    MBR
    53                              <2> ; 500	7BFF	30464B      Useable 30KB	
    54                              <2> ; 400	4FF	    256B	    BIOS Data Area
    55                              <2> ; 000	3FF	    1KB	        IVT
    56                              <2> ; _____________________________________________________
    57                              <2> 
    58                              <2> 
    59                              <2> 
    60                              <2> 
    61                              <2> 
    62                              <2> 
    63                              <2> 
    64                              <2> 
    65                              <2> 
    66                              <2> 
    67                              <2> 
    68                              <2> ;|----------------------|
    69                              <2> ;|	100000 ~ END	|
    70                              <2> ;|	   KERNEL	|
    71                              <2> ;|----------------------|
    72                              <2> ;|	E0000 ~ 100000	|
    73                              <2> ;| Extended System BIOS |
    74                              <2> ;|----------------------|
    75                              <2> ;|	C0000 ~ Dffff	|
    76                              <2> ;|     Expansion Area   |
    77                              <2> ;|----------------------|
    78                              <2> ;|	A0000 ~ bffff	|
    79                              <2> ;|   Legacy Video Area  |
    80                              <2> ;|----------------------|
    81                              <2> ;|	9F000 ~ A0000	|
    82                              <2> ;|	 BIOS reserve	|
    83                              <2> ;|----------------------|
    84                              <2> ;|	90000 ~ 9F000	|
    85                              <2> ;|	 kernel tmpbuf	|
    86                              <2> ;|----------------------|
    87                              <2> ;|	10000 ~ 90000	|
    88                              <2> ;|	   LOADER	|
    89                              <2> ;|----------------------|
    90                              <2> ;|	8000 ~ 10000	|
    91                              <2> ;|	  VBE info	|
    92                              <2> ;|----------------------|
    93                              <2> ;|	7E00 ~ 8000	|
    94                              <2> ;|	  mem info	|
    95                              <2> ;|----------------------|
    96                              <2> ;|	7C00 ~ 7E00	|
    97                              <2> ;|	 MBR (BOOT)	|
    98                              <2> ;|----------------------|
    99                              <2> ;|	0000 ~ 7C00	|
   100                              <2> ;|	 BIOS Code	|
   101                              <2> ;|----------------------|
   102                              <2> 
   103                              <2> 
   104                              <2> 
   105                              <2> 
   106                              <2> 
   107                              <2> 
   108                              <2> 
   109                              <2> 
   110                              <2> 
   111                              <2> 
   112                              <2> ;______________________________________________
   113                              <2> ; ----------------Vbe Info Block------------
   114                              <2> ; typedef struct {
   115                              <2> ;     unsigned char       vbe_signature;
   116                              <2> ;     unsigned short      vbe_version;
   117                              <2> ;     unsigned long       oem_string_ptr;
   118                              <2> ;     unsigned char       capabilities;
   119                              <2> ;     unsigned long       video_mode_ptr;
   120                              <2> ;     unsigned short      total_memory;
   121                              <2> ;     unsigned short      oem_software_rev;
   122                              <2> ;     unsigned long       oem_vendor_name_ptr;
   123                              <2> ;     unsigned long       oem_product_name_ptr;
   124                              <2> ;     unsigned long       oem_product_rev_ptr;
   125                              <2> ;     unsigned char       reserved[222];
   126                              <2> ;     unsigned char       oem_data[256];  
   127                              <2> ; } VbeInfoBlock;
   128                              <2> ;______________________________________________
   129                              <2> 
   130                              <2> 
   131                              <2> BaseOfKernelFile	equ	0x00
   132                              <2> OffsetOfKernelFile	equ	0x100000
   133                              <2> BaseTmpOfKernelAddr	equ	0x9000
   134                              <2> OffsetTmpOfKernelFile	equ	0x0000
   135                              <2> VBEStructBufferAddr	equ	0x8000
   136                              <2> VBEModeStructBufferAddr	equ	0x8200
   137                              <2> MemoryStructBufferAddr	equ	0x8800
   138                              <2> 
   139                              <2> 
   140                              <2> 
   141                              <2> KernelSpaceUpperAddress equ 0xFFFF800000000000
   142                              <2> 
   143                              <2> GDTPointerUpperAddr equ 0xFFFF800000104000
   144                              <2> IDTPointerUpperAddr equ 0xFFFF80000010400a
   145                              <2> TSSPointerUpperAddr equ 0xFFFF800000104014
   146                              <2> 
   147                              <2> VideoFrameBufferAddress equ 0xFFFF800003000000
   148                              <2> KernelStartSectorNum	equ	16
   149                              <2> 
   150                              <2> 
   151                              <2> %define PLATFORM_QEMU_X64 1
   152                              <2> %define PLATFORM_X64 2
   153                              <2> 
   154                              <2> %define DEBUG_PLATFORM PLATFORM_QEMU_X64
   155                              <2> %define DEBUG_MODE 1
   156                              <2> 
   157                              <2> 
   158                              <2> MasterSectorReadNumPort    equ	0x1F2
   159                              <2> MasterSectorReadPort    equ	0x1F0
   160                              <2> 
   161                              <2> SlaveReadNumPort    equ	0x172
   162                              <2> SlaveSectorReadPort    equ	0x170
   163                              <2> 
   164                              <2> SectorReadNumPort    equ	MasterSectorReadNumPort
   165                              <2> SectorReadPort    equ	MasterSectorReadPort
   166                              <2> 
   167                              <2> struc vbe_info_block
   168                              <2>     .signature                 resb 4    ; 'VESA' signature (must be "VESA")
   169                              <2>     .version                   resw 1    ; VBE version (e.g., 0x0300 for VBE 3.0)
   170                              <2>     .oem_string_ptr            resd 1    ; Pointer to OEM string
   171                              <2>     .capabilities              resd 1    ; Capabilities of the video card
   172                              <2>     .video_mode_ptr            resd 1    ; Pointer to supported video modes
   173                              <2>     .total_memory              resw 1    ; Total memory in 64KB blocks
   174                              <2> 
   175                              <2>     ; VBE 2.0+ fields
   176                              <2>     .oem_software_rev          resw 1    ; OEM software revision
   177                              <2>     .oem_vendor_name_ptr       resd 1    ; Pointer to OEM vendor name string
   178                              <2>     .oem_product_name_ptr      resd 1    ; Pointer to OEM product name string
   179                              <2>     .oem_product_rev_ptr       resd 1    ; Pointer to OEM product revision string
   180                              <2>     .reserved                  resb 222  ; Reserved for VBE implementation
   181                              <2>     .oem_data                  resb 256  ; Data area for OEM-specific information
   182                              <2> endstruc
   183                              <2> 
   184                              <2> struc vbe_mode_info_block
   185                              <2>     .attributes                resw 1    ; Mode attributes
   186                              <2>     .winA_attributes           resb 1    ; Window A attributes
   187                              <2>     .winB_attributes           resb 1    ; Window B attributes
   188                              <2>     .win_granularity           resw 1    ; Window granularity in KB
   189                              <2>     .win_size                  resw 1    ; Window size in KB
   190                              <2>     .winA_segment              resw 1    ; Window A segment
   191                              <2>     .winB_segment              resw 1    ; Window B segment
   192                              <2>     .win_func_ptr              resd 1    ; Pointer to window function
   193                              <2>     .bytes_per_scanline        resw 1    ; Bytes per scanline
   194                              <2> 
   195                              <2>     ; VBE 1.2+ fields
   196                              <2>     .x_resolution              resw 1    ; Horizontal resolution in pixels
   197                              <2>     .y_resolution              resw 1    ; Vertical resolution in pixels
   198                              <2>     .x_char_size               resb 1    ; Character cell width in pixels
   199                              <2>     .y_char_size               resb 1    ; Character cell height in pixels
   200                              <2>     .number_of_planes          resb 1    ; Number of memory planes
   201                              <2>     .bits_per_pixel            resb 1    ; Bits per pixel
   202                              <2>     .number_of_banks           resb 1    ; Number of banks
   203                              <2>     .memory_model              resb 1    ; Memory model type
   204                              <2>     .bank_size                 resb 1    ; Bank size in KB
   205                              <2>     .number_of_image_pages     resb 1    ; Number of images
   206                              <2>     .reserved1                 resb 1    ; Reserved
   207                              <2> 
   208                              <2>     ; Direct Color fields (VBE 1.2+)
   209                              <2>     .red_mask_size             resb 1    ; Size of direct color red mask
   210                              <2>     .red_field_position        resb 1    ; Bit position of red mask
   211                              <2>     .green_mask_size           resb 1    ; Size of direct color green mask
   212                              <2>     .green_field_position      resb 1    ; Bit position of green mask
   213                              <2>     .blue_mask_size            resb 1    ; Size of direct color blue mask
   214                              <2>     .blue_field_position       resb 1    ; Bit position of blue mask
   215                              <2>     .reserved_mask_size        resb 1    ; Size of direct color reserved mask
   216                              <2>     .reserved_field_position   resb 1    ; Bit position of reserved mask
   217                              <2>     .direct_color_mode_info    resb 1    ; Direct color mode attributes
   218                              <2> 
   219                              <2>     ; VBE 2.0+ fields
   220                              <2>     .phys_base_ptr             resd 1    ; Physical address for flat memory frame buffer
   221                              <2>     .reserved2                 resd 1    ; Reserved
   222                              <2>     .reserved3                 resw 1    ; Reserved
   223                              <2> 
   224                              <2>     ; VBE 3.0+ fields
   225                              <2>     .lin_bytes_per_scanline    resw 1    ; Bytes per scanline for linear modes
   226                              <2>     .bnk_number_of_image_pages resb 1    ; Number of images for banked modes
   227                              <2>     .lin_number_of_image_pages resb 1    ; Number of images for linear modes
   228                              <2>     .lin_red_mask_size         resb 1    ; Size of direct color red mask (linear modes)
   229                              <2>     .lin_red_field_position    resb 1    ; Bit position of red mask (linear modes)
   230                              <2>     .lin_green_mask_size       resb 1    ; Size of direct color green mask (linear modes)
   231                              <2>     .lin_green_field_position  resb 1    ; Bit position of green mask (linear modes)
   232                              <2>     .lin_blue_mask_size        resb 1    ; Size of direct color blue mask (linear modes)
   233                              <2>     .lin_blue_field_position   resb 1    ; Bit position of blue mask (linear modes)
   234                              <2>     .lin_reserved_mask_size    resb 1    ; Size of direct color reserved mask (linear modes)
   235                              <2>     .lin_reserved_field_position resb 1  ; Bit position of reserved mask (linear modes)
   236                              <2>     .max_pixel_clock           resd 1    ; Maximum pixel clock (Hz)
   237                              <2>     .reserved4                 resb 190  ; Reserved for future expansion
   238                              <2> endstruc
   239                              <2> 
   240                              <2> struc e820_memory_entry
   241                              <2>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   242                              <2>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   243                              <2>     .length_low               resd 1    ; Lower 32 bits of the length
   244                              <2>     .length_high              resd 1    ; Upper 32 bits of the length
   245                              <2>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   246                              <2>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   247                              <2> endstruc
   248                              <2> 
   249                              <2> %endif
     5                              <1> %include "../kernel/stddef.asm"
     1                              <2> %ifndef STDDEF_ASM
     2                              <2> %define STDDEF_ASM
     3                              <2> 
     4                              <2> ;-----------Calling Conventions Standard------------;
     5                              <2> %define USE_CC_STANDARD
     6                              <2> %ifdef USE_CC_STANDARD
     7                              <2> ;caller maintain the stack balance 
     8                              <2> 
     9                              <2> 
    10                              <2> ; -------------------------------
    11                              <2> ; 栈帧结构定义
    12                              <2> ; -------------------------------
    13                              <2> ; 调用后的栈布局:
    14                              <2> ; [rsp+0x00] 返回地址 (8字节)
    15                              <2> ; [rsp+0x08] 旧RBP     (8字节) <- rbp指向这里
    16                              <2> ; [rsp+0x10] 参数1     (8字节)
    17                              <2> ; [rsp+0x18] 参数2
    18                              <2> ; ...
    19                              <2> ; [rsp+X]    局部变量区
    20                              <2> ; -------------------------------
    21                              <2> 
    22                              <2> %define PARAM_OFFSET   16      ; 第一个参数的偏移量(返回地址8 + 旧RBP8)
    23                              <2> %macro function 1-* ; 1=函数名, 2=返回参数数量, 3=参数列表
    24                              <2>     %assign param_count %0 - 2 ; 参数数量
    25                              <2>     
    26                              <2>     %if param_count < 0
    27                              <2>         %assign param_count 0 ; 如果没有参数，设置为 0
    28                              <2>     %endif
    29                              <2>     %if param_count < 1
    30                              <2>         %assign ret_param_count 0 ; 返回参数数量
    31                              <2>     %else
    32                              <2>         %assign ret_param_count %2 ; 返回参数数量
    33                              <2>     %endif
    34                              <2> 
    35                              <2>     ; 准备调用
    36                              <2>     prepare_call param_count, ret_param_count
    37                              <2> 
    38                              <2>     ; 如果有参数，将参数压入栈
    39                              <2>     %if param_count > 0
    40                              <2>         %assign i 0
    41                              <2>         mov [rsp-8], rax ; 保存返回地址
    42                              <2>         %rep param_count
    43                              <2>             %rotate 1
    44                              <2>             mov rax, %2
    45                              <2>             mov [rsp + 8*i], rax ; 将参数压入栈
    46                              <2>             %assign i i+1
    47                              <2>         %endrep
    48                              <2>         ; mov rax,
    49                              <2>         %rotate 1
    50                              <2>         %rotate 1
    51                              <2>         mov rax,[rsp-8]; 保存返回地址
    52                              <2>     %endif
    53                              <2> 
    54                              <2>     ; 调用函数
    55                              <2>     call %1
    56                              <2> 
    57                              <2>     ; 清理栈空间
    58                              <2>     cleanup_call param_count, ret_param_count
    59                              <2> 
    60                              <2> %endmacro
    61                              <2> 
    62                              <2> %macro prolog 1;local var size(bytes)
    63                              <2>     push rbp
    64                              <2>     mov rbp, rsp
    65                              <2>     mov [rbp-8],rax
    66                              <2>     mov rax, %1
    67                              <2>     add rax, 15
    68                              <2>     and rax, ~15
    69                              <2>     sub rsp, rax
    70                              <2>     mov rax,[rbp-8]
    71                              <2>     pushallq
    72                              <2>     
    73                              <2>     
    74                              <2>     ; 调试信息可以放在这里
    75                              <2>     ; %ifdef DEBUG
    76                              <2>     ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
    77                              <2>     ; %endif
    78                              <2> %endmacro
    79                              <2> 
    80                              <2> %macro epilog 0
    81                              <2>     popallq
    82                              <2> 
    83                              <2>     mov rsp, rbp
    84                              <2>     pop rbp
    85                              <2>     ret
    86                              <2> %endmacro
    87                              <2> 
    88                              <2> %macro get_param 2;1=register, 2=param index(from 1)
    89                              <2>     mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    90                              <2> %endmacro
    91                              <2> 
    92                              <2> %macro set_ret_param 2;1=register, 2=param index(from 1)
    93                              <2>     mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
    94                              <2> %endmacro
    95                              <2> 
    96                              <2> %macro prepare_call 2;1=param count, 2=return param count
    97                              <2>     %assign total_space ((%1 + %2) * 8)
    98                              <2>     
    99                              <2>     %if (total_space % 16) != 0
   100                              <2>         %assign total_space total_space + 8  ; 添加填充
   101                              <2>     %endif
   102                              <2>     
   103                              <2>     sub rsp, total_space
   104                              <2> %endmacro
   105                              <2> 
   106                              <2> %macro cleanup_call 2;1=param count, 2=return param count
   107                              <2>     %assign total_space ((%1 + %2) * 8)
   108                              <2>     %if (total_space % 16) != 0
   109                              <2>         %assign total_space total_space + 8
   110                              <2>     %endif
   111                              <2>     add rsp, total_space
   112                              <2> %endmacro
   113                              <2> 
   114                              <2> %macro pushallq 0
   115                              <2>     push rax
   116                              <2>     push rbx
   117                              <2>     push rcx
   118                              <2>     push rdx
   119                              <2>     push rsi
   120                              <2>     push rdi
   121                              <2>     push r8
   122                              <2>     push r9
   123                              <2>     push r10
   124                              <2>     push r11
   125                              <2>     push r12
   126                              <2>     push r13
   127                              <2>     push r14
   128                              <2>     push r15
   129                              <2> %endmacro
   130                              <2> 
   131                              <2> %macro popallq 0
   132                              <2>     pop r15
   133                              <2>     pop r14
   134                              <2>     pop r13
   135                              <2>     pop r12
   136                              <2>     pop r11
   137                              <2>     pop r10
   138                              <2>     pop r9
   139                              <2>     pop r8
   140                              <2>     pop rdi
   141                              <2>     pop rsi
   142                              <2>     pop rdx
   143                              <2>     pop rcx
   144                              <2>     pop rbx
   145                              <2>     pop rax
   146                              <2> %endmacro
   147                              <2> 
   148                              <2> %endif
   149                              <2> ;---------------------ABI Standard------------------;
   150                              <2> %define USE_ABI_STANDARD
   151                              <2> %ifdef USE_ABI_STANDARD
   152                              <2> 
   153                              <2> 
   154                              <2>     %define ABI_File_None   0       ; 无文件类型
   155                              <2>     %define ABI_File_REL    1       ; 可重定位文件
   156                              <2>     %define ABI_File_EXEC   2       ; 可执行文件
   157                              <2>     %define ABI_File_DYN    3       ; 共享目标文件
   158                              <2>     %define ABI_File_CORE   4       ; 核心文件
   159                              <2> 
   160                              <2>     %define Section_Type_NULL    0      ; 未使用
   161                              <2>     %define Section_Type_LOAD    1      ; 可加载段
   162                              <2>     %define Section_Type_DYNAMIC 2      ; 动态链接信息
   163                              <2>     %define Section_Type_INTERP  3      ; 解释器路径
   164                              <2>     %define Section_Type_NOTE    4      ; 辅助信息
   165                              <2>     %define Section_Type_SHLIB   5      ; 保留
   166                              <2> 
   167                              <2>     %macro ABI_HEADER 4 ;1=File Type, 2=Entry Point Address, 3=Section Header Offset, 4=Section Header Count
   168                              <2>         db 0xA5, 'A', 'B', 'I'     ; ABI Magic Number
   169                              <2>         db 1                       ; Encode Type
   170                              <2>         db 1                       ; ABI Version
   171                              <2> 
   172                              <2>         dw %1                      ; ABI File Type
   173                              <2>         dq %2                      ; Entry Point Address
   174                              <2>         dw 32                      ; ABI Headers Size
   175                              <2> 
   176                              <2>         dq %3                      ; Section Header Offset
   177                              <2>         dw 32                      ; Section Header Size
   178                              <2>         dw %4                      ; Section Header Count
   179                              <2>         dw 0                       ; Symble Table Entry Size
   180                              <2>     %endmacro
   181                              <2>     STRUC struct_ABI_HEADER
   182                              <2>         .magic:         resb 4    ; ABI Magic Number (4 bytes)
   183                              <2>         .encode_type:   resb 1    ; Encode Type (1 byte)
   184                              <2>         .abi_version:   resb 1    ; ABI Version (1 byte)
   185                              <2>         .file_type:     resw 1    ; ABI File Type (2 bytes)
   186                              <2>         .entry_point:   resq 1    ; Entry Point Address (8 bytes)
   187                              <2>         .header_size:   resw 1    ; ABI Headers Size (2 bytes)
   188                              <2>         .section_offset: resq 1   ; Section Header Offset (8 bytes)
   189                              <2>         .section_size:  resw 1    ; Section Header Size (2 bytes)
   190                              <2>         .section_count: resw 1    ; Section Header Count (2 bytes)
   191                              <2>         .sym_table_size: resw 1   ; Symbol Table Entry Size (2 bytes)
   192                              <2>     ENDSTRUC
   193                              <2> 
   194                              <2>     %macro SECTION_HEADER 4 ;1=Section Type, 2=Virtual Address, 3=Section Offset, 4=Section Size
   195                              <2>         dq %1                  ; Section Type
   196                              <2>         dq %2                  ; Virtual Address
   197                              <2>         dq %3                  ; Section Offset
   198                              <2>         dq %4                  ; Section Size
   199                              <2>     %endmacro
   200                              <2>     STRUC struct_SECTION_HEADER
   201                              <2>         .type:      resq 1    ; Section Type (8 bytes)
   202                              <2>         .vaddr:     resq 1    ; Virtual Address (8 bytes)
   203                              <2>         .offset:    resq 1    ; Section Offset (8 bytes)
   204                              <2>         .size:      resq 1    ; Section Size (8 bytes)
   205                              <2>     ENDSTRUC
   206                              <2> %endif
   207                              <2> 
   208                              <2> %endif
     6                              <1> 
     7                              <1> [BITS 64]
     8                              <1> 
     9                              <1> struc tss_table_info
    10 00000000 ????????            <1>     .reserved1:      resd 1
    11 00000004 ????????????????    <1>     .rsp0:           resq 1
    12 0000000C ????????????????    <1>     .rsp1:           resq 1
    13 00000014 ????????????????    <1>     .rsp2:           resq 1
    14 0000001C ????????????????    <1>     .reserved2:      resq 1
    15 00000024 ????????????????    <1>     .ist1:           resq 1
    16 0000002C ????????????????    <1>     .ist2:           resq 1
    17 00000034 ????????????????    <1>     .ist3:           resq 1
    18 0000003C ????????????????    <1>     .ist4:           resq 1
    19 00000044 ????????????????    <1>     .ist5:           resq 1
    20 0000004C ????????????????    <1>     .ist6:           resq 1
    21 00000054 ????????????????    <1>     .ist7:           resq 1
    22 0000005C ????????            <1>     .reserved3:      resd 1
    23 00000060 ????????            <1>     .reserved4:      resd 1
    24 00000064 ????????            <1>     .io_map_base:    resd 1
    25                              <1> endstruc
    26                              <1> struc tss_descriptor
    27 00000000 ????                <1>     .limit_low:      resw 1    ; 段界限的低 16 位
    28 00000002 ????                <1>     .base_low:       resw 1    ; 基地址的低 16 位
    29                              <1> 
    30 00000004 ??                  <1>     .base_mid:       resb 1    ; 基地址的中间 8 位
    31 00000005 ??                  <1>     .type:           resb 1    ; 类型和属性（包括 P 位、DPL、TYPE）
    32 00000006 ??                  <1>     .limit_high:     resb 1    ; 段界限的高 4 位和标志（G、AVL 等）
    33 00000007 ??                  <1>     .base_high:      resb 1    ; 基地址的高 8 位
    34                              <1> 
    35 00000008 ????????            <1>     .base_upper:     resd 1    ; 基地址的高 32 位（64 位地址支持）
    36 0000000C ????????            <1>     .reserved:       resd 1    ; 保留字段
    37                              <1> endstruc
    38                              <1> 
    39                              <1> init_sys_vector:;init system interrupt vector
    40                              <1>     prolog 0;
    63 00001362 55                  <2>  push rbp
    64 00001363 4889E5              <2>  mov rbp, rsp
    65 00001366 488945F8            <2>  mov [rbp-8],rax
    66 0000136A B800000000          <2>  mov rax, %1
    67 0000136F 4883C00F            <2>  add rax, 15
    68 00001373 4883E0F0            <2>  and rax, ~15
    69 00001377 4829C4              <2>  sub rsp, rax
    70 0000137A 488B45F8            <2>  mov rax,[rbp-8]
    71                              <2>  pushallq
   115 0000137E 50                  <3>  push rax
   116 0000137F 53                  <3>  push rbx
   117 00001380 51                  <3>  push rcx
   118 00001381 52                  <3>  push rdx
   119 00001382 56                  <3>  push rsi
   120 00001383 57                  <3>  push rdi
   121 00001384 4150                <3>  push r8
   122 00001386 4151                <3>  push r9
   123 00001388 4152                <3>  push r10
   124 0000138A 4153                <3>  push r11
   125 0000138C 4154                <3>  push r12
   126 0000138E 4155                <3>  push r13
   127 00001390 4156                <3>  push r14
   128 00001392 4157                <3>  push r15
    72                              <2> 
    73                              <2> 
    74                              <2> 
    75                              <2> 
    76                              <2> 
    77                              <2> 
    41                              <1>     ; jmp $
    42                              <1>     function setup_default_tss
    24                              <2>  %assign param_count %0 - 2
    25                              <2> 
    26                              <2>  %if param_count < 0
    27                              <2>  %assign param_count 0
    28                              <2>  %endif
    29                              <2>  %if param_count < 1
    30                              <2>  %assign ret_param_count 0
    31                              <2>  %else
    32                              <2>  %assign ret_param_count %2
    33                              <2>  %endif
    34                              <2> 
    35                              <2> 
    36                              <2>  prepare_call param_count, ret_param_count
    97                              <3>  %assign total_space ((%1 + %2) * 8)
    98                              <3> 
    99                              <3>  %if (total_space % 16) != 0
   100                              <3>  %assign total_space total_space + 8
   101                              <3>  %endif
   102                              <3> 
   103 00001394 4883EC00            <3>  sub rsp, total_space
    37                              <2> 
    38                              <2> 
    39                              <2>  %if param_count > 0
    40                              <2>  %assign i 0
    41                              <2>  mov [rsp-8], rax
    42                              <2>  %rep param_count
    43                              <2>  %rotate 1
    44                              <2>  mov rax, %2
    45                              <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    47                              <2>  %endrep
    48                              <2> 
    49                              <2>  %rotate 1
    50                              <2>  %rotate 1
    51                              <2>  mov rax,[rsp-8]
    52                              <2>  %endif
    53                              <2> 
    54                              <2> 
    55 00001398 E839000000          <2>  call %1
    56                              <2> 
    57                              <2> 
    58                              <2>  cleanup_call param_count, ret_param_count
   107                              <3>  %assign total_space ((%1 + %2) * 8)
   108                              <3>  %if (total_space % 16) != 0
   109                              <3>  %assign total_space total_space + 8
   110                              <3>  %endif
   111 0000139D 4883C400            <3>  add rsp, total_space
    59                              <2> 
    43                              <1>         ; jmp $
    44                              <1>     function init_expection
    24                              <2>  %assign param_count %0 - 2
    25                              <2> 
    26                              <2>  %if param_count < 0
    27                              <2>  %assign param_count 0
    28                              <2>  %endif
    29                              <2>  %if param_count < 1
    30                              <2>  %assign ret_param_count 0
    31                              <2>  %else
    32                              <2>  %assign ret_param_count %2
    33                              <2>  %endif
    34                              <2> 
    35                              <2> 
    36                              <2>  prepare_call param_count, ret_param_count
    97                              <3>  %assign total_space ((%1 + %2) * 8)
    98                              <3> 
    99                              <3>  %if (total_space % 16) != 0
   100                              <3>  %assign total_space total_space + 8
   101                              <3>  %endif
   102                              <3> 
   103 000013A1 4883EC00            <3>  sub rsp, total_space
    37                              <2> 
    38                              <2> 
    39                              <2>  %if param_count > 0
    40                              <2>  %assign i 0
    41                              <2>  mov [rsp-8], rax
    42                              <2>  %rep param_count
    43                              <2>  %rotate 1
    44                              <2>  mov rax, %2
    45                              <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    47                              <2>  %endrep
    48                              <2> 
    49                              <2>  %rotate 1
    50                              <2>  %rotate 1
    51                              <2>  mov rax,[rsp-8]
    52                              <2>  %endif
    53                              <2> 
    54                              <2> 
    55 000013A5 E827010000          <2>  call %1
    56                              <2> 
    57                              <2> 
    58                              <2>  cleanup_call param_count, ret_param_count
   107                              <3>  %assign total_space ((%1 + %2) * 8)
   108                              <3>  %if (total_space % 16) != 0
   109                              <3>  %assign total_space total_space + 8
   110                              <3>  %endif
   111 000013AA 4883C400            <3>  add rsp, total_space
    59                              <2> 
    45                              <1>     ; jmp $
    46                              <1>     function init_interrupt
    24                              <2>  %assign param_count %0 - 2
    25                              <2> 
    26                              <2>  %if param_count < 0
    27                              <2>  %assign param_count 0
    28                              <2>  %endif
    29                              <2>  %if param_count < 1
    30                              <2>  %assign ret_param_count 0
    31                              <2>  %else
    32                              <2>  %assign ret_param_count %2
    33                              <2>  %endif
    34                              <2> 
    35                              <2> 
    36                              <2>  prepare_call param_count, ret_param_count
    97                              <3>  %assign total_space ((%1 + %2) * 8)
    98                              <3> 
    99                              <3>  %if (total_space % 16) != 0
   100                              <3>  %assign total_space total_space + 8
   101                              <3>  %endif
   102                              <3> 
   103 000013AE 4883EC00            <3>  sub rsp, total_space
    37                              <2> 
    38                              <2> 
    39                              <2>  %if param_count > 0
    40                              <2>  %assign i 0
    41                              <2>  mov [rsp-8], rax
    42                              <2>  %rep param_count
    43                              <2>  %rotate 1
    44                              <2>  mov rax, %2
    45                              <2>  mov [rsp + 8*i], rax
    46                              <2>  %assign i i+1
    47                              <2>  %endrep
    48                              <2> 
    49                              <2>  %rotate 1
    50                              <2>  %rotate 1
    51                              <2>  mov rax,[rsp-8]
    52                              <2>  %endif
    53                              <2> 
    54                              <2> 
    55 000013B2 E833040000          <2>  call %1
    56                              <2> 
    57                              <2> 
    58                              <2>  cleanup_call param_count, ret_param_count
   107                              <3>  %assign total_space ((%1 + %2) * 8)
   108                              <3>  %if (total_space % 16) != 0
   109                              <3>  %assign total_space total_space + 8
   110                              <3>  %endif
   111 000013B7 4883C400            <3>  add rsp, total_space
    59                              <2> 
    47                              <1>     ; jmp $
    48                              <1> 
    49                              <1> 
    50                              <1>     epilog
    81                              <2>  popallq
   132 000013BB 415F                <3>  pop r15
   133 000013BD 415E                <3>  pop r14
   134 000013BF 415D                <3>  pop r13
   135 000013C1 415C                <3>  pop r12
   136 000013C3 415B                <3>  pop r11
   137 000013C5 415A                <3>  pop r10
   138 000013C7 4159                <3>  pop r9
   139 000013C9 4158                <3>  pop r8
   140 000013CB 5F                  <3>  pop rdi
   141 000013CC 5E                  <3>  pop rsi
   142 000013CD 5A                  <3>  pop rdx
   143 000013CE 59                  <3>  pop rcx
   144 000013CF 5B                  <3>  pop rbx
   145 000013D0 58                  <3>  pop rax
    82                              <2> 
    83 000013D1 4889EC              <2>  mov rsp, rbp
    84 000013D4 5D                  <2>  pop rbp
    85 000013D5 C3                  <2>  ret
    51                              <1> setup_default_tss:;setup tss
    52                              <1>     prolog 0;
    63 000013D6 55                  <2>  push rbp
    64 000013D7 4889E5              <2>  mov rbp, rsp
    65 000013DA 488945F8            <2>  mov [rbp-8],rax
    66 000013DE B800000000          <2>  mov rax, %1
    67 000013E3 4883C00F            <2>  add rax, 15
    68 000013E7 4883E0F0            <2>  and rax, ~15
    69 000013EB 4829C4              <2>  sub rsp, rax
    70 000013EE 488B45F8            <2>  mov rax,[rbp-8]
    71                              <2>  pushallq
   115 000013F2 50                  <3>  push rax
   116 000013F3 53                  <3>  push rbx
   117 000013F4 51                  <3>  push rcx
   118 000013F5 52                  <3>  push rdx
   119 000013F6 56                  <3>  push rsi
   120 000013F7 57                  <3>  push rdi
   121 000013F8 4150                <3>  push r8
   122 000013FA 4151                <3>  push r9
   123 000013FC 4152                <3>  push r10
   124 000013FE 4153                <3>  push r11
   125 00001400 4154                <3>  push r12
   126 00001402 4155                <3>  push r13
   127 00001404 4156                <3>  push r14
   128 00001406 4157                <3>  push r15
    72                              <2> 
    73                              <2> 
    74                              <2> 
    75                              <2> 
    76                              <2> 
    77                              <2> 
    53                              <1> 
    54 00001408 48BB004010000080FF- <1>     mov rbx, GDTPointerUpperAddr
    54 00001411 FF                  <1>
    55 00001412 488B5B02            <1>     mov rbx, [rbx + 2]
    56 00001416 4883C340            <1>     add rbx, 0x40
    57                              <1> 
    58 0000141A 48B8144010000080FF- <1>     mov rax, TSSPointerUpperAddr
    58 00001423 FF                  <1>
    59 00001424 668B10              <1>     mov  dx,word [rax]
    60 00001427 488B4002            <1>     mov rax, [rax + 2]
    61                              <1>     ; jmp $
    62 0000142B 668913              <1>     mov word [rbx + tss_descriptor.limit_low], dx
    63 0000142E 66894302            <1>     mov word [rbx + tss_descriptor.base_low], ax
    64 00001432 48C1E810            <1>     shr rax, 16
    65                              <1> 
    66 00001436 884304              <1>     mov byte [rbx + tss_descriptor.base_mid], al
    67 00001439 C6430589            <1>     mov byte [rbx + tss_descriptor.type], 0x89
    68 0000143D C6430600            <1>     mov byte [rbx + tss_descriptor.limit_high], 0x00
    69 00001441 48C1E808            <1>     shr rax, 8
    70                              <1> 
    71 00001445 884307              <1>     mov byte [rbx + tss_descriptor.base_high], al
    72 00001448 48C1E808            <1>     shr rax, 8
    73                              <1> 
    74 0000144C 894308              <1>     mov dword [rbx + tss_descriptor.base_upper], eax
    75 0000144F C7430C00000000      <1>     mov dword [rbx + tss_descriptor.reserved], 0x00
    76                              <1> 
    77                              <1> 
    78 00001456 48B8144010000080FF- <1>     mov rax, TSSPointerUpperAddr
    78 0000145F FF                  <1>
    79 00001460 488B5802            <1>     mov rbx, [rax + 2]
    80                              <1> 
    81 00001464 48B8007C00000080FF- <1>     mov rax, 0xffff800000007c00
    81 0000146D FF                  <1>
    82                              <1>     ; mov qword [rbx + tss_table_info.reserved1], 0x00
    83 0000146E 48894304            <1>     mov qword [rbx + tss_table_info.rsp0], rax
    84 00001472 4889430C            <1>     mov qword [rbx + tss_table_info.rsp1], rax
    85 00001476 48894314            <1>     mov qword [rbx + tss_table_info.rsp2], rax
    86                              <1>     ; mov qword [rbx + tss_table_info.reserved2], 0x00
    87 0000147A 48894324            <1>     mov qword [rbx + tss_table_info.ist1], rax
    88 0000147E 4889432C            <1>     mov qword [rbx + tss_table_info.ist2], rax
    89 00001482 48894334            <1>     mov qword [rbx + tss_table_info.ist3], rax
    90 00001486 4889433C            <1>     mov qword [rbx + tss_table_info.ist4], rax
    91 0000148A 48894344            <1>     mov qword [rbx + tss_table_info.ist5], rax
    92 0000148E 4889434C            <1>     mov qword [rbx + tss_table_info.ist6], rax
    93 00001492 48894354            <1>     mov qword [rbx + tss_table_info.ist7], rax
    94                              <1> 
    95                              <1>     ; mov qword [rbx + tss_table_info.reserved3], 0x00
    96                              <1>     ; mov qword [rbx + tss_table_info.reserved4], 0x00
    97                              <1> 
    98 00001496 C7436468000000      <1>     mov dword [rbx + tss_table_info.io_map_base], 104
    99                              <1>     
   100 0000149D 66B94000            <1>     mov cx, 0x0040
   101 000014A1 0F00D9              <1>     ltr cx
   102                              <1>     
   103                              <1>     epilog
    81                              <2>  popallq
   132 000014A4 415F                <3>  pop r15
   133 000014A6 415E                <3>  pop r14
   134 000014A8 415D                <3>  pop r13
   135 000014AA 415C                <3>  pop r12
   136 000014AC 415B                <3>  pop r11
   137 000014AE 415A                <3>  pop r10
   138 000014B0 4159                <3>  pop r9
   139 000014B2 4158                <3>  pop r8
   140 000014B4 5F                  <3>  pop rdi
   141 000014B5 5E                  <3>  pop rsi
   142 000014B6 5A                  <3>  pop rdx
   143 000014B7 59                  <3>  pop rcx
   144 000014B8 5B                  <3>  pop rbx
   145 000014B9 58                  <3>  pop rax
    82                              <2> 
    83 000014BA 4889EC              <2>  mov rsp, rbp
    84 000014BD 5D                  <2>  pop rbp
    85 000014BE C3                  <2>  ret
   104                              <1> 
   105                              <1> %include "../kernel/expection.asm"
     1                              <2> %ifndef EXPECTION_ASM
     2                              <2> %define EXPECTION_ASM
     3                              <2> 
     4                              <2> %include "../bootloader/global_def.asm"
     1                              <3> %ifndef GLOBAL_DEF_ASM
     2                              <3> %define GLOBAL_DEF_ASM
     3                              <3> 
     4                              <3> 
     5                              <3> ;|----------------------|
     6                              <3> ;|	100000 ~ END	|
     7                              <3> ;|	   KERNEL	|
     8                              <3> ;|----------------------|
     9                              <3> ;|	E0000 ~ 100000	|
    10                              <3> ;| Extended System BIOS |
    11                              <3> ;|----------------------|
    12                              <3> ;|	C0000 ~ Dffff	|
    13                              <3> ;|     Expansion Area   |
    14                              <3> ;|----------------------|
    15                              <3> ;|	A0000 ~ bffff	|
    16                              <3> ;|   Legacy Video Area  |
    17                              <3> ;|----------------------|
    18                              <3> ;|	9f000 ~ A0000	|
    19                              <3> ;|	 BIOS reserve	|
    20                              <3> ;|----------------------|
    21                              <3> ;|	90000 ~ 9f000	|
    22                              <3> ;|	 kernel tmpbuf	|
    23                              <3> ;|----------------------|
    24                              <3> ;|	10000 ~ 90000	|
    25                              <3> ;|	   LOADER	|
    26                              <3> ;|----------------------|
    27                              <3> ;|	8000 ~ 10000	|
    28                              <3> ;|	  VBE info	|
    29                              <3> ;|----------------------|
    30                              <3> ;|	7e00 ~ 8000	|
    31                              <3> ;|	  mem info	|
    32                              <3> ;|----------------------|
    33                              <3> ;|	7c00 ~ 7e00	|
    34                              <3> ;|	 MBR (BOOT)	|
    35                              <3> ;|----------------------|
    36                              <3> ;|	0000 ~ 7c00	|
    37                              <3> ;|	 BIOS Code	|
    38                              <3> ;|----------------------|
    39                              <3> 
    40                              <3> 
    41                              <3> ;_______________________________________________________
    42                              <3> ; START	END	    SIZE	        USED
    43                              <3> ; FFFF0	FFFFF	16B	        BIOS System Entry
    44                              <3> ; F0000	FFFEF	64KB-16B	BIOS System Code
    45                              <3> ; C8000	EFFFF	160KB	    ROM/Mapped IO
    46                              <3> ; C0000	C7FFF	32KB	    Graphic Adapter BIOS
    47                              <3> ; B8000	BFFFF	32KB	    Chroma Text Video Buffer
    48                              <3> ; B0000	B7FFF	32KB	    Mono Text Video Buffer
    49                              <3> ; A0000	AFFFF	64KB	    Graphic Video Buffer
    50                              <3> ; 9FC00	9FFFF	1KB	        Extended BIOS Data Area
    51                              <3> ; 7E00	9FBFF	622080B     Useable 608KB	
    52                              <3> ; 7C00	7DFF	512B	    MBR
    53                              <3> ; 500	7BFF	30464B      Useable 30KB	
    54                              <3> ; 400	4FF	    256B	    BIOS Data Area
    55                              <3> ; 000	3FF	    1KB	        IVT
    56                              <3> ; _____________________________________________________
    57                              <3> 
    58                              <3> 
    59                              <3> 
    60                              <3> 
    61                              <3> 
    62                              <3> 
    63                              <3> 
    64                              <3> 
    65                              <3> 
    66                              <3> 
    67                              <3> 
    68                              <3> ;|----------------------|
    69                              <3> ;|	100000 ~ END	|
    70                              <3> ;|	   KERNEL	|
    71                              <3> ;|----------------------|
    72                              <3> ;|	E0000 ~ 100000	|
    73                              <3> ;| Extended System BIOS |
    74                              <3> ;|----------------------|
    75                              <3> ;|	C0000 ~ Dffff	|
    76                              <3> ;|     Expansion Area   |
    77                              <3> ;|----------------------|
    78                              <3> ;|	A0000 ~ bffff	|
    79                              <3> ;|   Legacy Video Area  |
    80                              <3> ;|----------------------|
    81                              <3> ;|	9F000 ~ A0000	|
    82                              <3> ;|	 BIOS reserve	|
    83                              <3> ;|----------------------|
    84                              <3> ;|	90000 ~ 9F000	|
    85                              <3> ;|	 kernel tmpbuf	|
    86                              <3> ;|----------------------|
    87                              <3> ;|	10000 ~ 90000	|
    88                              <3> ;|	   LOADER	|
    89                              <3> ;|----------------------|
    90                              <3> ;|	8000 ~ 10000	|
    91                              <3> ;|	  VBE info	|
    92                              <3> ;|----------------------|
    93                              <3> ;|	7E00 ~ 8000	|
    94                              <3> ;|	  mem info	|
    95                              <3> ;|----------------------|
    96                              <3> ;|	7C00 ~ 7E00	|
    97                              <3> ;|	 MBR (BOOT)	|
    98                              <3> ;|----------------------|
    99                              <3> ;|	0000 ~ 7C00	|
   100                              <3> ;|	 BIOS Code	|
   101                              <3> ;|----------------------|
   102                              <3> 
   103                              <3> 
   104                              <3> 
   105                              <3> 
   106                              <3> 
   107                              <3> 
   108                              <3> 
   109                              <3> 
   110                              <3> 
   111                              <3> 
   112                              <3> ;______________________________________________
   113                              <3> ; ----------------Vbe Info Block------------
   114                              <3> ; typedef struct {
   115                              <3> ;     unsigned char       vbe_signature;
   116                              <3> ;     unsigned short      vbe_version;
   117                              <3> ;     unsigned long       oem_string_ptr;
   118                              <3> ;     unsigned char       capabilities;
   119                              <3> ;     unsigned long       video_mode_ptr;
   120                              <3> ;     unsigned short      total_memory;
   121                              <3> ;     unsigned short      oem_software_rev;
   122                              <3> ;     unsigned long       oem_vendor_name_ptr;
   123                              <3> ;     unsigned long       oem_product_name_ptr;
   124                              <3> ;     unsigned long       oem_product_rev_ptr;
   125                              <3> ;     unsigned char       reserved[222];
   126                              <3> ;     unsigned char       oem_data[256];  
   127                              <3> ; } VbeInfoBlock;
   128                              <3> ;______________________________________________
   129                              <3> 
   130                              <3> 
   131                              <3> BaseOfKernelFile	equ	0x00
   132                              <3> OffsetOfKernelFile	equ	0x100000
   133                              <3> BaseTmpOfKernelAddr	equ	0x9000
   134                              <3> OffsetTmpOfKernelFile	equ	0x0000
   135                              <3> VBEStructBufferAddr	equ	0x8000
   136                              <3> VBEModeStructBufferAddr	equ	0x8200
   137                              <3> MemoryStructBufferAddr	equ	0x8800
   138                              <3> 
   139                              <3> 
   140                              <3> 
   141                              <3> KernelSpaceUpperAddress equ 0xFFFF800000000000
   142                              <3> 
   143                              <3> GDTPointerUpperAddr equ 0xFFFF800000104000
   144                              <3> IDTPointerUpperAddr equ 0xFFFF80000010400a
   145                              <3> TSSPointerUpperAddr equ 0xFFFF800000104014
   146                              <3> 
   147                              <3> VideoFrameBufferAddress equ 0xFFFF800003000000
   148                              <3> KernelStartSectorNum	equ	16
   149                              <3> 
   150                              <3> 
   151                              <3> %define PLATFORM_QEMU_X64 1
   152                              <3> %define PLATFORM_X64 2
   153                              <3> 
   154                              <3> %define DEBUG_PLATFORM PLATFORM_QEMU_X64
   155                              <3> %define DEBUG_MODE 1
   156                              <3> 
   157                              <3> 
   158                              <3> MasterSectorReadNumPort    equ	0x1F2
   159                              <3> MasterSectorReadPort    equ	0x1F0
   160                              <3> 
   161                              <3> SlaveReadNumPort    equ	0x172
   162                              <3> SlaveSectorReadPort    equ	0x170
   163                              <3> 
   164                              <3> SectorReadNumPort    equ	MasterSectorReadNumPort
   165                              <3> SectorReadPort    equ	MasterSectorReadPort
   166                              <3> 
   167                              <3> struc vbe_info_block
   168                              <3>     .signature                 resb 4    ; 'VESA' signature (must be "VESA")
   169                              <3>     .version                   resw 1    ; VBE version (e.g., 0x0300 for VBE 3.0)
   170                              <3>     .oem_string_ptr            resd 1    ; Pointer to OEM string
   171                              <3>     .capabilities              resd 1    ; Capabilities of the video card
   172                              <3>     .video_mode_ptr            resd 1    ; Pointer to supported video modes
   173                              <3>     .total_memory              resw 1    ; Total memory in 64KB blocks
   174                              <3> 
   175                              <3>     ; VBE 2.0+ fields
   176                              <3>     .oem_software_rev          resw 1    ; OEM software revision
   177                              <3>     .oem_vendor_name_ptr       resd 1    ; Pointer to OEM vendor name string
   178                              <3>     .oem_product_name_ptr      resd 1    ; Pointer to OEM product name string
   179                              <3>     .oem_product_rev_ptr       resd 1    ; Pointer to OEM product revision string
   180                              <3>     .reserved                  resb 222  ; Reserved for VBE implementation
   181                              <3>     .oem_data                  resb 256  ; Data area for OEM-specific information
   182                              <3> endstruc
   183                              <3> 
   184                              <3> struc vbe_mode_info_block
   185                              <3>     .attributes                resw 1    ; Mode attributes
   186                              <3>     .winA_attributes           resb 1    ; Window A attributes
   187                              <3>     .winB_attributes           resb 1    ; Window B attributes
   188                              <3>     .win_granularity           resw 1    ; Window granularity in KB
   189                              <3>     .win_size                  resw 1    ; Window size in KB
   190                              <3>     .winA_segment              resw 1    ; Window A segment
   191                              <3>     .winB_segment              resw 1    ; Window B segment
   192                              <3>     .win_func_ptr              resd 1    ; Pointer to window function
   193                              <3>     .bytes_per_scanline        resw 1    ; Bytes per scanline
   194                              <3> 
   195                              <3>     ; VBE 1.2+ fields
   196                              <3>     .x_resolution              resw 1    ; Horizontal resolution in pixels
   197                              <3>     .y_resolution              resw 1    ; Vertical resolution in pixels
   198                              <3>     .x_char_size               resb 1    ; Character cell width in pixels
   199                              <3>     .y_char_size               resb 1    ; Character cell height in pixels
   200                              <3>     .number_of_planes          resb 1    ; Number of memory planes
   201                              <3>     .bits_per_pixel            resb 1    ; Bits per pixel
   202                              <3>     .number_of_banks           resb 1    ; Number of banks
   203                              <3>     .memory_model              resb 1    ; Memory model type
   204                              <3>     .bank_size                 resb 1    ; Bank size in KB
   205                              <3>     .number_of_image_pages     resb 1    ; Number of images
   206                              <3>     .reserved1                 resb 1    ; Reserved
   207                              <3> 
   208                              <3>     ; Direct Color fields (VBE 1.2+)
   209                              <3>     .red_mask_size             resb 1    ; Size of direct color red mask
   210                              <3>     .red_field_position        resb 1    ; Bit position of red mask
   211                              <3>     .green_mask_size           resb 1    ; Size of direct color green mask
   212                              <3>     .green_field_position      resb 1    ; Bit position of green mask
   213                              <3>     .blue_mask_size            resb 1    ; Size of direct color blue mask
   214                              <3>     .blue_field_position       resb 1    ; Bit position of blue mask
   215                              <3>     .reserved_mask_size        resb 1    ; Size of direct color reserved mask
   216                              <3>     .reserved_field_position   resb 1    ; Bit position of reserved mask
   217                              <3>     .direct_color_mode_info    resb 1    ; Direct color mode attributes
   218                              <3> 
   219                              <3>     ; VBE 2.0+ fields
   220                              <3>     .phys_base_ptr             resd 1    ; Physical address for flat memory frame buffer
   221                              <3>     .reserved2                 resd 1    ; Reserved
   222                              <3>     .reserved3                 resw 1    ; Reserved
   223                              <3> 
   224                              <3>     ; VBE 3.0+ fields
   225                              <3>     .lin_bytes_per_scanline    resw 1    ; Bytes per scanline for linear modes
   226                              <3>     .bnk_number_of_image_pages resb 1    ; Number of images for banked modes
   227                              <3>     .lin_number_of_image_pages resb 1    ; Number of images for linear modes
   228                              <3>     .lin_red_mask_size         resb 1    ; Size of direct color red mask (linear modes)
   229                              <3>     .lin_red_field_position    resb 1    ; Bit position of red mask (linear modes)
   230                              <3>     .lin_green_mask_size       resb 1    ; Size of direct color green mask (linear modes)
   231                              <3>     .lin_green_field_position  resb 1    ; Bit position of green mask (linear modes)
   232                              <3>     .lin_blue_mask_size        resb 1    ; Size of direct color blue mask (linear modes)
   233                              <3>     .lin_blue_field_position   resb 1    ; Bit position of blue mask (linear modes)
   234                              <3>     .lin_reserved_mask_size    resb 1    ; Size of direct color reserved mask (linear modes)
   235                              <3>     .lin_reserved_field_position resb 1  ; Bit position of reserved mask (linear modes)
   236                              <3>     .max_pixel_clock           resd 1    ; Maximum pixel clock (Hz)
   237                              <3>     .reserved4                 resb 190  ; Reserved for future expansion
   238                              <3> endstruc
   239                              <3> 
   240                              <3> struc e820_memory_entry
   241                              <3>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   242                              <3>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   243                              <3>     .length_low               resd 1    ; Lower 32 bits of the length
   244                              <3>     .length_high              resd 1    ; Upper 32 bits of the length
   245                              <3>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   246                              <3>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   247                              <3> endstruc
   248                              <3> 
   249                              <3> %endif
     5                              <2> %include "../kernel/stddef.asm"
     1                              <3> %ifndef STDDEF_ASM
     2                              <3> %define STDDEF_ASM
     3                              <3> 
     4                              <3> ;-----------Calling Conventions Standard------------;
     5                              <3> %define USE_CC_STANDARD
     6                              <3> %ifdef USE_CC_STANDARD
     7                              <3> ;caller maintain the stack balance 
     8                              <3> 
     9                              <3> 
    10                              <3> ; -------------------------------
    11                              <3> ; 栈帧结构定义
    12                              <3> ; -------------------------------
    13                              <3> ; 调用后的栈布局:
    14                              <3> ; [rsp+0x00] 返回地址 (8字节)
    15                              <3> ; [rsp+0x08] 旧RBP     (8字节) <- rbp指向这里
    16                              <3> ; [rsp+0x10] 参数1     (8字节)
    17                              <3> ; [rsp+0x18] 参数2
    18                              <3> ; ...
    19                              <3> ; [rsp+X]    局部变量区
    20                              <3> ; -------------------------------
    21                              <3> 
    22                              <3> %define PARAM_OFFSET   16      ; 第一个参数的偏移量(返回地址8 + 旧RBP8)
    23                              <3> %macro function 1-* ; 1=函数名, 2=返回参数数量, 3=参数列表
    24                              <3>     %assign param_count %0 - 2 ; 参数数量
    25                              <3>     
    26                              <3>     %if param_count < 0
    27                              <3>         %assign param_count 0 ; 如果没有参数，设置为 0
    28                              <3>     %endif
    29                              <3>     %if param_count < 1
    30                              <3>         %assign ret_param_count 0 ; 返回参数数量
    31                              <3>     %else
    32                              <3>         %assign ret_param_count %2 ; 返回参数数量
    33                              <3>     %endif
    34                              <3> 
    35                              <3>     ; 准备调用
    36                              <3>     prepare_call param_count, ret_param_count
    37                              <3> 
    38                              <3>     ; 如果有参数，将参数压入栈
    39                              <3>     %if param_count > 0
    40                              <3>         %assign i 0
    41                              <3>         mov [rsp-8], rax ; 保存返回地址
    42                              <3>         %rep param_count
    43                              <3>             %rotate 1
    44                              <3>             mov rax, %2
    45                              <3>             mov [rsp + 8*i], rax ; 将参数压入栈
    46                              <3>             %assign i i+1
    47                              <3>         %endrep
    48                              <3>         ; mov rax,
    49                              <3>         %rotate 1
    50                              <3>         %rotate 1
    51                              <3>         mov rax,[rsp-8]; 保存返回地址
    52                              <3>     %endif
    53                              <3> 
    54                              <3>     ; 调用函数
    55                              <3>     call %1
    56                              <3> 
    57                              <3>     ; 清理栈空间
    58                              <3>     cleanup_call param_count, ret_param_count
    59                              <3> 
    60                              <3> %endmacro
    61                              <3> 
    62                              <3> %macro prolog 1;local var size(bytes)
    63                              <3>     push rbp
    64                              <3>     mov rbp, rsp
    65                              <3>     mov [rbp-8],rax
    66                              <3>     mov rax, %1
    67                              <3>     add rax, 15
    68                              <3>     and rax, ~15
    69                              <3>     sub rsp, rax
    70                              <3>     mov rax,[rbp-8]
    71                              <3>     pushallq
    72                              <3>     
    73                              <3>     
    74                              <3>     ; 调试信息可以放在这里
    75                              <3>     ; %ifdef DEBUG
    76                              <3>     ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
    77                              <3>     ; %endif
    78                              <3> %endmacro
    79                              <3> 
    80                              <3> %macro epilog 0
    81                              <3>     popallq
    82                              <3> 
    83                              <3>     mov rsp, rbp
    84                              <3>     pop rbp
    85                              <3>     ret
    86                              <3> %endmacro
    87                              <3> 
    88                              <3> %macro get_param 2;1=register, 2=param index(from 1)
    89                              <3>     mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    90                              <3> %endmacro
    91                              <3> 
    92                              <3> %macro set_ret_param 2;1=register, 2=param index(from 1)
    93                              <3>     mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
    94                              <3> %endmacro
    95                              <3> 
    96                              <3> %macro prepare_call 2;1=param count, 2=return param count
    97                              <3>     %assign total_space ((%1 + %2) * 8)
    98                              <3>     
    99                              <3>     %if (total_space % 16) != 0
   100                              <3>         %assign total_space total_space + 8  ; 添加填充
   101                              <3>     %endif
   102                              <3>     
   103                              <3>     sub rsp, total_space
   104                              <3> %endmacro
   105                              <3> 
   106                              <3> %macro cleanup_call 2;1=param count, 2=return param count
   107                              <3>     %assign total_space ((%1 + %2) * 8)
   108                              <3>     %if (total_space % 16) != 0
   109                              <3>         %assign total_space total_space + 8
   110                              <3>     %endif
   111                              <3>     add rsp, total_space
   112                              <3> %endmacro
   113                              <3> 
   114                              <3> %macro pushallq 0
   115                              <3>     push rax
   116                              <3>     push rbx
   117                              <3>     push rcx
   118                              <3>     push rdx
   119                              <3>     push rsi
   120                              <3>     push rdi
   121                              <3>     push r8
   122                              <3>     push r9
   123                              <3>     push r10
   124                              <3>     push r11
   125                              <3>     push r12
   126                              <3>     push r13
   127                              <3>     push r14
   128                              <3>     push r15
   129                              <3> %endmacro
   130                              <3> 
   131                              <3> %macro popallq 0
   132                              <3>     pop r15
   133                              <3>     pop r14
   134                              <3>     pop r13
   135                              <3>     pop r12
   136                              <3>     pop r11
   137                              <3>     pop r10
   138                              <3>     pop r9
   139                              <3>     pop r8
   140                              <3>     pop rdi
   141                              <3>     pop rsi
   142                              <3>     pop rdx
   143                              <3>     pop rcx
   144                              <3>     pop rbx
   145                              <3>     pop rax
   146                              <3> %endmacro
   147                              <3> 
   148                              <3> %endif
   149                              <3> ;---------------------ABI Standard------------------;
   150                              <3> %define USE_ABI_STANDARD
   151                              <3> %ifdef USE_ABI_STANDARD
   152                              <3> 
   153                              <3> 
   154                              <3>     %define ABI_File_None   0       ; 无文件类型
   155                              <3>     %define ABI_File_REL    1       ; 可重定位文件
   156                              <3>     %define ABI_File_EXEC   2       ; 可执行文件
   157                              <3>     %define ABI_File_DYN    3       ; 共享目标文件
   158                              <3>     %define ABI_File_CORE   4       ; 核心文件
   159                              <3> 
   160                              <3>     %define Section_Type_NULL    0      ; 未使用
   161                              <3>     %define Section_Type_LOAD    1      ; 可加载段
   162                              <3>     %define Section_Type_DYNAMIC 2      ; 动态链接信息
   163                              <3>     %define Section_Type_INTERP  3      ; 解释器路径
   164                              <3>     %define Section_Type_NOTE    4      ; 辅助信息
   165                              <3>     %define Section_Type_SHLIB   5      ; 保留
   166                              <3> 
   167                              <3>     %macro ABI_HEADER 4 ;1=File Type, 2=Entry Point Address, 3=Section Header Offset, 4=Section Header Count
   168                              <3>         db 0xA5, 'A', 'B', 'I'     ; ABI Magic Number
   169                              <3>         db 1                       ; Encode Type
   170                              <3>         db 1                       ; ABI Version
   171                              <3> 
   172                              <3>         dw %1                      ; ABI File Type
   173                              <3>         dq %2                      ; Entry Point Address
   174                              <3>         dw 32                      ; ABI Headers Size
   175                              <3> 
   176                              <3>         dq %3                      ; Section Header Offset
   177                              <3>         dw 32                      ; Section Header Size
   178                              <3>         dw %4                      ; Section Header Count
   179                              <3>         dw 0                       ; Symble Table Entry Size
   180                              <3>     %endmacro
   181                              <3>     STRUC struct_ABI_HEADER
   182                              <3>         .magic:         resb 4    ; ABI Magic Number (4 bytes)
   183                              <3>         .encode_type:   resb 1    ; Encode Type (1 byte)
   184                              <3>         .abi_version:   resb 1    ; ABI Version (1 byte)
   185                              <3>         .file_type:     resw 1    ; ABI File Type (2 bytes)
   186                              <3>         .entry_point:   resq 1    ; Entry Point Address (8 bytes)
   187                              <3>         .header_size:   resw 1    ; ABI Headers Size (2 bytes)
   188                              <3>         .section_offset: resq 1   ; Section Header Offset (8 bytes)
   189                              <3>         .section_size:  resw 1    ; Section Header Size (2 bytes)
   190                              <3>         .section_count: resw 1    ; Section Header Count (2 bytes)
   191                              <3>         .sym_table_size: resw 1   ; Symbol Table Entry Size (2 bytes)
   192                              <3>     ENDSTRUC
   193                              <3> 
   194                              <3>     %macro SECTION_HEADER 4 ;1=Section Type, 2=Virtual Address, 3=Section Offset, 4=Section Size
   195                              <3>         dq %1                  ; Section Type
   196                              <3>         dq %2                  ; Virtual Address
   197                              <3>         dq %3                  ; Section Offset
   198                              <3>         dq %4                  ; Section Size
   199                              <3>     %endmacro
   200                              <3>     STRUC struct_SECTION_HEADER
   201                              <3>         .type:      resq 1    ; Section Type (8 bytes)
   202                              <3>         .vaddr:     resq 1    ; Virtual Address (8 bytes)
   203                              <3>         .offset:    resq 1    ; Section Offset (8 bytes)
   204                              <3>         .size:      resq 1    ; Section Size (8 bytes)
   205                              <3>     ENDSTRUC
   206                              <3> %endif
   207                              <3> 
   208                              <3> %endif
     6                              <2> 
     7                              <2> [BITS 64]
     8                              <2> ; GDTPointerUpperAddr equ 0xFFFF800000104000
     9                              <2> ; IDTPointerUpperAddr equ 0xFFFF80000010400a
    10                              <2> ; TSSPointerUpperAddr equ 0xFFFF800000104004
    11                              <2> 
    12 000014BF 646976696465206578- <2> expection_div_messige: db 'divide expection', 0
    12 000014C8 70656374696F6E00    <2>
    13 000014D0 00                  <2> expection_error_code: db 0
    14                              <2> ; ; 描述符类型常量
    15                              <2> %define INTGATE 0x8E    ; 64位中断门(P=1, DPL=00, 类型=1110)
    16                              <2> %define TRAPGATE 0x8F   ; 64位陷阱门(P=1, DPL=00, 类型=1111)
    17                              <2> 
    18                              <2> ; ; 64位IDT条目结构(16字节)
    19                              <2> struc idt_info
    20 00000000 ????                <2>     .offset_low:   resw 1  ; 0  偏移低16位(0..15)
    21 00000002 ????                <2>     .selector:     resw 1  ; 16 代码段选择子
    22                              <2> 
    23 00000004 ??                  <2>     .ist:          resb 1  ; 32 IST索引(0表示不使用)
    24 00000005 ??                  <2>     .type_attr:    resb 1  ; 40 类型属性
    25                              <2> 
    26 00000006 ????                <2>     .offset_mid:   resw 1  ; 48 偏移中16位(16..31)
    27                              <2> 
    28 00000008 ????????            <2>     .offset_high:  resd 1  ; 64 偏移高32位(32..63)
    29                              <2> 
    30 0000000C ????????            <2>     .reserved:     resd 1  ; 96 保留
    31                              <2> endstruc
    32                              <2> init_expection:;init expection idt
    33                              <2>     prolog 0;
    63 000014D1 55                  <3>  push rbp
    64 000014D2 4889E5              <3>  mov rbp, rsp
    65 000014D5 488945F8            <3>  mov [rbp-8],rax
    66 000014D9 B800000000          <3>  mov rax, %1
    67 000014DE 4883C00F            <3>  add rax, 15
    68 000014E2 4883E0F0            <3>  and rax, ~15
    69 000014E6 4829C4              <3>  sub rsp, rax
    70 000014E9 488B45F8            <3>  mov rax,[rbp-8]
    71                              <3>  pushallq
   115 000014ED 50                  <4>  push rax
   116 000014EE 53                  <4>  push rbx
   117 000014EF 51                  <4>  push rcx
   118 000014F0 52                  <4>  push rdx
   119 000014F1 56                  <4>  push rsi
   120 000014F2 57                  <4>  push rdi
   121 000014F3 4150                <4>  push r8
   122 000014F5 4151                <4>  push r9
   123 000014F7 4152                <4>  push r10
   124 000014F9 4153                <4>  push r11
   125 000014FB 4154                <4>  push r12
   126 000014FD 4155                <4>  push r13
   127 000014FF 4156                <4>  push r14
   128 00001501 4157                <4>  push r15
    72                              <3> 
    73                              <3> 
    74                              <3> 
    75                              <3> 
    76                              <3> 
    77                              <3> 
    34 00001503 488D35F8010000      <2>     lea rsi,[rel default_exception_handler]
    35                              <2>     function setup_default_expection_idt,1,rsi
    24                              <3>  %assign param_count %0 - 2
    25                              <3> 
    26                              <3>  %if param_count < 0
    27                              <3>  %assign param_count 0
    28                              <3>  %endif
    29                              <3>  %if param_count < 1
    30                              <3>  %assign ret_param_count 0
    31                              <3>  %else
    32                              <3>  %assign ret_param_count %2
    33                              <3>  %endif
    34                              <3> 
    35                              <3> 
    36                              <3>  prepare_call param_count, ret_param_count
    97                              <4>  %assign total_space ((%1 + %2) * 8)
    98                              <4> 
    99                              <4>  %if (total_space % 16) != 0
   100                              <4>  %assign total_space total_space + 8
   101                              <4>  %endif
   102                              <4> 
   103 0000150A 4883EC10            <4>  sub rsp, total_space
    37                              <3> 
    38                              <3> 
    39                              <3>  %if param_count > 0
    40                              <3>  %assign i 0
    41 0000150E 48894424F8          <3>  mov [rsp-8], rax
    42                              <3>  %rep param_count
    43                              <3>  %rotate 1
    44                              <3>  mov rax, %2
    45                              <3>  mov [rsp + 8*i], rax
    46                              <3>  %assign i i+1
    47                              <3>  %endrep
    43                              <4>  %rotate 1
    44 00001513 4889F0              <4>  mov rax, %2
    45 00001516 48890424            <4>  mov [rsp + 8*i], rax
    46                              <4>  %assign i i+1
    48                              <3> 
    49                              <3>  %rotate 1
    50                              <3>  %rotate 1
    51 0000151A 488B4424F8          <3>  mov rax,[rsp-8]
    52                              <3>  %endif
    53                              <3> 
    54                              <3> 
    55 0000151F E83B010000          <3>  call %1
    56                              <3> 
    57                              <3> 
    58                              <3>  cleanup_call param_count, ret_param_count
   107                              <4>  %assign total_space ((%1 + %2) * 8)
   108                              <4>  %if (total_space % 16) != 0
   109                              <4>  %assign total_space total_space + 8
   110                              <4>  %endif
   111 00001524 4883C410            <4>  add rsp, total_space
    59                              <3> 
    36                              <2>     ; jmp $
    37 00001528 488D35DC010000      <2>     lea rsi,[rel div0_exception_handler]
    38                              <2>     function register_expection_idt,1,0,1,rsi
    24                              <3>  %assign param_count %0 - 2
    25                              <3> 
    26                              <3>  %if param_count < 0
    27                              <3>  %assign param_count 0
    28                              <3>  %endif
    29                              <3>  %if param_count < 1
    30                              <3>  %assign ret_param_count 0
    31                              <3>  %else
    32                              <3>  %assign ret_param_count %2
    33                              <3>  %endif
    34                              <3> 
    35                              <3> 
    36                              <3>  prepare_call param_count, ret_param_count
    97                              <4>  %assign total_space ((%1 + %2) * 8)
    98                              <4> 
    99                              <4>  %if (total_space % 16) != 0
   100                              <4>  %assign total_space total_space + 8
   101                              <4>  %endif
   102                              <4> 
   103 0000152F 4883EC20            <4>  sub rsp, total_space
    37                              <3> 
    38                              <3> 
    39                              <3>  %if param_count > 0
    40                              <3>  %assign i 0
    41 00001533 48894424F8          <3>  mov [rsp-8], rax
    42                              <3>  %rep param_count
    43                              <3>  %rotate 1
    44                              <3>  mov rax, %2
    45                              <3>  mov [rsp + 8*i], rax
    46                              <3>  %assign i i+1
    47                              <3>  %endrep
    43                              <4>  %rotate 1
    44 00001538 B800000000          <4>  mov rax, %2
    45 0000153D 48890424            <4>  mov [rsp + 8*i], rax
    46                              <4>  %assign i i+1
    43                              <4>  %rotate 1
    44 00001541 B801000000          <4>  mov rax, %2
    45 00001546 4889442408          <4>  mov [rsp + 8*i], rax
    46                              <4>  %assign i i+1
    43                              <4>  %rotate 1
    44 0000154B 4889F0              <4>  mov rax, %2
    45 0000154E 4889442410          <4>  mov [rsp + 8*i], rax
    46                              <4>  %assign i i+1
    48                              <3> 
    49                              <3>  %rotate 1
    50                              <3>  %rotate 1
    51 00001553 488B4424F8          <3>  mov rax,[rsp-8]
    52                              <3>  %endif
    53                              <3> 
    54                              <3> 
    55 00001558 E858000000          <3>  call %1
    56                              <3> 
    57                              <3> 
    58                              <3>  cleanup_call param_count, ret_param_count
   107                              <4>  %assign total_space ((%1 + %2) * 8)
   108                              <4>  %if (total_space % 16) != 0
   109                              <4>  %assign total_space total_space + 8
   110                              <4>  %endif
   111 0000155D 4883C420            <4>  add rsp, total_space
    59                              <3> 
    39                              <2> 
    40 00001561 488D3511020000      <2>     lea rsi,[rel debug_exception_handler]
    41                              <2>     function register_expection_idt,1,1,1,rsi
    24                              <3>  %assign param_count %0 - 2
    25                              <3> 
    26                              <3>  %if param_count < 0
    27                              <3>  %assign param_count 0
    28                              <3>  %endif
    29                              <3>  %if param_count < 1
    30                              <3>  %assign ret_param_count 0
    31                              <3>  %else
    32                              <3>  %assign ret_param_count %2
    33                              <3>  %endif
    34                              <3> 
    35                              <3> 
    36                              <3>  prepare_call param_count, ret_param_count
    97                              <4>  %assign total_space ((%1 + %2) * 8)
    98                              <4> 
    99                              <4>  %if (total_space % 16) != 0
   100                              <4>  %assign total_space total_space + 8
   101                              <4>  %endif
   102                              <4> 
   103 00001568 4883EC20            <4>  sub rsp, total_space
    37                              <3> 
    38                              <3> 
    39                              <3>  %if param_count > 0
    40                              <3>  %assign i 0
    41 0000156C 48894424F8          <3>  mov [rsp-8], rax
    42                              <3>  %rep param_count
    43                              <3>  %rotate 1
    44                              <3>  mov rax, %2
    45                              <3>  mov [rsp + 8*i], rax
    46                              <3>  %assign i i+1
    47                              <3>  %endrep
    43                              <4>  %rotate 1
    44 00001571 B801000000          <4>  mov rax, %2
    45 00001576 48890424            <4>  mov [rsp + 8*i], rax
    46                              <4>  %assign i i+1
    43                              <4>  %rotate 1
    44 0000157A B801000000          <4>  mov rax, %2
    45 0000157F 4889442408          <4>  mov [rsp + 8*i], rax
    46                              <4>  %assign i i+1
    43                              <4>  %rotate 1
    44 00001584 4889F0              <4>  mov rax, %2
    45 00001587 4889442410          <4>  mov [rsp + 8*i], rax
    46                              <4>  %assign i i+1
    48                              <3> 
    49                              <3>  %rotate 1
    50                              <3>  %rotate 1
    51 0000158C 488B4424F8          <3>  mov rax,[rsp-8]
    52                              <3>  %endif
    53                              <3> 
    54                              <3> 
    55 00001591 E81F000000          <3>  call %1
    56                              <3> 
    57                              <3> 
    58                              <3>  cleanup_call param_count, ret_param_count
   107                              <4>  %assign total_space ((%1 + %2) * 8)
   108                              <4>  %if (total_space % 16) != 0
   109                              <4>  %assign total_space total_space + 8
   110                              <4>  %endif
   111 00001596 4883C420            <4>  add rsp, total_space
    59                              <3> 
    42                              <2> 
    43                              <2>     ; mov rax,0x123123
    44                              <2>     ; jmp $
    45                              <2> 
    46                              <2>     epilog
    81                              <3>  popallq
   132 0000159A 415F                <4>  pop r15
   133 0000159C 415E                <4>  pop r14
   134 0000159E 415D                <4>  pop r13
   135 000015A0 415C                <4>  pop r12
   136 000015A2 415B                <4>  pop r11
   137 000015A4 415A                <4>  pop r10
   138 000015A6 4159                <4>  pop r9
   139 000015A8 4158                <4>  pop r8
   140 000015AA 5F                  <4>  pop rdi
   141 000015AB 5E                  <4>  pop rsi
   142 000015AC 5A                  <4>  pop rdx
   143 000015AD 59                  <4>  pop rcx
   144 000015AE 5B                  <4>  pop rbx
   145 000015AF 58                  <4>  pop rax
    82                              <3> 
    83 000015B0 4889EC              <3>  mov rsp, rbp
    84 000015B3 5D                  <3>  pop rbp
    85 000015B4 C3                  <3>  ret
    47                              <2> register_expection_idt:;vector_num,rsp,handler
    48                              <2>     prolog 0;
    63 000015B5 55                  <3>  push rbp
    64 000015B6 4889E5              <3>  mov rbp, rsp
    65 000015B9 488945F8            <3>  mov [rbp-8],rax
    66 000015BD B800000000          <3>  mov rax, %1
    67 000015C2 4883C00F            <3>  add rax, 15
    68 000015C6 4883E0F0            <3>  and rax, ~15
    69 000015CA 4829C4              <3>  sub rsp, rax
    70 000015CD 488B45F8            <3>  mov rax,[rbp-8]
    71                              <3>  pushallq
   115 000015D1 50                  <4>  push rax
   116 000015D2 53                  <4>  push rbx
   117 000015D3 51                  <4>  push rcx
   118 000015D4 52                  <4>  push rdx
   119 000015D5 56                  <4>  push rsi
   120 000015D6 57                  <4>  push rdi
   121 000015D7 4150                <4>  push r8
   122 000015D9 4151                <4>  push r9
   123 000015DB 4152                <4>  push r10
   124 000015DD 4153                <4>  push r11
   125 000015DF 4154                <4>  push r12
   126 000015E1 4155                <4>  push r13
   127 000015E3 4156                <4>  push r14
   128 000015E5 4157                <4>  push r15
    72                              <3> 
    73                              <3> 
    74                              <3> 
    75                              <3> 
    76                              <3> 
    77                              <3> 
    49                              <2>     get_param rsi, 1
    89 000015E7 488B7510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    50                              <2>     get_param r15, 2
    89 000015EB 4C8B7D18            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    51                              <2>     get_param rdi, 3
    89 000015EF 488B7D20            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    52 000015F3 48BB0A4010000080FF- <2>     mov rbx,IDTPointerUpperAddr
    52 000015FC FF                  <2>
    53 000015FD 488B4302            <2>     mov rax,[rbx + 2]
    54                              <2> 
    55 00001601 4989F0              <2>     mov r8,rsi
    56 00001604 49C1E004            <2>     shl r8, 4
    57 00001608 4C01C0              <2>     add rax, r8
    58                              <2> 
    59                              <2>     ; jmp $
    60                              <2> 
    61 0000160B 4989F8              <2>     mov r8,rdi
    62 0000160E 49C1E820            <2>     shr r8,32
    63                              <2> 
    64 00001612 4989F9              <2>     mov r9,rdi
    65 00001615 49C1E910            <2>     shr r9,16
    66 00001619 4981E1FFFF0000      <2>     and r9,0xFFFF
    67                              <2> 
    68 00001620 B900000000          <2>     mov rcx,0
    69 00001625 4C89F9              <2>     mov rcx, r15
    70                              <2>     ; jmp $
    71 00001628 668938              <2>     mov word [rax + idt_info.offset_low], di
    72                              <2>         ; mov ax,di
    73                              <2>     ; jmp $
    74 0000162B 66C740020800        <2>     mov word [rax + idt_info.selector], 0x08
    75 00001631 884804              <2>     mov byte [rax + idt_info.ist], cl
    76 00001634 C640058F            <2>     mov byte [rax + idt_info.type_attr], TRAPGATE
    77 00001638 6644894806          <2>     mov word [rax + idt_info.offset_mid], r9w
    78 0000163D 4C894008            <2>     mov qword [rax + idt_info.offset_high], r8
    79                              <2> 
    80 00001641 0F011B              <2>     lidt	[rbx]
    81                              <2>     epilog
    81                              <3>  popallq
   132 00001644 415F                <4>  pop r15
   133 00001646 415E                <4>  pop r14
   134 00001648 415D                <4>  pop r13
   135 0000164A 415C                <4>  pop r12
   136 0000164C 415B                <4>  pop r11
   137 0000164E 415A                <4>  pop r10
   138 00001650 4159                <4>  pop r9
   139 00001652 4158                <4>  pop r8
   140 00001654 5F                  <4>  pop rdi
   141 00001655 5E                  <4>  pop rsi
   142 00001656 5A                  <4>  pop rdx
   143 00001657 59                  <4>  pop rcx
   144 00001658 5B                  <4>  pop rbx
   145 00001659 58                  <4>  pop rax
    82                              <3> 
    83 0000165A 4889EC              <3>  mov rsp, rbp
    84 0000165D 5D                  <3>  pop rbp
    85 0000165E C3                  <3>  ret
    82                              <2> 
    83                              <2> setup_default_expection_idt:;setup expection idt 0~31
    84                              <2>     prolog 0;
    63 0000165F 55                  <3>  push rbp
    64 00001660 4889E5              <3>  mov rbp, rsp
    65 00001663 488945F8            <3>  mov [rbp-8],rax
    66 00001667 B800000000          <3>  mov rax, %1
    67 0000166C 4883C00F            <3>  add rax, 15
    68 00001670 4883E0F0            <3>  and rax, ~15
    69 00001674 4829C4              <3>  sub rsp, rax
    70 00001677 488B45F8            <3>  mov rax,[rbp-8]
    71                              <3>  pushallq
   115 0000167B 50                  <4>  push rax
   116 0000167C 53                  <4>  push rbx
   117 0000167D 51                  <4>  push rcx
   118 0000167E 52                  <4>  push rdx
   119 0000167F 56                  <4>  push rsi
   120 00001680 57                  <4>  push rdi
   121 00001681 4150                <4>  push r8
   122 00001683 4151                <4>  push r9
   123 00001685 4152                <4>  push r10
   124 00001687 4153                <4>  push r11
   125 00001689 4154                <4>  push r12
   126 0000168B 4155                <4>  push r13
   127 0000168D 4156                <4>  push r14
   128 0000168F 4157                <4>  push r15
    72                              <3> 
    73                              <3> 
    74                              <3> 
    75                              <3> 
    76                              <3> 
    77                              <3> 
    85                              <2>     get_param rsi, 1
    89 00001691 488B7510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    86 00001695 4989F0              <2>     mov r8,rsi
    87 00001698 49C1E820            <2>     shr r8,32
    88 0000169C 4989F1              <2>     mov r9,rsi
    89 0000169F 49C1E910            <2>     shr r9,16
    90 000016A3 4981E1FFFF0000      <2>     and r9,0xFFFF
    91                              <2> 
    92 000016AA B900000000          <2>     mov rcx,0
    93 000016AF 48BB0A4010000080FF- <2>     mov rbx,IDTPointerUpperAddr
    93 000016B8 FF                  <2>
    94 000016B9 488B4302            <2>     mov rax,[rbx + 2]
    95                              <2> 
    96                              <2>     .expection_idt:
    97 000016BD 668930              <2>         mov word [rax + idt_info.offset_low], si
    98 000016C0 66C740020800        <2>         mov word [rax + idt_info.selector], 0x08
    99                              <2> 
   100 000016C6 C6400401            <2>         mov byte [rax + idt_info.ist], 0x01
   101 000016CA C640058F            <2>         mov byte [rax + idt_info.type_attr], TRAPGATE
   102                              <2> 
   103 000016CE 6644894806          <2>         mov word [rax + idt_info.offset_mid], r9w
   104                              <2> 
   105 000016D3 4C894008            <2>         mov qword [rax + idt_info.offset_high], r8
   106                              <2> 
   107 000016D7 4883C010            <2>         add rax, 16
   108 000016DB 48FFC1              <2>         inc rcx
   109 000016DE 4883F920            <2>         cmp rcx, 32
   110 000016E2 7ED9                <2>         jle .expection_idt
   111                              <2> 
   112 000016E4 0F011B              <2>     lidt	[rbx]
   113                              <2>     epilog
    81                              <3>  popallq
   132 000016E7 415F                <4>  pop r15
   133 000016E9 415E                <4>  pop r14
   134 000016EB 415D                <4>  pop r13
   135 000016ED 415C                <4>  pop r12
   136 000016EF 415B                <4>  pop r11
   137 000016F1 415A                <4>  pop r10
   138 000016F3 4159                <4>  pop r9
   139 000016F5 4158                <4>  pop r8
   140 000016F7 5F                  <4>  pop rdi
   141 000016F8 5E                  <4>  pop rsi
   142 000016F9 5A                  <4>  pop rdx
   143 000016FA 59                  <4>  pop rcx
   144 000016FB 5B                  <4>  pop rbx
   145 000016FC 58                  <4>  pop rax
    82                              <3> 
    83 000016FD 4889EC              <3>  mov rsp, rbp
    84 00001700 5D                  <3>  pop rbp
    85 00001701 C3                  <3>  ret
   114                              <2> 
   115                              <2> 
   116                              <2> default_exception_handler:;
   117 00001702 B8FFFF0000          <2>     mov rax,0xffff
   118 00001707 EBFE                <2>     jmp $
   119 00001709 48CF                <2>     iretq
   120                              <2> div0_exception_handler:;
   121 0000170B BB11110000          <2>     mov rbx,0x1111
   122                              <2>     ; jmp $
   123 00001710 50                  <2>     push rax
   124 00001711 53                  <2>     push rbx
   125 00001712 51                  <2>     push rcx
   126 00001713 52                  <2>     push rdx
   127 00001714 56                  <2>     push rsi
   128 00001715 57                  <2>     push rdi
   129 00001716 55                  <2>     push rbp
   130 00001717 4150                <2>     push r8
   131 00001719 4151                <2>     push r9
   132 0000171B 4152                <2>     push r10
   133 0000171D 4153                <2>     push r11
   134 0000171F 4154                <2>     push r12
   135 00001721 4155                <2>     push r13
   136 00001723 4156                <2>     push r14
   137 00001725 4157                <2>     push r15
   138                              <2> 
   139                              <2> 
   140 00001727 488D3591FDFFFF      <2>     lea rsi, [rel expection_div_messige]
   141                              <2>     ; mov rax,rsi
   142                              <2>     ; jmp $
   143                              <2>     function draw_string, 1, 0, 0, rsi
    24                              <3>  %assign param_count %0 - 2
    25                              <3> 
    26                              <3>  %if param_count < 0
    27                              <3>  %assign param_count 0
    28                              <3>  %endif
    29                              <3>  %if param_count < 1
    30                              <3>  %assign ret_param_count 0
    31                              <3>  %else
    32                              <3>  %assign ret_param_count %2
    33                              <3>  %endif
    34                              <3> 
    35                              <3> 
    36                              <3>  prepare_call param_count, ret_param_count
    97                              <4>  %assign total_space ((%1 + %2) * 8)
    98                              <4> 
    99                              <4>  %if (total_space % 16) != 0
   100                              <4>  %assign total_space total_space + 8
   101                              <4>  %endif
   102                              <4> 
   103 0000172E 4883EC20            <4>  sub rsp, total_space
    37                              <3> 
    38                              <3> 
    39                              <3>  %if param_count > 0
    40                              <3>  %assign i 0
    41 00001732 48894424F8          <3>  mov [rsp-8], rax
    42                              <3>  %rep param_count
    43                              <3>  %rotate 1
    44                              <3>  mov rax, %2
    45                              <3>  mov [rsp + 8*i], rax
    46                              <3>  %assign i i+1
    47                              <3>  %endrep
    43                              <4>  %rotate 1
    44 00001737 B800000000          <4>  mov rax, %2
    45 0000173C 48890424            <4>  mov [rsp + 8*i], rax
    46                              <4>  %assign i i+1
    43                              <4>  %rotate 1
    44 00001740 B800000000          <4>  mov rax, %2
    45 00001745 4889442408          <4>  mov [rsp + 8*i], rax
    46                              <4>  %assign i i+1
    43                              <4>  %rotate 1
    44 0000174A 4889F0              <4>  mov rax, %2
    45 0000174D 4889442410          <4>  mov [rsp + 8*i], rax
    46                              <4>  %assign i i+1
    48                              <3> 
    49                              <3>  %rotate 1
    50                              <3>  %rotate 1
    51 00001752 488B4424F8          <3>  mov rax,[rsp-8]
    52                              <3>  %endif
    53                              <3> 
    54                              <3> 
    55 00001757 E8A6F9FFFF          <3>  call %1
    56                              <3> 
    57                              <3> 
    58                              <3>  cleanup_call param_count, ret_param_count
   107                              <4>  %assign total_space ((%1 + %2) * 8)
   108                              <4>  %if (total_space % 16) != 0
   109                              <4>  %assign total_space total_space + 8
   110                              <4>  %endif
   111 0000175C 4883C420            <4>  add rsp, total_space
    59                              <3> 
   144                              <2>     ; mov rax,0x88
   145                              <2>     ; jmp $
   146                              <2>     ; hlt
   147                              <2> 
   148 00001760 415F                <2>     pop r15
   149 00001762 415E                <2>     pop r14
   150 00001764 415D                <2>     pop r13
   151 00001766 415C                <2>     pop r12
   152 00001768 415B                <2>     pop r11
   153 0000176A 415A                <2>     pop r10
   154 0000176C 4159                <2>     pop r9
   155 0000176E 4158                <2>     pop r8
   156 00001770 5D                  <2>     pop rbp
   157 00001771 5F                  <2>     pop rdi
   158 00001772 5E                  <2>     pop rsi
   159 00001773 5A                  <2>     pop rdx
   160 00001774 59                  <2>     pop rcx
   161 00001775 5B                  <2>     pop rbx
   162 00001776 58                  <2>     pop rax
   163                              <2> 
   164 00001777 48CF                <2>     iretq
   165                              <2> debug_exception_handler:;
   166 00001779 BB22220000          <2>     mov rbx,0x2222
   167 0000177E EBFE                <2>     jmp $
   168 00001780 50                  <2>     push rax
   169 00001781 53                  <2>     push rbx
   170 00001782 51                  <2>     push rcx
   171 00001783 52                  <2>     push rdx
   172 00001784 56                  <2>     push rsi
   173 00001785 57                  <2>     push rdi
   174 00001786 55                  <2>     push rbp
   175 00001787 4150                <2>     push r8
   176 00001789 4151                <2>     push r9
   177 0000178B 4152                <2>     push r10
   178 0000178D 4153                <2>     push r11
   179 0000178F 4154                <2>     push r12
   180 00001791 4155                <2>     push r13
   181 00001793 4156                <2>     push r14
   182 00001795 4157                <2>     push r15
   183                              <2> 
   184                              <2> 
   185 00001797 488D3521FDFFFF      <2>     lea rsi, [rel expection_div_messige]
   186                              <2>     function draw_string, 1, 0, 0, rsi
    24                              <3>  %assign param_count %0 - 2
    25                              <3> 
    26                              <3>  %if param_count < 0
    27                              <3>  %assign param_count 0
    28                              <3>  %endif
    29                              <3>  %if param_count < 1
    30                              <3>  %assign ret_param_count 0
    31                              <3>  %else
    32                              <3>  %assign ret_param_count %2
    33                              <3>  %endif
    34                              <3> 
    35                              <3> 
    36                              <3>  prepare_call param_count, ret_param_count
    97                              <4>  %assign total_space ((%1 + %2) * 8)
    98                              <4> 
    99                              <4>  %if (total_space % 16) != 0
   100                              <4>  %assign total_space total_space + 8
   101                              <4>  %endif
   102                              <4> 
   103 0000179E 4883EC20            <4>  sub rsp, total_space
    37                              <3> 
    38                              <3> 
    39                              <3>  %if param_count > 0
    40                              <3>  %assign i 0
    41 000017A2 48894424F8          <3>  mov [rsp-8], rax
    42                              <3>  %rep param_count
    43                              <3>  %rotate 1
    44                              <3>  mov rax, %2
    45                              <3>  mov [rsp + 8*i], rax
    46                              <3>  %assign i i+1
    47                              <3>  %endrep
    43                              <4>  %rotate 1
    44 000017A7 B800000000          <4>  mov rax, %2
    45 000017AC 48890424            <4>  mov [rsp + 8*i], rax
    46                              <4>  %assign i i+1
    43                              <4>  %rotate 1
    44 000017B0 B800000000          <4>  mov rax, %2
    45 000017B5 4889442408          <4>  mov [rsp + 8*i], rax
    46                              <4>  %assign i i+1
    43                              <4>  %rotate 1
    44 000017BA 4889F0              <4>  mov rax, %2
    45 000017BD 4889442410          <4>  mov [rsp + 8*i], rax
    46                              <4>  %assign i i+1
    48                              <3> 
    49                              <3>  %rotate 1
    50                              <3>  %rotate 1
    51 000017C2 488B4424F8          <3>  mov rax,[rsp-8]
    52                              <3>  %endif
    53                              <3> 
    54                              <3> 
    55 000017C7 E836F9FFFF          <3>  call %1
    56                              <3> 
    57                              <3> 
    58                              <3>  cleanup_call param_count, ret_param_count
   107                              <4>  %assign total_space ((%1 + %2) * 8)
   108                              <4>  %if (total_space % 16) != 0
   109                              <4>  %assign total_space total_space + 8
   110                              <4>  %endif
   111 000017CC 4883C420            <4>  add rsp, total_space
    59                              <3> 
   187                              <2> 
   188 000017D0 F4                  <2>     hlt
   189 000017D1 415F                <2>     pop r15
   190 000017D3 415E                <2>     pop r14
   191 000017D5 415D                <2>     pop r13
   192 000017D7 415C                <2>     pop r12
   193 000017D9 415B                <2>     pop r11
   194 000017DB 415A                <2>     pop r10
   195 000017DD 4159                <2>     pop r9
   196 000017DF 4158                <2>     pop r8
   197 000017E1 5D                  <2>     pop rbp
   198 000017E2 5F                  <2>     pop rdi
   199 000017E3 5E                  <2>     pop rsi
   200 000017E4 5A                  <2>     pop rdx
   201 000017E5 59                  <2>     pop rcx
   202 000017E6 5B                  <2>     pop rbx
   203 000017E7 58                  <2>     pop rax
   204                              <2> 
   205 000017E8 48CF                <2>     iretq
   206                              <2>     ; function draw_screen,0,0x00000000
   207                              <2>     ;  jmp $
   208                              <2>     ; lea rsi,[rel expection_div_messige]
   209                              <2>     ; function draw_string,1,0,0,rsi
   210                              <2>     ; jmp $
   211                              <2>     ; iretq
   212                              <2> ; make_call_gate:                          	;创建64位的调用门
   213                              <2> ;                                           	;输入：RAX=例程的线性地址
   214                              <2> ;                                           	;输出：RDI:RSI=调用门
   215                              <2> ;          mov rdi, rax
   216                              <2> ;          shr rdi, 32                     	;得到门的高64位，在RDI中
   217                              <2> 
   218                              <2> ;          push rax                        	;构造数据结构，并预置线性地址的位15~0
   219                              <2> ;          mov word [rsp + 2], CORE_CODE64_SEL	;预置段选择子部分
   220                              <2> ;          mov [rsp + 4], eax                  	;预置线性地址的位31~16
   221                              <2> ;          mov word [rsp + 4], 0x8c00         	;添加P=1，TYPE=64位调用门
   222                              <2> ;          pop rsi
   223                              <2> 
   224                              <2> ;          ret
   225                              <2> 
   226                              <2> ; ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   227                              <2> ; make_interrupt_gate:                      	;创建64位的中断门
   228                              <2> ;                                             	;输入：RAX=例程的线性地址
   229                              <2> ;                                             	;输出：RDI:RSI=中断门
   230                              <2> ;          mov rdi, rax
   231                              <2> ;          shr rdi, 32                       	;得到门的高64位，在RDI中
   232                              <2> 
   233                              <2> ;          push rax                          	;构造数据结构，并预置线性地址的位15~0
   234                              <2> ;          mov word [rsp + 2], CORE_CODE64_SEL	;预置段选择子部分
   235                              <2> ;          mov [rsp + 4], eax                  	;预置线性地址的位31~16
   236                              <2> ;          mov word [rsp + 4], 0x8e00         	;添加P=1，TYPE=64位中断门
   237                              <2> ;          pop rsi
   238                              <2> 
   239                              <2> ;          ret
   240                              <2> 
   241                              <2> ; ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   242                              <2> ; make_trap_gate:                             	;创建64位的陷阱门
   243                              <2> ;                                              	;输入：RAX=例程的线性地址
   244                              <2> ;                                              	;输出：RDI:RSI=陷阱门
   245                              <2> ;          mov rdi, rax
   246                              <2> ;          shr rdi, 32                        	;得到门的高64位，在RDI中
   247                              <2> 
   248                              <2> ;          push rax                           	;构造数据结构，并预置线性地址的位15~0
   249                              <2> ;          mov word [rsp + 2], CORE_CODE64_SEL	;预置段选择子部分
   250                              <2> ;          mov [rsp + 4], eax                  	;预置线性地址的位31~16
   251                              <2> ;          mov word [rsp + 4], 0x8f00         	;添加P=1，TYPE=64位陷阱门
   252                              <2> ;          pop rsi
   253                              <2> 
   254                              <2> ;          ret
   255                              <2> 
   256                              <2> ; ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   257                              <2> ; make_tss_descriptor:                    	;创建64位的TSS描述符
   258                              <2> ;                                           	;输入：RAX=TSS的线性地址
   259                              <2> ;                                           	;输出：RDI:RSI=TSS描述符
   260                              <2> ;          push rax
   261                              <2> 
   262                              <2> ;          mov rdi, rax
   263                              <2> ;          shr rdi, 32                    	;得到门的高64位，在RDI中
   264                              <2> 
   265                              <2> ;          push rax                       	;先将部分线性地址移到适当位置
   266                              <2> ;          shl qword [rsp], 16           	;将线性地址的位23~00移到正确位置
   267                              <2> ;          mov word [rsp], 104           	;段界限的标准长度
   268                              <2> ;          mov al, [rsp + 5]
   269                              <2> ;          mov [rsp + 7], al             	;将线性地址的位31~24移到正确位置
   270                              <2> ;          mov byte [rsp + 5], 0x89     	;P=1，DPL=00，TYPE=1001（64位TSS）
   271                              <2> ;          mov byte [rsp + 6], 0        	;G、0、0、AVL和limit
   272                              <2> ;          pop rsi                       	;门的低64位
   273                              <2> 
   274                              <2> ;          pop rax
   275                              <2> 
   276                              <2> ;          ret
   277                              <2> 
   278                              <2> ; ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   279                              <2> ; mount_idt_entry:                     	;在中断描述符表IDT中安装门描述符
   280                              <2> ;                                        	;R8=中断向量
   281                              <2> ;                                        	;RDI:RSI=门描述符
   282                              <2> ;          push r8
   283                              <2> ;          push r9
   284                              <2> 
   285                              <2> ;          shl r8, 4                         	;中断号乘以16，得到表内偏移
   286                              <2> ;          mov r9, UPPER_IDT_LINEAR        	;中断描述符表的高端线性地址
   287                              <2> ;          mov [r9 + r8], rsi
   288                              <2> ;          mov [r9 + r8 + 8], rdi
   289                              <2> 
   290                              <2> ;          pop r9
   291                              <2> ;          pop r8
   292                              <2> 
   293                              <2> ;          ret
   294                              <2> %include "../kernel/printk.asm"
     1                              <3> %ifndef PRINTK_ASM
     2                              <3> %define PRINTK_ASM
     3                              <3> 
     4                              <3> %include "../bootloader/global_def.asm"
     5                              <3> %include "../kernel/video.asm"
     6                              <3>     
     7                              <3> [BITS 64]
     8                              <3>     ; struc cursor_info
     9                              <3>     ;     .print_xpixel:            resw 1      
    10                              <3>     ;     .print_ypixel:            resw 1       
    11                              <3>     ;     .current_xpixel:          resw 1      
    12                              <3>     ;     .current_ypixel:          resw 1
    13                              <3>     ; endstruc
    14                              <3>     ; cursor_info_ptr:
    15                              <3>     ;     istruc cursor_info
    16                              <3>     ;         at cursor_info.print_xpixel, dw 0
    17                              <3>     ;         at cursor_info.print_ypixel, dw 0
    18                              <3>     ;         at cursor_info.current_xpixel, dw 0
    19                              <3>     ;         at cursor_info.current_ypixel, dw 0
    20                              <3>     ;     iend
    21                              <3> 
    22                              <3>     ; struc font_info
    23                              <3>     ;     .font_base_address:    resq 1
    24                              <3>     ;     .font_size:            resq 1
    25                              <3>     ;     .font_width:           resq 1
    26                              <3>     ;     .font_height:          resq 1
    27                              <3>     ; endstruc
    28                              <3>     ; font_info_ptr:
    29                              <3>     ;     istruc font_info
    30                              <3>     ;         at font_info.font_base_address, dq 0
    31                              <3>     ;         at font_info.font_size, dq 0
    32                              <3>     ;         at font_info.font_width, dq 0
    33                              <3>     ;         at font_info.font_height, dq 0
    34                              <3>     ;     iend
    35                              <3> 
    36                              <3> struc print_info
    37                              <3>     .cursor_current_xpixel:     resw 1
    38                              <3>     .cursor_current_ypixel:     resw 1
    39                              <3>     .cursor_current_line:       resw 1
    40                              <3> 
    41                              <3>     .cursor_print_xpixel:       resw 1
    42                              <3>     .cursor_print_ypixel:       resw 1
    43                              <3>     .cursor_print_line:         resw 1
    44                              <3>     .cursor_print_address:      resq 1
    45                              <3> 
    46                              <3>     .font_base_address:         resq 1
    47                              <3>     .font_size:                 resw 1
    48                              <3>     .font_width:                resw 1
    49                              <3>     .font_height:               resw 1
    50                              <3> 
    51                              <3>     .pixel_line_start:          resw 1
    52                              <3>     .pixel_per_line:            resw 1 
    53                              <3> 
    54                              <3>     .default_color:             resw 1
    55                              <3>     .current_color:             resw 1
    56                              <3>  endstruc
    57                              <3> print_info_ptr:
    58                              <3>     istruc print_info
    59                              <3>         at print_info.cursor_current_xpixel, dw 0
    60                              <3>         at print_info.cursor_current_ypixel, dw 0
    61                              <3>         at print_info.cursor_current_line, dw 0
    62                              <3> 
    63                              <3>         at print_info.cursor_print_xpixel, dw 0
    64                              <3>         at print_info.cursor_print_ypixel, dw 0
    65                              <3>         at print_info.cursor_print_line, dw 0
    66                              <3>         at print_info.cursor_print_address, dq 0
    67                              <3> 
    68                              <3>         at print_info.font_base_address, dq 0
    69                              <3>         at print_info.font_size, dw 0
    70                              <3>         at print_info.font_width, dw 0
    71                              <3>         at print_info.font_height, dw 0
    72                              <3> 
    73                              <3>         at print_info.pixel_line_start, dw 0
    74                              <3>         at print_info.pixel_per_line, dw 0
    75                              <3> 
    76                              <3>         at print_info.default_color, dw 0
    77                              <3>         at print_info.current_color, dw 0
    78                              <3>     iend
    79                              <3> 
    80                              <3> printk_init:
    81                              <3> 
    82                              <3>     ; mov rsi,KernelSpaceUpperAddress + VBEModeStructBufferAddr + vbe_mode_info_block.x_resolution
    83                              <3>     ; mov rbx,0
    84                              <3>     ; mov  bx, word [rsi]
    85                              <3>     prolog 0;
    86                              <3> 
    87                              <3>     mov word [rel print_info_ptr + print_info.cursor_print_xpixel],0
    88                              <3>     mov word [rel print_info_ptr + print_info.cursor_print_ypixel],200
    89                              <3>     mov word [rel print_info_ptr + print_info.cursor_print_line],10
    90                              <3>     mov qword [rel print_info_ptr + print_info.cursor_print_address],0x5DC00
    91                              <3> 
    92                              <3>     mov word [rel print_info_ptr + print_info.cursor_current_xpixel],0
    93                              <3>     mov word [rel print_info_ptr + print_info.cursor_current_ypixel],0    
    94                              <3>     mov word [rel print_info_ptr + print_info.cursor_current_line],10
    95                              <3> 
    96                              <3>     mov rsi,0xFFFF800000105200
    97                              <3>     mov qword [rel print_info_ptr + print_info.font_base_address],rsi
    98                              <3>     mov word [rel print_info_ptr + print_info.font_size],16
    99                              <3>     mov word [rel print_info_ptr + print_info.font_width],8
   100                              <3>     mov word [rel print_info_ptr + print_info.font_height],16
   101                              <3> 
   102                              <3>     mov word [rel print_info_ptr + print_info.pixel_line_start],4
   103                              <3>     mov word [rel print_info_ptr + print_info.pixel_per_line],20
   104                              <3> 
   105                              <3>     ; mov word [rel print_info_ptr + print_info.default_color],0x00FFFFFF
   106                              <3>     ; mov word [rel print_info_ptr + print_info.current_color],0x00FFFFFF
   107                              <3> 
   108                              <3>     epilog
   109                              <3> 
   110                              <3> printk:; input: format string,pointer to arguments
   111                              <3>     prolog 2
   112                              <3>     get_param rsi, 1   ; rsi = format string
   113                              <3>     get_param rdx, 2   ; rdx = pointer to arguments
   114                              <3> 
   115                              <3>     ; mov word [rel print_info_ptr + print_info.cursor_current_xpixel],0
   116                              <3>     ; mov word [rel print_info_ptr + print_info.cursor_current_ypixel],200
   117                              <3>     ; mov word [rel print_info_ptr + print_info.cursor_current_line],10
   118                              <3>     ; mov word [rel print_info_ptr + print_info.cursor_print_line],10
   119                              <3>     ; mov word [rel print_info_ptr + print_info.cursor_print_xpixel],0
   120                              <3>     ; mov word [rel print_info_ptr + print_info.cursor_print_ypixel],200
   121                              <3> 
   122                              <3>     mov rax, 0
   123                              <3>     mov ax, word [rel print_info_ptr + print_info.cursor_print_ypixel]
   124                              <3>     mov rbx,0
   125                              <3>     mov bx,word [rel video_info_ptr + video_info.xpixel]
   126                              <3>     imul rax,rbx
   127                              <3>     mov rcx,0
   128                              <3>     mov cx,word [rel print_info_ptr + print_info.cursor_print_xpixel]
   129                              <3>     add rax, rcx
   130                              <3>     mov rbx,0
   131                              <3>     mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   132                              <3>     imul rax,rbx
   133                              <3>     ; jmp $
   134                              <3>     mov rdi, qword [rel video_info_ptr + video_info.video_framebuffer]
   135                              <3>     add rdi, rax
   136                              <3>     mov rax,0
   137                              <3> 
   138                              <3>     .next_char:
   139                              <3>         lodsb                  ; Load next character from format string into AL
   140                              <3>         test al, al            ; Check if end of string
   141                              <3>         jz .done
   142                              <3> 
   143                              <3>         cmp al, '%'            ; Check for format specifier
   144                              <3>         jne .print_char
   145                              <3>     ; jmp $
   146                              <3>         lodsb                  ; Load format specifier
   147                              <3>         cmp al, 'd'            ; Check for %d
   148                              <3>         je .print_decimal
   149                              <3>         cmp al, 'x'            ; Check for %x
   150                              <3>         je .print_hex
   151                              <3>         cmp al, 's'            ; Check for %s
   152                              <3>         je .print_string
   153                              <3>         jmp .next_char         ; Skip unknown specifier
   154                              <3> 
   155                              <3>     .print_char:
   156                              <3>         mov rbx, 0
   157                              <3>         mov bl, al             ; Character to print
   158                              <3> 
   159                              <3>         prepare_call 2,1
   160                              <3>         mov qword [rsp+8], rdi
   161                              <3>         mov qword [rsp], rbx
   162                              <3>         call putc
   163                              <3>         cleanup_call 2,1
   164                              <3>         mov rax, [rsp-8]
   165                              <3> 
   166                              <3>         mov rbx,0
   167                              <3>         mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   168                              <3>         imul rbx,8        
   169                              <3>         add rdi, rbx
   170                              <3> 
   171                              <3>         jmp .next_char
   172                              <3> 
   173                              <3>     .print_decimal:
   174                              <3>         push rdx               ; Save argument pointer
   175                              <3>         mov rax, [rdx]         ; Load integer argument
   176                              <3>         add rdx, 8             ; Move to next argument
   177                              <3>         call print_decimal     ; Convert and print integer
   178                              <3>         pop rdx                ; Restore argument pointer
   179                              <3>         jmp .next_char
   180                              <3> 
   181                              <3>     .print_hex:
   182                              <3>         push rdx               ; Save argument pointer
   183                              <3>         mov rax, [rdx]         ; Load integer argument
   184                              <3>         add rdx, 8             ; Move to next argument
   185                              <3>         call print_hex         ; Convert and print hexadecimal
   186                              <3>         pop rdx                ; Restore argument pointer
   187                              <3>         jmp .next_char
   188                              <3> 
   189                              <3>     .print_string:
   190                              <3> 
   191                              <3> 
   192                              <3> 
   193                              <3>             prepare_call 3,1
   194                              <3> 
   195                              <3>     mov rsi, [rdx]         ; Load string pointer
   196                              <3>     mov qword [rsp+16], rsi
   197                              <3> 
   198                              <3>     mov qword [rsp+8], 60
   199                              <3>     mov qword [rsp], 0
   200                              <3>     call draw_string
   201                              <3>     cleanup_call 3,1
   202                              <3>     mov rax, [rsp-8]
   203                              <3> 
   204                              <3>         push rdx               ; Save argument pointer
   205                              <3>         
   206                              <3>         add rdx, 8             ; Move to next argument
   207                              <3>         call draw_string       ; Print string
   208                              <3>         pop rdx                ; Restore argument pointer
   209                              <3>         jmp .next_char
   210                              <3> 
   211                              <3>     .done:
   212                              <3>         epilog
   213                              <3> 
   214                              <3> putc: ; input: rbx=char,rdi=vga_address ;draw a character
   215                              <3> 
   216                              <3>     prolog 2;
   217                              <3>     get_param rbx, 1   ; x
   218                              <3>     get_param rdi, 2   ; y
   219                              <3> 
   220                              <3>     xor rax, rax
   221                              <3>     mov al, bl
   222                              <3>     shl rax, 4                 ; 乘以16(每个字符16字节)
   223                              <3> 
   224                              <3>     push rsi
   225                              <3>     mov rsi, [rel print_info_ptr + print_info.font_base_address]
   226                              <3>     add rsi, rax         ; RSI = 字符数据地址
   227                              <3>     mov rax,rsi
   228                              <3>     mov rbx,rax
   229                              <3>     pop rsi
   230                              <3>     mov rcx, 16                ; 16行高度
   231                              <3>     push rdi               ; 保存当前行起始位置
   232                              <3>     .next_line:
   233                              <3>         push rdi               ; 保存当前行起始位置
   234                              <3>         
   235                              <3>         ; 处理一行(8像素)
   236                              <3>         mov dl, [rbx]          ; 获取字模数据
   237                              <3>         mov dh, 8              ; 8位/行
   238                              <3>         .next_pixel:
   239                              <3>             xor rax,rax
   240                              <3>             mov al,byte [rel video_info_ptr + video_info.byte_per_pixel]
   241                              <3> 
   242                              <3>             test dl, 0x80       ; 测试最高位
   243                              <3>             jz .skip_pixel
   244                              <3> 
   245                              <3> 
   246                              <3>             cmp al,4
   247                              <3>             jb .pixel_2byte
   248                              <3>             mov byte [rdi+2], 0xFF ; 绘制像素(白色)
   249                              <3>             mov byte [rdi+3], 0x00 ; 绘制像素(白色)
   250                              <3>             .pixel_2byte:
   251                              <3>                 mov byte [rdi], 0xFF ; 绘制像素(白色)
   252                              <3>                 mov byte [rdi+1], 0xFF ; 绘制像素(白色)
   253                              <3>             ; jmp $
   254                              <3>         .skip_pixel:
   255                              <3>             shl dl, 1           ; 移到下一位
   256                              <3>             add rdi,rax
   257                              <3>             dec dh
   258                              <3>             jnz .next_pixel
   259                              <3>         
   260                              <3>         pop rdi                 ; 恢复行起始位置
   261                              <3>         xor rax,rax
   262                              <3>         mov ax,word [rel video_info_ptr + video_info.xpixel]
   263                              <3> 
   264                              <3>         mov r8,rbx
   265                              <3>         mov rbx,0
   266                              <3>         mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   267                              <3>         imul rax,rbx
   268                              <3>         mov rbx,r8
   269                              <3>         add rdi,rax; 移到下一行(320=屏幕宽度)
   270                              <3>         ; jmp $
   271                              <3>         inc rbx                 ; 下一个字模字节
   272                              <3> 
   273                              <3>         loop .next_line
   274                              <3>                 ; jmp $
   275                              <3>     pop rdi                 ; 恢复行起始位置
   276                              <3>     epilog
   277                              <3> 
   278                              <3> print:
   279                              <3>     cmp rcx, 0
   280                              <3>     je .done
   281                              <3>     push rbx
   282                              <3>     mov rbx,    160
   283                              <3>     mul rbx
   284                              <3>     add rdi, rax
   285                              <3>     pop rbx
   286                              <3>     .str:
   287                              <3>         mov al, [rsi]
   288                              <3>         mov [rdi], al
   289                              <3>         add rdi,2
   290                              <3>         inc rsi
   291                              <3>         dec rcx
   292                              <3>         cmp rcx, 0
   293                              <3>         jne .str
   294                              <3>     .done:
   295                              <3>         ret
   296                              <3> print_decimal:
   297                              <3>     push rbx
   298                              <3>     push rcx
   299                              <3>     push rdx
   300                              <3>     xor rbx, rbx
   301                              <3>     mov rbx, 10              ; Base 10
   302                              <3>     xor rcx, rcx             ; Digit counter
   303                              <3> 
   304                              <3>     .convert_loop:
   305                              <3>         xor rdx, rdx
   306                              <3>         div rbx              ; Divide rax by 10, remainder in rdx
   307                              <3>         push rdx             ; Save remainder (digit)
   308                              <3>         inc rcx              ; Increment digit counter
   309                              <3>         test rax, rax
   310                              <3>         jnz .convert_loop    ; Repeat until rax == 0
   311                              <3> 
   312                              <3>     .print_digits:
   313                              <3>         pop rdx              ; Get digit from stack
   314                              <3>         add dl, '0'          ; Convert to ASCII
   315                              <3>         mov rbx, rdx
   316                              <3>         prepare_call 2, 1
   317                              <3>         mov qword [rsp+8], rdi ; VGA address
   318                              <3>         mov qword [rsp], rbx   ; Character
   319                              <3>         call putc
   320                              <3>         cleanup_call 2, 1
   321                              <3>         loop .print_digits
   322                              <3> 
   323                              <3>     pop rdx
   324                              <3>     pop rcx
   325                              <3>     pop rbx
   326                              <3>     ret
   327                              <3> 
   328                              <3> print_hex:
   329                              <3>     push rbx
   330                              <3>     push rcx
   331                              <3>     push rdx
   332                              <3>     mov rcx, 16              ; Process 16 digits (64-bit number)
   333                              <3>     .convert_loop:
   334                              <3>         rol rax, 4           ; Rotate left by 4 bits
   335                              <3>         mov dl, al           ; Extract lower nibble
   336                              <3>         and dl, 0x0F         ; Mask to get a single hex digit
   337                              <3>         cmp dl, 10
   338                              <3>         jl .digit
   339                              <3>         add dl, 'A' - 10     ; Convert to 'A'-'F'
   340                              <3>         jmp .output
   341                              <3>     .digit:
   342                              <3>         add dl, '0'          ; Convert to '0'-'9'
   343                              <3>     .output:
   344                              <3>         mov rbx, rdx
   345                              <3>         prepare_call 2, 1
   346                              <3>         mov qword [rsp+8], rdi ; VGA address
   347                              <3>         mov qword [rsp], rbx   ; Character
   348                              <3>         call putc
   349                              <3>         cleanup_call 2, 1
   350                              <3>         loop .convert_loop
   351                              <3> 
   352                              <3>     pop rdx
   353                              <3>     pop rcx
   354                              <3>     pop rbx
   355                              <3>     ret
   356                              <3> print_hex_str:
   357                              <3>     cmp rcx, 0
   358                              <3>     je .done
   359                              <3> 
   360                              <3>     push rax
   361                              <3>     mov rax,    1920
   362                              <3>     mul rbx
   363                              <3>     mov rbx,rax
   364                              <3>     pop rax
   365                              <3>     add rax ,rbx
   366                              <3>     mov rbx,rax
   367                              <3> 
   368                              <3>     mov rax,4
   369                              <3>     mul rbx
   370                              <3>     add rdi, rax
   371                              <3> 
   372                              <3>     .str:
   373                              <3>         push rcx
   374                              <3>         call print_hex_byte
   375                              <3> 
   376                              <3>         inc rsi
   377                              <3>         call print_hex_byte
   378                              <3>                 ; jmp $
   379                              <3>         inc rsi
   380                              <3>         add rdi,32
   381                              <3>         pop rcx
   382                              <3>         dec rcx
   383                              <3>         cmp rcx, 0
   384                              <3>         jne .str
   385                              <3>     .done:
   386                              <3>         ret
   387                              <3> print_hex_byte:
   388                              <3>         xor rax,rax
   389                              <3>         xor rbx,rbx
   390                              <3>         mov bl, [rsi]
   391                              <3>         .h4:
   392                              <3>             mov al, bl
   393                              <3>             shr al, 4
   394                              <3> 
   395                              <3>             cmp al, 10
   396                              <3>             jl .digit_h4
   397                              <3>             add al, 'A'-'0'-10   ; 转换为A-F
   398                              <3>             .digit_h4:
   399                              <3>                 add al, '0'          ; 转换为0-9
   400                              <3>                 mov bl, al
   401                              <3>                 call putc
   402                              <3>                 ; mov [rdi], al
   403                              <3>                 ; add rdi,2
   404                              <3>                 add rdi,32
   405                              <3> 
   406                              <3>         .l4:
   407                              <3>                 xor rax,rax
   408                              <3>         xor rbx,rbx
   409                              <3>         mov bl, [rsi]
   410                              <3>             mov al, bl
   411                              <3>             and al, 0x0F
   412                              <3>             cmp al, 10
   413                              <3>             jl .digit_l4
   414                              <3>             add al, 'A'-'0'-10   ; 转换为A-F
   415                              <3>             .digit_l4:
   416                              <3>                 add al, '0'          ; 转换为0-9
   417                              <3>                 mov bl, al
   418                              <3>                 call putc
   419                              <3>                 add rdi,32
   420                              <3>                 ; mov [rdi], al
   421                              <3>                 ; add rdi,2
   422                              <3>         ret
   423                              <3> 
   424                              <3> 
   425                              <3> flush_framebuffer:
   426                              <3>     prolog 0;
   427                              <3>     mov rax, 0
   428                              <3>     mov ax, word [rel print_info_ptr + print_info.cursor_print_ypixel]
   429                              <3>     mov rbx,0
   430                              <3>     mov bx,word [rel video_info_ptr + video_info.xpixel]
   431                              <3>     imul rax,rbx
   432                              <3>     mov rcx,0
   433                              <3>     mov cx,word [rel print_info_ptr + print_info.cursor_print_xpixel]
   434                              <3>     add rax, rcx
   435                              <3>     mov rbx,0
   436                              <3>     mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   437                              <3>     imul rax,rbx
   438                              <3>     ; jmp $
   439                              <3>     mov rdi, qword [rel video_info_ptr + video_info.video_framebuffer]
   440                              <3>     add rdi, rax
   441                              <3>     mov rax,0
   442                              <3>     epilog
   443                              <3> 
   444                              <3> 
   445                              <3> 
   446                              <3> 
   447                              <3> 
   448                              <3> draw_char:; input: x,y,char; draw a character
   449                              <3>     prolog 2;
   450                              <3>     get_param r8, 1   ; x
   451                              <3>     get_param r9, 2   ; y
   452                              <3>     get_param rsi, 3   ; char
   453                              <3> 
   454                              <3>     mov rax, 0
   455                              <3>     mov rax, r9
   456                              <3> 
   457                              <3>     mov rbx,0
   458                              <3>     mov bx,word [rel video_info_ptr + video_info.xpixel]
   459                              <3>     imul rax,rbx
   460                              <3> 
   461                              <3>     mov rcx,0
   462                              <3>     mov rcx,r8
   463                              <3>     add rax, rcx
   464                              <3> 
   465                              <3>     mov rbx,0
   466                              <3>     mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   467                              <3>     imul rax,rbx
   468                              <3>     ; jmp $
   469                              <3>     mov rdi, qword [rel video_info_ptr + video_info.video_framebuffer]
   470                              <3>     add rdi, rax        ;rdi=屏幕地址
   471                              <3> 
   472                              <3> 
   473                              <3>     xor rax, rax
   474                              <3>     mov rax,rsi
   475                              <3> 
   476                              <3>     shl rax, 4                 ; 乘以16(每个字符16字节)
   477                              <3>     mov rbx, [rel print_info_ptr + print_info.font_base_address]
   478                              <3>     add rbx, rax         ; RSI = 字符数据地址
   479                              <3>     mov rsi,rbx
   480                              <3> 
   481                              <3> 
   482                              <3>     mov rcx, 16                ; 16行高度
   483                              <3>     push rdi               ; 保存当前行起始位置
   484                              <3>     .next_line:
   485                              <3>         push rdi               ; 保存当前行起始位置
   486                              <3>         
   487                              <3>         ; 处理一行(8像素)
   488                              <3>         mov dl, [rsi]          ; 获取字模数据
   489                              <3>         mov dh, 8              ; 8位/行
   490                              <3>         .next_pixel:
   491                              <3>             xor rax,rax
   492                              <3>             mov al,byte [rel video_info_ptr + video_info.byte_per_pixel]
   493                              <3> 
   494                              <3>             test dl, 0x80       ; 测试最高位
   495                              <3>             jz .skip_pixel
   496                              <3> 
   497                              <3> 
   498                              <3>             cmp al,4
   499                              <3>             jb .pixel_2byte
   500                              <3>             mov byte [rdi+2], 0xFF ; 绘制像素(白色)
   501                              <3>             mov byte [rdi+3], 0x00 ; 绘制像素(白色)
   502                              <3>             .pixel_2byte:
   503                              <3>                 mov byte [rdi], 0xFF ; 绘制像素(白色)
   504                              <3>                 mov byte [rdi+1], 0xFF ; 绘制像素(白色)
   505                              <3>             ; jmp $
   506                              <3>         .skip_pixel:
   507                              <3>             shl dl, 1           ; 移到下一位
   508                              <3>             add rdi,rax
   509                              <3>             dec dh
   510                              <3>             jnz .next_pixel
   511                              <3>         
   512                              <3>         pop rdi                 ; 恢复行起始位置
   513                              <3> 
   514                              <3>         xor rax,rax
   515                              <3>         mov ax,word [rel video_info_ptr + video_info.xpixel]
   516                              <3> 
   517                              <3>         mov rbx,0
   518                              <3>         mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   519                              <3>         imul rax,rbx
   520                              <3>         add rdi,rax
   521                              <3>         inc rsi                 ; next char font
   522                              <3>         loop .next_line
   523                              <3>                 ; jmp $
   524                              <3>     pop rdi                 ; 恢复行起始位置
   525                              <3>     epilog
   526                              <3> 
   527                              <3> 
   528                              <3> 
   529                              <3> draw_string:; input: x,y,string; draw string
   530                              <3>     prolog 2;
   531                              <3>     get_param r8, 1   ; x
   532                              <3>     get_param r9, 2   ; y
   533                              <3>     get_param rsi, 3   ; string
   534                              <3> 
   535                              <3>     ; mov rax, 0
   536                              <3>     ; mov rax, r9
   537                              <3>     ; mov rbx,0
   538                              <3>     ; mov bx,word [rel video_info_ptr + video_info.xpixel]
   539                              <3>     ; imul rax,rbx
   540                              <3>     ; add rax, r8
   541                              <3> 
   542                              <3>     ; mov rax, 8
   543                              <3>     ; mov rbx,0
   544                              <3>     ; mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   545                              <3>     ; imul rax,rbx
   546                              <3> 
   547                              <3>     ; jmp $
   548                              <3>     ; mov rdi, qword [rel video_info_ptr + video_info.video_framebuffer]
   549                              <3>     ; add rdi, rax
   550                              <3>     ; mov rax,0
   551                              <3>     ; jmp $
   552                              <3>     .next_char:
   553                              <3>         lodsb                  
   554                              <3>         test al, al
   555                              <3>         ; jmp $
   556                              <3>         jz .done
   557                              <3>         mov rbx, 0
   558                              <3>         mov bl, al
   559                              <3> 
   560                              <3>         ; prepare_call 2,1
   561                              <3>         ; mov qword [rsp+8], rdi
   562                              <3>         ; mov qword [rsp], rbx
   563                              <3>         ; call putc
   564                              <3>         ; cleanup_call 2,1
   565                              <3>         ; mov rax, [rsp-8]
   566                              <3> 
   567                              <3>         function draw_char,1,r8,r9,rbx
   568                              <3>         add r8, 8
   569                              <3>         ; mov rbx,0
   570                              <3>         ; mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   571                              <3>         ; imul rbx,8        
   572                              <3>         ; add rdi, rbx
   573                              <3>                 
   574                              <3>         jmp .next_char
   575                              <3>     .done:
   576                              <3>     epilog
   577                              <3> 
   578                              <3> draw_hex:; input: x,y,hex; draw hex
   579                              <3>     prolog 2;
   580                              <3>     get_param r8, 1   ; x
   581                              <3>     get_param r9, 2   ; y
   582                              <3>     get_param rsi, 3   ; hex
   583                              <3> 
   584                              <3>     mov rbx,'0'
   585                              <3>     function draw_char,1,r8,r9,rbx
   586                              <3>     add r8, 8
   587                              <3> 
   588                              <3>     mov rbx, 'x'
   589                              <3>     function draw_char,1,r8,r9,rbx    
   590                              <3>     add r8, 8
   591                              <3> 
   592                              <3> 
   593                              <3>     xor rax, rax
   594                              <3>     xor rbx, rbx
   595                              <3>     xor rdx, rdx
   596                              <3>     mov rax, [rsi]
   597                              <3>     ; jmp $
   598                              <3>     mov rcx, 16              ; Process 16 digits (64-bit number)
   599                              <3>     .convert_loopqq:
   600                              <3>         rol rax, 4           ; Rotate left by 4 bits
   601                              <3>         ; jmp $
   602                              <3>         mov dl, al           ; Extract lower nibble
   603                              <3> 
   604                              <3>         and dl, 0x0F         ; Mask to get a single hex digit
   605                              <3> 
   606                              <3>         cmp dl, 10
   607                              <3>         jl .digitqq
   608                              <3>         add dl, 'A' - 10     ; Convert to 'A'-'F'
   609                              <3>         jmp .outputqq
   610                              <3>     .digitqq:
   611                              <3>         add dl, '0'          ; Convert to '0'-'9'
   612                              <3>     .outputqq:
   613                              <3>         mov rbx, rdx
   614                              <3> 
   615                              <3>         function draw_char,1,r8,r9,rbx
   616                              <3>         
   617                              <3>         add r8, 8
   618                              <3>         loop .convert_loopqq
   619                              <3>         ; .stop:
   620                              <3>         ; add rcx,0x1000
   621                              <3>         ;     jmp $
   622                              <3>     epilog
   623                              <3> draw_decimal:; input: x,y,dec; draw dec
   624                              <3>     prolog 2;
   625                              <3>     get_param r8, 1   ; x
   626                              <3>     get_param r9, 2   ; y
   627                              <3>     get_param rsi, 3   ; dec
   628                              <3> 
   629                              <3>     mov rax, 0
   630                              <3>     mov ax, word [rel print_info_ptr + print_info.cursor_print_ypixel]
   631                              <3>     mov rbx,0
   632                              <3>     mov bx,word [rel video_info_ptr + video_info.xpixel]
   633                              <3>     imul rax,rbx
   634                              <3>     mov rcx,0
   635                              <3>     mov cx,word [rel print_info_ptr + print_info.cursor_print_xpixel]
   636                              <3>     add rax, rcx
   637                              <3>     mov rbx,0
   638                              <3>     mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   639                              <3>     imul rax,rbx
   640                              <3>     ; jmp $
   641                              <3>     mov rdi, qword [rel video_info_ptr + video_info.video_framebuffer]
   642                              <3>     add rdi, rax
   643                              <3>     mov rax,0
   644                              <3>     epilog
   645                              <3> %endif
   295                              <2> %endif
   106                              <1> %include "../kernel/interrupt.asm"
     1                              <2> %ifndef INTERRUPT_ASM
     2                              <2> %define INTERRUPT_ASM
     3                              <2> 
     4                              <2> %include "../bootloader/global_def.asm"
     1                              <3> %ifndef GLOBAL_DEF_ASM
     2                              <3> %define GLOBAL_DEF_ASM
     3                              <3> 
     4                              <3> 
     5                              <3> ;|----------------------|
     6                              <3> ;|	100000 ~ END	|
     7                              <3> ;|	   KERNEL	|
     8                              <3> ;|----------------------|
     9                              <3> ;|	E0000 ~ 100000	|
    10                              <3> ;| Extended System BIOS |
    11                              <3> ;|----------------------|
    12                              <3> ;|	C0000 ~ Dffff	|
    13                              <3> ;|     Expansion Area   |
    14                              <3> ;|----------------------|
    15                              <3> ;|	A0000 ~ bffff	|
    16                              <3> ;|   Legacy Video Area  |
    17                              <3> ;|----------------------|
    18                              <3> ;|	9f000 ~ A0000	|
    19                              <3> ;|	 BIOS reserve	|
    20                              <3> ;|----------------------|
    21                              <3> ;|	90000 ~ 9f000	|
    22                              <3> ;|	 kernel tmpbuf	|
    23                              <3> ;|----------------------|
    24                              <3> ;|	10000 ~ 90000	|
    25                              <3> ;|	   LOADER	|
    26                              <3> ;|----------------------|
    27                              <3> ;|	8000 ~ 10000	|
    28                              <3> ;|	  VBE info	|
    29                              <3> ;|----------------------|
    30                              <3> ;|	7e00 ~ 8000	|
    31                              <3> ;|	  mem info	|
    32                              <3> ;|----------------------|
    33                              <3> ;|	7c00 ~ 7e00	|
    34                              <3> ;|	 MBR (BOOT)	|
    35                              <3> ;|----------------------|
    36                              <3> ;|	0000 ~ 7c00	|
    37                              <3> ;|	 BIOS Code	|
    38                              <3> ;|----------------------|
    39                              <3> 
    40                              <3> 
    41                              <3> ;_______________________________________________________
    42                              <3> ; START	END	    SIZE	        USED
    43                              <3> ; FFFF0	FFFFF	16B	        BIOS System Entry
    44                              <3> ; F0000	FFFEF	64KB-16B	BIOS System Code
    45                              <3> ; C8000	EFFFF	160KB	    ROM/Mapped IO
    46                              <3> ; C0000	C7FFF	32KB	    Graphic Adapter BIOS
    47                              <3> ; B8000	BFFFF	32KB	    Chroma Text Video Buffer
    48                              <3> ; B0000	B7FFF	32KB	    Mono Text Video Buffer
    49                              <3> ; A0000	AFFFF	64KB	    Graphic Video Buffer
    50                              <3> ; 9FC00	9FFFF	1KB	        Extended BIOS Data Area
    51                              <3> ; 7E00	9FBFF	622080B     Useable 608KB	
    52                              <3> ; 7C00	7DFF	512B	    MBR
    53                              <3> ; 500	7BFF	30464B      Useable 30KB	
    54                              <3> ; 400	4FF	    256B	    BIOS Data Area
    55                              <3> ; 000	3FF	    1KB	        IVT
    56                              <3> ; _____________________________________________________
    57                              <3> 
    58                              <3> 
    59                              <3> 
    60                              <3> 
    61                              <3> 
    62                              <3> 
    63                              <3> 
    64                              <3> 
    65                              <3> 
    66                              <3> 
    67                              <3> 
    68                              <3> ;|----------------------|
    69                              <3> ;|	100000 ~ END	|
    70                              <3> ;|	   KERNEL	|
    71                              <3> ;|----------------------|
    72                              <3> ;|	E0000 ~ 100000	|
    73                              <3> ;| Extended System BIOS |
    74                              <3> ;|----------------------|
    75                              <3> ;|	C0000 ~ Dffff	|
    76                              <3> ;|     Expansion Area   |
    77                              <3> ;|----------------------|
    78                              <3> ;|	A0000 ~ bffff	|
    79                              <3> ;|   Legacy Video Area  |
    80                              <3> ;|----------------------|
    81                              <3> ;|	9F000 ~ A0000	|
    82                              <3> ;|	 BIOS reserve	|
    83                              <3> ;|----------------------|
    84                              <3> ;|	90000 ~ 9F000	|
    85                              <3> ;|	 kernel tmpbuf	|
    86                              <3> ;|----------------------|
    87                              <3> ;|	10000 ~ 90000	|
    88                              <3> ;|	   LOADER	|
    89                              <3> ;|----------------------|
    90                              <3> ;|	8000 ~ 10000	|
    91                              <3> ;|	  VBE info	|
    92                              <3> ;|----------------------|
    93                              <3> ;|	7E00 ~ 8000	|
    94                              <3> ;|	  mem info	|
    95                              <3> ;|----------------------|
    96                              <3> ;|	7C00 ~ 7E00	|
    97                              <3> ;|	 MBR (BOOT)	|
    98                              <3> ;|----------------------|
    99                              <3> ;|	0000 ~ 7C00	|
   100                              <3> ;|	 BIOS Code	|
   101                              <3> ;|----------------------|
   102                              <3> 
   103                              <3> 
   104                              <3> 
   105                              <3> 
   106                              <3> 
   107                              <3> 
   108                              <3> 
   109                              <3> 
   110                              <3> 
   111                              <3> 
   112                              <3> ;______________________________________________
   113                              <3> ; ----------------Vbe Info Block------------
   114                              <3> ; typedef struct {
   115                              <3> ;     unsigned char       vbe_signature;
   116                              <3> ;     unsigned short      vbe_version;
   117                              <3> ;     unsigned long       oem_string_ptr;
   118                              <3> ;     unsigned char       capabilities;
   119                              <3> ;     unsigned long       video_mode_ptr;
   120                              <3> ;     unsigned short      total_memory;
   121                              <3> ;     unsigned short      oem_software_rev;
   122                              <3> ;     unsigned long       oem_vendor_name_ptr;
   123                              <3> ;     unsigned long       oem_product_name_ptr;
   124                              <3> ;     unsigned long       oem_product_rev_ptr;
   125                              <3> ;     unsigned char       reserved[222];
   126                              <3> ;     unsigned char       oem_data[256];  
   127                              <3> ; } VbeInfoBlock;
   128                              <3> ;______________________________________________
   129                              <3> 
   130                              <3> 
   131                              <3> BaseOfKernelFile	equ	0x00
   132                              <3> OffsetOfKernelFile	equ	0x100000
   133                              <3> BaseTmpOfKernelAddr	equ	0x9000
   134                              <3> OffsetTmpOfKernelFile	equ	0x0000
   135                              <3> VBEStructBufferAddr	equ	0x8000
   136                              <3> VBEModeStructBufferAddr	equ	0x8200
   137                              <3> MemoryStructBufferAddr	equ	0x8800
   138                              <3> 
   139                              <3> 
   140                              <3> 
   141                              <3> KernelSpaceUpperAddress equ 0xFFFF800000000000
   142                              <3> 
   143                              <3> GDTPointerUpperAddr equ 0xFFFF800000104000
   144                              <3> IDTPointerUpperAddr equ 0xFFFF80000010400a
   145                              <3> TSSPointerUpperAddr equ 0xFFFF800000104014
   146                              <3> 
   147                              <3> VideoFrameBufferAddress equ 0xFFFF800003000000
   148                              <3> KernelStartSectorNum	equ	16
   149                              <3> 
   150                              <3> 
   151                              <3> %define PLATFORM_QEMU_X64 1
   152                              <3> %define PLATFORM_X64 2
   153                              <3> 
   154                              <3> %define DEBUG_PLATFORM PLATFORM_QEMU_X64
   155                              <3> %define DEBUG_MODE 1
   156                              <3> 
   157                              <3> 
   158                              <3> MasterSectorReadNumPort    equ	0x1F2
   159                              <3> MasterSectorReadPort    equ	0x1F0
   160                              <3> 
   161                              <3> SlaveReadNumPort    equ	0x172
   162                              <3> SlaveSectorReadPort    equ	0x170
   163                              <3> 
   164                              <3> SectorReadNumPort    equ	MasterSectorReadNumPort
   165                              <3> SectorReadPort    equ	MasterSectorReadPort
   166                              <3> 
   167                              <3> struc vbe_info_block
   168                              <3>     .signature                 resb 4    ; 'VESA' signature (must be "VESA")
   169                              <3>     .version                   resw 1    ; VBE version (e.g., 0x0300 for VBE 3.0)
   170                              <3>     .oem_string_ptr            resd 1    ; Pointer to OEM string
   171                              <3>     .capabilities              resd 1    ; Capabilities of the video card
   172                              <3>     .video_mode_ptr            resd 1    ; Pointer to supported video modes
   173                              <3>     .total_memory              resw 1    ; Total memory in 64KB blocks
   174                              <3> 
   175                              <3>     ; VBE 2.0+ fields
   176                              <3>     .oem_software_rev          resw 1    ; OEM software revision
   177                              <3>     .oem_vendor_name_ptr       resd 1    ; Pointer to OEM vendor name string
   178                              <3>     .oem_product_name_ptr      resd 1    ; Pointer to OEM product name string
   179                              <3>     .oem_product_rev_ptr       resd 1    ; Pointer to OEM product revision string
   180                              <3>     .reserved                  resb 222  ; Reserved for VBE implementation
   181                              <3>     .oem_data                  resb 256  ; Data area for OEM-specific information
   182                              <3> endstruc
   183                              <3> 
   184                              <3> struc vbe_mode_info_block
   185                              <3>     .attributes                resw 1    ; Mode attributes
   186                              <3>     .winA_attributes           resb 1    ; Window A attributes
   187                              <3>     .winB_attributes           resb 1    ; Window B attributes
   188                              <3>     .win_granularity           resw 1    ; Window granularity in KB
   189                              <3>     .win_size                  resw 1    ; Window size in KB
   190                              <3>     .winA_segment              resw 1    ; Window A segment
   191                              <3>     .winB_segment              resw 1    ; Window B segment
   192                              <3>     .win_func_ptr              resd 1    ; Pointer to window function
   193                              <3>     .bytes_per_scanline        resw 1    ; Bytes per scanline
   194                              <3> 
   195                              <3>     ; VBE 1.2+ fields
   196                              <3>     .x_resolution              resw 1    ; Horizontal resolution in pixels
   197                              <3>     .y_resolution              resw 1    ; Vertical resolution in pixels
   198                              <3>     .x_char_size               resb 1    ; Character cell width in pixels
   199                              <3>     .y_char_size               resb 1    ; Character cell height in pixels
   200                              <3>     .number_of_planes          resb 1    ; Number of memory planes
   201                              <3>     .bits_per_pixel            resb 1    ; Bits per pixel
   202                              <3>     .number_of_banks           resb 1    ; Number of banks
   203                              <3>     .memory_model              resb 1    ; Memory model type
   204                              <3>     .bank_size                 resb 1    ; Bank size in KB
   205                              <3>     .number_of_image_pages     resb 1    ; Number of images
   206                              <3>     .reserved1                 resb 1    ; Reserved
   207                              <3> 
   208                              <3>     ; Direct Color fields (VBE 1.2+)
   209                              <3>     .red_mask_size             resb 1    ; Size of direct color red mask
   210                              <3>     .red_field_position        resb 1    ; Bit position of red mask
   211                              <3>     .green_mask_size           resb 1    ; Size of direct color green mask
   212                              <3>     .green_field_position      resb 1    ; Bit position of green mask
   213                              <3>     .blue_mask_size            resb 1    ; Size of direct color blue mask
   214                              <3>     .blue_field_position       resb 1    ; Bit position of blue mask
   215                              <3>     .reserved_mask_size        resb 1    ; Size of direct color reserved mask
   216                              <3>     .reserved_field_position   resb 1    ; Bit position of reserved mask
   217                              <3>     .direct_color_mode_info    resb 1    ; Direct color mode attributes
   218                              <3> 
   219                              <3>     ; VBE 2.0+ fields
   220                              <3>     .phys_base_ptr             resd 1    ; Physical address for flat memory frame buffer
   221                              <3>     .reserved2                 resd 1    ; Reserved
   222                              <3>     .reserved3                 resw 1    ; Reserved
   223                              <3> 
   224                              <3>     ; VBE 3.0+ fields
   225                              <3>     .lin_bytes_per_scanline    resw 1    ; Bytes per scanline for linear modes
   226                              <3>     .bnk_number_of_image_pages resb 1    ; Number of images for banked modes
   227                              <3>     .lin_number_of_image_pages resb 1    ; Number of images for linear modes
   228                              <3>     .lin_red_mask_size         resb 1    ; Size of direct color red mask (linear modes)
   229                              <3>     .lin_red_field_position    resb 1    ; Bit position of red mask (linear modes)
   230                              <3>     .lin_green_mask_size       resb 1    ; Size of direct color green mask (linear modes)
   231                              <3>     .lin_green_field_position  resb 1    ; Bit position of green mask (linear modes)
   232                              <3>     .lin_blue_mask_size        resb 1    ; Size of direct color blue mask (linear modes)
   233                              <3>     .lin_blue_field_position   resb 1    ; Bit position of blue mask (linear modes)
   234                              <3>     .lin_reserved_mask_size    resb 1    ; Size of direct color reserved mask (linear modes)
   235                              <3>     .lin_reserved_field_position resb 1  ; Bit position of reserved mask (linear modes)
   236                              <3>     .max_pixel_clock           resd 1    ; Maximum pixel clock (Hz)
   237                              <3>     .reserved4                 resb 190  ; Reserved for future expansion
   238                              <3> endstruc
   239                              <3> 
   240                              <3> struc e820_memory_entry
   241                              <3>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   242                              <3>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   243                              <3>     .length_low               resd 1    ; Lower 32 bits of the length
   244                              <3>     .length_high              resd 1    ; Upper 32 bits of the length
   245                              <3>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   246                              <3>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   247                              <3> endstruc
   248                              <3> 
   249                              <3> %endif
     5                              <2> %include "../kernel/stddef.asm"
     1                              <3> %ifndef STDDEF_ASM
     2                              <3> %define STDDEF_ASM
     3                              <3> 
     4                              <3> ;-----------Calling Conventions Standard------------;
     5                              <3> %define USE_CC_STANDARD
     6                              <3> %ifdef USE_CC_STANDARD
     7                              <3> ;caller maintain the stack balance 
     8                              <3> 
     9                              <3> 
    10                              <3> ; -------------------------------
    11                              <3> ; 栈帧结构定义
    12                              <3> ; -------------------------------
    13                              <3> ; 调用后的栈布局:
    14                              <3> ; [rsp+0x00] 返回地址 (8字节)
    15                              <3> ; [rsp+0x08] 旧RBP     (8字节) <- rbp指向这里
    16                              <3> ; [rsp+0x10] 参数1     (8字节)
    17                              <3> ; [rsp+0x18] 参数2
    18                              <3> ; ...
    19                              <3> ; [rsp+X]    局部变量区
    20                              <3> ; -------------------------------
    21                              <3> 
    22                              <3> %define PARAM_OFFSET   16      ; 第一个参数的偏移量(返回地址8 + 旧RBP8)
    23                              <3> %macro function 1-* ; 1=函数名, 2=返回参数数量, 3=参数列表
    24                              <3>     %assign param_count %0 - 2 ; 参数数量
    25                              <3>     
    26                              <3>     %if param_count < 0
    27                              <3>         %assign param_count 0 ; 如果没有参数，设置为 0
    28                              <3>     %endif
    29                              <3>     %if param_count < 1
    30                              <3>         %assign ret_param_count 0 ; 返回参数数量
    31                              <3>     %else
    32                              <3>         %assign ret_param_count %2 ; 返回参数数量
    33                              <3>     %endif
    34                              <3> 
    35                              <3>     ; 准备调用
    36                              <3>     prepare_call param_count, ret_param_count
    37                              <3> 
    38                              <3>     ; 如果有参数，将参数压入栈
    39                              <3>     %if param_count > 0
    40                              <3>         %assign i 0
    41                              <3>         mov [rsp-8], rax ; 保存返回地址
    42                              <3>         %rep param_count
    43                              <3>             %rotate 1
    44                              <3>             mov rax, %2
    45                              <3>             mov [rsp + 8*i], rax ; 将参数压入栈
    46                              <3>             %assign i i+1
    47                              <3>         %endrep
    48                              <3>         ; mov rax,
    49                              <3>         %rotate 1
    50                              <3>         %rotate 1
    51                              <3>         mov rax,[rsp-8]; 保存返回地址
    52                              <3>     %endif
    53                              <3> 
    54                              <3>     ; 调用函数
    55                              <3>     call %1
    56                              <3> 
    57                              <3>     ; 清理栈空间
    58                              <3>     cleanup_call param_count, ret_param_count
    59                              <3> 
    60                              <3> %endmacro
    61                              <3> 
    62                              <3> %macro prolog 1;local var size(bytes)
    63                              <3>     push rbp
    64                              <3>     mov rbp, rsp
    65                              <3>     mov [rbp-8],rax
    66                              <3>     mov rax, %1
    67                              <3>     add rax, 15
    68                              <3>     and rax, ~15
    69                              <3>     sub rsp, rax
    70                              <3>     mov rax,[rbp-8]
    71                              <3>     pushallq
    72                              <3>     
    73                              <3>     
    74                              <3>     ; 调试信息可以放在这里
    75                              <3>     ; %ifdef DEBUG
    76                              <3>     ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
    77                              <3>     ; %endif
    78                              <3> %endmacro
    79                              <3> 
    80                              <3> %macro epilog 0
    81                              <3>     popallq
    82                              <3> 
    83                              <3>     mov rsp, rbp
    84                              <3>     pop rbp
    85                              <3>     ret
    86                              <3> %endmacro
    87                              <3> 
    88                              <3> %macro get_param 2;1=register, 2=param index(from 1)
    89                              <3>     mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    90                              <3> %endmacro
    91                              <3> 
    92                              <3> %macro set_ret_param 2;1=register, 2=param index(from 1)
    93                              <3>     mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
    94                              <3> %endmacro
    95                              <3> 
    96                              <3> %macro prepare_call 2;1=param count, 2=return param count
    97                              <3>     %assign total_space ((%1 + %2) * 8)
    98                              <3>     
    99                              <3>     %if (total_space % 16) != 0
   100                              <3>         %assign total_space total_space + 8  ; 添加填充
   101                              <3>     %endif
   102                              <3>     
   103                              <3>     sub rsp, total_space
   104                              <3> %endmacro
   105                              <3> 
   106                              <3> %macro cleanup_call 2;1=param count, 2=return param count
   107                              <3>     %assign total_space ((%1 + %2) * 8)
   108                              <3>     %if (total_space % 16) != 0
   109                              <3>         %assign total_space total_space + 8
   110                              <3>     %endif
   111                              <3>     add rsp, total_space
   112                              <3> %endmacro
   113                              <3> 
   114                              <3> %macro pushallq 0
   115                              <3>     push rax
   116                              <3>     push rbx
   117                              <3>     push rcx
   118                              <3>     push rdx
   119                              <3>     push rsi
   120                              <3>     push rdi
   121                              <3>     push r8
   122                              <3>     push r9
   123                              <3>     push r10
   124                              <3>     push r11
   125                              <3>     push r12
   126                              <3>     push r13
   127                              <3>     push r14
   128                              <3>     push r15
   129                              <3> %endmacro
   130                              <3> 
   131                              <3> %macro popallq 0
   132                              <3>     pop r15
   133                              <3>     pop r14
   134                              <3>     pop r13
   135                              <3>     pop r12
   136                              <3>     pop r11
   137                              <3>     pop r10
   138                              <3>     pop r9
   139                              <3>     pop r8
   140                              <3>     pop rdi
   141                              <3>     pop rsi
   142                              <3>     pop rdx
   143                              <3>     pop rcx
   144                              <3>     pop rbx
   145                              <3>     pop rax
   146                              <3> %endmacro
   147                              <3> 
   148                              <3> %endif
   149                              <3> ;---------------------ABI Standard------------------;
   150                              <3> %define USE_ABI_STANDARD
   151                              <3> %ifdef USE_ABI_STANDARD
   152                              <3> 
   153                              <3> 
   154                              <3>     %define ABI_File_None   0       ; 无文件类型
   155                              <3>     %define ABI_File_REL    1       ; 可重定位文件
   156                              <3>     %define ABI_File_EXEC   2       ; 可执行文件
   157                              <3>     %define ABI_File_DYN    3       ; 共享目标文件
   158                              <3>     %define ABI_File_CORE   4       ; 核心文件
   159                              <3> 
   160                              <3>     %define Section_Type_NULL    0      ; 未使用
   161                              <3>     %define Section_Type_LOAD    1      ; 可加载段
   162                              <3>     %define Section_Type_DYNAMIC 2      ; 动态链接信息
   163                              <3>     %define Section_Type_INTERP  3      ; 解释器路径
   164                              <3>     %define Section_Type_NOTE    4      ; 辅助信息
   165                              <3>     %define Section_Type_SHLIB   5      ; 保留
   166                              <3> 
   167                              <3>     %macro ABI_HEADER 4 ;1=File Type, 2=Entry Point Address, 3=Section Header Offset, 4=Section Header Count
   168                              <3>         db 0xA5, 'A', 'B', 'I'     ; ABI Magic Number
   169                              <3>         db 1                       ; Encode Type
   170                              <3>         db 1                       ; ABI Version
   171                              <3> 
   172                              <3>         dw %1                      ; ABI File Type
   173                              <3>         dq %2                      ; Entry Point Address
   174                              <3>         dw 32                      ; ABI Headers Size
   175                              <3> 
   176                              <3>         dq %3                      ; Section Header Offset
   177                              <3>         dw 32                      ; Section Header Size
   178                              <3>         dw %4                      ; Section Header Count
   179                              <3>         dw 0                       ; Symble Table Entry Size
   180                              <3>     %endmacro
   181                              <3>     STRUC struct_ABI_HEADER
   182                              <3>         .magic:         resb 4    ; ABI Magic Number (4 bytes)
   183                              <3>         .encode_type:   resb 1    ; Encode Type (1 byte)
   184                              <3>         .abi_version:   resb 1    ; ABI Version (1 byte)
   185                              <3>         .file_type:     resw 1    ; ABI File Type (2 bytes)
   186                              <3>         .entry_point:   resq 1    ; Entry Point Address (8 bytes)
   187                              <3>         .header_size:   resw 1    ; ABI Headers Size (2 bytes)
   188                              <3>         .section_offset: resq 1   ; Section Header Offset (8 bytes)
   189                              <3>         .section_size:  resw 1    ; Section Header Size (2 bytes)
   190                              <3>         .section_count: resw 1    ; Section Header Count (2 bytes)
   191                              <3>         .sym_table_size: resw 1   ; Symbol Table Entry Size (2 bytes)
   192                              <3>     ENDSTRUC
   193                              <3> 
   194                              <3>     %macro SECTION_HEADER 4 ;1=Section Type, 2=Virtual Address, 3=Section Offset, 4=Section Size
   195                              <3>         dq %1                  ; Section Type
   196                              <3>         dq %2                  ; Virtual Address
   197                              <3>         dq %3                  ; Section Offset
   198                              <3>         dq %4                  ; Section Size
   199                              <3>     %endmacro
   200                              <3>     STRUC struct_SECTION_HEADER
   201                              <3>         .type:      resq 1    ; Section Type (8 bytes)
   202                              <3>         .vaddr:     resq 1    ; Virtual Address (8 bytes)
   203                              <3>         .offset:    resq 1    ; Section Offset (8 bytes)
   204                              <3>         .size:      resq 1    ; Section Size (8 bytes)
   205                              <3>     ENDSTRUC
   206                              <3> %endif
   207                              <3> 
   208                              <3> %endif
     6                              <2> 
     7                              <2> [BITS 64]
     8                              <2> ; GDTPointerUpperAddr equ 0xFFFF800000104000
     9                              <2> ; IDTPointerUpperAddr equ 0xFFFF80000010400a
    10                              <2> ; TSSPointerUpperAddr equ 0xFFFF800000104004
    11                              <2> 
    12                              <2> 
    13                              <2> ; ; 描述符类型常量
    14                              <2> %define INTGATE 0x8E    ; 64位中断门(P=1, DPL=00, 类型=1110)
    15                              <2> %define TRAPGATE 0x8F   ; 64位陷阱门(P=1, DPL=00, 类型=1111)
    16                              <2> 
    17                              <2> ; ; 64位IDT条目结构(16字节)
    18                              <2> struc idt_info
    19 00000000 ????                <2>     .offset_low:   resw 1  ; 偏移低16位(0..15)
    20 00000002 ????                <2>     .selector:     resw 1  ; 代码段选择子
    21                              <2> 
    22 00000004 ??                  <2>     .ist:          resb 1  ; IST索引(0表示不使用)
    23 00000005 ??                  <2>     .type_attr:    resb 1  ; 类型属性
    24                              <2> 
    25 00000006 ????                <2>     .offset_mid:   resw 1  ; 偏移中16位(16..31)
    26                              <2> 
    27 00000008 ????????            <2>     .offset_high:  resd 1  ; 偏移高32位(32..63)
    28                              <2> 
    29 0000000C ????????            <2>     .reserved:     resd 1  ; 保留
    30                              <2> endstruc
    31                              <2> init_interrupt:;init expection idt
    32                              <2>     prolog 0;
    63 000017EA 55                  <3>  push rbp
    64 000017EB 4889E5              <3>  mov rbp, rsp
    65 000017EE 488945F8            <3>  mov [rbp-8],rax
    66 000017F2 B800000000          <3>  mov rax, %1
    67 000017F7 4883C00F            <3>  add rax, 15
    68 000017FB 4883E0F0            <3>  and rax, ~15
    69 000017FF 4829C4              <3>  sub rsp, rax
    70 00001802 488B45F8            <3>  mov rax,[rbp-8]
    71                              <3>  pushallq
   115 00001806 50                  <4>  push rax
   116 00001807 53                  <4>  push rbx
   117 00001808 51                  <4>  push rcx
   118 00001809 52                  <4>  push rdx
   119 0000180A 56                  <4>  push rsi
   120 0000180B 57                  <4>  push rdi
   121 0000180C 4150                <4>  push r8
   122 0000180E 4151                <4>  push r9
   123 00001810 4152                <4>  push r10
   124 00001812 4153                <4>  push r11
   125 00001814 4154                <4>  push r12
   126 00001816 4155                <4>  push r13
   127 00001818 4156                <4>  push r14
   128 0000181A 4157                <4>  push r15
    72                              <3> 
    73                              <3> 
    74                              <3> 
    75                              <3> 
    76                              <3> 
    77                              <3> 
    33 0000181C 488D35EB000000      <2>     lea rsi,[rel default_interrupt_handler]
    34                              <2>     function setup_default_interrupt_idt,0,rsi
    24                              <3>  %assign param_count %0 - 2
    25                              <3> 
    26                              <3>  %if param_count < 0
    27                              <3>  %assign param_count 0
    28                              <3>  %endif
    29                              <3>  %if param_count < 1
    30                              <3>  %assign ret_param_count 0
    31                              <3>  %else
    32                              <3>  %assign ret_param_count %2
    33                              <3>  %endif
    34                              <3> 
    35                              <3> 
    36                              <3>  prepare_call param_count, ret_param_count
    97                              <4>  %assign total_space ((%1 + %2) * 8)
    98                              <4> 
    99                              <4>  %if (total_space % 16) != 0
   100                              <4>  %assign total_space total_space + 8
   101                              <4>  %endif
   102                              <4> 
   103 00001823 4883EC10            <4>  sub rsp, total_space
    37                              <3> 
    38                              <3> 
    39                              <3>  %if param_count > 0
    40                              <3>  %assign i 0
    41 00001827 48894424F8          <3>  mov [rsp-8], rax
    42                              <3>  %rep param_count
    43                              <3>  %rotate 1
    44                              <3>  mov rax, %2
    45                              <3>  mov [rsp + 8*i], rax
    46                              <3>  %assign i i+1
    47                              <3>  %endrep
    43                              <4>  %rotate 1
    44 0000182C 4889F0              <4>  mov rax, %2
    45 0000182F 48890424            <4>  mov [rsp + 8*i], rax
    46                              <4>  %assign i i+1
    48                              <3> 
    49                              <3>  %rotate 1
    50                              <3>  %rotate 1
    51 00001833 488B4424F8          <3>  mov rax,[rsp-8]
    52                              <3>  %endif
    53                              <3> 
    54                              <3> 
    55 00001838 E81F000000          <3>  call %1
    56                              <3> 
    57                              <3> 
    58                              <3>  cleanup_call param_count, ret_param_count
   107                              <4>  %assign total_space ((%1 + %2) * 8)
   108                              <4>  %if (total_space % 16) != 0
   109                              <4>  %assign total_space total_space + 8
   110                              <4>  %endif
   111 0000183D 4883C410            <4>  add rsp, total_space
    59                              <3> 
    35                              <2>     epilog
    81                              <3>  popallq
   132 00001841 415F                <4>  pop r15
   133 00001843 415E                <4>  pop r14
   134 00001845 415D                <4>  pop r13
   135 00001847 415C                <4>  pop r12
   136 00001849 415B                <4>  pop r11
   137 0000184B 415A                <4>  pop r10
   138 0000184D 4159                <4>  pop r9
   139 0000184F 4158                <4>  pop r8
   140 00001851 5F                  <4>  pop rdi
   141 00001852 5E                  <4>  pop rsi
   142 00001853 5A                  <4>  pop rdx
   143 00001854 59                  <4>  pop rcx
   144 00001855 5B                  <4>  pop rbx
   145 00001856 58                  <4>  pop rax
    82                              <3> 
    83 00001857 4889EC              <3>  mov rsp, rbp
    84 0000185A 5D                  <3>  pop rbp
    85 0000185B C3                  <3>  ret
    36                              <2>     
    37                              <2> setup_default_interrupt_idt:;setup expection idt 0~31
    38                              <2>     prolog 0;
    63 0000185C 55                  <3>  push rbp
    64 0000185D 4889E5              <3>  mov rbp, rsp
    65 00001860 488945F8            <3>  mov [rbp-8],rax
    66 00001864 B800000000          <3>  mov rax, %1
    67 00001869 4883C00F            <3>  add rax, 15
    68 0000186D 4883E0F0            <3>  and rax, ~15
    69 00001871 4829C4              <3>  sub rsp, rax
    70 00001874 488B45F8            <3>  mov rax,[rbp-8]
    71                              <3>  pushallq
   115 00001878 50                  <4>  push rax
   116 00001879 53                  <4>  push rbx
   117 0000187A 51                  <4>  push rcx
   118 0000187B 52                  <4>  push rdx
   119 0000187C 56                  <4>  push rsi
   120 0000187D 57                  <4>  push rdi
   121 0000187E 4150                <4>  push r8
   122 00001880 4151                <4>  push r9
   123 00001882 4152                <4>  push r10
   124 00001884 4153                <4>  push r11
   125 00001886 4154                <4>  push r12
   126 00001888 4155                <4>  push r13
   127 0000188A 4156                <4>  push r14
   128 0000188C 4157                <4>  push r15
    72                              <3> 
    73                              <3> 
    74                              <3> 
    75                              <3> 
    76                              <3> 
    77                              <3> 
    39                              <2>     get_param rsi, 1
    89 0000188E 488B7510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    40 00001892 4989F0              <2>     mov r8,rsi
    41 00001895 49C1E820            <2>     shr r8,32
    42 00001899 4989F1              <2>     mov r9,rsi
    43 0000189C 49C1E910            <2>     shr r9,16
    44 000018A0 4981E1FFFF0000      <2>     and r9,0xFFFF
    45                              <2> 
    46 000018A7 B920000000          <2>     mov rcx,32
    47 000018AC 48BB0A4010000080FF- <2>     mov rbx,IDTPointerUpperAddr
    47 000018B5 FF                  <2>
    48 000018B6 488B4302            <2>     mov rax,[rbx + 2]
    49                              <2>     
    50 000018BA BA20000000          <2>     mov rdx,32
    51 000018BF 48C1E204            <2>     shl rdx, 4
    52 000018C3 4801D0              <2>     add rax, rdx
    53                              <2> 
    54                              <2>     .expection_idt:
    55 000018C6 668930              <2>         mov word [rax + idt_info.offset_low], si
    56 000018C9 66C740020800        <2>         mov word [rax + idt_info.selector], 0x08
    57                              <2> 
    58 000018CF C6400400            <2>         mov byte [rax + idt_info.ist], 0x00
    59 000018D3 C640058E            <2>         mov byte [rax + idt_info.type_attr], INTGATE
    60                              <2> 
    61 000018D7 6644894806          <2>         mov word [rax + idt_info.offset_mid], r9w
    62                              <2> 
    63 000018DC 4C894008            <2>         mov qword [rax + idt_info.offset_high], r8
    64                              <2> 
    65 000018E0 4883C010            <2>         add rax, 16
    66 000018E4 48FFC1              <2>         inc rcx
    67 000018E7 4881F900010000      <2>         cmp rcx, 256
    68 000018EE 7ED6                <2>         jle .expection_idt
    69                              <2> 
    70 000018F0 0F011B              <2>     lidt	[rbx]
    71                              <2>     epilog
    81                              <3>  popallq
   132 000018F3 415F                <4>  pop r15
   133 000018F5 415E                <4>  pop r14
   134 000018F7 415D                <4>  pop r13
   135 000018F9 415C                <4>  pop r12
   136 000018FB 415B                <4>  pop r11
   137 000018FD 415A                <4>  pop r10
   138 000018FF 4159                <4>  pop r9
   139 00001901 4158                <4>  pop r8
   140 00001903 5F                  <4>  pop rdi
   141 00001904 5E                  <4>  pop rsi
   142 00001905 5A                  <4>  pop rdx
   143 00001906 59                  <4>  pop rcx
   144 00001907 5B                  <4>  pop rbx
   145 00001908 58                  <4>  pop rax
    82                              <3> 
    83 00001909 4889EC              <3>  mov rsp, rbp
    84 0000190C 5D                  <3>  pop rbp
    85 0000190D C3                  <3>  ret
    72                              <2> 
    73                              <2> 
    74                              <2> default_interrupt_handler:;
    75 0000190E 48B8ABAAAAAAAAAA00- <2>     mov rax,0xaaaaaaaaaaab
    75 00001917 00                  <2>
    76 00001918 EBFE                <2>     jmp $
    77 0000191A 48CF                <2>     iretq
    78                              <2> 
    79                              <2> ; make_call_gate:                          	;创建64位的调用门
    80                              <2> ;                                           	;输入：RAX=例程的线性地址
    81                              <2> ;                                           	;输出：RDI:RSI=调用门
    82                              <2> ;          mov rdi, rax
    83                              <2> ;          shr rdi, 32                     	;得到门的高64位，在RDI中
    84                              <2> 
    85                              <2> ;          push rax                        	;构造数据结构，并预置线性地址的位15~0
    86                              <2> ;          mov word [rsp + 2], CORE_CODE64_SEL	;预置段选择子部分
    87                              <2> ;          mov [rsp + 4], eax                  	;预置线性地址的位31~16
    88                              <2> ;          mov word [rsp + 4], 0x8c00         	;添加P=1，TYPE=64位调用门
    89                              <2> ;          pop rsi
    90                              <2> 
    91                              <2> ;          ret
    92                              <2> 
    93                              <2> ; ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    94                              <2> ; make_interrupt_gate:                      	;创建64位的中断门
    95                              <2> ;                                             	;输入：RAX=例程的线性地址
    96                              <2> ;                                             	;输出：RDI:RSI=中断门
    97                              <2> ;          mov rdi, rax
    98                              <2> ;          shr rdi, 32                       	;得到门的高64位，在RDI中
    99                              <2> 
   100                              <2> ;          push rax                          	;构造数据结构，并预置线性地址的位15~0
   101                              <2> ;          mov word [rsp + 2], CORE_CODE64_SEL	;预置段选择子部分
   102                              <2> ;          mov [rsp + 4], eax                  	;预置线性地址的位31~16
   103                              <2> ;          mov word [rsp + 4], 0x8e00         	;添加P=1，TYPE=64位中断门
   104                              <2> ;          pop rsi
   105                              <2> 
   106                              <2> ;          ret
   107                              <2> 
   108                              <2> ; ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   109                              <2> ; make_trap_gate:                             	;创建64位的陷阱门
   110                              <2> ;                                              	;输入：RAX=例程的线性地址
   111                              <2> ;                                              	;输出：RDI:RSI=陷阱门
   112                              <2> ;          mov rdi, rax
   113                              <2> ;          shr rdi, 32                        	;得到门的高64位，在RDI中
   114                              <2> 
   115                              <2> ;          push rax                           	;构造数据结构，并预置线性地址的位15~0
   116                              <2> ;          mov word [rsp + 2], CORE_CODE64_SEL	;预置段选择子部分
   117                              <2> ;          mov [rsp + 4], eax                  	;预置线性地址的位31~16
   118                              <2> ;          mov word [rsp + 4], 0x8f00         	;添加P=1，TYPE=64位陷阱门
   119                              <2> ;          pop rsi
   120                              <2> 
   121                              <2> ;          ret
   122                              <2> 
   123                              <2> ; ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   124                              <2> ; make_tss_descriptor:                    	;创建64位的TSS描述符
   125                              <2> ;                                           	;输入：RAX=TSS的线性地址
   126                              <2> ;                                           	;输出：RDI:RSI=TSS描述符
   127                              <2> ;          push rax
   128                              <2> 
   129                              <2> ;          mov rdi, rax
   130                              <2> ;          shr rdi, 32                    	;得到门的高64位，在RDI中
   131                              <2> 
   132                              <2> ;          push rax                       	;先将部分线性地址移到适当位置
   133                              <2> ;          shl qword [rsp], 16           	;将线性地址的位23~00移到正确位置
   134                              <2> ;          mov word [rsp], 104           	;段界限的标准长度
   135                              <2> ;          mov al, [rsp + 5]
   136                              <2> ;          mov [rsp + 7], al             	;将线性地址的位31~24移到正确位置
   137                              <2> ;          mov byte [rsp + 5], 0x89     	;P=1，DPL=00，TYPE=1001（64位TSS）
   138                              <2> ;          mov byte [rsp + 6], 0        	;G、0、0、AVL和limit
   139                              <2> ;          pop rsi                       	;门的低64位
   140                              <2> 
   141                              <2> ;          pop rax
   142                              <2> 
   143                              <2> ;          ret
   144                              <2> 
   145                              <2> ; ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   146                              <2> ; mount_idt_entry:                     	;在中断描述符表IDT中安装门描述符
   147                              <2> ;                                        	;R8=中断向量
   148                              <2> ;                                        	;RDI:RSI=门描述符
   149                              <2> ;          push r8
   150                              <2> ;          push r9
   151                              <2> 
   152                              <2> ;          shl r8, 4                         	;中断号乘以16，得到表内偏移
   153                              <2> ;          mov r9, UPPER_IDT_LINEAR        	;中断描述符表的高端线性地址
   154                              <2> ;          mov [r9 + r8], rsi
   155                              <2> ;          mov [r9 + r8 + 8], rdi
   156                              <2> 
   157                              <2> ;          pop r9
   158                              <2> ;          pop r8
   159                              <2> 
   160                              <2> ;          ret
   161                              <2> %endif
   107                              <1> %endif
    84 0000191C 68656C6C6F20776F72-     messages: db 'hello world,here to show printk function', 0
    84 00001925 6C642C686572652074-
    84 0000192E 6F2073686F77207072-
    84 00001937 696E746B2066756E63-
    84 00001940 74696F6E00         
    85 00001945 617364666768696A6B-     messages1: db 'asdfghijklmnopqrstuvwxyz_ASDFGHJKLZXCVBNM1234567890', 0
    85 0000194E 6C6D6E6F7071727374-
    85 00001957 75767778797A5F4153-
    85 00001960 444647484A4B4C5A58-
    85 00001969 4356424E4D31323334-
    85 00001972 35363738393000     
    86 00001979 496D61676520666F72-     messages2: db 'Image format was not specified for ./hd60m.img and probing guessed raw', 0
    86 00001982 6D617420776173206E-
    86 0000198B 6F7420737065636966-
    86 00001994 69656420666F72202E-
    86 0000199D 2F686436306D2E696D-
    86 000019A6 6720616E642070726F-
    86 000019AF 62696E672067756573-
    86 000019B8 7365642072617700   
    87 000019C0 4175746F6D61746963-     messages3: db 'Automatically detecting the format is dangerous for raw images, write operations on block 0 will be restricted.', 0
    87 000019C9 616C6C792064657465-
    87 000019D2 6374696E6720746865-
    87 000019DB 20666F726D61742069-
    87 000019E4 732064616E6765726F-
    87 000019ED 757320666F72207261-
    87 000019F6 7720696D616765732C-
    87 000019FF 207772697465206F70-
    87 00001A08 65726174696F6E7320-
    87 00001A11 6F6E20626C6F636B20-
    87 00001A1A 302077696C6C206265-
    87 00001A23 207265737472696374-
    87 00001A2C 65642E00           
    88                                  
    89 00001A30 2E2E2F6B65726E656C-     messages4: db '../kernel/printk.asm:100: warning: word data exceeds bounds [-w+number-overflow]', 0
    89 00001A39 2F7072696E746B2E61-
    89 00001A42 736D3A3130303A2077-
    89 00001A4B 61726E696E673A2077-
    89 00001A54 6F7264206461746120-
    89 00001A5D 657863656564732062-
    89 00001A66 6F756E6473205B2D77-
    89 00001A6F 2B6E756D6265722D6F-
    89 00001A78 766572666C6F775D00 
    90 00001A81 5741524E494E473A20-     messages5: db 'WARNING: Image format was not specified for ./hd60m.img and probing guessed raw.', 0
    90 00001A8A 496D61676520666F72-
    90 00001A93 6D617420776173206E-
    90 00001A9C 6F7420737065636966-
    90 00001AA5 69656420666F72202E-
    90 00001AAE 2F686436306D2E696D-
    90 00001AB7 6720616E642070726F-
    90 00001AC0 62696E672067756573-
    90 00001AC9 736564207261772E00 
    91 00001AD2 323530383820627974-     messages6: db '25088 bytes (25 kB, 24 KiB) copied, 0.000134717 s, 186 MB/s', 0
    91 00001ADB 657320283235206B42-
    91 00001AE4 2C203234204B694229-
    91 00001AED 20636F706965642C20-
    91 00001AF6 302E30303031333437-
    91 00001AFF 313720732C20313836-
    91 00001B08 204D422F7300       
    92                                  
    93 00001B0E 48656C6C6F2C202573-         format1 db "Hello, %s!", 0
    93 00001B17 2100               
    94 00001B19 56616C75653A202564-         format2 db "Value: %d", 0
    94 00001B22 00                 
    95 00001B23 4865783A20257800            format3 db "Hex: %x", 0
    96 00001B2B 576F726C6400                string1 db "World", 0
    97 00001B31 F0DEBC9A78563412        hex_messages: dq 0x123456789abcdef0
    98 00001B39 4523010000000000-       params: times 10 dq 0x12345
    98 00001B39 <rep Ah>           
    99 00001B89 00<rep Ah>              messagess: times 10 db 0
   100                                  kernel_end:
   101                                  section_end:
