     1                                  %include "../bootloader/global_def.asm"
     1                              <1> %ifndef GLOBAL_DEF_ASM
     2                              <1> %define GLOBAL_DEF_ASM
     3                              <1> 
     4                              <1> 
     5                              <1> ;|----------------------|
     6                              <1> ;|	100000 ~ END	|
     7                              <1> ;|	   KERNEL	|
     8                              <1> ;|----------------------|
     9                              <1> ;|	E0000 ~ 100000	|
    10                              <1> ;| Extended System BIOS |
    11                              <1> ;|----------------------|
    12                              <1> ;|	C0000 ~ Dffff	|
    13                              <1> ;|     Expansion Area   |
    14                              <1> ;|----------------------|
    15                              <1> ;|	A0000 ~ bffff	|
    16                              <1> ;|   Legacy Video Area  |
    17                              <1> ;|----------------------|
    18                              <1> ;|	9f000 ~ A0000	|
    19                              <1> ;|	 BIOS reserve	|
    20                              <1> ;|----------------------|
    21                              <1> ;|	90000 ~ 9f000	|
    22                              <1> ;|	 kernel tmpbuf	|
    23                              <1> ;|----------------------|
    24                              <1> ;|	10000 ~ 90000	|
    25                              <1> ;|	   LOADER	|
    26                              <1> ;|----------------------|
    27                              <1> ;|	8000 ~ 10000	|
    28                              <1> ;|	  VBE info	|
    29                              <1> ;|----------------------|
    30                              <1> ;|	7e00 ~ 8000	|
    31                              <1> ;|	  mem info	|
    32                              <1> ;|----------------------|
    33                              <1> ;|	7c00 ~ 7e00	|
    34                              <1> ;|	 MBR (BOOT)	|
    35                              <1> ;|----------------------|
    36                              <1> ;|	0000 ~ 7c00	|
    37                              <1> ;|	 BIOS Code	|
    38                              <1> ;|----------------------|
    39                              <1> 
    40                              <1> 
    41                              <1> ;_______________________________________________________
    42                              <1> ; START	END	    SIZE	        USED
    43                              <1> ; FFFF0	FFFFF	16B	        BIOS System Entry
    44                              <1> ; F0000	FFFEF	64KB-16B	BIOS System Code
    45                              <1> ; C8000	EFFFF	160KB	    ROM/Mapped IO
    46                              <1> ; C0000	C7FFF	32KB	    Graphic Adapter BIOS
    47                              <1> ; B8000	BFFFF	32KB	    Chroma Text Video Buffer
    48                              <1> ; B0000	B7FFF	32KB	    Mono Text Video Buffer
    49                              <1> ; A0000	AFFFF	64KB	    Graphic Video Buffer
    50                              <1> ; 9FC00	9FFFF	1KB	        Extended BIOS Data Area
    51                              <1> ; 7E00	9FBFF	622080B     Useable 608KB	
    52                              <1> ; 7C00	7DFF	512B	    MBR
    53                              <1> ; 500	7BFF	30464B      Useable 30KB	
    54                              <1> ; 400	4FF	    256B	    BIOS Data Area
    55                              <1> ; 000	3FF	    1KB	        IVT
    56                              <1> ; _____________________________________________________
    57                              <1> 
    58                              <1> 
    59                              <1> 
    60                              <1> 
    61                              <1> 
    62                              <1> 
    63                              <1> 
    64                              <1> 
    65                              <1> 
    66                              <1> 
    67                              <1> 
    68                              <1> ;|----------------------|
    69                              <1> ;|	100000 ~ END	|
    70                              <1> ;|	   KERNEL	|
    71                              <1> ;|----------------------|
    72                              <1> ;|	E0000 ~ 100000	|
    73                              <1> ;| Extended System BIOS |
    74                              <1> ;|----------------------|
    75                              <1> ;|	C0000 ~ Dffff	|
    76                              <1> ;|     Expansion Area   |
    77                              <1> ;|----------------------|
    78                              <1> ;|	A0000 ~ bffff	|
    79                              <1> ;|   Legacy Video Area  |
    80                              <1> ;|----------------------|
    81                              <1> ;|	9F000 ~ A0000	|
    82                              <1> ;|	 BIOS reserve	|
    83                              <1> ;|----------------------|
    84                              <1> ;|	90000 ~ 9F000	|
    85                              <1> ;|	 kernel tmpbuf	|
    86                              <1> ;|----------------------|
    87                              <1> ;|	10000 ~ 90000	|
    88                              <1> ;|	   LOADER	|
    89                              <1> ;|----------------------|
    90                              <1> ;|	8000 ~ 10000	|
    91                              <1> ;|	  VBE info	|
    92                              <1> ;|----------------------|
    93                              <1> ;|	7E00 ~ 8000	|
    94                              <1> ;|	  mem info	|
    95                              <1> ;|----------------------|
    96                              <1> ;|	7C00 ~ 7E00	|
    97                              <1> ;|	 MBR (BOOT)	|
    98                              <1> ;|----------------------|
    99                              <1> ;|	0000 ~ 7C00	|
   100                              <1> ;|	 BIOS Code	|
   101                              <1> ;|----------------------|
   102                              <1> 
   103                              <1> 
   104                              <1> 
   105                              <1> 
   106                              <1> 
   107                              <1> 
   108                              <1> 
   109                              <1> 
   110                              <1> 
   111                              <1> 
   112                              <1> ;______________________________________________
   113                              <1> ; ----------------Vbe Info Block------------
   114                              <1> ; typedef struct {
   115                              <1> ;     unsigned char       vbe_signature;
   116                              <1> ;     unsigned short      vbe_version;
   117                              <1> ;     unsigned long       oem_string_ptr;
   118                              <1> ;     unsigned char       capabilities;
   119                              <1> ;     unsigned long       video_mode_ptr;
   120                              <1> ;     unsigned short      total_memory;
   121                              <1> ;     unsigned short      oem_software_rev;
   122                              <1> ;     unsigned long       oem_vendor_name_ptr;
   123                              <1> ;     unsigned long       oem_product_name_ptr;
   124                              <1> ;     unsigned long       oem_product_rev_ptr;
   125                              <1> ;     unsigned char       reserved[222];
   126                              <1> ;     unsigned char       oem_data[256];  
   127                              <1> ; } VbeInfoBlock;
   128                              <1> ;______________________________________________
   129                              <1> 
   130                              <1> 
   131                              <1> BaseOfKernelFile	equ	0x00
   132                              <1> OffsetOfKernelFile	equ	0x100000
   133                              <1> BaseTmpOfKernelAddr	equ	0x9000
   134                              <1> OffsetTmpOfKernelFile	equ	0x0000
   135                              <1> VBEStructBufferAddr	equ	0x8000
   136                              <1> VBEModeStructBufferAddr	equ	0x8200
   137                              <1> MemoryStructBufferAddr	equ	0x8800
   138                              <1> KernelSpaceUpperAddress equ 0xFFFF800000000000
   139                              <1> VideoFrameBufferAddress equ 0xFFFF800003000000
   140                              <1> KernelStartSectorNum	equ	16
   141                              <1> 
   142                              <1> 
   143                              <1> struc vbe_info_block
   144 00000000 ????????            <1>     .signature                 resb 4    ; 'VESA' signature (must be "VESA")
   145 00000004 ????                <1>     .version                   resw 1    ; VBE version (e.g., 0x0300 for VBE 3.0)
   146 00000006 ????????            <1>     .oem_string_ptr            resd 1    ; Pointer to OEM string
   147 0000000A ????????            <1>     .capabilities              resd 1    ; Capabilities of the video card
   148 0000000E ????????            <1>     .video_mode_ptr            resd 1    ; Pointer to supported video modes
   149 00000012 ????                <1>     .total_memory              resw 1    ; Total memory in 64KB blocks
   150                              <1> 
   151                              <1>     ; VBE 2.0+ fields
   152 00000014 ????                <1>     .oem_software_rev          resw 1    ; OEM software revision
   153 00000016 ????????            <1>     .oem_vendor_name_ptr       resd 1    ; Pointer to OEM vendor name string
   154 0000001A ????????            <1>     .oem_product_name_ptr      resd 1    ; Pointer to OEM product name string
   155 0000001E ????????            <1>     .oem_product_rev_ptr       resd 1    ; Pointer to OEM product revision string
   156 00000022 <res DEh>           <1>     .reserved                  resb 222  ; Reserved for VBE implementation
   157 00000100 <res 100h>          <1>     .oem_data                  resb 256  ; Data area for OEM-specific information
   158                              <1> endstruc
   159                              <1> 
   160                              <1> struc vbe_mode_info_block
   161 00000000 ????                <1>     .attributes                resw 1    ; Mode attributes
   162 00000002 ??                  <1>     .winA_attributes           resb 1    ; Window A attributes
   163 00000003 ??                  <1>     .winB_attributes           resb 1    ; Window B attributes
   164 00000004 ????                <1>     .win_granularity           resw 1    ; Window granularity in KB
   165 00000006 ????                <1>     .win_size                  resw 1    ; Window size in KB
   166 00000008 ????                <1>     .winA_segment              resw 1    ; Window A segment
   167 0000000A ????                <1>     .winB_segment              resw 1    ; Window B segment
   168 0000000C ????????            <1>     .win_func_ptr              resd 1    ; Pointer to window function
   169 00000010 ????                <1>     .bytes_per_scanline        resw 1    ; Bytes per scanline
   170                              <1> 
   171                              <1>     ; VBE 1.2+ fields
   172 00000012 ????                <1>     .x_resolution              resw 1    ; Horizontal resolution in pixels
   173 00000014 ????                <1>     .y_resolution              resw 1    ; Vertical resolution in pixels
   174 00000016 ??                  <1>     .x_char_size               resb 1    ; Character cell width in pixels
   175 00000017 ??                  <1>     .y_char_size               resb 1    ; Character cell height in pixels
   176 00000018 ??                  <1>     .number_of_planes          resb 1    ; Number of memory planes
   177 00000019 ??                  <1>     .bits_per_pixel            resb 1    ; Bits per pixel
   178 0000001A ??                  <1>     .number_of_banks           resb 1    ; Number of banks
   179 0000001B ??                  <1>     .memory_model              resb 1    ; Memory model type
   180 0000001C ??                  <1>     .bank_size                 resb 1    ; Bank size in KB
   181 0000001D ??                  <1>     .number_of_image_pages     resb 1    ; Number of images
   182 0000001E ??                  <1>     .reserved1                 resb 1    ; Reserved
   183                              <1> 
   184                              <1>     ; Direct Color fields (VBE 1.2+)
   185 0000001F ??                  <1>     .red_mask_size             resb 1    ; Size of direct color red mask
   186 00000020 ??                  <1>     .red_field_position        resb 1    ; Bit position of red mask
   187 00000021 ??                  <1>     .green_mask_size           resb 1    ; Size of direct color green mask
   188 00000022 ??                  <1>     .green_field_position      resb 1    ; Bit position of green mask
   189 00000023 ??                  <1>     .blue_mask_size            resb 1    ; Size of direct color blue mask
   190 00000024 ??                  <1>     .blue_field_position       resb 1    ; Bit position of blue mask
   191 00000025 ??                  <1>     .reserved_mask_size        resb 1    ; Size of direct color reserved mask
   192 00000026 ??                  <1>     .reserved_field_position   resb 1    ; Bit position of reserved mask
   193 00000027 ??                  <1>     .direct_color_mode_info    resb 1    ; Direct color mode attributes
   194                              <1> 
   195                              <1>     ; VBE 2.0+ fields
   196 00000028 ????????            <1>     .phys_base_ptr             resd 1    ; Physical address for flat memory frame buffer
   197 0000002C ????????            <1>     .reserved2                 resd 1    ; Reserved
   198 00000030 ????                <1>     .reserved3                 resw 1    ; Reserved
   199                              <1> 
   200                              <1>     ; VBE 3.0+ fields
   201 00000032 ????                <1>     .lin_bytes_per_scanline    resw 1    ; Bytes per scanline for linear modes
   202 00000034 ??                  <1>     .bnk_number_of_image_pages resb 1    ; Number of images for banked modes
   203 00000035 ??                  <1>     .lin_number_of_image_pages resb 1    ; Number of images for linear modes
   204 00000036 ??                  <1>     .lin_red_mask_size         resb 1    ; Size of direct color red mask (linear modes)
   205 00000037 ??                  <1>     .lin_red_field_position    resb 1    ; Bit position of red mask (linear modes)
   206 00000038 ??                  <1>     .lin_green_mask_size       resb 1    ; Size of direct color green mask (linear modes)
   207 00000039 ??                  <1>     .lin_green_field_position  resb 1    ; Bit position of green mask (linear modes)
   208 0000003A ??                  <1>     .lin_blue_mask_size        resb 1    ; Size of direct color blue mask (linear modes)
   209 0000003B ??                  <1>     .lin_blue_field_position   resb 1    ; Bit position of blue mask (linear modes)
   210 0000003C ??                  <1>     .lin_reserved_mask_size    resb 1    ; Size of direct color reserved mask (linear modes)
   211 0000003D ??                  <1>     .lin_reserved_field_position resb 1  ; Bit position of reserved mask (linear modes)
   212 0000003E ????????            <1>     .max_pixel_clock           resd 1    ; Maximum pixel clock (Hz)
   213 00000042 <res BEh>           <1>     .reserved4                 resb 190  ; Reserved for future expansion
   214                              <1> endstruc
   215                              <1> 
   216                              <1> struc e820_memory_entry
   217 00000000 ????????            <1>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   218 00000004 ????????            <1>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   219 00000008 ????????            <1>     .length_low               resd 1    ; Lower 32 bits of the length
   220 0000000C ????????            <1>     .length_high              resd 1    ; Upper 32 bits of the length
   221 00000010 ????????            <1>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   222                              <1>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   223                              <1> endstruc
   224                              <1> 
   225                              <1> %endif
     2                                  %include "../kernel/stddef.asm"
     1                              <1> %ifndef STDDEF_ASM
     2                              <1> %define STDDEF_ASM
     3                              <1> 
     4                              <1> ;-----------Calling Conventions Standard------------;
     5                              <1> %define USE_CC_STANDARD
     6                              <1> %ifdef USE_CC_STANDARD
     7                              <1> ;caller maintain the stack balance 
     8                              <1> 
     9                              <1> 
    10                              <1> ; -------------------------------
    11                              <1> ; 栈帧结构定义
    12                              <1> ; -------------------------------
    13                              <1> ; 调用后的栈布局:
    14                              <1> ; [rsp+0x00] 返回地址 (8字节)
    15                              <1> ; [rsp+0x08] 旧RBP     (8字节) <- rbp指向这里
    16                              <1> ; [rsp+0x10] 参数1     (8字节)
    17                              <1> ; [rsp+0x18] 参数2
    18                              <1> ; ...
    19                              <1> ; [rsp+X]    局部变量区
    20                              <1> ; -------------------------------
    21                              <1> 
    22                              <1> %define PARAM_OFFSET   16      ; 第一个参数的偏移量(返回地址8 + 旧RBP8)
    23                              <1> %macro prolog 1;local var size(bytes)
    24                              <1>     push rbp
    25                              <1>     mov rbp, rsp
    26                              <1> 
    27                              <1>     mov rax, %1
    28                              <1>     add rax, 15
    29                              <1>     and rax, ~15
    30                              <1>     sub rsp, rax
    31                              <1> 
    32                              <1>     push r15
    33                              <1>     push r14
    34                              <1>     push r13
    35                              <1>     push r12
    36                              <1>     push r11
    37                              <1>     push r10
    38                              <1>     push r9
    39                              <1>     push r8
    40                              <1>     push rdi
    41                              <1>     push rsi
    42                              <1>     push rdx
    43                              <1>     push rcx
    44                              <1>     push rbx
    45                              <1>     push rax
    46                              <1>     
    47                              <1>     ; 调试信息可以放在这里
    48                              <1>     ; %ifdef DEBUG
    49                              <1>     ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
    50                              <1>     ; %endif
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro epilog 0
    54                              <1>     pop rax
    55                              <1>     pop rbx
    56                              <1>     pop rcx
    57                              <1>     pop rdx
    58                              <1>     pop rsi
    59                              <1>     pop rdi
    60                              <1>     pop r8
    61                              <1>     pop r9
    62                              <1>     pop r10
    63                              <1>     pop r11
    64                              <1>     pop r12
    65                              <1>     pop r13
    66                              <1>     pop r14
    67                              <1>     pop r15
    68                              <1> 
    69                              <1>     mov rsp, rbp
    70                              <1>     pop rbp
    71                              <1>     ret
    72                              <1> %endmacro
    73                              <1> 
    74                              <1> %macro get_param 2;1=register, 2=param index(from 1)
    75                              <1>     mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    76                              <1> %endmacro
    77                              <1> 
    78                              <1> %macro set_ret_param 2;1=register, 2=param index(from 1)
    79                              <1>     mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
    80                              <1> %endmacro
    81                              <1> 
    82                              <1> %macro prepare_call 2;1=param count, 2=return param count
    83                              <1>     %assign total_space ((%1 + %2) * 8)
    84                              <1>     
    85                              <1>     %if (total_space % 16) != 0
    86                              <1>         %assign total_space total_space + 8  ; 添加填充
    87                              <1>     %endif
    88                              <1>     
    89                              <1>     sub rsp, total_space
    90                              <1> %endmacro
    91                              <1> 
    92                              <1> %macro cleanup_call 2;1=param count, 2=return param count
    93                              <1>     %assign total_space ((%1 + %2) * 8)
    94                              <1>     %if (total_space % 16) != 0
    95                              <1>         %assign total_space total_space + 8
    96                              <1>     %endif
    97                              <1>     add rsp, total_space
    98                              <1> %endmacro
    99                              <1> 
   100                              <1> 
   101                              <1> ; %macro function 1-*;1=function entry offset
   102                              <1> ;     prepare_call %0-2,1
   103                              <1> 
   104                              <1> ;     %assign i %0
   105                              <1> ;     %rep i-1
   106                              <1> ;         %rotate -1
   107                              <1> ;         push %1
   108                              <1> ;     %endrep
   109                              <1> ;     call %1
   110                              <1> 
   111                              <1> ;     cleanup_call %0-2,1
   112                              <1> ;     ; mov rax,[rsp-8]
   113                              <1> ; %endmacro
   114                              <1> 
   115                              <1> %endif
   116                              <1> ;---------------------ABI Standard------------------;
   117                              <1> %define USE_ABI_STANDARD
   118                              <1> %ifdef USE_ABI_STANDARD
   119                              <1> 
   120                              <1> 
   121                              <1>     %define ABI_File_None   0       ; 无文件类型
   122                              <1>     %define ABI_File_REL    1       ; 可重定位文件
   123                              <1>     %define ABI_File_EXEC   2       ; 可执行文件
   124                              <1>     %define ABI_File_DYN    3       ; 共享目标文件
   125                              <1>     %define ABI_File_CORE   4       ; 核心文件
   126                              <1> 
   127                              <1>     %define Section_Type_NULL    0      ; 未使用
   128                              <1>     %define Section_Type_LOAD    1      ; 可加载段
   129                              <1>     %define Section_Type_DYNAMIC 2      ; 动态链接信息
   130                              <1>     %define Section_Type_INTERP  3      ; 解释器路径
   131                              <1>     %define Section_Type_NOTE    4      ; 辅助信息
   132                              <1>     %define Section_Type_SHLIB   5      ; 保留
   133                              <1> 
   134                              <1>     %macro ABI_HEADER 4 ;1=File Type, 2=Entry Point Address, 3=Section Header Offset, 4=Section Header Count
   135                              <1>         db 0xA5, 'A', 'B', 'I'     ; ABI Magic Number
   136                              <1>         db 1                       ; Encode Type
   137                              <1>         db 1                       ; ABI Version
   138                              <1> 
   139                              <1>         dw %1                      ; ABI File Type
   140                              <1>         dq %2                      ; Entry Point Address
   141                              <1>         dw 32                      ; ABI Headers Size
   142                              <1> 
   143                              <1>         dq %3                      ; Section Header Offset
   144                              <1>         dw 32                      ; Section Header Size
   145                              <1>         dw %4                      ; Section Header Count
   146                              <1>         dw 0                       ; Symble Table Entry Size
   147                              <1>     %endmacro
   148                              <1>     STRUC struct_ABI_HEADER
   149 00000000 ????????            <1>         .magic:         resb 4    ; ABI Magic Number (4 bytes)
   150 00000004 ??                  <1>         .encode_type:   resb 1    ; Encode Type (1 byte)
   151 00000005 ??                  <1>         .abi_version:   resb 1    ; ABI Version (1 byte)
   152 00000006 ????                <1>         .file_type:     resw 1    ; ABI File Type (2 bytes)
   153 00000008 ????????????????    <1>         .entry_point:   resq 1    ; Entry Point Address (8 bytes)
   154 00000010 ????                <1>         .header_size:   resw 1    ; ABI Headers Size (2 bytes)
   155 00000012 ????????????????    <1>         .section_offset: resq 1   ; Section Header Offset (8 bytes)
   156 0000001A ????                <1>         .section_size:  resw 1    ; Section Header Size (2 bytes)
   157 0000001C ????                <1>         .section_count: resw 1    ; Section Header Count (2 bytes)
   158 0000001E ????                <1>         .sym_table_size: resw 1   ; Symbol Table Entry Size (2 bytes)
   159                              <1>     ENDSTRUC
   160                              <1> 
   161                              <1>     %macro SECTION_HEADER 4 ;1=Section Type, 2=Virtual Address, 3=Section Offset, 4=Section Size
   162                              <1>         dq %1                  ; Section Type
   163                              <1>         dq %2                  ; Virtual Address
   164                              <1>         dq %3                  ; Section Offset
   165                              <1>         dq %4                  ; Section Size
   166                              <1>     %endmacro
   167                              <1>     STRUC struct_SECTION_HEADER
   168 00000000 ????????????????    <1>         .type:      resq 1    ; Section Type (8 bytes)
   169 00000008 ????????????????    <1>         .vaddr:     resq 1    ; Virtual Address (8 bytes)
   170 00000010 ????????????????    <1>         .offset:    resq 1    ; Section Offset (8 bytes)
   171 00000018 ????????????????    <1>         .size:      resq 1    ; Section Size (8 bytes)
   172                              <1>     ENDSTRUC
   173                              <1> %endif
   174                              <1> 
   175                              <1> %endif
     3                                  [BITS 64]          ; 0xFFFF800000106200
     4                                  ehdr:
     5                                      ABI_HEADER ABI_File_CORE, kernel_start, shdr,1
   135 00000000 A5414249            <1>  db 0xA5, 'A', 'B', 'I'
   136 00000004 01                  <1>  db 1
   137 00000005 01                  <1>  db 1
   138                              <1> 
   139 00000006 0400                <1>  dw %1
   140 00000008 [4000000000000000]  <1>  dq %2
   141 00000010 2000                <1>  dw 32
   142                              <1> 
   143 00000012 [2000000000000000]  <1>  dq %3
   144 0000001A 2000                <1>  dw 32
   145 0000001C 0100                <1>  dw %4
   146 0000001E 0000                <1>  dw 0
     6                                  shdr:
     7                                      SECTION_HEADER Section_Type_LOAD, 0, kernel_start,section_end-section_start
   162 00000020 0100000000000000    <1>  dq %1
   163 00000028 0000000000000000    <1>  dq %2
   164 00000030 [4000000000000000]  <1>  dq %3
   165 00000038 C403000000000000    <1>  dq %4
     8                                  section_start:
     9                                  kernel_start:
    10                                  
    11                                      prepare_call 1,1
    83                              <1>  %assign total_space ((%1 + %2) * 8)
    84                              <1> 
    85                              <1>  %if (total_space % 16) != 0
    86                              <1>  %assign total_space total_space + 8
    87                              <1>  %endif
    88                              <1> 
    89 00000040 4883EC10            <1>  sub rsp, total_space
    12 00000044 E891000000                  call video_init
    13                                      cleanup_call 1,1
    93                              <1>  %assign total_space ((%1 + %2) * 8)
    94                              <1>  %if (total_space % 16) != 0
    95                              <1>  %assign total_space total_space + 8
    96                              <1>  %endif
    97 00000049 4883C410            <1>  add rsp, total_space
    14                                  
    15                                      prepare_call 1,1
    83                              <1>  %assign total_space ((%1 + %2) * 8)
    84                              <1> 
    85                              <1>  %if (total_space % 16) != 0
    86                              <1>  %assign total_space total_space + 8
    87                              <1>  %endif
    88                              <1> 
    89 0000004D 4883EC10            <1>  sub rsp, total_space
    16 00000051 E86F010000                  call printk_init
    17                                      cleanup_call 1,1
    93                              <1>  %assign total_space ((%1 + %2) * 8)
    94                              <1>  %if (total_space % 16) != 0
    95                              <1>  %assign total_space total_space + 8
    96                              <1>  %endif
    97 00000056 4883C410            <1>  add rsp, total_space
    18                                  
    19                                  
    20                                      prepare_call 3,1
    83                              <1>  %assign total_space ((%1 + %2) * 8)
    84                              <1> 
    85                              <1>  %if (total_space % 16) != 0
    86                              <1>  %assign total_space total_space + 8
    87                              <1>  %endif
    88                              <1> 
    89 0000005A 4883EC20            <1>  sub rsp, total_space
    21 0000005E 48C7442410FF00FF00          mov qword [rsp+16], 0x00FF00FF
    22 00000067 48C7442408C8000000          mov qword [rsp+8], 200
    23 00000070 48C7042464000000            mov qword [rsp], 100
    24 00000078 E8BB000000                  call draw_pixel
    25                                      cleanup_call 3,1
    93                              <1>  %assign total_space ((%1 + %2) * 8)
    94                              <1>  %if (total_space % 16) != 0
    95                              <1>  %assign total_space total_space + 8
    96                              <1>  %endif
    97 0000007D 4883C420            <1>  add rsp, total_space
    26 00000081 488B4424F8                  mov rax, [rsp-8]
    27                                  
    28                                  
    29                                      ; mov r8, 0
    30                                      ; mov r9, 20
    31                                      ; lea rsi,[rel messages]
    32                                      ; call draw_string
    33                                  
    34                                      ; mov rdi, 0xFFFF800003000000
    35                                      ; mov rax,0
    36                                      ; mov rbx,40
    37                                      ; mov rcx,30
    38                                  
    39                                      ; ; lea rsi,[rel params]
    40                                      ; mov rsi,0xffff800000008800
    41                                      ; call print_hex_str
    42                                  
    43 00000086 EBFE                        jmp $
    44                                  
    45                                  parse_system_params:
    46                                  
    47                                  
    48                                      prolog 2;
    24 00000088 55                  <1>  push rbp
    25 00000089 4889E5              <1>  mov rbp, rsp
    26                              <1> 
    27 0000008C B802000000          <1>  mov rax, %1
    28 00000091 4883C00F            <1>  add rax, 15
    29 00000095 4883E0F0            <1>  and rax, ~15
    30 00000099 4829C4              <1>  sub rsp, rax
    31                              <1> 
    32 0000009C 4157                <1>  push r15
    33 0000009E 4156                <1>  push r14
    34 000000A0 4155                <1>  push r13
    35 000000A2 4154                <1>  push r12
    36 000000A4 4153                <1>  push r11
    37 000000A6 4152                <1>  push r10
    38 000000A8 4151                <1>  push r9
    39 000000AA 4150                <1>  push r8
    40 000000AC 57                  <1>  push rdi
    41 000000AD 56                  <1>  push rsi
    42 000000AE 52                  <1>  push rdx
    43 000000AF 51                  <1>  push rcx
    44 000000B0 53                  <1>  push rbx
    45 000000B1 50                  <1>  push rax
    46                              <1> 
    47                              <1> 
    48                              <1> 
    49                              <1> 
    50                              <1> 
    49                                      ; get_param rax, 1   ; a
    50                                  
    51                                      ; add rax, 3       ; sum = a + b
    52                                      ; set_ret_param rax,1
    53                                      epilog
    54 000000B2 58                  <1>  pop rax
    55 000000B3 5B                  <1>  pop rbx
    56 000000B4 59                  <1>  pop rcx
    57 000000B5 5A                  <1>  pop rdx
    58 000000B6 5E                  <1>  pop rsi
    59 000000B7 5F                  <1>  pop rdi
    60 000000B8 4158                <1>  pop r8
    61 000000BA 4159                <1>  pop r9
    62 000000BC 415A                <1>  pop r10
    63 000000BE 415B                <1>  pop r11
    64 000000C0 415C                <1>  pop r12
    65 000000C2 415D                <1>  pop r13
    66 000000C4 415E                <1>  pop r14
    67 000000C6 415F                <1>  pop r15
    68                              <1> 
    69 000000C8 4889EC              <1>  mov rsp, rbp
    70 000000CB 5D                  <1>  pop rbp
    71 000000CC C3                  <1>  ret
    54                                      
    55                                  %include "../kernel/printk.asm"
     1                              <1> %ifndef PRINTK_ASM
     2                              <1> %define PRINTK_ASM
     3                              <1> 
     4                              <1> %include "../bootloader/global_def.asm"
     1                              <2> %ifndef GLOBAL_DEF_ASM
     2                              <2> %define GLOBAL_DEF_ASM
     3                              <2> 
     4                              <2> 
     5                              <2> ;|----------------------|
     6                              <2> ;|	100000 ~ END	|
     7                              <2> ;|	   KERNEL	|
     8                              <2> ;|----------------------|
     9                              <2> ;|	E0000 ~ 100000	|
    10                              <2> ;| Extended System BIOS |
    11                              <2> ;|----------------------|
    12                              <2> ;|	C0000 ~ Dffff	|
    13                              <2> ;|     Expansion Area   |
    14                              <2> ;|----------------------|
    15                              <2> ;|	A0000 ~ bffff	|
    16                              <2> ;|   Legacy Video Area  |
    17                              <2> ;|----------------------|
    18                              <2> ;|	9f000 ~ A0000	|
    19                              <2> ;|	 BIOS reserve	|
    20                              <2> ;|----------------------|
    21                              <2> ;|	90000 ~ 9f000	|
    22                              <2> ;|	 kernel tmpbuf	|
    23                              <2> ;|----------------------|
    24                              <2> ;|	10000 ~ 90000	|
    25                              <2> ;|	   LOADER	|
    26                              <2> ;|----------------------|
    27                              <2> ;|	8000 ~ 10000	|
    28                              <2> ;|	  VBE info	|
    29                              <2> ;|----------------------|
    30                              <2> ;|	7e00 ~ 8000	|
    31                              <2> ;|	  mem info	|
    32                              <2> ;|----------------------|
    33                              <2> ;|	7c00 ~ 7e00	|
    34                              <2> ;|	 MBR (BOOT)	|
    35                              <2> ;|----------------------|
    36                              <2> ;|	0000 ~ 7c00	|
    37                              <2> ;|	 BIOS Code	|
    38                              <2> ;|----------------------|
    39                              <2> 
    40                              <2> 
    41                              <2> ;_______________________________________________________
    42                              <2> ; START	END	    SIZE	        USED
    43                              <2> ; FFFF0	FFFFF	16B	        BIOS System Entry
    44                              <2> ; F0000	FFFEF	64KB-16B	BIOS System Code
    45                              <2> ; C8000	EFFFF	160KB	    ROM/Mapped IO
    46                              <2> ; C0000	C7FFF	32KB	    Graphic Adapter BIOS
    47                              <2> ; B8000	BFFFF	32KB	    Chroma Text Video Buffer
    48                              <2> ; B0000	B7FFF	32KB	    Mono Text Video Buffer
    49                              <2> ; A0000	AFFFF	64KB	    Graphic Video Buffer
    50                              <2> ; 9FC00	9FFFF	1KB	        Extended BIOS Data Area
    51                              <2> ; 7E00	9FBFF	622080B     Useable 608KB	
    52                              <2> ; 7C00	7DFF	512B	    MBR
    53                              <2> ; 500	7BFF	30464B      Useable 30KB	
    54                              <2> ; 400	4FF	    256B	    BIOS Data Area
    55                              <2> ; 000	3FF	    1KB	        IVT
    56                              <2> ; _____________________________________________________
    57                              <2> 
    58                              <2> 
    59                              <2> 
    60                              <2> 
    61                              <2> 
    62                              <2> 
    63                              <2> 
    64                              <2> 
    65                              <2> 
    66                              <2> 
    67                              <2> 
    68                              <2> ;|----------------------|
    69                              <2> ;|	100000 ~ END	|
    70                              <2> ;|	   KERNEL	|
    71                              <2> ;|----------------------|
    72                              <2> ;|	E0000 ~ 100000	|
    73                              <2> ;| Extended System BIOS |
    74                              <2> ;|----------------------|
    75                              <2> ;|	C0000 ~ Dffff	|
    76                              <2> ;|     Expansion Area   |
    77                              <2> ;|----------------------|
    78                              <2> ;|	A0000 ~ bffff	|
    79                              <2> ;|   Legacy Video Area  |
    80                              <2> ;|----------------------|
    81                              <2> ;|	9F000 ~ A0000	|
    82                              <2> ;|	 BIOS reserve	|
    83                              <2> ;|----------------------|
    84                              <2> ;|	90000 ~ 9F000	|
    85                              <2> ;|	 kernel tmpbuf	|
    86                              <2> ;|----------------------|
    87                              <2> ;|	10000 ~ 90000	|
    88                              <2> ;|	   LOADER	|
    89                              <2> ;|----------------------|
    90                              <2> ;|	8000 ~ 10000	|
    91                              <2> ;|	  VBE info	|
    92                              <2> ;|----------------------|
    93                              <2> ;|	7E00 ~ 8000	|
    94                              <2> ;|	  mem info	|
    95                              <2> ;|----------------------|
    96                              <2> ;|	7C00 ~ 7E00	|
    97                              <2> ;|	 MBR (BOOT)	|
    98                              <2> ;|----------------------|
    99                              <2> ;|	0000 ~ 7C00	|
   100                              <2> ;|	 BIOS Code	|
   101                              <2> ;|----------------------|
   102                              <2> 
   103                              <2> 
   104                              <2> 
   105                              <2> 
   106                              <2> 
   107                              <2> 
   108                              <2> 
   109                              <2> 
   110                              <2> 
   111                              <2> 
   112                              <2> ;______________________________________________
   113                              <2> ; ----------------Vbe Info Block------------
   114                              <2> ; typedef struct {
   115                              <2> ;     unsigned char       vbe_signature;
   116                              <2> ;     unsigned short      vbe_version;
   117                              <2> ;     unsigned long       oem_string_ptr;
   118                              <2> ;     unsigned char       capabilities;
   119                              <2> ;     unsigned long       video_mode_ptr;
   120                              <2> ;     unsigned short      total_memory;
   121                              <2> ;     unsigned short      oem_software_rev;
   122                              <2> ;     unsigned long       oem_vendor_name_ptr;
   123                              <2> ;     unsigned long       oem_product_name_ptr;
   124                              <2> ;     unsigned long       oem_product_rev_ptr;
   125                              <2> ;     unsigned char       reserved[222];
   126                              <2> ;     unsigned char       oem_data[256];  
   127                              <2> ; } VbeInfoBlock;
   128                              <2> ;______________________________________________
   129                              <2> 
   130                              <2> 
   131                              <2> BaseOfKernelFile	equ	0x00
   132                              <2> OffsetOfKernelFile	equ	0x100000
   133                              <2> BaseTmpOfKernelAddr	equ	0x9000
   134                              <2> OffsetTmpOfKernelFile	equ	0x0000
   135                              <2> VBEStructBufferAddr	equ	0x8000
   136                              <2> VBEModeStructBufferAddr	equ	0x8200
   137                              <2> MemoryStructBufferAddr	equ	0x8800
   138                              <2> KernelSpaceUpperAddress equ 0xFFFF800000000000
   139                              <2> VideoFrameBufferAddress equ 0xFFFF800003000000
   140                              <2> KernelStartSectorNum	equ	16
   141                              <2> 
   142                              <2> 
   143                              <2> struc vbe_info_block
   144                              <2>     .signature                 resb 4    ; 'VESA' signature (must be "VESA")
   145                              <2>     .version                   resw 1    ; VBE version (e.g., 0x0300 for VBE 3.0)
   146                              <2>     .oem_string_ptr            resd 1    ; Pointer to OEM string
   147                              <2>     .capabilities              resd 1    ; Capabilities of the video card
   148                              <2>     .video_mode_ptr            resd 1    ; Pointer to supported video modes
   149                              <2>     .total_memory              resw 1    ; Total memory in 64KB blocks
   150                              <2> 
   151                              <2>     ; VBE 2.0+ fields
   152                              <2>     .oem_software_rev          resw 1    ; OEM software revision
   153                              <2>     .oem_vendor_name_ptr       resd 1    ; Pointer to OEM vendor name string
   154                              <2>     .oem_product_name_ptr      resd 1    ; Pointer to OEM product name string
   155                              <2>     .oem_product_rev_ptr       resd 1    ; Pointer to OEM product revision string
   156                              <2>     .reserved                  resb 222  ; Reserved for VBE implementation
   157                              <2>     .oem_data                  resb 256  ; Data area for OEM-specific information
   158                              <2> endstruc
   159                              <2> 
   160                              <2> struc vbe_mode_info_block
   161                              <2>     .attributes                resw 1    ; Mode attributes
   162                              <2>     .winA_attributes           resb 1    ; Window A attributes
   163                              <2>     .winB_attributes           resb 1    ; Window B attributes
   164                              <2>     .win_granularity           resw 1    ; Window granularity in KB
   165                              <2>     .win_size                  resw 1    ; Window size in KB
   166                              <2>     .winA_segment              resw 1    ; Window A segment
   167                              <2>     .winB_segment              resw 1    ; Window B segment
   168                              <2>     .win_func_ptr              resd 1    ; Pointer to window function
   169                              <2>     .bytes_per_scanline        resw 1    ; Bytes per scanline
   170                              <2> 
   171                              <2>     ; VBE 1.2+ fields
   172                              <2>     .x_resolution              resw 1    ; Horizontal resolution in pixels
   173                              <2>     .y_resolution              resw 1    ; Vertical resolution in pixels
   174                              <2>     .x_char_size               resb 1    ; Character cell width in pixels
   175                              <2>     .y_char_size               resb 1    ; Character cell height in pixels
   176                              <2>     .number_of_planes          resb 1    ; Number of memory planes
   177                              <2>     .bits_per_pixel            resb 1    ; Bits per pixel
   178                              <2>     .number_of_banks           resb 1    ; Number of banks
   179                              <2>     .memory_model              resb 1    ; Memory model type
   180                              <2>     .bank_size                 resb 1    ; Bank size in KB
   181                              <2>     .number_of_image_pages     resb 1    ; Number of images
   182                              <2>     .reserved1                 resb 1    ; Reserved
   183                              <2> 
   184                              <2>     ; Direct Color fields (VBE 1.2+)
   185                              <2>     .red_mask_size             resb 1    ; Size of direct color red mask
   186                              <2>     .red_field_position        resb 1    ; Bit position of red mask
   187                              <2>     .green_mask_size           resb 1    ; Size of direct color green mask
   188                              <2>     .green_field_position      resb 1    ; Bit position of green mask
   189                              <2>     .blue_mask_size            resb 1    ; Size of direct color blue mask
   190                              <2>     .blue_field_position       resb 1    ; Bit position of blue mask
   191                              <2>     .reserved_mask_size        resb 1    ; Size of direct color reserved mask
   192                              <2>     .reserved_field_position   resb 1    ; Bit position of reserved mask
   193                              <2>     .direct_color_mode_info    resb 1    ; Direct color mode attributes
   194                              <2> 
   195                              <2>     ; VBE 2.0+ fields
   196                              <2>     .phys_base_ptr             resd 1    ; Physical address for flat memory frame buffer
   197                              <2>     .reserved2                 resd 1    ; Reserved
   198                              <2>     .reserved3                 resw 1    ; Reserved
   199                              <2> 
   200                              <2>     ; VBE 3.0+ fields
   201                              <2>     .lin_bytes_per_scanline    resw 1    ; Bytes per scanline for linear modes
   202                              <2>     .bnk_number_of_image_pages resb 1    ; Number of images for banked modes
   203                              <2>     .lin_number_of_image_pages resb 1    ; Number of images for linear modes
   204                              <2>     .lin_red_mask_size         resb 1    ; Size of direct color red mask (linear modes)
   205                              <2>     .lin_red_field_position    resb 1    ; Bit position of red mask (linear modes)
   206                              <2>     .lin_green_mask_size       resb 1    ; Size of direct color green mask (linear modes)
   207                              <2>     .lin_green_field_position  resb 1    ; Bit position of green mask (linear modes)
   208                              <2>     .lin_blue_mask_size        resb 1    ; Size of direct color blue mask (linear modes)
   209                              <2>     .lin_blue_field_position   resb 1    ; Bit position of blue mask (linear modes)
   210                              <2>     .lin_reserved_mask_size    resb 1    ; Size of direct color reserved mask (linear modes)
   211                              <2>     .lin_reserved_field_position resb 1  ; Bit position of reserved mask (linear modes)
   212                              <2>     .max_pixel_clock           resd 1    ; Maximum pixel clock (Hz)
   213                              <2>     .reserved4                 resb 190  ; Reserved for future expansion
   214                              <2> endstruc
   215                              <2> 
   216                              <2> struc e820_memory_entry
   217                              <2>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   218                              <2>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   219                              <2>     .length_low               resd 1    ; Lower 32 bits of the length
   220                              <2>     .length_high              resd 1    ; Upper 32 bits of the length
   221                              <2>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   222                              <2>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   223                              <2> endstruc
   224                              <2> 
   225                              <2> %endif
     5                              <1> %include "../kernel/video.asm"
     1                              <2> %ifndef VIDEO_ASM
     2                              <2> %define VIDEO_ASM
     3                              <2> %include "../bootloader/global_def.asm"
     1                              <3> %ifndef GLOBAL_DEF_ASM
     2                              <3> %define GLOBAL_DEF_ASM
     3                              <3> 
     4                              <3> 
     5                              <3> ;|----------------------|
     6                              <3> ;|	100000 ~ END	|
     7                              <3> ;|	   KERNEL	|
     8                              <3> ;|----------------------|
     9                              <3> ;|	E0000 ~ 100000	|
    10                              <3> ;| Extended System BIOS |
    11                              <3> ;|----------------------|
    12                              <3> ;|	C0000 ~ Dffff	|
    13                              <3> ;|     Expansion Area   |
    14                              <3> ;|----------------------|
    15                              <3> ;|	A0000 ~ bffff	|
    16                              <3> ;|   Legacy Video Area  |
    17                              <3> ;|----------------------|
    18                              <3> ;|	9f000 ~ A0000	|
    19                              <3> ;|	 BIOS reserve	|
    20                              <3> ;|----------------------|
    21                              <3> ;|	90000 ~ 9f000	|
    22                              <3> ;|	 kernel tmpbuf	|
    23                              <3> ;|----------------------|
    24                              <3> ;|	10000 ~ 90000	|
    25                              <3> ;|	   LOADER	|
    26                              <3> ;|----------------------|
    27                              <3> ;|	8000 ~ 10000	|
    28                              <3> ;|	  VBE info	|
    29                              <3> ;|----------------------|
    30                              <3> ;|	7e00 ~ 8000	|
    31                              <3> ;|	  mem info	|
    32                              <3> ;|----------------------|
    33                              <3> ;|	7c00 ~ 7e00	|
    34                              <3> ;|	 MBR (BOOT)	|
    35                              <3> ;|----------------------|
    36                              <3> ;|	0000 ~ 7c00	|
    37                              <3> ;|	 BIOS Code	|
    38                              <3> ;|----------------------|
    39                              <3> 
    40                              <3> 
    41                              <3> ;_______________________________________________________
    42                              <3> ; START	END	    SIZE	        USED
    43                              <3> ; FFFF0	FFFFF	16B	        BIOS System Entry
    44                              <3> ; F0000	FFFEF	64KB-16B	BIOS System Code
    45                              <3> ; C8000	EFFFF	160KB	    ROM/Mapped IO
    46                              <3> ; C0000	C7FFF	32KB	    Graphic Adapter BIOS
    47                              <3> ; B8000	BFFFF	32KB	    Chroma Text Video Buffer
    48                              <3> ; B0000	B7FFF	32KB	    Mono Text Video Buffer
    49                              <3> ; A0000	AFFFF	64KB	    Graphic Video Buffer
    50                              <3> ; 9FC00	9FFFF	1KB	        Extended BIOS Data Area
    51                              <3> ; 7E00	9FBFF	622080B     Useable 608KB	
    52                              <3> ; 7C00	7DFF	512B	    MBR
    53                              <3> ; 500	7BFF	30464B      Useable 30KB	
    54                              <3> ; 400	4FF	    256B	    BIOS Data Area
    55                              <3> ; 000	3FF	    1KB	        IVT
    56                              <3> ; _____________________________________________________
    57                              <3> 
    58                              <3> 
    59                              <3> 
    60                              <3> 
    61                              <3> 
    62                              <3> 
    63                              <3> 
    64                              <3> 
    65                              <3> 
    66                              <3> 
    67                              <3> 
    68                              <3> ;|----------------------|
    69                              <3> ;|	100000 ~ END	|
    70                              <3> ;|	   KERNEL	|
    71                              <3> ;|----------------------|
    72                              <3> ;|	E0000 ~ 100000	|
    73                              <3> ;| Extended System BIOS |
    74                              <3> ;|----------------------|
    75                              <3> ;|	C0000 ~ Dffff	|
    76                              <3> ;|     Expansion Area   |
    77                              <3> ;|----------------------|
    78                              <3> ;|	A0000 ~ bffff	|
    79                              <3> ;|   Legacy Video Area  |
    80                              <3> ;|----------------------|
    81                              <3> ;|	9F000 ~ A0000	|
    82                              <3> ;|	 BIOS reserve	|
    83                              <3> ;|----------------------|
    84                              <3> ;|	90000 ~ 9F000	|
    85                              <3> ;|	 kernel tmpbuf	|
    86                              <3> ;|----------------------|
    87                              <3> ;|	10000 ~ 90000	|
    88                              <3> ;|	   LOADER	|
    89                              <3> ;|----------------------|
    90                              <3> ;|	8000 ~ 10000	|
    91                              <3> ;|	  VBE info	|
    92                              <3> ;|----------------------|
    93                              <3> ;|	7E00 ~ 8000	|
    94                              <3> ;|	  mem info	|
    95                              <3> ;|----------------------|
    96                              <3> ;|	7C00 ~ 7E00	|
    97                              <3> ;|	 MBR (BOOT)	|
    98                              <3> ;|----------------------|
    99                              <3> ;|	0000 ~ 7C00	|
   100                              <3> ;|	 BIOS Code	|
   101                              <3> ;|----------------------|
   102                              <3> 
   103                              <3> 
   104                              <3> 
   105                              <3> 
   106                              <3> 
   107                              <3> 
   108                              <3> 
   109                              <3> 
   110                              <3> 
   111                              <3> 
   112                              <3> ;______________________________________________
   113                              <3> ; ----------------Vbe Info Block------------
   114                              <3> ; typedef struct {
   115                              <3> ;     unsigned char       vbe_signature;
   116                              <3> ;     unsigned short      vbe_version;
   117                              <3> ;     unsigned long       oem_string_ptr;
   118                              <3> ;     unsigned char       capabilities;
   119                              <3> ;     unsigned long       video_mode_ptr;
   120                              <3> ;     unsigned short      total_memory;
   121                              <3> ;     unsigned short      oem_software_rev;
   122                              <3> ;     unsigned long       oem_vendor_name_ptr;
   123                              <3> ;     unsigned long       oem_product_name_ptr;
   124                              <3> ;     unsigned long       oem_product_rev_ptr;
   125                              <3> ;     unsigned char       reserved[222];
   126                              <3> ;     unsigned char       oem_data[256];  
   127                              <3> ; } VbeInfoBlock;
   128                              <3> ;______________________________________________
   129                              <3> 
   130                              <3> 
   131                              <3> BaseOfKernelFile	equ	0x00
   132                              <3> OffsetOfKernelFile	equ	0x100000
   133                              <3> BaseTmpOfKernelAddr	equ	0x9000
   134                              <3> OffsetTmpOfKernelFile	equ	0x0000
   135                              <3> VBEStructBufferAddr	equ	0x8000
   136                              <3> VBEModeStructBufferAddr	equ	0x8200
   137                              <3> MemoryStructBufferAddr	equ	0x8800
   138                              <3> KernelSpaceUpperAddress equ 0xFFFF800000000000
   139                              <3> VideoFrameBufferAddress equ 0xFFFF800003000000
   140                              <3> KernelStartSectorNum	equ	16
   141                              <3> 
   142                              <3> 
   143                              <3> struc vbe_info_block
   144                              <3>     .signature                 resb 4    ; 'VESA' signature (must be "VESA")
   145                              <3>     .version                   resw 1    ; VBE version (e.g., 0x0300 for VBE 3.0)
   146                              <3>     .oem_string_ptr            resd 1    ; Pointer to OEM string
   147                              <3>     .capabilities              resd 1    ; Capabilities of the video card
   148                              <3>     .video_mode_ptr            resd 1    ; Pointer to supported video modes
   149                              <3>     .total_memory              resw 1    ; Total memory in 64KB blocks
   150                              <3> 
   151                              <3>     ; VBE 2.0+ fields
   152                              <3>     .oem_software_rev          resw 1    ; OEM software revision
   153                              <3>     .oem_vendor_name_ptr       resd 1    ; Pointer to OEM vendor name string
   154                              <3>     .oem_product_name_ptr      resd 1    ; Pointer to OEM product name string
   155                              <3>     .oem_product_rev_ptr       resd 1    ; Pointer to OEM product revision string
   156                              <3>     .reserved                  resb 222  ; Reserved for VBE implementation
   157                              <3>     .oem_data                  resb 256  ; Data area for OEM-specific information
   158                              <3> endstruc
   159                              <3> 
   160                              <3> struc vbe_mode_info_block
   161                              <3>     .attributes                resw 1    ; Mode attributes
   162                              <3>     .winA_attributes           resb 1    ; Window A attributes
   163                              <3>     .winB_attributes           resb 1    ; Window B attributes
   164                              <3>     .win_granularity           resw 1    ; Window granularity in KB
   165                              <3>     .win_size                  resw 1    ; Window size in KB
   166                              <3>     .winA_segment              resw 1    ; Window A segment
   167                              <3>     .winB_segment              resw 1    ; Window B segment
   168                              <3>     .win_func_ptr              resd 1    ; Pointer to window function
   169                              <3>     .bytes_per_scanline        resw 1    ; Bytes per scanline
   170                              <3> 
   171                              <3>     ; VBE 1.2+ fields
   172                              <3>     .x_resolution              resw 1    ; Horizontal resolution in pixels
   173                              <3>     .y_resolution              resw 1    ; Vertical resolution in pixels
   174                              <3>     .x_char_size               resb 1    ; Character cell width in pixels
   175                              <3>     .y_char_size               resb 1    ; Character cell height in pixels
   176                              <3>     .number_of_planes          resb 1    ; Number of memory planes
   177                              <3>     .bits_per_pixel            resb 1    ; Bits per pixel
   178                              <3>     .number_of_banks           resb 1    ; Number of banks
   179                              <3>     .memory_model              resb 1    ; Memory model type
   180                              <3>     .bank_size                 resb 1    ; Bank size in KB
   181                              <3>     .number_of_image_pages     resb 1    ; Number of images
   182                              <3>     .reserved1                 resb 1    ; Reserved
   183                              <3> 
   184                              <3>     ; Direct Color fields (VBE 1.2+)
   185                              <3>     .red_mask_size             resb 1    ; Size of direct color red mask
   186                              <3>     .red_field_position        resb 1    ; Bit position of red mask
   187                              <3>     .green_mask_size           resb 1    ; Size of direct color green mask
   188                              <3>     .green_field_position      resb 1    ; Bit position of green mask
   189                              <3>     .blue_mask_size            resb 1    ; Size of direct color blue mask
   190                              <3>     .blue_field_position       resb 1    ; Bit position of blue mask
   191                              <3>     .reserved_mask_size        resb 1    ; Size of direct color reserved mask
   192                              <3>     .reserved_field_position   resb 1    ; Bit position of reserved mask
   193                              <3>     .direct_color_mode_info    resb 1    ; Direct color mode attributes
   194                              <3> 
   195                              <3>     ; VBE 2.0+ fields
   196                              <3>     .phys_base_ptr             resd 1    ; Physical address for flat memory frame buffer
   197                              <3>     .reserved2                 resd 1    ; Reserved
   198                              <3>     .reserved3                 resw 1    ; Reserved
   199                              <3> 
   200                              <3>     ; VBE 3.0+ fields
   201                              <3>     .lin_bytes_per_scanline    resw 1    ; Bytes per scanline for linear modes
   202                              <3>     .bnk_number_of_image_pages resb 1    ; Number of images for banked modes
   203                              <3>     .lin_number_of_image_pages resb 1    ; Number of images for linear modes
   204                              <3>     .lin_red_mask_size         resb 1    ; Size of direct color red mask (linear modes)
   205                              <3>     .lin_red_field_position    resb 1    ; Bit position of red mask (linear modes)
   206                              <3>     .lin_green_mask_size       resb 1    ; Size of direct color green mask (linear modes)
   207                              <3>     .lin_green_field_position  resb 1    ; Bit position of green mask (linear modes)
   208                              <3>     .lin_blue_mask_size        resb 1    ; Size of direct color blue mask (linear modes)
   209                              <3>     .lin_blue_field_position   resb 1    ; Bit position of blue mask (linear modes)
   210                              <3>     .lin_reserved_mask_size    resb 1    ; Size of direct color reserved mask (linear modes)
   211                              <3>     .lin_reserved_field_position resb 1  ; Bit position of reserved mask (linear modes)
   212                              <3>     .max_pixel_clock           resd 1    ; Maximum pixel clock (Hz)
   213                              <3>     .reserved4                 resb 190  ; Reserved for future expansion
   214                              <3> endstruc
   215                              <3> 
   216                              <3> struc e820_memory_entry
   217                              <3>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   218                              <3>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   219                              <3>     .length_low               resd 1    ; Lower 32 bits of the length
   220                              <3>     .length_high              resd 1    ; Upper 32 bits of the length
   221                              <3>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   222                              <3>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   223                              <3> endstruc
   224                              <3> 
   225                              <3> %endif
     4                              <2> %include "../kernel/stddef.asm"
     1                              <3> %ifndef STDDEF_ASM
     2                              <3> %define STDDEF_ASM
     3                              <3> 
     4                              <3> ;-----------Calling Conventions Standard------------;
     5                              <3> %define USE_CC_STANDARD
     6                              <3> %ifdef USE_CC_STANDARD
     7                              <3> ;caller maintain the stack balance 
     8                              <3> 
     9                              <3> 
    10                              <3> ; -------------------------------
    11                              <3> ; 栈帧结构定义
    12                              <3> ; -------------------------------
    13                              <3> ; 调用后的栈布局:
    14                              <3> ; [rsp+0x00] 返回地址 (8字节)
    15                              <3> ; [rsp+0x08] 旧RBP     (8字节) <- rbp指向这里
    16                              <3> ; [rsp+0x10] 参数1     (8字节)
    17                              <3> ; [rsp+0x18] 参数2
    18                              <3> ; ...
    19                              <3> ; [rsp+X]    局部变量区
    20                              <3> ; -------------------------------
    21                              <3> 
    22                              <3> %define PARAM_OFFSET   16      ; 第一个参数的偏移量(返回地址8 + 旧RBP8)
    23                              <3> %macro prolog 1;local var size(bytes)
    24                              <3>     push rbp
    25                              <3>     mov rbp, rsp
    26                              <3> 
    27                              <3>     mov rax, %1
    28                              <3>     add rax, 15
    29                              <3>     and rax, ~15
    30                              <3>     sub rsp, rax
    31                              <3> 
    32                              <3>     push r15
    33                              <3>     push r14
    34                              <3>     push r13
    35                              <3>     push r12
    36                              <3>     push r11
    37                              <3>     push r10
    38                              <3>     push r9
    39                              <3>     push r8
    40                              <3>     push rdi
    41                              <3>     push rsi
    42                              <3>     push rdx
    43                              <3>     push rcx
    44                              <3>     push rbx
    45                              <3>     push rax
    46                              <3>     
    47                              <3>     ; 调试信息可以放在这里
    48                              <3>     ; %ifdef DEBUG
    49                              <3>     ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
    50                              <3>     ; %endif
    51                              <3> %endmacro
    52                              <3> 
    53                              <3> %macro epilog 0
    54                              <3>     pop rax
    55                              <3>     pop rbx
    56                              <3>     pop rcx
    57                              <3>     pop rdx
    58                              <3>     pop rsi
    59                              <3>     pop rdi
    60                              <3>     pop r8
    61                              <3>     pop r9
    62                              <3>     pop r10
    63                              <3>     pop r11
    64                              <3>     pop r12
    65                              <3>     pop r13
    66                              <3>     pop r14
    67                              <3>     pop r15
    68                              <3> 
    69                              <3>     mov rsp, rbp
    70                              <3>     pop rbp
    71                              <3>     ret
    72                              <3> %endmacro
    73                              <3> 
    74                              <3> %macro get_param 2;1=register, 2=param index(from 1)
    75                              <3>     mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    76                              <3> %endmacro
    77                              <3> 
    78                              <3> %macro set_ret_param 2;1=register, 2=param index(from 1)
    79                              <3>     mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
    80                              <3> %endmacro
    81                              <3> 
    82                              <3> %macro prepare_call 2;1=param count, 2=return param count
    83                              <3>     %assign total_space ((%1 + %2) * 8)
    84                              <3>     
    85                              <3>     %if (total_space % 16) != 0
    86                              <3>         %assign total_space total_space + 8  ; 添加填充
    87                              <3>     %endif
    88                              <3>     
    89                              <3>     sub rsp, total_space
    90                              <3> %endmacro
    91                              <3> 
    92                              <3> %macro cleanup_call 2;1=param count, 2=return param count
    93                              <3>     %assign total_space ((%1 + %2) * 8)
    94                              <3>     %if (total_space % 16) != 0
    95                              <3>         %assign total_space total_space + 8
    96                              <3>     %endif
    97                              <3>     add rsp, total_space
    98                              <3> %endmacro
    99                              <3> 
   100                              <3> 
   101                              <3> ; %macro function 1-*;1=function entry offset
   102                              <3> ;     prepare_call %0-2,1
   103                              <3> 
   104                              <3> ;     %assign i %0
   105                              <3> ;     %rep i-1
   106                              <3> ;         %rotate -1
   107                              <3> ;         push %1
   108                              <3> ;     %endrep
   109                              <3> ;     call %1
   110                              <3> 
   111                              <3> ;     cleanup_call %0-2,1
   112                              <3> ;     ; mov rax,[rsp-8]
   113                              <3> ; %endmacro
   114                              <3> 
   115                              <3> %endif
   116                              <3> ;---------------------ABI Standard------------------;
   117                              <3> %define USE_ABI_STANDARD
   118                              <3> %ifdef USE_ABI_STANDARD
   119                              <3> 
   120                              <3> 
   121                              <3>     %define ABI_File_None   0       ; 无文件类型
   122                              <3>     %define ABI_File_REL    1       ; 可重定位文件
   123                              <3>     %define ABI_File_EXEC   2       ; 可执行文件
   124                              <3>     %define ABI_File_DYN    3       ; 共享目标文件
   125                              <3>     %define ABI_File_CORE   4       ; 核心文件
   126                              <3> 
   127                              <3>     %define Section_Type_NULL    0      ; 未使用
   128                              <3>     %define Section_Type_LOAD    1      ; 可加载段
   129                              <3>     %define Section_Type_DYNAMIC 2      ; 动态链接信息
   130                              <3>     %define Section_Type_INTERP  3      ; 解释器路径
   131                              <3>     %define Section_Type_NOTE    4      ; 辅助信息
   132                              <3>     %define Section_Type_SHLIB   5      ; 保留
   133                              <3> 
   134                              <3>     %macro ABI_HEADER 4 ;1=File Type, 2=Entry Point Address, 3=Section Header Offset, 4=Section Header Count
   135                              <3>         db 0xA5, 'A', 'B', 'I'     ; ABI Magic Number
   136                              <3>         db 1                       ; Encode Type
   137                              <3>         db 1                       ; ABI Version
   138                              <3> 
   139                              <3>         dw %1                      ; ABI File Type
   140                              <3>         dq %2                      ; Entry Point Address
   141                              <3>         dw 32                      ; ABI Headers Size
   142                              <3> 
   143                              <3>         dq %3                      ; Section Header Offset
   144                              <3>         dw 32                      ; Section Header Size
   145                              <3>         dw %4                      ; Section Header Count
   146                              <3>         dw 0                       ; Symble Table Entry Size
   147                              <3>     %endmacro
   148                              <3>     STRUC struct_ABI_HEADER
   149                              <3>         .magic:         resb 4    ; ABI Magic Number (4 bytes)
   150                              <3>         .encode_type:   resb 1    ; Encode Type (1 byte)
   151                              <3>         .abi_version:   resb 1    ; ABI Version (1 byte)
   152                              <3>         .file_type:     resw 1    ; ABI File Type (2 bytes)
   153                              <3>         .entry_point:   resq 1    ; Entry Point Address (8 bytes)
   154                              <3>         .header_size:   resw 1    ; ABI Headers Size (2 bytes)
   155                              <3>         .section_offset: resq 1   ; Section Header Offset (8 bytes)
   156                              <3>         .section_size:  resw 1    ; Section Header Size (2 bytes)
   157                              <3>         .section_count: resw 1    ; Section Header Count (2 bytes)
   158                              <3>         .sym_table_size: resw 1   ; Symbol Table Entry Size (2 bytes)
   159                              <3>     ENDSTRUC
   160                              <3> 
   161                              <3>     %macro SECTION_HEADER 4 ;1=Section Type, 2=Virtual Address, 3=Section Offset, 4=Section Size
   162                              <3>         dq %1                  ; Section Type
   163                              <3>         dq %2                  ; Virtual Address
   164                              <3>         dq %3                  ; Section Offset
   165                              <3>         dq %4                  ; Section Size
   166                              <3>     %endmacro
   167                              <3>     STRUC struct_SECTION_HEADER
   168                              <3>         .type:      resq 1    ; Section Type (8 bytes)
   169                              <3>         .vaddr:     resq 1    ; Virtual Address (8 bytes)
   170                              <3>         .offset:    resq 1    ; Section Offset (8 bytes)
   171                              <3>         .size:      resq 1    ; Section Size (8 bytes)
   172                              <3>     ENDSTRUC
   173                              <3> %endif
   174                              <3> 
   175                              <3> %endif
     5                              <2> [BITS 64]
     6                              <2> struc video_info
     7                              <2>     ; .start:
     8 00000000 ????                <2>     .xpixel:            resw 1      
     9 00000002 ????                <2>     .ypixel:            resw 1       
    10 00000004 ??                  <2>     .byte_per_pixel:    resb 1     
    11 00000005 ????????????????    <2>     .video_framebuffer: resq 1
    12                              <2>     ; .end:
    13                              <2> endstruc
    14                              <2> video_data:
    15                              <2>     istruc video_info
    16 000000CD 0000                <2>         at video_info.xpixel, dw 0
    17 000000CF 0000                <2>         at video_info.ypixel, dw 0
    18 000000D1 00                  <2>         at video_info.byte_per_pixel, db 0
    19 000000D2 0000000000000000    <2>         at video_info.video_framebuffer, dq 0
    20                              <2>     iend
    21                              <2> ;argb
    22                              <2> video_init:
    23 000000DA 48BE128200000080FF- <2>     mov rsi,KernelSpaceUpperAddress + VBEModeStructBufferAddr + vbe_mode_info_block.x_resolution
    23 000000E3 FF                  <2>
    24 000000E4 BB00000000          <2>     mov rbx,0
    25 000000E9 668B1E              <2>     mov  bx, word [rsi]
    26 000000EC 66891DDAFFFFFF      <2>     mov word [rel video_data + video_info.xpixel],bx
    27                              <2> 
    28 000000F3 48BE148200000080FF- <2>     mov rsi,KernelSpaceUpperAddress + VBEModeStructBufferAddr + vbe_mode_info_block.y_resolution
    28 000000FC FF                  <2>
    29 000000FD BB00000000          <2>     mov rbx,0
    30 00000102 668B1E              <2>     mov  bx, word [rsi]
    31 00000105 66891DC3FFFFFF      <2>     mov word [rel video_data + video_info.ypixel],bx
    32                              <2> 
    33 0000010C 48BE198200000080FF- <2>     mov rsi,KernelSpaceUpperAddress + VBEModeStructBufferAddr + vbe_mode_info_block.bits_per_pixel
    33 00000115 FF                  <2>
    34 00000116 BB00000000          <2>     mov rbx,0
    35 0000011B 8A1E                <2>     mov bl, byte [rsi]
    36 0000011D C0EB03              <2>     shr bl,3
    37 00000120 881DABFFFFFF        <2>     mov byte [rel video_data + video_info.byte_per_pixel],bl
    38                              <2> 
    39                              <2>     ; mov rsi,KernelSpaceUpperAddress + VBEModeStructBufferAddr + vbe_mode_info_block.y_resolution
    40                              <2>     ; mov rbx,0
    41                              <2>     ; mov  bx, word [rsi]
    42 00000126 48BE000000030080FF- <2>     mov rsi,VideoFrameBufferAddress
    42 0000012F FF                  <2>
    43 00000130 4889359BFFFFFF      <2>     mov qword [rel video_data + video_info.video_framebuffer],rsi
    44                              <2> 
    45 00000137 C3                  <2>     ret
    46                              <2> 
    47                              <2> draw_pixel:; Input: rdi = x, rsi = y, rdx = color
    48                              <2> 
    49                              <2>     prolog 2;
    24 00000138 55                  <3>  push rbp
    25 00000139 4889E5              <3>  mov rbp, rsp
    26                              <3> 
    27 0000013C B802000000          <3>  mov rax, %1
    28 00000141 4883C00F            <3>  add rax, 15
    29 00000145 4883E0F0            <3>  and rax, ~15
    30 00000149 4829C4              <3>  sub rsp, rax
    31                              <3> 
    32 0000014C 4157                <3>  push r15
    33 0000014E 4156                <3>  push r14
    34 00000150 4155                <3>  push r13
    35 00000152 4154                <3>  push r12
    36 00000154 4153                <3>  push r11
    37 00000156 4152                <3>  push r10
    38 00000158 4151                <3>  push r9
    39 0000015A 4150                <3>  push r8
    40 0000015C 57                  <3>  push rdi
    41 0000015D 56                  <3>  push rsi
    42 0000015E 52                  <3>  push rdx
    43 0000015F 51                  <3>  push rcx
    44 00000160 53                  <3>  push rbx
    45 00000161 50                  <3>  push rax
    46                              <3> 
    47                              <3> 
    48                              <3> 
    49                              <3> 
    50                              <3> 
    50                              <2>     get_param rdi, 1   ; a
    75 00000162 488B7D10            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    51                              <2>     get_param rsi, 2   ; b
    75 00000166 488B7518            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    52                              <2>     get_param rdx, 3   ; c
    75 0000016A 488B5520            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    53 0000016E 52                  <2>     push rdx
    54                              <2>     ; mov []
    55 0000016F 488D1D57FFFFFF      <2>     lea rbx, [rel video_data] ; Load video info structure address
    56                              <2> 
    57                              <2> 
    58                              <2> 
    59                              <2>     ; Calculate pixel offset
    60 00000176 B800000000          <2>     mov rax,0
    61 0000017B 480FB703            <2>     movzx rax, word [rbx + video_info.xpixel] ; Screen width
    62                              <2> 
    63 0000017F 48F7E6              <2>     mul rsi                                 ; y * screen width
    64                              <2>         ; jmp $
    65 00000182 4801F8              <2>     add rax, rdi                             ; Add x
    66 00000185 480FB64B04          <2>     movzx rcx, byte [rbx + video_info.byte_per_pixel] ; Bytes per pixel
    67 0000018A 480FAFC1            <2>     imul rax, rcx                          ; Offset = (y * width + x) * bytes_per_pixel
    68                              <2> 
    69                              <2>     ; Write color to framebuffer
    70 0000018E 488B5B05            <2>     mov rbx, qword [rbx + video_info.video_framebuffer] ; Framebuffer address
    71 00000192 4801C3              <2>     add rbx, rax                          ; rbx = framebuffer + offset
    72                              <2> 
    73 00000195 5A                  <2>     pop rdx
    74 00000196 8913                <2>     mov dword [rbx], edx                        ; Write color (assumes 32-bit color)
    75                              <2> 
    76                              <2>         ; jmp $
    77                              <2>     set_ret_param rax,4
    79 00000198 48894528            <3>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
    78                              <2>     epilog
    54 0000019C 58                  <3>  pop rax
    55 0000019D 5B                  <3>  pop rbx
    56 0000019E 59                  <3>  pop rcx
    57 0000019F 5A                  <3>  pop rdx
    58 000001A0 5E                  <3>  pop rsi
    59 000001A1 5F                  <3>  pop rdi
    60 000001A2 4158                <3>  pop r8
    61 000001A4 4159                <3>  pop r9
    62 000001A6 415A                <3>  pop r10
    63 000001A8 415B                <3>  pop r11
    64 000001AA 415C                <3>  pop r12
    65 000001AC 415D                <3>  pop r13
    66 000001AE 415E                <3>  pop r14
    67 000001B0 415F                <3>  pop r15
    68                              <3> 
    69 000001B2 4889EC              <3>  mov rsp, rbp
    70 000001B5 5D                  <3>  pop rbp
    71 000001B6 C3                  <3>  ret
    79                              <2> 
    80                              <2> draw_line:
    81 000001B7 C3                  <2>     ret
    82                              <2> 
    83                              <2> draw_rect:
    84 000001B8 C3                  <2>     ret
    85                              <2> 
    86                              <2> draw_screen:
    87 000001B9 C3                  <2>     ret
    88                              <2> 
    89                              <2> fill_screen:
    90 000001BA C3                  <2>     ret
    91                              <2> ;-------------------------------------------------
    92                              <2> draw_circle:
    93 000001BB C3                  <2>     ret
    94                              <2> draw_triangle:
    95 000001BC C3                  <2>     ret
    96                              <2> 
    97                              <2> 
    98                              <2> 
    99                              <2> %endif
     6                              <1>     
     7                              <1> [BITS 64]
     8                              <1> struc cursor_info
     9 00000000 ????                <1>     .print_xpixel:            resw 1      
    10 00000002 ????                <1>     .print_ypixel:            resw 1       
    11 00000004 ????                <1>     .current_xpixel:          resw 1      
    12 00000006 ????                <1>     .current_ypixel:          resw 1
    13                              <1> endstruc
    14                              <1> cursor_data:
    15                              <1>     istruc cursor_info
    16 000001BD 0000                <1>         at cursor_info.print_xpixel, dw 0
    17 000001BF 0000                <1>         at cursor_info.print_ypixel, dw 0
    18 000001C1 0000                <1>         at cursor_info.current_xpixel, dw 0
    19 000001C3 0000                <1>         at cursor_info.current_ypixel, dw 0
    20                              <1>     iend
    21                              <1> struc font_info
    22 00000000 ????????????????    <1>     .font_base_address:    resq 1
    23 00000008 ????????????????    <1>     .font_size:            resq 1
    24 00000010 ????????????????    <1>     .font_width:           resq 1
    25 00000018 ????????????????    <1>     .font_height:          resq 1
    26                              <1> endstruc
    27                              <1> 
    28                              <1> 
    29                              <1> 
    30                              <1> printk_init:
    31 000001C5 C3                  <1>     ret
    32                              <1> 
    33                              <1> printk:
    34                              <1> 
    35 000001C6 C3                  <1>     ret
    36                              <1> putc: ; input: rbx=char,rdi=vga_address ;draw a character
    37 000001C7 4831C0              <1>     xor rax, rax
    38 000001CA 88D8                <1>     mov al, bl
    39 000001CC 48C1E004            <1>     shl rax, 4                 ; 乘以16(每个字符16字节)
    40                              <1> 
    41 000001D0 56                  <1>     push rsi
    42 000001D1 48BE005210000080FF- <1>     mov rsi, 0xFFFF800000105200
    42 000001DA FF                  <1>
    43 000001DB 4801C6              <1>     add rsi, rax         ; RSI = 字符数据地址
    44 000001DE 4889F0              <1>     mov rax,rsi
    45 000001E1 4889C3              <1>     mov rbx,rax
    46 000001E4 5E                  <1>     pop rsi
    47 000001E5 B910000000          <1>     mov rcx, 16                ; 16行高度
    48 000001EA 57                  <1>     push rdi               ; 保存当前行起始位置
    49                              <1>     .next_line:
    50 000001EB 57                  <1>         push rdi               ; 保存当前行起始位置
    51                              <1>         
    52                              <1>         ; 处理一行(8像素)
    53 000001EC 8A13                <1>         mov dl, [rbx]          ; 获取字模数据
    54 000001EE B608                <1>         mov dh, 8              ; 8位/行
    55                              <1>         .next_pixel:
    56 000001F0 4831C0              <1>             xor rax,rax
    57 000001F3 8A042504000000      <1>             mov al,byte [video_info.byte_per_pixel]
    58                              <1> 
    59 000001FA F6C280              <1>             test dl, 0x80       ; 测试最高位
    60 000001FD 7413                <1>             jz .skip_pixel
    61                              <1> 
    62                              <1> 
    63 000001FF 3C04                <1>             cmp al,4
    64 00000201 7208                <1>             jb .pixel_2byte
    65 00000203 C6470200            <1>             mov byte [rdi+2], 0x00 ; 绘制像素(白色)
    66 00000207 C64703FF            <1>             mov byte [rdi+3], 0xff ; 绘制像素(白色)
    67                              <1>             .pixel_2byte:
    68 0000020B C607FF              <1>                 mov byte [rdi], 0xff ; 绘制像素(白色)
    69 0000020E C6470100            <1>                 mov byte [rdi+1], 0x00 ; 绘制像素(白色)
    70                              <1>             ; jmp $
    71                              <1>         .skip_pixel:
    72 00000212 D0E2                <1>             shl dl, 1           ; 移到下一位
    73 00000214 4801C7              <1>             add rdi,rax
    74 00000217 FECE                <1>             dec dh
    75 00000219 75D5                <1>             jnz .next_pixel
    76                              <1>         
    77 0000021B 5F                  <1>         pop rdi                 ; 恢复行起始位置
    78 0000021C 4831C0              <1>         xor rax,rax
    79 0000021F 668B042500000000    <1>         mov ax,word [video_info.xpixel]
    80                              <1> 
    81 00000227 4989D8              <1>         mov r8,rbx
    82 0000022A BB00000000          <1>         mov rbx,0
    83 0000022F 8A1C2504000000      <1>         mov bl,byte [video_info.byte_per_pixel]
    84 00000236 480FAFC3            <1>         imul rax,rbx
    85 0000023A 4C89C3              <1>         mov rbx,r8
    86 0000023D 4801C7              <1>         add rdi,rax; 移到下一行(320=屏幕宽度)
    87                              <1>         ; jmp $
    88 00000240 48FFC3              <1>         inc rbx                 ; 下一个字模字节
    89                              <1> 
    90 00000243 E2A6                <1>         loop .next_line
    91                              <1>                 ; jmp $
    92 00000245 5F                  <1>     pop rdi                 ; 恢复行起始位置
    93 00000246 C3                  <1>     ret
    94                              <1> 
    95                              <1> print:
    96 00000247 4883F900            <1>     cmp rcx, 0
    97 0000024B 7421                <1>     je .done
    98 0000024D 53                  <1>     push rbx
    99 0000024E BBA0000000          <1>     mov rbx,    160
   100 00000253 48F7E3              <1>     mul rbx
   101 00000256 4801C7              <1>     add rdi, rax
   102 00000259 5B                  <1>     pop rbx
   103                              <1>     .str:
   104 0000025A 8A06                <1>         mov al, [rsi]
   105 0000025C 8807                <1>         mov [rdi], al
   106 0000025E 4883C702            <1>         add rdi,2
   107 00000262 48FFC6              <1>         inc rsi
   108 00000265 48FFC9              <1>         dec rcx
   109 00000268 4883F900            <1>         cmp rcx, 0
   110 0000026C 75EC                <1>         jne .str
   111                              <1>     .done:
   112 0000026E C3                  <1>         ret
   113                              <1> 
   114                              <1> print_hex_str:
   115 0000026F 4883F900            <1>     cmp rcx, 0
   116 00000273 743D                <1>     je .done
   117                              <1> 
   118 00000275 50                  <1>     push rax
   119 00000276 B880070000          <1>     mov rax,    1920
   120 0000027B 48F7E3              <1>     mul rbx
   121 0000027E 4889C3              <1>     mov rbx,rax
   122 00000281 58                  <1>     pop rax
   123 00000282 4801D8              <1>     add rax ,rbx
   124 00000285 4889C3              <1>     mov rbx,rax
   125                              <1> 
   126 00000288 B804000000          <1>     mov rax,4
   127 0000028D 48F7E3              <1>     mul rbx
   128 00000290 4801C7              <1>     add rdi, rax
   129                              <1> 
   130                              <1>     .str:
   131 00000293 51                  <1>         push rcx
   132 00000294 E81A000000          <1>         call print_hex_byte
   133                              <1> 
   134 00000299 48FFC6              <1>         inc rsi
   135 0000029C E812000000          <1>         call print_hex_byte
   136                              <1>                 ; jmp $
   137 000002A1 48FFC6              <1>         inc rsi
   138 000002A4 4883C720            <1>         add rdi,32
   139 000002A8 59                  <1>         pop rcx
   140 000002A9 48FFC9              <1>         dec rcx
   141 000002AC 4883F900            <1>         cmp rcx, 0
   142 000002B0 75E1                <1>         jne .str
   143                              <1>     .done:
   144 000002B2 C3                  <1>         ret
   145                              <1> print_hex_byte:
   146 000002B3 4831C0              <1>         xor rax,rax
   147 000002B6 4831DB              <1>         xor rbx,rbx
   148 000002B9 8A1E                <1>         mov bl, [rsi]
   149                              <1>         .h4:
   150 000002BB 88D8                <1>             mov al, bl
   151 000002BD C0E804              <1>             shr al, 4
   152                              <1> 
   153 000002C0 3C0A                <1>             cmp al, 10
   154 000002C2 7C02                <1>             jl .digit_h4
   155 000002C4 0407                <1>             add al, 'A'-'0'-10   ; 转换为A-F
   156                              <1>             .digit_h4:
   157 000002C6 0430                <1>                 add al, '0'          ; 转换为0-9
   158 000002C8 88C3                <1>                 mov bl, al
   159 000002CA E8F8FEFFFF          <1>                 call putc
   160                              <1>                 ; mov [rdi], al
   161                              <1>                 ; add rdi,2
   162 000002CF 4883C720            <1>                 add rdi,32
   163                              <1> 
   164                              <1>         .l4:
   165 000002D3 4831C0              <1>                 xor rax,rax
   166 000002D6 4831DB              <1>         xor rbx,rbx
   167 000002D9 8A1E                <1>         mov bl, [rsi]
   168 000002DB 88D8                <1>             mov al, bl
   169 000002DD 240F                <1>             and al, 0x0F
   170 000002DF 3C0A                <1>             cmp al, 10
   171 000002E1 7C02                <1>             jl .digit_l4
   172 000002E3 0407                <1>             add al, 'A'-'0'-10   ; 转换为A-F
   173                              <1>             .digit_l4:
   174 000002E5 0430                <1>                 add al, '0'          ; 转换为0-9
   175 000002E7 88C3                <1>                 mov bl, al
   176 000002E9 E8D9FEFFFF          <1>                 call putc
   177 000002EE 4883C720            <1>                 add rdi,32
   178                              <1>                 ; mov [rdi], al
   179                              <1>                 ; add rdi,2
   180 000002F2 C3                  <1>         ret
   181                              <1> 
   182                              <1> 
   183                              <1> 
   184                              <1> 
   185                              <1> draw_string:; input: x,y,string; draw string
   186                              <1> 
   187 000002F3 B800000000          <1>     mov rax, 0
   188 000002F8 4C89C8              <1>     mov rax, r9
   189 000002FB BB00000000          <1>     mov rbx,0
   190 00000300 668B1C2500000000    <1>     mov bx,word [video_info.xpixel]
   191 00000308 480FAFC3            <1>     imul rax,rbx
   192 0000030C 4C01C0              <1>     add rax, r8
   193 0000030F BB00000000          <1>     mov rbx,0
   194 00000314 8A1C2504000000      <1>     mov bl,byte [video_info.byte_per_pixel]
   195 0000031B 480FAFC3            <1>     imul rax,rbx
   196                              <1>     ; jmp $
   197 0000031F 48BF000000030080FF- <1>     mov rdi, 0xFFFF800003000000 ; 帧缓冲区起始地址
   197 00000328 FF                  <1>
   198 00000329 4801C7              <1>     add rdi, rax
   199 0000032C B800000000          <1>     mov rax,0
   200                              <1>     ; jmp $
   201                              <1>     .next_char:
   202 00000331 AC                  <1>         lodsb                  
   203 00000332 84C0                <1>         test al, al
   204                              <1>         ; jmp $
   205 00000334 7421                <1>         jz .done
   206 00000336 BB00000000          <1>         mov rbx, 0
   207 0000033B 88C3                <1>         mov bl, al
   208                              <1> 
   209 0000033D E885FEFFFF          <1>         call putc  
   210 00000342 BB00000000          <1>         mov rbx,0
   211 00000347 8A1C2504000000      <1>         mov bl,byte [video_info.byte_per_pixel]
   212 0000034E 486BDB08            <1>         imul rbx,8        
   213 00000352 4801DF              <1>         add rdi, rbx
   214                              <1>                 
   215 00000355 EBDA                <1>         jmp .next_char
   216                              <1>     .done:
   217 00000357 C3                  <1>     ret
   218                              <1> 
   219                              <1> 
   220                              <1> print_string:
   221 00000358 4801C7              <1>     add rdi, rax
   222                              <1>     .str:
   223 0000035B 8A06                <1>         mov al, [rsi]
   224 0000035D 3C00                <1>         cmp al, 0
   225 0000035F 740B                <1>         je .done
   226 00000361 8807                <1>         mov [rdi], al
   227 00000363 4883C702            <1>         add rdi,2
   228 00000367 48FFC6              <1>         inc rsi
   229 0000036A EBEF                <1>         jmp .str
   230                              <1>     .done:
   231 0000036C C3                  <1>         ret
   232                              <1> 
   233                              <1> %endif
    56                                  
    57 0000036D 636F64666A67636700      messages: db 'codfjgcg', 0
    58 00000376 617364666768696A6B-     messages1: db 'asdfghijklmnopqrstuvwxyz_ASDFGHJKLZXCVBNM1234567890', 0
    58 0000037F 6C6D6E6F7071727374-
    58 00000388 75767778797A5F4153-
    58 00000391 444647484A4B4C5A58-
    58 0000039A 4356424E4D31323334-
    58 000003A3 35363738393000     
    59                                  
    60 000003AA 4523010000000000-       params: times 10 dq 0x12345
    60 000003AA <rep Ah>           
    61 000003FA 00<rep Ah>              messages2: times 10 db 0
    62                                  kernel_end:
    63                                  section_end:
