     1                                  %include "../bootloader/global_def.asm"
     1                              <1> %ifndef GLOBAL_DEF_ASM
     2                              <1> %define GLOBAL_DEF_ASM
     3                              <1> %define PLATFORM_QEMU_X64 1
     4                              <1> %define PLATFORM_X64 2
     5                              <1> %define DEBUG_PLATFORM PLATFORM_QEMU_X64
     6                              <1> %define DEBUG_MODE 1
     7                              <1> 
     8                              <1> 
     9                              <1> ;|----------------------|
    10                              <1> ;|	100000 ~ END	|
    11                              <1> ;|	   KERNEL	|
    12                              <1> ;|----------------------|
    13                              <1> ;|	E0000 ~ 100000	|
    14                              <1> ;| Extended System BIOS |
    15                              <1> ;|----------------------|
    16                              <1> ;|	C0000 ~ Dffff	|
    17                              <1> ;|     Expansion Area   |
    18                              <1> ;|----------------------|
    19                              <1> ;|	A0000 ~ bffff	|
    20                              <1> ;|   Legacy Video Area  |
    21                              <1> ;|----------------------|
    22                              <1> ;|	9f000 ~ A0000	|
    23                              <1> ;|	 BIOS reserve	|
    24                              <1> ;|----------------------|
    25                              <1> ;|	90000 ~ 9f000	|
    26                              <1> ;|	 kernel tmpbuf	|
    27                              <1> ;|----------------------|
    28                              <1> ;|	10000 ~ 90000	|
    29                              <1> ;|	   LOADER	|
    30                              <1> ;|----------------------|
    31                              <1> ;|	8000 ~ 10000	|
    32                              <1> ;|	  VBE info	|
    33                              <1> ;|----------------------|
    34                              <1> ;|	7e00 ~ 8000	|
    35                              <1> ;|	  mem info	|
    36                              <1> ;|----------------------|
    37                              <1> ;|	7c00 ~ 7e00	|
    38                              <1> ;|	 MBR (BOOT)	|
    39                              <1> ;|----------------------|
    40                              <1> ;|	0000 ~ 7c00	|
    41                              <1> ;|	 BIOS Code	|
    42                              <1> ;|----------------------|
    43                              <1> 
    44                              <1> 
    45                              <1> ;_______________________________________________________
    46                              <1> ; START	END	    SIZE	        USED
    47                              <1> ; FFFF0	FFFFF	16B	        BIOS System Entry
    48                              <1> ; F0000	FFFEF	64KB-16B	BIOS System Code
    49                              <1> ; C8000	EFFFF	160KB	    ROM/Mapped IO
    50                              <1> ; C0000	C7FFF	32KB	    Graphic Adapter BIOS
    51                              <1> ; B8000	BFFFF	32KB	    Chroma Text Video Buffer
    52                              <1> ; B0000	B7FFF	32KB	    Mono Text Video Buffer
    53                              <1> ; A0000	AFFFF	64KB	    Graphic Video Buffer
    54                              <1> ; 9FC00	9FFFF	1KB	        Extended BIOS Data Area
    55                              <1> ; 7E00	9FBFF	622080B     Useable 608KB	
    56                              <1> ; 7C00	7DFF	512B	    MBR
    57                              <1> ; 500	7BFF	30464B      Useable 30KB	
    58                              <1> ; 400	4FF	    256B	    BIOS Data Area
    59                              <1> ; 000	3FF	    1KB	        IVT
    60                              <1> ; _____________________________________________________
    61                              <1> 
    62                              <1> 
    63                              <1> 
    64                              <1> 
    65                              <1> 
    66                              <1> 
    67                              <1> 
    68                              <1> 
    69                              <1> 
    70                              <1> 
    71                              <1> 
    72                              <1> ;|----------------------|
    73                              <1> ;|	100000 ~ END	|
    74                              <1> ;|	   KERNEL	|
    75                              <1> ;|----------------------|
    76                              <1> ;|	E0000 ~ 100000	|
    77                              <1> ;| Extended System BIOS |
    78                              <1> ;|----------------------|
    79                              <1> ;|	C0000 ~ Dffff	|
    80                              <1> ;|     Expansion Area   |
    81                              <1> ;|----------------------|
    82                              <1> ;|	A0000 ~ bffff	|
    83                              <1> ;|   Legacy Video Area  |
    84                              <1> ;|----------------------|
    85                              <1> ;|	9F000 ~ A0000	|
    86                              <1> ;|	 BIOS reserve	|
    87                              <1> ;|----------------------|
    88                              <1> ;|	90000 ~ 9F000	|
    89                              <1> ;|	 kernel tmpbuf	|
    90                              <1> ;|----------------------|
    91                              <1> ;|	10000 ~ 90000	|
    92                              <1> ;|	   LOADER	|
    93                              <1> ;|----------------------|
    94                              <1> ;|	8000 ~ 10000	|
    95                              <1> ;|	  VBE info	|
    96                              <1> ;|----------------------|
    97                              <1> ;|	7E00 ~ 8000	|
    98                              <1> ;|	  mem info	|
    99                              <1> ;|----------------------|
   100                              <1> ;|	7C00 ~ 7E00	|
   101                              <1> ;|	 MBR (BOOT)	|
   102                              <1> ;|----------------------|
   103                              <1> ;|	0000 ~ 7C00	|
   104                              <1> ;|	 BIOS Code	|
   105                              <1> ;|----------------------|
   106                              <1> 
   107                              <1> 
   108                              <1> 
   109                              <1> 
   110                              <1> 
   111                              <1> 
   112                              <1> 
   113                              <1> 
   114                              <1> 
   115                              <1> 
   116                              <1> ;______________________________________________
   117                              <1> ; ----------------Vbe Info Block------------
   118                              <1> ; typedef struct {
   119                              <1> ;     unsigned char       vbe_signature;
   120                              <1> ;     unsigned short      vbe_version;
   121                              <1> ;     unsigned long       oem_string_ptr;
   122                              <1> ;     unsigned char       capabilities;
   123                              <1> ;     unsigned long       video_mode_ptr;
   124                              <1> ;     unsigned short      total_memory;
   125                              <1> ;     unsigned short      oem_software_rev;
   126                              <1> ;     unsigned long       oem_vendor_name_ptr;
   127                              <1> ;     unsigned long       oem_product_name_ptr;
   128                              <1> ;     unsigned long       oem_product_rev_ptr;
   129                              <1> ;     unsigned char       reserved[222];
   130                              <1> ;     unsigned char       oem_data[256];  
   131                              <1> ; } VbeInfoBlock;
   132                              <1> ;______________________________________________
   133                              <1> 
   134                              <1> 
   135                              <1> BaseOfKernelFile	equ	0x00
   136                              <1> OffsetOfKernelFile	equ	0x100000
   137                              <1> BaseTmpOfKernelAddr	equ	0x9000
   138                              <1> OffsetTmpOfKernelFile	equ	0x0000
   139                              <1> VBEStructBufferAddr	equ	0x8000
   140                              <1> VBEModeStructBufferAddr	equ	0x8200
   141                              <1> MemoryStructBufferAddr	equ	0x8800
   142                              <1> 
   143                              <1> 
   144                              <1> 
   145                              <1> KernelSpaceUpperAddress equ 0xFFFF800000000000
   146                              <1> 
   147                              <1> GDTPointerUpperAddr equ 0xFFFF800000104000
   148                              <1> IDTPointerUpperAddr equ 0xFFFF80000010400a
   149                              <1> TSSPointerUpperAddr equ 0xFFFF800000104014
   150                              <1> 
   151                              <1> VideoFrameBufferAddress equ 0xFFFF800003000000
   152                              <1> KernelStartSectorNum	equ	16
   153                              <1> 
   154                              <1> 
   155                              <1> 
   156                              <1> 
   157                              <1> MasterSectorReadNumPort    equ	0x1F2
   158                              <1> MasterSectorReadPort    equ	0x1F0
   159                              <1> 
   160                              <1> SlaveReadNumPort    equ	0x172
   161                              <1> SlaveSectorReadPort    equ	0x170
   162                              <1> 
   163                              <1> SectorReadNumPort    equ	MasterSectorReadNumPort
   164                              <1> SectorReadPort    equ	MasterSectorReadPort
   165                              <1> 
   166                              <1> struc vbe_info_block
   167 00000000 ????????            <1>     .signature                 resb 4    ; 'VESA' signature (must be "VESA")
   168 00000004 ????                <1>     .version                   resw 1    ; VBE version (e.g., 0x0300 for VBE 3.0)
   169 00000006 ????????            <1>     .oem_string_ptr            resd 1    ; Pointer to OEM string
   170 0000000A ????????            <1>     .capabilities              resd 1    ; Capabilities of the video card
   171 0000000E ????????            <1>     .video_mode_ptr            resd 1    ; Pointer to supported video modes
   172 00000012 ????                <1>     .total_memory              resw 1    ; Total memory in 64KB blocks
   173                              <1> 
   174                              <1>     ; VBE 2.0+ fields
   175 00000014 ????                <1>     .oem_software_rev          resw 1    ; OEM software revision
   176 00000016 ????????            <1>     .oem_vendor_name_ptr       resd 1    ; Pointer to OEM vendor name string
   177 0000001A ????????            <1>     .oem_product_name_ptr      resd 1    ; Pointer to OEM product name string
   178 0000001E ????????            <1>     .oem_product_rev_ptr       resd 1    ; Pointer to OEM product revision string
   179 00000022 <res DEh>           <1>     .reserved                  resb 222  ; Reserved for VBE implementation
   180 00000100 <res 100h>          <1>     .oem_data                  resb 256  ; Data area for OEM-specific information
   181                              <1> endstruc
   182                              <1> 
   183                              <1> struc vbe_mode_info_block
   184 00000000 ????                <1>     .attributes                resw 1    ; Mode attributes
   185 00000002 ??                  <1>     .winA_attributes           resb 1    ; Window A attributes
   186 00000003 ??                  <1>     .winB_attributes           resb 1    ; Window B attributes
   187 00000004 ????                <1>     .win_granularity           resw 1    ; Window granularity in KB
   188 00000006 ????                <1>     .win_size                  resw 1    ; Window size in KB
   189 00000008 ????                <1>     .winA_segment              resw 1    ; Window A segment
   190 0000000A ????                <1>     .winB_segment              resw 1    ; Window B segment
   191 0000000C ????????            <1>     .win_func_ptr              resd 1    ; Pointer to window function
   192 00000010 ????                <1>     .bytes_per_scanline        resw 1    ; Bytes per scanline
   193                              <1> 
   194                              <1>     ; VBE 1.2+ fields
   195 00000012 ????                <1>     .x_resolution              resw 1    ; Horizontal resolution in pixels
   196 00000014 ????                <1>     .y_resolution              resw 1    ; Vertical resolution in pixels
   197 00000016 ??                  <1>     .x_char_size               resb 1    ; Character cell width in pixels
   198 00000017 ??                  <1>     .y_char_size               resb 1    ; Character cell height in pixels
   199 00000018 ??                  <1>     .number_of_planes          resb 1    ; Number of memory planes
   200 00000019 ??                  <1>     .bits_per_pixel            resb 1    ; Bits per pixel
   201 0000001A ??                  <1>     .number_of_banks           resb 1    ; Number of banks
   202 0000001B ??                  <1>     .memory_model              resb 1    ; Memory model type
   203 0000001C ??                  <1>     .bank_size                 resb 1    ; Bank size in KB
   204 0000001D ??                  <1>     .number_of_image_pages     resb 1    ; Number of images
   205 0000001E ??                  <1>     .reserved1                 resb 1    ; Reserved
   206                              <1> 
   207                              <1>     ; Direct Color fields (VBE 1.2+)
   208 0000001F ??                  <1>     .red_mask_size             resb 1    ; Size of direct color red mask
   209 00000020 ??                  <1>     .red_field_position        resb 1    ; Bit position of red mask
   210 00000021 ??                  <1>     .green_mask_size           resb 1    ; Size of direct color green mask
   211 00000022 ??                  <1>     .green_field_position      resb 1    ; Bit position of green mask
   212 00000023 ??                  <1>     .blue_mask_size            resb 1    ; Size of direct color blue mask
   213 00000024 ??                  <1>     .blue_field_position       resb 1    ; Bit position of blue mask
   214 00000025 ??                  <1>     .reserved_mask_size        resb 1    ; Size of direct color reserved mask
   215 00000026 ??                  <1>     .reserved_field_position   resb 1    ; Bit position of reserved mask
   216 00000027 ??                  <1>     .direct_color_mode_info    resb 1    ; Direct color mode attributes
   217                              <1> 
   218                              <1>     ; VBE 2.0+ fields
   219 00000028 ????????            <1>     .phys_base_ptr             resd 1    ; Physical address for flat memory frame buffer
   220 0000002C ????????            <1>     .reserved2                 resd 1    ; Reserved
   221 00000030 ????                <1>     .reserved3                 resw 1    ; Reserved
   222                              <1> 
   223                              <1>     ; VBE 3.0+ fields
   224 00000032 ????                <1>     .lin_bytes_per_scanline    resw 1    ; Bytes per scanline for linear modes
   225 00000034 ??                  <1>     .bnk_number_of_image_pages resb 1    ; Number of images for banked modes
   226 00000035 ??                  <1>     .lin_number_of_image_pages resb 1    ; Number of images for linear modes
   227 00000036 ??                  <1>     .lin_red_mask_size         resb 1    ; Size of direct color red mask (linear modes)
   228 00000037 ??                  <1>     .lin_red_field_position    resb 1    ; Bit position of red mask (linear modes)
   229 00000038 ??                  <1>     .lin_green_mask_size       resb 1    ; Size of direct color green mask (linear modes)
   230 00000039 ??                  <1>     .lin_green_field_position  resb 1    ; Bit position of green mask (linear modes)
   231 0000003A ??                  <1>     .lin_blue_mask_size        resb 1    ; Size of direct color blue mask (linear modes)
   232 0000003B ??                  <1>     .lin_blue_field_position   resb 1    ; Bit position of blue mask (linear modes)
   233 0000003C ??                  <1>     .lin_reserved_mask_size    resb 1    ; Size of direct color reserved mask (linear modes)
   234 0000003D ??                  <1>     .lin_reserved_field_position resb 1  ; Bit position of reserved mask (linear modes)
   235 0000003E ????????            <1>     .max_pixel_clock           resd 1    ; Maximum pixel clock (Hz)
   236 00000042 <res BEh>           <1>     .reserved4                 resb 190  ; Reserved for future expansion
   237                              <1> endstruc
   238                              <1> 
   239                              <1> struc e820_memory_entry
   240 00000000 ????????            <1>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   241 00000004 ????????            <1>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   242 00000008 ????????            <1>     .length_low               resd 1    ; Lower 32 bits of the length
   243 0000000C ????????            <1>     .length_high              resd 1    ; Upper 32 bits of the length
   244 00000010 ????????            <1>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   245                              <1>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   246                              <1> endstruc
   247                              <1> 
   248                              <1> %endif
     2                                  %include "../kernel/stddef.asm"
     1                              <1> %ifndef STDDEF_ASM
     2                              <1> %define STDDEF_ASM
     3                              <1> 
     4                              <1> ;-----------Data Type Standard------------;
     5                              <1> %define USE_DT_STANDARD
     6                              <1> %ifdef USE_DT_STANDARD
     7                              <1>     %macro gbyte 1 ; 参数1：变量名, 参数2：初始值(1字节)
     8                              <1>         %1: db %2
     9                              <1>         %endmacro
    10                              <1> 
    11                              <1>     %macro g2byte 1 ; 参数1：变量名, 参数2：初始值(4字节)
    12                              <1>         %1: dw %2
    13                              <1>         %endmacro
    14                              <1> 
    15                              <1>     %macro g4byte 1 ; 参数1：变量名, 参数2：初始值(4字节)
    16                              <1>         %1: dd %2
    17                              <1>         %endmacro
    18                              <1> 
    19                              <1>     %macro g8byte 1 ; 参数1：变量名, 参数2：初始值(8字节)
    20                              <1>         %1: dq %2
    21                              <1>         %endmacro
    22                              <1> 
    23                              <1> 
    24                              <1>     ; %macro lvar 1
    25                              <1>     ;     %define %1 qword [rbp - 112-(__local_offset + 8)]
    26                              <1> 
    27                              <1>     ;     %assign __local_offset  __local_offset + 8
    28                              <1> 
    29                              <1>     ;     sub rsp, 8
    30                              <1>     ;     %endmacro
    31                              <1> 
    32                              <1>     ; 初始化局部变量追踪
    33                              <1>     %macro LOCAL_BEGIN 0
    34                              <1>         %push local_ctx              ; 创建新的局部上下文
    35                              <1>         %assign %$local_offset 0     ; 初始化局部偏移计数器
    36                              <1>     %endmacro
    37                              <1> 
    38                              <1>     ; 定义局部变量
    39                              <1>     ; %1 - 变量名
    40                              <1>     ; %2 - 变量大小(字节)
    41                              <1>     %macro lvar 1
    42                              <1>         %assign %$local_offset %$local_offset+8   ; 累加偏移
    43                              <1>         %define %$var_%1 %$local_offset               ; 定义变量偏移
    44                              <1>         %define %1 qword [rbp - %$var_%1]
    45                              <1>         sub rsp,8
    46                              <1>     %endmacro
    47                              <1> 
    48                              <1>     %macro lstr 1
    49                              <1>         %assign %$local_offset %$local_offset+8   ; 累加偏移
    50                              <1>         %define %$str_%1 %$local_offset               ; 定义变量偏移
    51                              <1>         %define %1  rbp - %$str_%1
    52                              <1>         %define %1.size 5
    53                              <1>         sub rsp,%1.size
    54                              <1>     %endmacro
    55                              <1> 
    56                              <1>     ; 分配栈空间并保存寄存器
    57                              <1>     %macro lalloc 0
    58                              <1>         %if %$local_offset > 0
    59                              <1>             ; 16字节对齐
    60                              <1>             %assign pad (16 - (%$local_offset % 16))
    61                              <1>             %if pad < 16
    62                              <1>                 %assign %$local_offset %$local_offset + pad
    63                              <1>             %endif
    64                              <1>             sub rsp, %$local_offset
    65                              <1>         %endif
    66                              <1>     %endmacro
    67                              <1> 
    68                              <1> 
    69                              <1>     ; ; 获取局部变量的访问表达式
    70                              <1>     ; %macro locvar 1-*
    71                              <1>     ;     ; [rbp - %$var_%1 ]
    72                              <1> 
    73                              <1>     ;     %ifctx local_ctx
    74                              <1>     ;         ; %ifidn %2, ""
    75                              <1>     ;             qword [rbp - %$var_%1]
    76                              <1>     ;         ; %else
    77                              <1>     ;         ;     [rbp - %$var_%1 - %2]
    78                              <1>     ;         ; %endif
    79                              <1>     ;     %endif
    80                              <1>     ; %endmacro
    81                              <1> 
    82                              <1>     ;     %macro locvar 1-2
    83                              <1>     ;     ; [rbp - %$var_%1 ]
    84                              <1> 
    85                              <1>     ;     %ifctx local_ctx
    86                              <1>     ;         %ifidn %2, ""
    87                              <1>     ;             [rbp - %$var_%1]
    88                              <1>     ;         %else
    89                              <1>     ;             [rbp - %$var_%1 - %2]
    90                              <1>     ;         %endif
    91                              <1>     ;     %endif
    92                              <1>     ; %endmacro
    93                              <1> 
    94                              <1> 
    95                              <1> %endif
    96                              <1> 
    97                              <1> ;-----------Calling Conventions Standard------------;
    98                              <1> %define USE_CC_STANDARD
    99                              <1> %ifdef USE_CC_STANDARD
   100                              <1> 
   101                              <1>     ;caller maintain the stack balance 
   102                              <1>         ; debug_times: db 0
   103                              <1>         ; cmp byte [rel debug_times],3
   104                              <1>         ; je debug_stop
   105                              <1>         ; add byte [rel debug_times],1
   106                              <1>     ; -------------------------------
   107                              <1>     ; 栈帧结构定义
   108                              <1>     ; -------------------------------
   109                              <1>     ; 调用后的栈布局:
   110                              <1>     ; [rsp+0x00] 返回地址 (8字节)
   111                              <1>     ; [rsp+0x08] 旧RBP     (8字节) <- rbp指向这里
   112                              <1>     ; [rsp+0x10] 参数1     (8字节)
   113                              <1>     ; [rsp+0x18] 参数2
   114                              <1>     ; ...
   115                              <1>     ; [rsp+X]    局部变量区
   116                              <1>     ; -------------------------------
   117                              <1> 
   118                              <1>     %define PARAM_OFFSET   16      ; 第一个参数的偏移量(返回地址8 + 旧RBP8)
   119                              <1>     %macro function 1-* ; 1=函数名, 2=返回参数数量, 3=参数列表
   120                              <1>         %assign param_count %0 - 2 ; 参数数量
   121                              <1>         
   122                              <1>         %if param_count < 0
   123                              <1>             %assign param_count 0 ; 如果没有参数，设置为 0
   124                              <1>         %endif
   125                              <1>         %if param_count < 1
   126                              <1>             %assign ret_param_count 0 ; 返回参数数量
   127                              <1>         %else
   128                              <1>             %assign ret_param_count %2 ; 返回参数数量
   129                              <1>         %endif
   130                              <1> 
   131                              <1>         ; 准备调用
   132                              <1>         prepare_call param_count, ret_param_count
   133                              <1> 
   134                              <1>         ; 如果有参数，将参数压入栈
   135                              <1>         %if param_count > 0
   136                              <1>             %assign i 0
   137                              <1>             mov [rsp-8], rax ; 保存返回地址
   138                              <1>             %rep param_count
   139                              <1>                 %rotate 1
   140                              <1>                 mov rax, %2
   141                              <1>                 mov [rsp + 8*i], rax ; 将参数压入栈
   142                              <1>                 %assign i i+1
   143                              <1>             %endrep
   144                              <1>             %rotate 1
   145                              <1>             %rotate 1
   146                              <1>             mov rax,[rsp-8]; 保存返回地址
   147                              <1>         %endif
   148                              <1> 
   149                              <1>         ; 调用函数
   150                              <1>         call %1
   151                              <1> 
   152                              <1>         ; 清理栈空间
   153                              <1>         cleanup_call param_count, ret_param_count
   154                              <1> 
   155                              <1>     %endmacro
   156                              <1> 
   157                              <1>     %macro align_stack_16 0
   158                              <1>         test rsp, 0xF
   159                              <1>         jz %%skip_align
   160                              <1>         sub rsp,8
   161                              <1>         %%skip_align:
   162                              <1>     %endmacro
   163                              <1> 
   164                              <1>     %macro prologue 0;local var size(bytes)
   165                              <1>         push rbp
   166                              <1>         mov rbp, rsp
   167                              <1> 
   168                              <1> 
   169                              <1>         pushallq
   170                              <1>         LOCAL_BEGIN
   171                              <1>         
   172                              <1> 
   173                              <1>         ; 调试信息可以放在这里
   174                              <1>         ; %ifdef DEBUG
   175                              <1>         ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
   176                              <1>         ; %endif
   177                              <1>     %endmacro
   178                              <1>     %macro epilogue 0
   179                              <1>         %pop
   180                              <1>         mov rax, rbp
   181                              <1>         sub rax, 8*14
   182                              <1>         mov rsp, rax
   183                              <1> 
   184                              <1>         popallq
   185                              <1> 
   186                              <1>         mov rsp, rbp
   187                              <1>         pop rbp
   188                              <1>         ret
   189                              <1>     %endmacro
   190                              <1> 
   191                              <1>     %macro prolog 1;local var size(bytes)
   192                              <1>         push rbp
   193                              <1>         mov rbp, rsp
   194                              <1> 
   195                              <1> 
   196                              <1>         mov [rbp-8],rax
   197                              <1>         mov rax, %1
   198                              <1>         add rax, 15
   199                              <1>         and rax, ~15
   200                              <1>         sub rsp, rax
   201                              <1>         mov rax,[rbp-8]
   202                              <1> 
   203                              <1>         pushallq
   204                              <1>         
   205                              <1>         ; 调试信息可以放在这里
   206                              <1>         ; %ifdef DEBUG
   207                              <1>         ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
   208                              <1>         ; %endif
   209                              <1>     %endmacro
   210                              <1> 
   211                              <1>     %macro epilog 0
   212                              <1>         popallq
   213                              <1> 
   214                              <1>         mov rsp, rbp
   215                              <1>         pop rbp
   216                              <1>         ret
   217                              <1>     %endmacro
   218                              <1> 
   219                              <1>     %macro get_param 2;1=register, 2=param index(from 1)
   220                              <1>         mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   221                              <1>     %endmacro
   222                              <1> 
   223                              <1>     %macro set_ret_param 2;1=register, 2=param index(from 1)
   224                              <1>         mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   225                              <1>     %endmacro
   226                              <1> 
   227                              <1>     %macro prepare_call 2;1=param count, 2=return param count
   228                              <1>         %assign total_space ((%1 + %2) * 8)
   229                              <1>         
   230                              <1>         %if (total_space % 16) != 0
   231                              <1>             %assign total_space total_space + 8  ; 添加填充
   232                              <1>         %endif
   233                              <1>         
   234                              <1>         sub rsp, total_space
   235                              <1>     %endmacro
   236                              <1> 
   237                              <1>     %macro cleanup_call 2;1=param count, 2=return param count
   238                              <1>         %assign total_space ((%1 + %2) * 8)
   239                              <1>         %if (total_space % 16) != 0
   240                              <1>             %assign total_space total_space + 8
   241                              <1>         %endif
   242                              <1>         add rsp, total_space
   243                              <1>     %endmacro
   244                              <1> 
   245                              <1>     %macro pushallq 0
   246                              <1>         push rax
   247                              <1>         push rbx
   248                              <1>         push rcx
   249                              <1>         push rdx
   250                              <1>         push rsi
   251                              <1>         push rdi
   252                              <1>         push r8
   253                              <1>         push r9
   254                              <1>         push r10
   255                              <1>         push r11
   256                              <1>         push r12
   257                              <1>         push r13
   258                              <1>         push r14
   259                              <1>         push r15
   260                              <1>     %endmacro
   261                              <1> 
   262                              <1>     %macro popallq 0
   263                              <1>         pop r15
   264                              <1>         pop r14
   265                              <1>         pop r13
   266                              <1>         pop r12
   267                              <1>         pop r11
   268                              <1>         pop r10
   269                              <1>         pop r9
   270                              <1>         pop r8
   271                              <1>         pop rdi
   272                              <1>         pop rsi
   273                              <1>         pop rdx
   274                              <1>         pop rcx
   275                              <1>         pop rbx
   276                              <1>         pop rax
   277                              <1>     %endmacro
   278                              <1> 
   279                              <1>     %endif
   280                              <1> ;---------------------ABI Standard------------------;
   281                              <1> %define USE_ABI_STANDARD
   282                              <1> %ifdef USE_ABI_STANDARD
   283                              <1> 
   284                              <1> 
   285                              <1>     %define ABI_File_None   0       ; 无文件类型
   286                              <1>     %define ABI_File_REL    1       ; 可重定位文件
   287                              <1>     %define ABI_File_EXEC   2       ; 可执行文件
   288                              <1>     %define ABI_File_DYN    3       ; 共享目标文件
   289                              <1>     %define ABI_File_CORE   4       ; 核心文件
   290                              <1> 
   291                              <1>     %define Section_Type_NULL    0      ; 未使用
   292                              <1>     %define Section_Type_LOAD    1      ; 可加载段
   293                              <1>     %define Section_Type_DYNAMIC 2      ; 动态链接信息
   294                              <1>     %define Section_Type_INTERP  3      ; 解释器路径
   295                              <1>     %define Section_Type_NOTE    4      ; 辅助信息
   296                              <1>     %define Section_Type_SHLIB   5      ; 保留
   297                              <1> 
   298                              <1>     %macro ABI_HEADER 4 ;1=File Type, 2=Entry Point Address, 3=Section Header Offset, 4=Section Header Count
   299                              <1>         db 0xA5, 'A', 'B', 'I'     ; ABI Magic Number
   300                              <1>         db 1                       ; Encode Type
   301                              <1>         db 1                       ; ABI Version
   302                              <1> 
   303                              <1>         dw %1                      ; ABI File Type
   304                              <1>         dq %2                      ; Entry Point Address
   305                              <1>         dw 32                      ; ABI Headers Size
   306                              <1> 
   307                              <1>         dq %3                      ; Section Header Offset
   308                              <1>         dw 32                      ; Section Header Size
   309                              <1>         dw %4                      ; Section Header Count
   310                              <1>         dw 0                       ; Symble Table Entry Size
   311                              <1>     %endmacro
   312                              <1>     STRUC struct_ABI_HEADER
   313 00000000 ????????            <1>         .magic:         resb 4    ; ABI Magic Number (4 bytes)
   314 00000004 ??                  <1>         .encode_type:   resb 1    ; Encode Type (1 byte)
   315 00000005 ??                  <1>         .abi_version:   resb 1    ; ABI Version (1 byte)
   316 00000006 ????                <1>         .file_type:     resw 1    ; ABI File Type (2 bytes)
   317 00000008 ????????????????    <1>         .entry_point:   resq 1    ; Entry Point Address (8 bytes)
   318 00000010 ????                <1>         .header_size:   resw 1    ; ABI Headers Size (2 bytes)
   319 00000012 ????????????????    <1>         .section_offset: resq 1   ; Section Header Offset (8 bytes)
   320 0000001A ????                <1>         .section_size:  resw 1    ; Section Header Size (2 bytes)
   321 0000001C ????                <1>         .section_count: resw 1    ; Section Header Count (2 bytes)
   322 0000001E ????                <1>         .sym_table_size: resw 1   ; Symbol Table Entry Size (2 bytes)
   323                              <1>     ENDSTRUC
   324                              <1> 
   325                              <1>     %macro SECTION_HEADER 4 ;1=Section Type, 2=Virtual Address, 3=Section Offset, 4=Section Size
   326                              <1>         dq %1                  ; Section Type
   327                              <1>         dq %2                  ; Virtual Address
   328                              <1>         dq %3                  ; Section Offset
   329                              <1>         dq %4                  ; Section Size
   330                              <1>     %endmacro
   331                              <1>     STRUC struct_SECTION_HEADER
   332 00000000 ????????????????    <1>         .type:      resq 1    ; Section Type (8 bytes)
   333 00000008 ????????????????    <1>         .vaddr:     resq 1    ; Virtual Address (8 bytes)
   334 00000010 ????????????????    <1>         .offset:    resq 1    ; Section Offset (8 bytes)
   335 00000018 ????????????????    <1>         .size:      resq 1    ; Section Size (8 bytes)
   336                              <1>     ENDSTRUC
   337                              <1>     %endif
   338                              <1> 
   339                              <1> %endif
     3                                  [BITS 64]          ; 0xFFFF800000106200
     4                                  ehdr:
     5                                      ABI_HEADER ABI_File_CORE, kernel_start, shdr,1
   299 00000000 A5414249            <1>  db 0xA5, 'A', 'B', 'I'
   300 00000004 01                  <1>  db 1
   301 00000005 01                  <1>  db 1
   302                              <1> 
   303 00000006 0400                <1>  dw %1
   304 00000008 [4000000000000000]  <1>  dq %2
   305 00000010 2000                <1>  dw 32
   306                              <1> 
   307 00000012 [2000000000000000]  <1>  dq %3
   308 0000001A 2000                <1>  dw 32
   309 0000001C 0100                <1>  dw %4
   310 0000001E 0000                <1>  dw 0
     6                                  shdr:
     7                                      SECTION_HEADER Section_Type_LOAD, 0, kernel_start,section_end-section_start
   326 00000020 0100000000000000    <1>  dq %1
   327 00000028 0000000000000000    <1>  dq %2
   328 00000030 [4000000000000000]  <1>  dq %3
   329 00000038 BF22000000000000    <1>  dq %4
     8                                  section_start:
     9                                  kernel_start:
    10                                  
    11 00000040 488D05B8220000              lea rax, [rel kernel_end]
    12                                      function system_init,1,rax
   120                              <1>  %assign param_count %0 - 2
   121                              <1> 
   122                              <1>  %if param_count < 0
   123                              <1>  %assign param_count 0
   124                              <1>  %endif
   125                              <1>  %if param_count < 1
   126                              <1>  %assign ret_param_count 0
   127                              <1>  %else
   128                              <1>  %assign ret_param_count %2
   129                              <1>  %endif
   130                              <1> 
   131                              <1> 
   132                              <1>  prepare_call param_count, ret_param_count
   228                              <2>  %assign total_space ((%1 + %2) * 8)
   229                              <2> 
   230                              <2>  %if (total_space % 16) != 0
   231                              <2>  %assign total_space total_space + 8
   232                              <2>  %endif
   233                              <2> 
   234 00000047 4883EC10            <2>  sub rsp, total_space
   133                              <1> 
   134                              <1> 
   135                              <1>  %if param_count > 0
   136                              <1>  %assign i 0
   137 0000004B 48894424F8          <1>  mov [rsp-8], rax
   138                              <1>  %rep param_count
   139                              <1>  %rotate 1
   140                              <1>  mov rax, %2
   141                              <1>  mov [rsp + 8*i], rax
   142                              <1>  %assign i i+1
   143                              <1>  %endrep
   139                              <2>  %rotate 1
   140 00000050 4889C0              <2>  mov rax, %2
   141 00000053 48890424            <2>  mov [rsp + 8*i], rax
   142                              <2>  %assign i i+1
   144                              <1>  %rotate 1
   145                              <1>  %rotate 1
   146 00000057 488B4424F8          <1>  mov rax,[rsp-8]
   147                              <1>  %endif
   148                              <1> 
   149                              <1> 
   150 0000005C E80D010000          <1>  call %1
   151                              <1> 
   152                              <1> 
   153                              <1>  cleanup_call param_count, ret_param_count
   238                              <2>  %assign total_space ((%1 + %2) * 8)
   239                              <2>  %if (total_space % 16) != 0
   240                              <2>  %assign total_space total_space + 8
   241                              <2>  %endif
   242 00000061 4883C410            <2>  add rsp, total_space
   154                              <1> 
    13                                  
    14 00000065 B801000000                  mov rax,1
    15 0000006A BB02000000                  mov rbx,2
    16 0000006F B903000000                  mov rcx,3
    17 00000074 BA04000000                  mov rdx,4
    18                                      ; mov r10,5
    19                                  
    20 00000079 41BB06000000                mov r11,6
    21 0000007F 41BC07000000                mov r12,7
    22 00000085 41BD08000000                mov r13,8
    23 0000008B 41BE09000000                mov r14,9
    24 00000091 41BF0A000000                mov r15,10
    25 00000097 41B804000000                mov r8,4
    26 0000009D 41B902000000                mov r9,2
    27                                      function test_std,1,rax
   120                              <1>  %assign param_count %0 - 2
   121                              <1> 
   122                              <1>  %if param_count < 0
   123                              <1>  %assign param_count 0
   124                              <1>  %endif
   125                              <1>  %if param_count < 1
   126                              <1>  %assign ret_param_count 0
   127                              <1>  %else
   128                              <1>  %assign ret_param_count %2
   129                              <1>  %endif
   130                              <1> 
   131                              <1> 
   132                              <1>  prepare_call param_count, ret_param_count
   228                              <2>  %assign total_space ((%1 + %2) * 8)
   229                              <2> 
   230                              <2>  %if (total_space % 16) != 0
   231                              <2>  %assign total_space total_space + 8
   232                              <2>  %endif
   233                              <2> 
   234 000000A3 4883EC10            <2>  sub rsp, total_space
   133                              <1> 
   134                              <1> 
   135                              <1>  %if param_count > 0
   136                              <1>  %assign i 0
   137 000000A7 48894424F8          <1>  mov [rsp-8], rax
   138                              <1>  %rep param_count
   139                              <1>  %rotate 1
   140                              <1>  mov rax, %2
   141                              <1>  mov [rsp + 8*i], rax
   142                              <1>  %assign i i+1
   143                              <1>  %endrep
   139                              <2>  %rotate 1
   140 000000AC 4889C0              <2>  mov rax, %2
   141 000000AF 48890424            <2>  mov [rsp + 8*i], rax
   142                              <2>  %assign i i+1
   144                              <1>  %rotate 1
   145                              <1>  %rotate 1
   146 000000B3 488B4424F8          <1>  mov rax,[rsp-8]
   147                              <1>  %endif
   148                              <1> 
   149                              <1> 
   150 000000B8 E810000000          <1>  call %1
   151                              <1> 
   152                              <1> 
   153                              <1>  cleanup_call param_count, ret_param_count
   238                              <2>  %assign total_space ((%1 + %2) * 8)
   239                              <2>  %if (total_space % 16) != 0
   240                              <2>  %assign total_space total_space + 8
   241                              <2>  %endif
   242 000000BD 4883C410            <2>  add rsp, total_space
   154                              <1> 
    28 000000C1 4C8B4C24F8                  mov r9,qword[rsp-8]
    29 000000C6 4C8B5424F0                  mov r10,qword[rsp-16]
    30                                  
    31                                  
    32                                      .endofkernel:
    33 000000CB EBFE                            jmp $
    34                                  
    35                                  test_std:;
    36                                      prologue
   165 000000CD 55                  <1>  push rbp
   166 000000CE 4889E5              <1>  mov rbp, rsp
   167                              <1> 
   168                              <1> 
   169                              <1>  pushallq
   246 000000D1 50                  <2>  push rax
   247 000000D2 53                  <2>  push rbx
   248 000000D3 51                  <2>  push rcx
   249 000000D4 52                  <2>  push rdx
   250 000000D5 56                  <2>  push rsi
   251 000000D6 57                  <2>  push rdi
   252 000000D7 4150                <2>  push r8
   253 000000D9 4151                <2>  push r9
   254 000000DB 4152                <2>  push r10
   255 000000DD 4153                <2>  push r11
   256 000000DF 4154                <2>  push r12
   257 000000E1 4155                <2>  push r13
   258 000000E3 4156                <2>  push r14
   259 000000E5 4157                <2>  push r15
   170                              <1>  LOCAL_BEGIN
    34                              <2>  %push local_ctx
    35                              <2>  %assign %$local_offset 0
   171                              <1> 
   172                              <1> 
   173                              <1> 
   174                              <1> 
   175                              <1> 
   176                              <1> 
    37                                      get_param rdi, 1   ; x
   220 000000E7 488B7D10            <1>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    38                                  
    39 000000EB B999000000                  mov rcx,0x99
    40 000000F0 BA88000000                  mov rdx,0x88
    41                                  
    42                                      lvar defresult
    42                              <1>  %assign %$local_offset %$local_offset+8
    43                              <1>  %define %$var_%1 %$local_offset
    44                              <1>  %define %1 qword [rbp - %$var_%1]
    45 000000F5 4883EC08            <1>  sub rsp,8
    43                                      lalloc
    58                              <1>  %if %$local_offset > 0
    59                              <1> 
    60                              <1>  %assign pad (16 - (%$local_offset % 16))
    61                              <1>  %if pad < 16
    62                              <1>  %assign %$local_offset %$local_offset + pad
    63                              <1>  %endif
    64 000000F9 4883EC10            <1>  sub rsp, %$local_offset
    65                              <1>  %endif
    44                                  
    45                                      ; lstr str
    46                                      ; mov rax,str.size
    47                                      ; jmp $
    48                                  
    49 000000FD 4883FF01                    cmp rdi,1
    50 00000101 7436                        je .1return
    51 00000103 4883FF00                    cmp rdi,0
    52 00000107 7437                        je .2return
    53                                  
    54                                  
    55 00000109 48897DF0                    mov defresult,rdi
    56 0000010D 48FFCF                      dec rdi
    57                                      function test_std,1,rdi
   120                              <1>  %assign param_count %0 - 2
   121                              <1> 
   122                              <1>  %if param_count < 0
   123                              <1>  %assign param_count 0
   124                              <1>  %endif
   125                              <1>  %if param_count < 1
   126                              <1>  %assign ret_param_count 0
   127                              <1>  %else
   128                              <1>  %assign ret_param_count %2
   129                              <1>  %endif
   130                              <1> 
   131                              <1> 
   132                              <1>  prepare_call param_count, ret_param_count
   228                              <2>  %assign total_space ((%1 + %2) * 8)
   229                              <2> 
   230                              <2>  %if (total_space % 16) != 0
   231                              <2>  %assign total_space total_space + 8
   232                              <2>  %endif
   233                              <2> 
   234 00000110 4883EC10            <2>  sub rsp, total_space
   133                              <1> 
   134                              <1> 
   135                              <1>  %if param_count > 0
   136                              <1>  %assign i 0
   137 00000114 48894424F8          <1>  mov [rsp-8], rax
   138                              <1>  %rep param_count
   139                              <1>  %rotate 1
   140                              <1>  mov rax, %2
   141                              <1>  mov [rsp + 8*i], rax
   142                              <1>  %assign i i+1
   143                              <1>  %endrep
   139                              <2>  %rotate 1
   140 00000119 4889F8              <2>  mov rax, %2
   141 0000011C 48890424            <2>  mov [rsp + 8*i], rax
   142                              <2>  %assign i i+1
   144                              <1>  %rotate 1
   145                              <1>  %rotate 1
   146 00000120 488B4424F8          <1>  mov rax,[rsp-8]
   147                              <1>  %endif
   148                              <1> 
   149                              <1> 
   150 00000125 E8A3FFFFFF          <1>  call %1
   151                              <1> 
   152                              <1> 
   153                              <1>  cleanup_call param_count, ret_param_count
   238                              <2>  %assign total_space ((%1 + %2) * 8)
   239                              <2>  %if (total_space % 16) != 0
   240                              <2>  %assign total_space total_space + 8
   241                              <2>  %endif
   242 0000012A 4883C410            <2>  add rsp, total_space
   154                              <1> 
    58 0000012E 488B4424F8                  mov rax,qword[rsp-8]
    59 00000133 48F76DF0                    imul defresult
    60 00000137 EB0C                        jmp .done
    61                                  
    62                                      .1return:
    63 00000139 B801000000                      mov rax,1
    64 0000013E EB05                            jmp .done
    65                                      .2return:
    66 00000140 B800000000                      mov rax,0
    67                                      .done:
    68                                      set_ret_param rax,2
   224 00000145 48894518            <1>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
    69                                      ; jmp $
    70                                      epilogue
   179                              <1>  %pop
   180 00000149 4889E8              <1>  mov rax, rbp
   181 0000014C 4883E870            <1>  sub rax, 8*14
   182 00000150 4889C4              <1>  mov rsp, rax
   183                              <1> 
   184                              <1>  popallq
   263 00000153 415F                <2>  pop r15
   264 00000155 415E                <2>  pop r14
   265 00000157 415D                <2>  pop r13
   266 00000159 415C                <2>  pop r12
   267 0000015B 415B                <2>  pop r11
   268 0000015D 415A                <2>  pop r10
   269 0000015F 4159                <2>  pop r9
   270 00000161 4158                <2>  pop r8
   271 00000163 5F                  <2>  pop rdi
   272 00000164 5E                  <2>  pop rsi
   273 00000165 5A                  <2>  pop rdx
   274 00000166 59                  <2>  pop rcx
   275 00000167 5B                  <2>  pop rbx
   276 00000168 58                  <2>  pop rax
   185                              <1> 
   186 00000169 4889EC              <1>  mov rsp, rbp
   187 0000016C 5D                  <1>  pop rbp
   188 0000016D C3                  <1>  ret
    71                                  %include "../kernel/init.asm"
     1                              <1> %ifndef INIT_ASM
     2                              <1> %define INIT_ASM
     3                              <1> 
     4                              <1> %include "../bootloader/global_def.asm"
     1                              <2> %ifndef GLOBAL_DEF_ASM
     2                              <2> %define GLOBAL_DEF_ASM
     3                              <2> %define PLATFORM_QEMU_X64 1
     4                              <2> %define PLATFORM_X64 2
     5                              <2> %define DEBUG_PLATFORM PLATFORM_QEMU_X64
     6                              <2> %define DEBUG_MODE 1
     7                              <2> 
     8                              <2> 
     9                              <2> ;|----------------------|
    10                              <2> ;|	100000 ~ END	|
    11                              <2> ;|	   KERNEL	|
    12                              <2> ;|----------------------|
    13                              <2> ;|	E0000 ~ 100000	|
    14                              <2> ;| Extended System BIOS |
    15                              <2> ;|----------------------|
    16                              <2> ;|	C0000 ~ Dffff	|
    17                              <2> ;|     Expansion Area   |
    18                              <2> ;|----------------------|
    19                              <2> ;|	A0000 ~ bffff	|
    20                              <2> ;|   Legacy Video Area  |
    21                              <2> ;|----------------------|
    22                              <2> ;|	9f000 ~ A0000	|
    23                              <2> ;|	 BIOS reserve	|
    24                              <2> ;|----------------------|
    25                              <2> ;|	90000 ~ 9f000	|
    26                              <2> ;|	 kernel tmpbuf	|
    27                              <2> ;|----------------------|
    28                              <2> ;|	10000 ~ 90000	|
    29                              <2> ;|	   LOADER	|
    30                              <2> ;|----------------------|
    31                              <2> ;|	8000 ~ 10000	|
    32                              <2> ;|	  VBE info	|
    33                              <2> ;|----------------------|
    34                              <2> ;|	7e00 ~ 8000	|
    35                              <2> ;|	  mem info	|
    36                              <2> ;|----------------------|
    37                              <2> ;|	7c00 ~ 7e00	|
    38                              <2> ;|	 MBR (BOOT)	|
    39                              <2> ;|----------------------|
    40                              <2> ;|	0000 ~ 7c00	|
    41                              <2> ;|	 BIOS Code	|
    42                              <2> ;|----------------------|
    43                              <2> 
    44                              <2> 
    45                              <2> ;_______________________________________________________
    46                              <2> ; START	END	    SIZE	        USED
    47                              <2> ; FFFF0	FFFFF	16B	        BIOS System Entry
    48                              <2> ; F0000	FFFEF	64KB-16B	BIOS System Code
    49                              <2> ; C8000	EFFFF	160KB	    ROM/Mapped IO
    50                              <2> ; C0000	C7FFF	32KB	    Graphic Adapter BIOS
    51                              <2> ; B8000	BFFFF	32KB	    Chroma Text Video Buffer
    52                              <2> ; B0000	B7FFF	32KB	    Mono Text Video Buffer
    53                              <2> ; A0000	AFFFF	64KB	    Graphic Video Buffer
    54                              <2> ; 9FC00	9FFFF	1KB	        Extended BIOS Data Area
    55                              <2> ; 7E00	9FBFF	622080B     Useable 608KB	
    56                              <2> ; 7C00	7DFF	512B	    MBR
    57                              <2> ; 500	7BFF	30464B      Useable 30KB	
    58                              <2> ; 400	4FF	    256B	    BIOS Data Area
    59                              <2> ; 000	3FF	    1KB	        IVT
    60                              <2> ; _____________________________________________________
    61                              <2> 
    62                              <2> 
    63                              <2> 
    64                              <2> 
    65                              <2> 
    66                              <2> 
    67                              <2> 
    68                              <2> 
    69                              <2> 
    70                              <2> 
    71                              <2> 
    72                              <2> ;|----------------------|
    73                              <2> ;|	100000 ~ END	|
    74                              <2> ;|	   KERNEL	|
    75                              <2> ;|----------------------|
    76                              <2> ;|	E0000 ~ 100000	|
    77                              <2> ;| Extended System BIOS |
    78                              <2> ;|----------------------|
    79                              <2> ;|	C0000 ~ Dffff	|
    80                              <2> ;|     Expansion Area   |
    81                              <2> ;|----------------------|
    82                              <2> ;|	A0000 ~ bffff	|
    83                              <2> ;|   Legacy Video Area  |
    84                              <2> ;|----------------------|
    85                              <2> ;|	9F000 ~ A0000	|
    86                              <2> ;|	 BIOS reserve	|
    87                              <2> ;|----------------------|
    88                              <2> ;|	90000 ~ 9F000	|
    89                              <2> ;|	 kernel tmpbuf	|
    90                              <2> ;|----------------------|
    91                              <2> ;|	10000 ~ 90000	|
    92                              <2> ;|	   LOADER	|
    93                              <2> ;|----------------------|
    94                              <2> ;|	8000 ~ 10000	|
    95                              <2> ;|	  VBE info	|
    96                              <2> ;|----------------------|
    97                              <2> ;|	7E00 ~ 8000	|
    98                              <2> ;|	  mem info	|
    99                              <2> ;|----------------------|
   100                              <2> ;|	7C00 ~ 7E00	|
   101                              <2> ;|	 MBR (BOOT)	|
   102                              <2> ;|----------------------|
   103                              <2> ;|	0000 ~ 7C00	|
   104                              <2> ;|	 BIOS Code	|
   105                              <2> ;|----------------------|
   106                              <2> 
   107                              <2> 
   108                              <2> 
   109                              <2> 
   110                              <2> 
   111                              <2> 
   112                              <2> 
   113                              <2> 
   114                              <2> 
   115                              <2> 
   116                              <2> ;______________________________________________
   117                              <2> ; ----------------Vbe Info Block------------
   118                              <2> ; typedef struct {
   119                              <2> ;     unsigned char       vbe_signature;
   120                              <2> ;     unsigned short      vbe_version;
   121                              <2> ;     unsigned long       oem_string_ptr;
   122                              <2> ;     unsigned char       capabilities;
   123                              <2> ;     unsigned long       video_mode_ptr;
   124                              <2> ;     unsigned short      total_memory;
   125                              <2> ;     unsigned short      oem_software_rev;
   126                              <2> ;     unsigned long       oem_vendor_name_ptr;
   127                              <2> ;     unsigned long       oem_product_name_ptr;
   128                              <2> ;     unsigned long       oem_product_rev_ptr;
   129                              <2> ;     unsigned char       reserved[222];
   130                              <2> ;     unsigned char       oem_data[256];  
   131                              <2> ; } VbeInfoBlock;
   132                              <2> ;______________________________________________
   133                              <2> 
   134                              <2> 
   135                              <2> BaseOfKernelFile	equ	0x00
   136                              <2> OffsetOfKernelFile	equ	0x100000
   137                              <2> BaseTmpOfKernelAddr	equ	0x9000
   138                              <2> OffsetTmpOfKernelFile	equ	0x0000
   139                              <2> VBEStructBufferAddr	equ	0x8000
   140                              <2> VBEModeStructBufferAddr	equ	0x8200
   141                              <2> MemoryStructBufferAddr	equ	0x8800
   142                              <2> 
   143                              <2> 
   144                              <2> 
   145                              <2> KernelSpaceUpperAddress equ 0xFFFF800000000000
   146                              <2> 
   147                              <2> GDTPointerUpperAddr equ 0xFFFF800000104000
   148                              <2> IDTPointerUpperAddr equ 0xFFFF80000010400a
   149                              <2> TSSPointerUpperAddr equ 0xFFFF800000104014
   150                              <2> 
   151                              <2> VideoFrameBufferAddress equ 0xFFFF800003000000
   152                              <2> KernelStartSectorNum	equ	16
   153                              <2> 
   154                              <2> 
   155                              <2> 
   156                              <2> 
   157                              <2> MasterSectorReadNumPort    equ	0x1F2
   158                              <2> MasterSectorReadPort    equ	0x1F0
   159                              <2> 
   160                              <2> SlaveReadNumPort    equ	0x172
   161                              <2> SlaveSectorReadPort    equ	0x170
   162                              <2> 
   163                              <2> SectorReadNumPort    equ	MasterSectorReadNumPort
   164                              <2> SectorReadPort    equ	MasterSectorReadPort
   165                              <2> 
   166                              <2> struc vbe_info_block
   167                              <2>     .signature                 resb 4    ; 'VESA' signature (must be "VESA")
   168                              <2>     .version                   resw 1    ; VBE version (e.g., 0x0300 for VBE 3.0)
   169                              <2>     .oem_string_ptr            resd 1    ; Pointer to OEM string
   170                              <2>     .capabilities              resd 1    ; Capabilities of the video card
   171                              <2>     .video_mode_ptr            resd 1    ; Pointer to supported video modes
   172                              <2>     .total_memory              resw 1    ; Total memory in 64KB blocks
   173                              <2> 
   174                              <2>     ; VBE 2.0+ fields
   175                              <2>     .oem_software_rev          resw 1    ; OEM software revision
   176                              <2>     .oem_vendor_name_ptr       resd 1    ; Pointer to OEM vendor name string
   177                              <2>     .oem_product_name_ptr      resd 1    ; Pointer to OEM product name string
   178                              <2>     .oem_product_rev_ptr       resd 1    ; Pointer to OEM product revision string
   179                              <2>     .reserved                  resb 222  ; Reserved for VBE implementation
   180                              <2>     .oem_data                  resb 256  ; Data area for OEM-specific information
   181                              <2> endstruc
   182                              <2> 
   183                              <2> struc vbe_mode_info_block
   184                              <2>     .attributes                resw 1    ; Mode attributes
   185                              <2>     .winA_attributes           resb 1    ; Window A attributes
   186                              <2>     .winB_attributes           resb 1    ; Window B attributes
   187                              <2>     .win_granularity           resw 1    ; Window granularity in KB
   188                              <2>     .win_size                  resw 1    ; Window size in KB
   189                              <2>     .winA_segment              resw 1    ; Window A segment
   190                              <2>     .winB_segment              resw 1    ; Window B segment
   191                              <2>     .win_func_ptr              resd 1    ; Pointer to window function
   192                              <2>     .bytes_per_scanline        resw 1    ; Bytes per scanline
   193                              <2> 
   194                              <2>     ; VBE 1.2+ fields
   195                              <2>     .x_resolution              resw 1    ; Horizontal resolution in pixels
   196                              <2>     .y_resolution              resw 1    ; Vertical resolution in pixels
   197                              <2>     .x_char_size               resb 1    ; Character cell width in pixels
   198                              <2>     .y_char_size               resb 1    ; Character cell height in pixels
   199                              <2>     .number_of_planes          resb 1    ; Number of memory planes
   200                              <2>     .bits_per_pixel            resb 1    ; Bits per pixel
   201                              <2>     .number_of_banks           resb 1    ; Number of banks
   202                              <2>     .memory_model              resb 1    ; Memory model type
   203                              <2>     .bank_size                 resb 1    ; Bank size in KB
   204                              <2>     .number_of_image_pages     resb 1    ; Number of images
   205                              <2>     .reserved1                 resb 1    ; Reserved
   206                              <2> 
   207                              <2>     ; Direct Color fields (VBE 1.2+)
   208                              <2>     .red_mask_size             resb 1    ; Size of direct color red mask
   209                              <2>     .red_field_position        resb 1    ; Bit position of red mask
   210                              <2>     .green_mask_size           resb 1    ; Size of direct color green mask
   211                              <2>     .green_field_position      resb 1    ; Bit position of green mask
   212                              <2>     .blue_mask_size            resb 1    ; Size of direct color blue mask
   213                              <2>     .blue_field_position       resb 1    ; Bit position of blue mask
   214                              <2>     .reserved_mask_size        resb 1    ; Size of direct color reserved mask
   215                              <2>     .reserved_field_position   resb 1    ; Bit position of reserved mask
   216                              <2>     .direct_color_mode_info    resb 1    ; Direct color mode attributes
   217                              <2> 
   218                              <2>     ; VBE 2.0+ fields
   219                              <2>     .phys_base_ptr             resd 1    ; Physical address for flat memory frame buffer
   220                              <2>     .reserved2                 resd 1    ; Reserved
   221                              <2>     .reserved3                 resw 1    ; Reserved
   222                              <2> 
   223                              <2>     ; VBE 3.0+ fields
   224                              <2>     .lin_bytes_per_scanline    resw 1    ; Bytes per scanline for linear modes
   225                              <2>     .bnk_number_of_image_pages resb 1    ; Number of images for banked modes
   226                              <2>     .lin_number_of_image_pages resb 1    ; Number of images for linear modes
   227                              <2>     .lin_red_mask_size         resb 1    ; Size of direct color red mask (linear modes)
   228                              <2>     .lin_red_field_position    resb 1    ; Bit position of red mask (linear modes)
   229                              <2>     .lin_green_mask_size       resb 1    ; Size of direct color green mask (linear modes)
   230                              <2>     .lin_green_field_position  resb 1    ; Bit position of green mask (linear modes)
   231                              <2>     .lin_blue_mask_size        resb 1    ; Size of direct color blue mask (linear modes)
   232                              <2>     .lin_blue_field_position   resb 1    ; Bit position of blue mask (linear modes)
   233                              <2>     .lin_reserved_mask_size    resb 1    ; Size of direct color reserved mask (linear modes)
   234                              <2>     .lin_reserved_field_position resb 1  ; Bit position of reserved mask (linear modes)
   235                              <2>     .max_pixel_clock           resd 1    ; Maximum pixel clock (Hz)
   236                              <2>     .reserved4                 resb 190  ; Reserved for future expansion
   237                              <2> endstruc
   238                              <2> 
   239                              <2> struc e820_memory_entry
   240                              <2>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   241                              <2>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   242                              <2>     .length_low               resd 1    ; Lower 32 bits of the length
   243                              <2>     .length_high              resd 1    ; Upper 32 bits of the length
   244                              <2>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   245                              <2>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   246                              <2> endstruc
   247                              <2> 
   248                              <2> %endif
     5                              <1> %include "../kernel/stddef.asm"
     1                              <2> %ifndef STDDEF_ASM
     2                              <2> %define STDDEF_ASM
     3                              <2> 
     4                              <2> ;-----------Data Type Standard------------;
     5                              <2> %define USE_DT_STANDARD
     6                              <2> %ifdef USE_DT_STANDARD
     7                              <2>     %macro gbyte 1 ; 参数1：变量名, 参数2：初始值(1字节)
     8                              <2>         %1: db %2
     9                              <2>         %endmacro
    10                              <2> 
    11                              <2>     %macro g2byte 1 ; 参数1：变量名, 参数2：初始值(4字节)
    12                              <2>         %1: dw %2
    13                              <2>         %endmacro
    14                              <2> 
    15                              <2>     %macro g4byte 1 ; 参数1：变量名, 参数2：初始值(4字节)
    16                              <2>         %1: dd %2
    17                              <2>         %endmacro
    18                              <2> 
    19                              <2>     %macro g8byte 1 ; 参数1：变量名, 参数2：初始值(8字节)
    20                              <2>         %1: dq %2
    21                              <2>         %endmacro
    22                              <2> 
    23                              <2> 
    24                              <2>     ; %macro lvar 1
    25                              <2>     ;     %define %1 qword [rbp - 112-(__local_offset + 8)]
    26                              <2> 
    27                              <2>     ;     %assign __local_offset  __local_offset + 8
    28                              <2> 
    29                              <2>     ;     sub rsp, 8
    30                              <2>     ;     %endmacro
    31                              <2> 
    32                              <2>     ; 初始化局部变量追踪
    33                              <2>     %macro LOCAL_BEGIN 0
    34                              <2>         %push local_ctx              ; 创建新的局部上下文
    35                              <2>         %assign %$local_offset 0     ; 初始化局部偏移计数器
    36                              <2>     %endmacro
    37                              <2> 
    38                              <2>     ; 定义局部变量
    39                              <2>     ; %1 - 变量名
    40                              <2>     ; %2 - 变量大小(字节)
    41                              <2>     %macro lvar 1
    42                              <2>         %assign %$local_offset %$local_offset+8   ; 累加偏移
    43                              <2>         %define %$var_%1 %$local_offset               ; 定义变量偏移
    44                              <2>         %define %1 qword [rbp - %$var_%1]
    45                              <2>         sub rsp,8
    46                              <2>     %endmacro
    47                              <2> 
    48                              <2>     %macro lstr 1
    49                              <2>         %assign %$local_offset %$local_offset+8   ; 累加偏移
    50                              <2>         %define %$str_%1 %$local_offset               ; 定义变量偏移
    51                              <2>         %define %1  rbp - %$str_%1
    52                              <2>         %define %1.size 5
    53                              <2>         sub rsp,%1.size
    54                              <2>     %endmacro
    55                              <2> 
    56                              <2>     ; 分配栈空间并保存寄存器
    57                              <2>     %macro lalloc 0
    58                              <2>         %if %$local_offset > 0
    59                              <2>             ; 16字节对齐
    60                              <2>             %assign pad (16 - (%$local_offset % 16))
    61                              <2>             %if pad < 16
    62                              <2>                 %assign %$local_offset %$local_offset + pad
    63                              <2>             %endif
    64                              <2>             sub rsp, %$local_offset
    65                              <2>         %endif
    66                              <2>     %endmacro
    67                              <2> 
    68                              <2> 
    69                              <2>     ; ; 获取局部变量的访问表达式
    70                              <2>     ; %macro locvar 1-*
    71                              <2>     ;     ; [rbp - %$var_%1 ]
    72                              <2> 
    73                              <2>     ;     %ifctx local_ctx
    74                              <2>     ;         ; %ifidn %2, ""
    75                              <2>     ;             qword [rbp - %$var_%1]
    76                              <2>     ;         ; %else
    77                              <2>     ;         ;     [rbp - %$var_%1 - %2]
    78                              <2>     ;         ; %endif
    79                              <2>     ;     %endif
    80                              <2>     ; %endmacro
    81                              <2> 
    82                              <2>     ;     %macro locvar 1-2
    83                              <2>     ;     ; [rbp - %$var_%1 ]
    84                              <2> 
    85                              <2>     ;     %ifctx local_ctx
    86                              <2>     ;         %ifidn %2, ""
    87                              <2>     ;             [rbp - %$var_%1]
    88                              <2>     ;         %else
    89                              <2>     ;             [rbp - %$var_%1 - %2]
    90                              <2>     ;         %endif
    91                              <2>     ;     %endif
    92                              <2>     ; %endmacro
    93                              <2> 
    94                              <2> 
    95                              <2> %endif
    96                              <2> 
    97                              <2> ;-----------Calling Conventions Standard------------;
    98                              <2> %define USE_CC_STANDARD
    99                              <2> %ifdef USE_CC_STANDARD
   100                              <2> 
   101                              <2>     ;caller maintain the stack balance 
   102                              <2>         ; debug_times: db 0
   103                              <2>         ; cmp byte [rel debug_times],3
   104                              <2>         ; je debug_stop
   105                              <2>         ; add byte [rel debug_times],1
   106                              <2>     ; -------------------------------
   107                              <2>     ; 栈帧结构定义
   108                              <2>     ; -------------------------------
   109                              <2>     ; 调用后的栈布局:
   110                              <2>     ; [rsp+0x00] 返回地址 (8字节)
   111                              <2>     ; [rsp+0x08] 旧RBP     (8字节) <- rbp指向这里
   112                              <2>     ; [rsp+0x10] 参数1     (8字节)
   113                              <2>     ; [rsp+0x18] 参数2
   114                              <2>     ; ...
   115                              <2>     ; [rsp+X]    局部变量区
   116                              <2>     ; -------------------------------
   117                              <2> 
   118                              <2>     %define PARAM_OFFSET   16      ; 第一个参数的偏移量(返回地址8 + 旧RBP8)
   119                              <2>     %macro function 1-* ; 1=函数名, 2=返回参数数量, 3=参数列表
   120                              <2>         %assign param_count %0 - 2 ; 参数数量
   121                              <2>         
   122                              <2>         %if param_count < 0
   123                              <2>             %assign param_count 0 ; 如果没有参数，设置为 0
   124                              <2>         %endif
   125                              <2>         %if param_count < 1
   126                              <2>             %assign ret_param_count 0 ; 返回参数数量
   127                              <2>         %else
   128                              <2>             %assign ret_param_count %2 ; 返回参数数量
   129                              <2>         %endif
   130                              <2> 
   131                              <2>         ; 准备调用
   132                              <2>         prepare_call param_count, ret_param_count
   133                              <2> 
   134                              <2>         ; 如果有参数，将参数压入栈
   135                              <2>         %if param_count > 0
   136                              <2>             %assign i 0
   137                              <2>             mov [rsp-8], rax ; 保存返回地址
   138                              <2>             %rep param_count
   139                              <2>                 %rotate 1
   140                              <2>                 mov rax, %2
   141                              <2>                 mov [rsp + 8*i], rax ; 将参数压入栈
   142                              <2>                 %assign i i+1
   143                              <2>             %endrep
   144                              <2>             %rotate 1
   145                              <2>             %rotate 1
   146                              <2>             mov rax,[rsp-8]; 保存返回地址
   147                              <2>         %endif
   148                              <2> 
   149                              <2>         ; 调用函数
   150                              <2>         call %1
   151                              <2> 
   152                              <2>         ; 清理栈空间
   153                              <2>         cleanup_call param_count, ret_param_count
   154                              <2> 
   155                              <2>     %endmacro
   156                              <2> 
   157                              <2>     %macro align_stack_16 0
   158                              <2>         test rsp, 0xF
   159                              <2>         jz %%skip_align
   160                              <2>         sub rsp,8
   161                              <2>         %%skip_align:
   162                              <2>     %endmacro
   163                              <2> 
   164                              <2>     %macro prologue 0;local var size(bytes)
   165                              <2>         push rbp
   166                              <2>         mov rbp, rsp
   167                              <2> 
   168                              <2> 
   169                              <2>         pushallq
   170                              <2>         LOCAL_BEGIN
   171                              <2>         
   172                              <2> 
   173                              <2>         ; 调试信息可以放在这里
   174                              <2>         ; %ifdef DEBUG
   175                              <2>         ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
   176                              <2>         ; %endif
   177                              <2>     %endmacro
   178                              <2>     %macro epilogue 0
   179                              <2>         %pop
   180                              <2>         mov rax, rbp
   181                              <2>         sub rax, 8*14
   182                              <2>         mov rsp, rax
   183                              <2> 
   184                              <2>         popallq
   185                              <2> 
   186                              <2>         mov rsp, rbp
   187                              <2>         pop rbp
   188                              <2>         ret
   189                              <2>     %endmacro
   190                              <2> 
   191                              <2>     %macro prolog 1;local var size(bytes)
   192                              <2>         push rbp
   193                              <2>         mov rbp, rsp
   194                              <2> 
   195                              <2> 
   196                              <2>         mov [rbp-8],rax
   197                              <2>         mov rax, %1
   198                              <2>         add rax, 15
   199                              <2>         and rax, ~15
   200                              <2>         sub rsp, rax
   201                              <2>         mov rax,[rbp-8]
   202                              <2> 
   203                              <2>         pushallq
   204                              <2>         
   205                              <2>         ; 调试信息可以放在这里
   206                              <2>         ; %ifdef DEBUG
   207                              <2>         ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
   208                              <2>         ; %endif
   209                              <2>     %endmacro
   210                              <2> 
   211                              <2>     %macro epilog 0
   212                              <2>         popallq
   213                              <2> 
   214                              <2>         mov rsp, rbp
   215                              <2>         pop rbp
   216                              <2>         ret
   217                              <2>     %endmacro
   218                              <2> 
   219                              <2>     %macro get_param 2;1=register, 2=param index(from 1)
   220                              <2>         mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   221                              <2>     %endmacro
   222                              <2> 
   223                              <2>     %macro set_ret_param 2;1=register, 2=param index(from 1)
   224                              <2>         mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   225                              <2>     %endmacro
   226                              <2> 
   227                              <2>     %macro prepare_call 2;1=param count, 2=return param count
   228                              <2>         %assign total_space ((%1 + %2) * 8)
   229                              <2>         
   230                              <2>         %if (total_space % 16) != 0
   231                              <2>             %assign total_space total_space + 8  ; 添加填充
   232                              <2>         %endif
   233                              <2>         
   234                              <2>         sub rsp, total_space
   235                              <2>     %endmacro
   236                              <2> 
   237                              <2>     %macro cleanup_call 2;1=param count, 2=return param count
   238                              <2>         %assign total_space ((%1 + %2) * 8)
   239                              <2>         %if (total_space % 16) != 0
   240                              <2>             %assign total_space total_space + 8
   241                              <2>         %endif
   242                              <2>         add rsp, total_space
   243                              <2>     %endmacro
   244                              <2> 
   245                              <2>     %macro pushallq 0
   246                              <2>         push rax
   247                              <2>         push rbx
   248                              <2>         push rcx
   249                              <2>         push rdx
   250                              <2>         push rsi
   251                              <2>         push rdi
   252                              <2>         push r8
   253                              <2>         push r9
   254                              <2>         push r10
   255                              <2>         push r11
   256                              <2>         push r12
   257                              <2>         push r13
   258                              <2>         push r14
   259                              <2>         push r15
   260                              <2>     %endmacro
   261                              <2> 
   262                              <2>     %macro popallq 0
   263                              <2>         pop r15
   264                              <2>         pop r14
   265                              <2>         pop r13
   266                              <2>         pop r12
   267                              <2>         pop r11
   268                              <2>         pop r10
   269                              <2>         pop r9
   270                              <2>         pop r8
   271                              <2>         pop rdi
   272                              <2>         pop rsi
   273                              <2>         pop rdx
   274                              <2>         pop rcx
   275                              <2>         pop rbx
   276                              <2>         pop rax
   277                              <2>     %endmacro
   278                              <2> 
   279                              <2>     %endif
   280                              <2> ;---------------------ABI Standard------------------;
   281                              <2> %define USE_ABI_STANDARD
   282                              <2> %ifdef USE_ABI_STANDARD
   283                              <2> 
   284                              <2> 
   285                              <2>     %define ABI_File_None   0       ; 无文件类型
   286                              <2>     %define ABI_File_REL    1       ; 可重定位文件
   287                              <2>     %define ABI_File_EXEC   2       ; 可执行文件
   288                              <2>     %define ABI_File_DYN    3       ; 共享目标文件
   289                              <2>     %define ABI_File_CORE   4       ; 核心文件
   290                              <2> 
   291                              <2>     %define Section_Type_NULL    0      ; 未使用
   292                              <2>     %define Section_Type_LOAD    1      ; 可加载段
   293                              <2>     %define Section_Type_DYNAMIC 2      ; 动态链接信息
   294                              <2>     %define Section_Type_INTERP  3      ; 解释器路径
   295                              <2>     %define Section_Type_NOTE    4      ; 辅助信息
   296                              <2>     %define Section_Type_SHLIB   5      ; 保留
   297                              <2> 
   298                              <2>     %macro ABI_HEADER 4 ;1=File Type, 2=Entry Point Address, 3=Section Header Offset, 4=Section Header Count
   299                              <2>         db 0xA5, 'A', 'B', 'I'     ; ABI Magic Number
   300                              <2>         db 1                       ; Encode Type
   301                              <2>         db 1                       ; ABI Version
   302                              <2> 
   303                              <2>         dw %1                      ; ABI File Type
   304                              <2>         dq %2                      ; Entry Point Address
   305                              <2>         dw 32                      ; ABI Headers Size
   306                              <2> 
   307                              <2>         dq %3                      ; Section Header Offset
   308                              <2>         dw 32                      ; Section Header Size
   309                              <2>         dw %4                      ; Section Header Count
   310                              <2>         dw 0                       ; Symble Table Entry Size
   311                              <2>     %endmacro
   312                              <2>     STRUC struct_ABI_HEADER
   313                              <2>         .magic:         resb 4    ; ABI Magic Number (4 bytes)
   314                              <2>         .encode_type:   resb 1    ; Encode Type (1 byte)
   315                              <2>         .abi_version:   resb 1    ; ABI Version (1 byte)
   316                              <2>         .file_type:     resw 1    ; ABI File Type (2 bytes)
   317                              <2>         .entry_point:   resq 1    ; Entry Point Address (8 bytes)
   318                              <2>         .header_size:   resw 1    ; ABI Headers Size (2 bytes)
   319                              <2>         .section_offset: resq 1   ; Section Header Offset (8 bytes)
   320                              <2>         .section_size:  resw 1    ; Section Header Size (2 bytes)
   321                              <2>         .section_count: resw 1    ; Section Header Count (2 bytes)
   322                              <2>         .sym_table_size: resw 1   ; Symbol Table Entry Size (2 bytes)
   323                              <2>     ENDSTRUC
   324                              <2> 
   325                              <2>     %macro SECTION_HEADER 4 ;1=Section Type, 2=Virtual Address, 3=Section Offset, 4=Section Size
   326                              <2>         dq %1                  ; Section Type
   327                              <2>         dq %2                  ; Virtual Address
   328                              <2>         dq %3                  ; Section Offset
   329                              <2>         dq %4                  ; Section Size
   330                              <2>     %endmacro
   331                              <2>     STRUC struct_SECTION_HEADER
   332                              <2>         .type:      resq 1    ; Section Type (8 bytes)
   333                              <2>         .vaddr:     resq 1    ; Virtual Address (8 bytes)
   334                              <2>         .offset:    resq 1    ; Section Offset (8 bytes)
   335                              <2>         .size:      resq 1    ; Section Size (8 bytes)
   336                              <2>     ENDSTRUC
   337                              <2>     %endif
   338                              <2> 
   339                              <2> %endif
     6                              <1> 
     7                              <1> [BITS 64]
     8                              <1> 
     9                              <1> struc tss_table_info
    10 00000000 ????????            <1>     .reserved1:      resd 1
    11 00000004 ????????????????    <1>     .rsp0:           resq 1
    12 0000000C ????????????????    <1>     .rsp1:           resq 1
    13 00000014 ????????????????    <1>     .rsp2:           resq 1
    14 0000001C ????????????????    <1>     .reserved2:      resq 1
    15 00000024 ????????????????    <1>     .ist1:           resq 1
    16 0000002C ????????????????    <1>     .ist2:           resq 1
    17 00000034 ????????????????    <1>     .ist3:           resq 1
    18 0000003C ????????????????    <1>     .ist4:           resq 1
    19 00000044 ????????????????    <1>     .ist5:           resq 1
    20 0000004C ????????????????    <1>     .ist6:           resq 1
    21 00000054 ????????????????    <1>     .ist7:           resq 1
    22 0000005C ????????            <1>     .reserved3:      resd 1
    23 00000060 ????????            <1>     .reserved4:      resd 1
    24 00000064 ????????            <1>     .io_map_base:    resd 1
    25                              <1> endstruc
    26                              <1> struc tss_descriptor
    27 00000000 ????                <1>     .limit_low:      resw 1    ; 段界限的低 16 位
    28 00000002 ????                <1>     .base_low:       resw 1    ; 基地址的低 16 位
    29                              <1> 
    30 00000004 ??                  <1>     .base_mid:       resb 1    ; 基地址的中间 8 位
    31 00000005 ??                  <1>     .type:           resb 1    ; 类型和属性（包括 P 位、DPL、TYPE）
    32 00000006 ??                  <1>     .limit_high:     resb 1    ; 段界限的高 4 位和标志（G、AVL 等）
    33 00000007 ??                  <1>     .base_high:      resb 1    ; 基地址的高 8 位
    34                              <1> 
    35 00000008 ????????            <1>     .base_upper:     resd 1    ; 基地址的高 32 位（64 位地址支持）
    36 0000000C ????????            <1>     .reserved:       resd 1    ; 保留字段
    37                              <1> endstruc
    38                              <1> system_init:;input:kernel_end
    39                              <1>     prolog 0
   192 0000016E 55                  <2>  push rbp
   193 0000016F 4889E5              <2>  mov rbp, rsp
   194                              <2> 
   195                              <2> 
   196 00000172 488945F8            <2>  mov [rbp-8],rax
   197 00000176 B800000000          <2>  mov rax, %1
   198 0000017B 4883C00F            <2>  add rax, 15
   199 0000017F 4883E0F0            <2>  and rax, ~15
   200 00000183 4829C4              <2>  sub rsp, rax
   201 00000186 488B45F8            <2>  mov rax,[rbp-8]
   202                              <2> 
   203                              <2>  pushallq
   246 0000018A 50                  <3>  push rax
   247 0000018B 53                  <3>  push rbx
   248 0000018C 51                  <3>  push rcx
   249 0000018D 52                  <3>  push rdx
   250 0000018E 56                  <3>  push rsi
   251 0000018F 57                  <3>  push rdi
   252 00000190 4150                <3>  push r8
   253 00000192 4151                <3>  push r9
   254 00000194 4152                <3>  push r10
   255 00000196 4153                <3>  push r11
   256 00000198 4154                <3>  push r12
   257 0000019A 4155                <3>  push r13
   258 0000019C 4156                <3>  push r14
   259 0000019E 4157                <3>  push r15
   204                              <2> 
   205                              <2> 
   206                              <2> 
   207                              <2> 
   208                              <2> 
    40                              <1>     get_param rsi, 1
   220 000001A0 488B7510            <2>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    41                              <1>     function sys_vector_init
   120                              <2>  %assign param_count %0 - 2
   121                              <2> 
   122                              <2>  %if param_count < 0
   123                              <2>  %assign param_count 0
   124                              <2>  %endif
   125                              <2>  %if param_count < 1
   126                              <2>  %assign ret_param_count 0
   127                              <2>  %else
   128                              <2>  %assign ret_param_count %2
   129                              <2>  %endif
   130                              <2> 
   131                              <2> 
   132                              <2>  prepare_call param_count, ret_param_count
   228                              <3>  %assign total_space ((%1 + %2) * 8)
   229                              <3> 
   230                              <3>  %if (total_space % 16) != 0
   231                              <3>  %assign total_space total_space + 8
   232                              <3>  %endif
   233                              <3> 
   234 000001A4 4883EC00            <3>  sub rsp, total_space
   133                              <2> 
   134                              <2> 
   135                              <2>  %if param_count > 0
   136                              <2>  %assign i 0
   137                              <2>  mov [rsp-8], rax
   138                              <2>  %rep param_count
   139                              <2>  %rotate 1
   140                              <2>  mov rax, %2
   141                              <2>  mov [rsp + 8*i], rax
   142                              <2>  %assign i i+1
   143                              <2>  %endrep
   144                              <2>  %rotate 1
   145                              <2>  %rotate 1
   146                              <2>  mov rax,[rsp-8]
   147                              <2>  %endif
   148                              <2> 
   149                              <2> 
   150 000001A8 E87E000000          <2>  call %1
   151                              <2> 
   152                              <2> 
   153                              <2>  cleanup_call param_count, ret_param_count
   238                              <3>  %assign total_space ((%1 + %2) * 8)
   239                              <3>  %if (total_space % 16) != 0
   240                              <3>  %assign total_space total_space + 8
   241                              <3>  %endif
   242 000001AD 4883C400            <3>  add rsp, total_space
   154                              <2> 
    42                              <1>     function video_init
   120                              <2>  %assign param_count %0 - 2
   121                              <2> 
   122                              <2>  %if param_count < 0
   123                              <2>  %assign param_count 0
   124                              <2>  %endif
   125                              <2>  %if param_count < 1
   126                              <2>  %assign ret_param_count 0
   127                              <2>  %else
   128                              <2>  %assign ret_param_count %2
   129                              <2>  %endif
   130                              <2> 
   131                              <2> 
   132                              <2>  prepare_call param_count, ret_param_count
   228                              <3>  %assign total_space ((%1 + %2) * 8)
   229                              <3> 
   230                              <3>  %if (total_space % 16) != 0
   231                              <3>  %assign total_space total_space + 8
   232                              <3>  %endif
   233                              <3> 
   234 000001B1 4883EC00            <3>  sub rsp, total_space
   133                              <2> 
   134                              <2> 
   135                              <2>  %if param_count > 0
   136                              <2>  %assign i 0
   137                              <2>  mov [rsp-8], rax
   138                              <2>  %rep param_count
   139                              <2>  %rotate 1
   140                              <2>  mov rax, %2
   141                              <2>  mov [rsp + 8*i], rax
   142                              <2>  %assign i i+1
   143                              <2>  %endrep
   144                              <2>  %rotate 1
   145                              <2>  %rotate 1
   146                              <2>  mov rax,[rsp-8]
   147                              <2>  %endif
   148                              <2> 
   149                              <2> 
   150 000001B5 E854040000          <2>  call %1
   151                              <2> 
   152                              <2> 
   153                              <2>  cleanup_call param_count, ret_param_count
   238                              <3>  %assign total_space ((%1 + %2) * 8)
   239                              <3>  %if (total_space % 16) != 0
   240                              <3>  %assign total_space total_space + 8
   241                              <3>  %endif
   242 000001BA 4883C400            <3>  add rsp, total_space
   154                              <2> 
    43                              <1>     function printk_init
   120                              <2>  %assign param_count %0 - 2
   121                              <2> 
   122                              <2>  %if param_count < 0
   123                              <2>  %assign param_count 0
   124                              <2>  %endif
   125                              <2>  %if param_count < 1
   126                              <2>  %assign ret_param_count 0
   127                              <2>  %else
   128                              <2>  %assign ret_param_count %2
   129                              <2>  %endif
   130                              <2> 
   131                              <2> 
   132                              <2>  prepare_call param_count, ret_param_count
   228                              <3>  %assign total_space ((%1 + %2) * 8)
   229                              <3> 
   230                              <3>  %if (total_space % 16) != 0
   231                              <3>  %assign total_space total_space + 8
   232                              <3>  %endif
   233                              <3> 
   234 000001BE 4883EC00            <3>  sub rsp, total_space
   133                              <2> 
   134                              <2> 
   135                              <2>  %if param_count > 0
   136                              <2>  %assign i 0
   137                              <2>  mov [rsp-8], rax
   138                              <2>  %rep param_count
   139                              <2>  %rotate 1
   140                              <2>  mov rax, %2
   141                              <2>  mov [rsp + 8*i], rax
   142                              <2>  %assign i i+1
   143                              <2>  %endrep
   144                              <2>  %rotate 1
   145                              <2>  %rotate 1
   146                              <2>  mov rax,[rsp-8]
   147                              <2>  %endif
   148                              <2> 
   149                              <2> 
   150 000001C2 E8710B0000          <2>  call %1
   151                              <2> 
   152                              <2> 
   153                              <2>  cleanup_call param_count, ret_param_count
   238                              <3>  %assign total_space ((%1 + %2) * 8)
   239                              <3>  %if (total_space % 16) != 0
   240                              <3>  %assign total_space total_space + 8
   241                              <3>  %endif
   242 000001C7 4883C400            <3>  add rsp, total_space
   154                              <2> 
    44                              <1>     function memory_init,1,rsi
   120                              <2>  %assign param_count %0 - 2
   121                              <2> 
   122                              <2>  %if param_count < 0
   123                              <2>  %assign param_count 0
   124                              <2>  %endif
   125                              <2>  %if param_count < 1
   126                              <2>  %assign ret_param_count 0
   127                              <2>  %else
   128                              <2>  %assign ret_param_count %2
   129                              <2>  %endif
   130                              <2> 
   131                              <2> 
   132                              <2>  prepare_call param_count, ret_param_count
   228                              <3>  %assign total_space ((%1 + %2) * 8)
   229                              <3> 
   230                              <3>  %if (total_space % 16) != 0
   231                              <3>  %assign total_space total_space + 8
   232                              <3>  %endif
   233                              <3> 
   234 000001CB 4883EC10            <3>  sub rsp, total_space
   133                              <2> 
   134                              <2> 
   135                              <2>  %if param_count > 0
   136                              <2>  %assign i 0
   137 000001CF 48894424F8          <2>  mov [rsp-8], rax
   138                              <2>  %rep param_count
   139                              <2>  %rotate 1
   140                              <2>  mov rax, %2
   141                              <2>  mov [rsp + 8*i], rax
   142                              <2>  %assign i i+1
   143                              <2>  %endrep
   139                              <3>  %rotate 1
   140 000001D4 4889F0              <3>  mov rax, %2
   141 000001D7 48890424            <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   144                              <2>  %rotate 1
   145                              <2>  %rotate 1
   146 000001DB 488B4424F8          <2>  mov rax,[rsp-8]
   147                              <2>  %endif
   148                              <2> 
   149                              <2> 
   150 000001E0 E8A11A0000          <2>  call %1
   151                              <2> 
   152                              <2> 
   153                              <2>  cleanup_call param_count, ret_param_count
   238                              <3>  %assign total_space ((%1 + %2) * 8)
   239                              <3>  %if (total_space % 16) != 0
   240                              <3>  %assign total_space total_space + 8
   241                              <3>  %endif
   242 000001E5 4883C410            <3>  add rsp, total_space
   154                              <2> 
    45                              <1> 
    46                              <1> 
    47                              <1>     function test_printk
   120                              <2>  %assign param_count %0 - 2
   121                              <2> 
   122                              <2>  %if param_count < 0
   123                              <2>  %assign param_count 0
   124                              <2>  %endif
   125                              <2>  %if param_count < 1
   126                              <2>  %assign ret_param_count 0
   127                              <2>  %else
   128                              <2>  %assign ret_param_count %2
   129                              <2>  %endif
   130                              <2> 
   131                              <2> 
   132                              <2>  prepare_call param_count, ret_param_count
   228                              <3>  %assign total_space ((%1 + %2) * 8)
   229                              <3> 
   230                              <3>  %if (total_space % 16) != 0
   231                              <3>  %assign total_space total_space + 8
   232                              <3>  %endif
   233                              <3> 
   234 000001E9 4883EC00            <3>  sub rsp, total_space
   133                              <2> 
   134                              <2> 
   135                              <2>  %if param_count > 0
   136                              <2>  %assign i 0
   137                              <2>  mov [rsp-8], rax
   138                              <2>  %rep param_count
   139                              <2>  %rotate 1
   140                              <2>  mov rax, %2
   141                              <2>  mov [rsp + 8*i], rax
   142                              <2>  %assign i i+1
   143                              <2>  %endrep
   144                              <2>  %rotate 1
   145                              <2>  %rotate 1
   146                              <2>  mov rax,[rsp-8]
   147                              <2>  %endif
   148                              <2> 
   149                              <2> 
   150 000001ED E896010000          <2>  call %1
   151                              <2> 
   152                              <2> 
   153                              <2>  cleanup_call param_count, ret_param_count
   238                              <3>  %assign total_space ((%1 + %2) * 8)
   239                              <3>  %if (total_space % 16) != 0
   240                              <3>  %assign total_space total_space + 8
   241                              <3>  %endif
   242 000001F2 4883C400            <3>  add rsp, total_space
   154                              <2> 
    48                              <1>     function test_video
   120                              <2>  %assign param_count %0 - 2
   121                              <2> 
   122                              <2>  %if param_count < 0
   123                              <2>  %assign param_count 0
   124                              <2>  %endif
   125                              <2>  %if param_count < 1
   126                              <2>  %assign ret_param_count 0
   127                              <2>  %else
   128                              <2>  %assign ret_param_count %2
   129                              <2>  %endif
   130                              <2> 
   131                              <2> 
   132                              <2>  prepare_call param_count, ret_param_count
   228                              <3>  %assign total_space ((%1 + %2) * 8)
   229                              <3> 
   230                              <3>  %if (total_space % 16) != 0
   231                              <3>  %assign total_space total_space + 8
   232                              <3>  %endif
   233                              <3> 
   234 000001F6 4883EC00            <3>  sub rsp, total_space
   133                              <2> 
   134                              <2> 
   135                              <2>  %if param_count > 0
   136                              <2>  %assign i 0
   137                              <2>  mov [rsp-8], rax
   138                              <2>  %rep param_count
   139                              <2>  %rotate 1
   140                              <2>  mov rax, %2
   141                              <2>  mov [rsp + 8*i], rax
   142                              <2>  %assign i i+1
   143                              <2>  %endrep
   144                              <2>  %rotate 1
   145                              <2>  %rotate 1
   146                              <2>  mov rax,[rsp-8]
   147                              <2>  %endif
   148                              <2> 
   149                              <2> 
   150 000001FA E80A020000          <2>  call %1
   151                              <2> 
   152                              <2> 
   153                              <2>  cleanup_call param_count, ret_param_count
   238                              <3>  %assign total_space ((%1 + %2) * 8)
   239                              <3>  %if (total_space % 16) != 0
   240                              <3>  %assign total_space total_space + 8
   241                              <3>  %endif
   242 000001FF 4883C400            <3>  add rsp, total_space
   154                              <2> 
    49                              <1>     function test_memory
   120                              <2>  %assign param_count %0 - 2
   121                              <2> 
   122                              <2>  %if param_count < 0
   123                              <2>  %assign param_count 0
   124                              <2>  %endif
   125                              <2>  %if param_count < 1
   126                              <2>  %assign ret_param_count 0
   127                              <2>  %else
   128                              <2>  %assign ret_param_count %2
   129                              <2>  %endif
   130                              <2> 
   131                              <2> 
   132                              <2>  prepare_call param_count, ret_param_count
   228                              <3>  %assign total_space ((%1 + %2) * 8)
   229                              <3> 
   230                              <3>  %if (total_space % 16) != 0
   231                              <3>  %assign total_space total_space + 8
   232                              <3>  %endif
   233                              <3> 
   234 00000203 4883EC00            <3>  sub rsp, total_space
   133                              <2> 
   134                              <2> 
   135                              <2>  %if param_count > 0
   136                              <2>  %assign i 0
   137                              <2>  mov [rsp-8], rax
   138                              <2>  %rep param_count
   139                              <2>  %rotate 1
   140                              <2>  mov rax, %2
   141                              <2>  mov [rsp + 8*i], rax
   142                              <2>  %assign i i+1
   143                              <2>  %endrep
   144                              <2>  %rotate 1
   145                              <2>  %rotate 1
   146                              <2>  mov rax,[rsp-8]
   147                              <2>  %endif
   148                              <2> 
   149                              <2> 
   150 00000207 E8A8030000          <2>  call %1
   151                              <2> 
   152                              <2> 
   153                              <2>  cleanup_call param_count, ret_param_count
   238                              <3>  %assign total_space ((%1 + %2) * 8)
   239                              <3>  %if (total_space % 16) != 0
   240                              <3>  %assign total_space total_space + 8
   241                              <3>  %endif
   242 0000020C 4883C400            <3>  add rsp, total_space
   154                              <2> 
    50                              <1> 
    51                              <1>     epilog
   212                              <2>  popallq
   263 00000210 415F                <3>  pop r15
   264 00000212 415E                <3>  pop r14
   265 00000214 415D                <3>  pop r13
   266 00000216 415C                <3>  pop r12
   267 00000218 415B                <3>  pop r11
   268 0000021A 415A                <3>  pop r10
   269 0000021C 4159                <3>  pop r9
   270 0000021E 4158                <3>  pop r8
   271 00000220 5F                  <3>  pop rdi
   272 00000221 5E                  <3>  pop rsi
   273 00000222 5A                  <3>  pop rdx
   274 00000223 59                  <3>  pop rcx
   275 00000224 5B                  <3>  pop rbx
   276 00000225 58                  <3>  pop rax
   213                              <2> 
   214 00000226 4889EC              <2>  mov rsp, rbp
   215 00000229 5D                  <2>  pop rbp
   216 0000022A C3                  <2>  ret
    52                              <1> sys_vector_init:;init system interrupt vector
    53                              <1>     prolog 0
   192 0000022B 55                  <2>  push rbp
   193 0000022C 4889E5              <2>  mov rbp, rsp
   194                              <2> 
   195                              <2> 
   196 0000022F 488945F8            <2>  mov [rbp-8],rax
   197 00000233 B800000000          <2>  mov rax, %1
   198 00000238 4883C00F            <2>  add rax, 15
   199 0000023C 4883E0F0            <2>  and rax, ~15
   200 00000240 4829C4              <2>  sub rsp, rax
   201 00000243 488B45F8            <2>  mov rax,[rbp-8]
   202                              <2> 
   203                              <2>  pushallq
   246 00000247 50                  <3>  push rax
   247 00000248 53                  <3>  push rbx
   248 00000249 51                  <3>  push rcx
   249 0000024A 52                  <3>  push rdx
   250 0000024B 56                  <3>  push rsi
   251 0000024C 57                  <3>  push rdi
   252 0000024D 4150                <3>  push r8
   253 0000024F 4151                <3>  push r9
   254 00000251 4152                <3>  push r10
   255 00000253 4153                <3>  push r11
   256 00000255 4154                <3>  push r12
   257 00000257 4155                <3>  push r13
   258 00000259 4156                <3>  push r14
   259 0000025B 4157                <3>  push r15
   204                              <2> 
   205                              <2> 
   206                              <2> 
   207                              <2> 
   208                              <2> 
    54                              <1>     function setup_default_tss
   120                              <2>  %assign param_count %0 - 2
   121                              <2> 
   122                              <2>  %if param_count < 0
   123                              <2>  %assign param_count 0
   124                              <2>  %endif
   125                              <2>  %if param_count < 1
   126                              <2>  %assign ret_param_count 0
   127                              <2>  %else
   128                              <2>  %assign ret_param_count %2
   129                              <2>  %endif
   130                              <2> 
   131                              <2> 
   132                              <2>  prepare_call param_count, ret_param_count
   228                              <3>  %assign total_space ((%1 + %2) * 8)
   229                              <3> 
   230                              <3>  %if (total_space % 16) != 0
   231                              <3>  %assign total_space total_space + 8
   232                              <3>  %endif
   233                              <3> 
   234 0000025D 4883EC00            <3>  sub rsp, total_space
   133                              <2> 
   134                              <2> 
   135                              <2>  %if param_count > 0
   136                              <2>  %assign i 0
   137                              <2>  mov [rsp-8], rax
   138                              <2>  %rep param_count
   139                              <2>  %rotate 1
   140                              <2>  mov rax, %2
   141                              <2>  mov [rsp + 8*i], rax
   142                              <2>  %assign i i+1
   143                              <2>  %endrep
   144                              <2>  %rotate 1
   145                              <2>  %rotate 1
   146                              <2>  mov rax,[rsp-8]
   147                              <2>  %endif
   148                              <2> 
   149                              <2> 
   150 00000261 E839000000          <2>  call %1
   151                              <2> 
   152                              <2> 
   153                              <2>  cleanup_call param_count, ret_param_count
   238                              <3>  %assign total_space ((%1 + %2) * 8)
   239                              <3>  %if (total_space % 16) != 0
   240                              <3>  %assign total_space total_space + 8
   241                              <3>  %endif
   242 00000266 4883C400            <3>  add rsp, total_space
   154                              <2> 
    55                              <1>     function init_expection
   120                              <2>  %assign param_count %0 - 2
   121                              <2> 
   122                              <2>  %if param_count < 0
   123                              <2>  %assign param_count 0
   124                              <2>  %endif
   125                              <2>  %if param_count < 1
   126                              <2>  %assign ret_param_count 0
   127                              <2>  %else
   128                              <2>  %assign ret_param_count %2
   129                              <2>  %endif
   130                              <2> 
   131                              <2> 
   132                              <2>  prepare_call param_count, ret_param_count
   228                              <3>  %assign total_space ((%1 + %2) * 8)
   229                              <3> 
   230                              <3>  %if (total_space % 16) != 0
   231                              <3>  %assign total_space total_space + 8
   232                              <3>  %endif
   233                              <3> 
   234 0000026A 4883EC00            <3>  sub rsp, total_space
   133                              <2> 
   134                              <2> 
   135                              <2>  %if param_count > 0
   136                              <2>  %assign i 0
   137                              <2>  mov [rsp-8], rax
   138                              <2>  %rep param_count
   139                              <2>  %rotate 1
   140                              <2>  mov rax, %2
   141                              <2>  mov [rsp + 8*i], rax
   142                              <2>  %assign i i+1
   143                              <2>  %endrep
   144                              <2>  %rotate 1
   145                              <2>  %rotate 1
   146                              <2>  mov rax,[rsp-8]
   147                              <2>  %endif
   148                              <2> 
   149                              <2> 
   150 0000026E E82F140000          <2>  call %1
   151                              <2> 
   152                              <2> 
   153                              <2>  cleanup_call param_count, ret_param_count
   238                              <3>  %assign total_space ((%1 + %2) * 8)
   239                              <3>  %if (total_space % 16) != 0
   240                              <3>  %assign total_space total_space + 8
   241                              <3>  %endif
   242 00000273 4883C400            <3>  add rsp, total_space
   154                              <2> 
    56                              <1>     function init_interrupt
   120                              <2>  %assign param_count %0 - 2
   121                              <2> 
   122                              <2>  %if param_count < 0
   123                              <2>  %assign param_count 0
   124                              <2>  %endif
   125                              <2>  %if param_count < 1
   126                              <2>  %assign ret_param_count 0
   127                              <2>  %else
   128                              <2>  %assign ret_param_count %2
   129                              <2>  %endif
   130                              <2> 
   131                              <2> 
   132                              <2>  prepare_call param_count, ret_param_count
   228                              <3>  %assign total_space ((%1 + %2) * 8)
   229                              <3> 
   230                              <3>  %if (total_space % 16) != 0
   231                              <3>  %assign total_space total_space + 8
   232                              <3>  %endif
   233                              <3> 
   234 00000277 4883EC00            <3>  sub rsp, total_space
   133                              <2> 
   134                              <2> 
   135                              <2>  %if param_count > 0
   136                              <2>  %assign i 0
   137                              <2>  mov [rsp-8], rax
   138                              <2>  %rep param_count
   139                              <2>  %rotate 1
   140                              <2>  mov rax, %2
   141                              <2>  mov [rsp + 8*i], rax
   142                              <2>  %assign i i+1
   143                              <2>  %endrep
   144                              <2>  %rotate 1
   145                              <2>  %rotate 1
   146                              <2>  mov rax,[rsp-8]
   147                              <2>  %endif
   148                              <2> 
   149                              <2> 
   150 0000027B E857170000          <2>  call %1
   151                              <2> 
   152                              <2> 
   153                              <2>  cleanup_call param_count, ret_param_count
   238                              <3>  %assign total_space ((%1 + %2) * 8)
   239                              <3>  %if (total_space % 16) != 0
   240                              <3>  %assign total_space total_space + 8
   241                              <3>  %endif
   242 00000280 4883C400            <3>  add rsp, total_space
   154                              <2> 
    57                              <1> 
    58                              <1>     epilog
   212                              <2>  popallq
   263 00000284 415F                <3>  pop r15
   264 00000286 415E                <3>  pop r14
   265 00000288 415D                <3>  pop r13
   266 0000028A 415C                <3>  pop r12
   267 0000028C 415B                <3>  pop r11
   268 0000028E 415A                <3>  pop r10
   269 00000290 4159                <3>  pop r9
   270 00000292 4158                <3>  pop r8
   271 00000294 5F                  <3>  pop rdi
   272 00000295 5E                  <3>  pop rsi
   273 00000296 5A                  <3>  pop rdx
   274 00000297 59                  <3>  pop rcx
   275 00000298 5B                  <3>  pop rbx
   276 00000299 58                  <3>  pop rax
   213                              <2> 
   214 0000029A 4889EC              <2>  mov rsp, rbp
   215 0000029D 5D                  <2>  pop rbp
   216 0000029E C3                  <2>  ret
    59                              <1> setup_default_tss:;setup tss
    60                              <1>     prolog 0;
   192 0000029F 55                  <2>  push rbp
   193 000002A0 4889E5              <2>  mov rbp, rsp
   194                              <2> 
   195                              <2> 
   196 000002A3 488945F8            <2>  mov [rbp-8],rax
   197 000002A7 B800000000          <2>  mov rax, %1
   198 000002AC 4883C00F            <2>  add rax, 15
   199 000002B0 4883E0F0            <2>  and rax, ~15
   200 000002B4 4829C4              <2>  sub rsp, rax
   201 000002B7 488B45F8            <2>  mov rax,[rbp-8]
   202                              <2> 
   203                              <2>  pushallq
   246 000002BB 50                  <3>  push rax
   247 000002BC 53                  <3>  push rbx
   248 000002BD 51                  <3>  push rcx
   249 000002BE 52                  <3>  push rdx
   250 000002BF 56                  <3>  push rsi
   251 000002C0 57                  <3>  push rdi
   252 000002C1 4150                <3>  push r8
   253 000002C3 4151                <3>  push r9
   254 000002C5 4152                <3>  push r10
   255 000002C7 4153                <3>  push r11
   256 000002C9 4154                <3>  push r12
   257 000002CB 4155                <3>  push r13
   258 000002CD 4156                <3>  push r14
   259 000002CF 4157                <3>  push r15
   204                              <2> 
   205                              <2> 
   206                              <2> 
   207                              <2> 
   208                              <2> 
    61                              <1> 
    62 000002D1 48BB004010000080FF- <1>     mov rbx, GDTPointerUpperAddr
    62 000002DA FF                  <1>
    63 000002DB 488B5B02            <1>     mov rbx, [rbx + 2]
    64 000002DF 4883C340            <1>     add rbx, 0x40
    65                              <1> 
    66 000002E3 48B8144010000080FF- <1>     mov rax, TSSPointerUpperAddr
    66 000002EC FF                  <1>
    67 000002ED 668B10              <1>     mov  dx,word [rax]
    68 000002F0 488B4002            <1>     mov rax, [rax + 2]
    69                              <1>     ; jmp $
    70 000002F4 668913              <1>     mov word [rbx + tss_descriptor.limit_low], dx
    71 000002F7 66894302            <1>     mov word [rbx + tss_descriptor.base_low], ax
    72 000002FB 48C1E810            <1>     shr rax, 16
    73                              <1> 
    74 000002FF 884304              <1>     mov byte [rbx + tss_descriptor.base_mid], al
    75 00000302 C6430589            <1>     mov byte [rbx + tss_descriptor.type], 0x89
    76 00000306 C6430600            <1>     mov byte [rbx + tss_descriptor.limit_high], 0x00
    77 0000030A 48C1E808            <1>     shr rax, 8
    78                              <1> 
    79 0000030E 884307              <1>     mov byte [rbx + tss_descriptor.base_high], al
    80 00000311 48C1E808            <1>     shr rax, 8
    81                              <1> 
    82 00000315 894308              <1>     mov dword [rbx + tss_descriptor.base_upper], eax
    83 00000318 C7430C00000000      <1>     mov dword [rbx + tss_descriptor.reserved], 0x00
    84                              <1> 
    85                              <1> 
    86 0000031F 48B8144010000080FF- <1>     mov rax, TSSPointerUpperAddr
    86 00000328 FF                  <1>
    87 00000329 488B5802            <1>     mov rbx, [rax + 2]
    88                              <1> 
    89 0000032D 48B8007C00000080FF- <1>     mov rax, 0xffff800000007c00
    89 00000336 FF                  <1>
    90                              <1>     ; mov qword [rbx + tss_table_info.reserved1], 0x00
    91 00000337 48894304            <1>     mov qword [rbx + tss_table_info.rsp0], rax
    92 0000033B 4889430C            <1>     mov qword [rbx + tss_table_info.rsp1], rax
    93 0000033F 48894314            <1>     mov qword [rbx + tss_table_info.rsp2], rax
    94                              <1>     ; mov qword [rbx + tss_table_info.reserved2], 0x00
    95 00000343 48894324            <1>     mov qword [rbx + tss_table_info.ist1], rax
    96 00000347 4889432C            <1>     mov qword [rbx + tss_table_info.ist2], rax
    97 0000034B 48894334            <1>     mov qword [rbx + tss_table_info.ist3], rax
    98 0000034F 4889433C            <1>     mov qword [rbx + tss_table_info.ist4], rax
    99 00000353 48894344            <1>     mov qword [rbx + tss_table_info.ist5], rax
   100 00000357 4889434C            <1>     mov qword [rbx + tss_table_info.ist6], rax
   101 0000035B 48894354            <1>     mov qword [rbx + tss_table_info.ist7], rax
   102                              <1> 
   103                              <1>     ; mov qword [rbx + tss_table_info.reserved3], 0x00
   104                              <1>     ; mov qword [rbx + tss_table_info.reserved4], 0x00
   105                              <1> 
   106 0000035F C7436468000000      <1>     mov dword [rbx + tss_table_info.io_map_base], 104
   107                              <1>     
   108 00000366 66B94000            <1>     mov cx, 0x0040
   109 0000036A 0F00D9              <1>     ltr cx
   110                              <1>     
   111                              <1>     epilog
   212                              <2>  popallq
   263 0000036D 415F                <3>  pop r15
   264 0000036F 415E                <3>  pop r14
   265 00000371 415D                <3>  pop r13
   266 00000373 415C                <3>  pop r12
   267 00000375 415B                <3>  pop r11
   268 00000377 415A                <3>  pop r10
   269 00000379 4159                <3>  pop r9
   270 0000037B 4158                <3>  pop r8
   271 0000037D 5F                  <3>  pop rdi
   272 0000037E 5E                  <3>  pop rsi
   273 0000037F 5A                  <3>  pop rdx
   274 00000380 59                  <3>  pop rcx
   275 00000381 5B                  <3>  pop rbx
   276 00000382 58                  <3>  pop rax
   213                              <2> 
   214 00000383 4889EC              <2>  mov rsp, rbp
   215 00000386 5D                  <2>  pop rbp
   216 00000387 C3                  <2>  ret
   112                              <1> 
   113                              <1> 
   114                              <1> test_printk:;test printk
   115                              <1>     prolog 2;
   192 00000388 55                  <2>  push rbp
   193 00000389 4889E5              <2>  mov rbp, rsp
   194                              <2> 
   195                              <2> 
   196 0000038C 488945F8            <2>  mov [rbp-8],rax
   197 00000390 B802000000          <2>  mov rax, %1
   198 00000395 4883C00F            <2>  add rax, 15
   199 00000399 4883E0F0            <2>  and rax, ~15
   200 0000039D 4829C4              <2>  sub rsp, rax
   201 000003A0 488B45F8            <2>  mov rax,[rbp-8]
   202                              <2> 
   203                              <2>  pushallq
   246 000003A4 50                  <3>  push rax
   247 000003A5 53                  <3>  push rbx
   248 000003A6 51                  <3>  push rcx
   249 000003A7 52                  <3>  push rdx
   250 000003A8 56                  <3>  push rsi
   251 000003A9 57                  <3>  push rdi
   252 000003AA 4150                <3>  push r8
   253 000003AC 4151                <3>  push r9
   254 000003AE 4152                <3>  push r10
   255 000003B0 4153                <3>  push r11
   256 000003B2 4154                <3>  push r12
   257 000003B4 4155                <3>  push r13
   258 000003B6 4156                <3>  push r14
   259 000003B8 4157                <3>  push r15
   204                              <2> 
   205                              <2> 
   206                              <2> 
   207                              <2> 
   208                              <2> 
   116                              <1> 
   117                              <1>     ; function draw_char,1,0,0,'A'
   118                              <1>     ; function print_char,1,'a'
   119                              <1>     ; function print_char,1,'b'
   120                              <1> 
   121                              <1>     ; function print_char,1,'a'
   122                              <1>     ; function print_char,1,'b'
   123                              <1>     ;     function print_char,1,'a'
   124                              <1>     ; function print_char,1,'b'
   125                              <1> 
   126                              <1>     ;     function print_char,1,'a'
   127                              <1>     ; function print_char,1,'b'
   128                              <1> 
   129                              <1> 
   130                              <1>     ;     lea rsi,[rel messages2]    
   131                              <1>     ;    function print_string,1,rsi
   132                              <1> 
   133                              <1>     ;     lea rsi,[rel messages1]
   134                              <1>     ;     function print_string,1,rsi
   135                              <1> 
   136                              <1>     ;     lea rsi,[rel messages2]    
   137                              <1>     ;    function print_string,1,rsi
   138                              <1> 
   139                              <1>     ;     lea rsi,[rel messages1]
   140                              <1>     ;     function print_string,1,rsi
   141                              <1> 
   142                              <1>     ;     lea rsi,[rel messages2]    
   143                              <1>     ;    function print_string,1,rsi
   144                              <1> 
   145                              <1>     ;     lea rsi,[rel messages1]
   146                              <1>     ;     function print_string,1,rsi
   147                              <1> 
   148                              <1>     ; lea rsi,[rel decimal_messages]    
   149                              <1>     ; function print_decimal,1,rsi
   150                              <1> 
   151                              <1>     ; lea rsi,[rel hex_messages]    
   152                              <1>     ; function print_hex,1,rsi
   153                              <1> 
   154                              <1>     ; lea rsi,[rel hex_messages]    
   155                              <1>     ; function print_hex,1,rsi
   156                              <1> 
   157 000003BA 488D35A21E0000      <1>     lea rsi, [rel format1]
   158 000003C1 488D15C71E0000      <1>     lea rdx, [rel string1]
   159                              <1>     function printk,1,rsi,rdx
   120                              <2>  %assign param_count %0 - 2
   121                              <2> 
   122                              <2>  %if param_count < 0
   123                              <2>  %assign param_count 0
   124                              <2>  %endif
   125                              <2>  %if param_count < 1
   126                              <2>  %assign ret_param_count 0
   127                              <2>  %else
   128                              <2>  %assign ret_param_count %2
   129                              <2>  %endif
   130                              <2> 
   131                              <2> 
   132                              <2>  prepare_call param_count, ret_param_count
   228                              <3>  %assign total_space ((%1 + %2) * 8)
   229                              <3> 
   230                              <3>  %if (total_space % 16) != 0
   231                              <3>  %assign total_space total_space + 8
   232                              <3>  %endif
   233                              <3> 
   234 000003C8 4883EC20            <3>  sub rsp, total_space
   133                              <2> 
   134                              <2> 
   135                              <2>  %if param_count > 0
   136                              <2>  %assign i 0
   137 000003CC 48894424F8          <2>  mov [rsp-8], rax
   138                              <2>  %rep param_count
   139                              <2>  %rotate 1
   140                              <2>  mov rax, %2
   141                              <2>  mov [rsp + 8*i], rax
   142                              <2>  %assign i i+1
   143                              <2>  %endrep
   139                              <3>  %rotate 1
   140 000003D1 4889F0              <3>  mov rax, %2
   141 000003D4 48890424            <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   139                              <3>  %rotate 1
   140 000003D8 4889D0              <3>  mov rax, %2
   141 000003DB 4889442408          <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   144                              <2>  %rotate 1
   145                              <2>  %rotate 1
   146 000003E0 488B4424F8          <2>  mov rax,[rsp-8]
   147                              <2>  %endif
   148                              <2> 
   149                              <2> 
   150 000003E5 E8400A0000          <2>  call %1
   151                              <2> 
   152                              <2> 
   153                              <2>  cleanup_call param_count, ret_param_count
   238                              <3>  %assign total_space ((%1 + %2) * 8)
   239                              <3>  %if (total_space % 16) != 0
   240                              <3>  %assign total_space total_space + 8
   241                              <3>  %endif
   242 000003EA 4883C420            <3>  add rsp, total_space
   154                              <2> 
   160                              <1> 
   161                              <1> 
   162                              <1>     ; lea rsi, [rel format2]
   163                              <1>     ; lea rdx, [rel decimal_messages]
   164                              <1>     ; function printk,1,rsi,rdx
   165                              <1> 
   166                              <1>     ; lea rsi, [rel format3]
   167                              <1>     ; lea rdx, [rel hex_messages]
   168                              <1>     ; function printk,1,rsi,rdx
   169                              <1> 
   170                              <1> 
   171                              <1>     ;     lea rsi,[rel decimal_messages]    
   172                              <1>     ; function print_decimal,1,rsi
   173                              <1> 
   174                              <1>     ;     lea rsi,[rel decimal_messages]    
   175                              <1>     ; function print_decimal,1,rsi
   176                              <1> 
   177                              <1>     ; lea rsi,[rel messages1]
   178                              <1>     ; function draw_string,1,0,20,rsi
   179                              <1> 
   180                              <1>     ; lea rsi,[rel messages2]
   181                              <1>     ; function draw_string,1,0,40,rsi
   182                              <1> 
   183                              <1>     ; lea rsi,[rel messages3]
   184                              <1>     ; function draw_string,1,0,60,rsi
   185                              <1> 
   186                              <1>     ; lea rsi,[rel messages4]
   187                              <1>     ; function draw_string,1,0,80,rsi
   188                              <1> 
   189                              <1>     ; lea rsi,[rel hex_messages]
   190                              <1>     ; function draw_hex,1,0,100,rsi
   191                              <1> 
   192                              <1>     ; lea rsi,[rel decimal_messages]
   193                              <1>     ; function draw_decimal,1,0,120,rsi
   194                              <1> 
   195                              <1> 
   196                              <1> 
   197                              <1>     epilog
   212                              <2>  popallq
   263 000003EE 415F                <3>  pop r15
   264 000003F0 415E                <3>  pop r14
   265 000003F2 415D                <3>  pop r13
   266 000003F4 415C                <3>  pop r12
   267 000003F6 415B                <3>  pop r11
   268 000003F8 415A                <3>  pop r10
   269 000003FA 4159                <3>  pop r9
   270 000003FC 4158                <3>  pop r8
   271 000003FE 5F                  <3>  pop rdi
   272 000003FF 5E                  <3>  pop rsi
   273 00000400 5A                  <3>  pop rdx
   274 00000401 59                  <3>  pop rcx
   275 00000402 5B                  <3>  pop rbx
   276 00000403 58                  <3>  pop rax
   213                              <2> 
   214 00000404 4889EC              <2>  mov rsp, rbp
   215 00000407 5D                  <2>  pop rbp
   216 00000408 C3                  <2>  ret
   198                              <1> 
   199                              <1> test_video:;test video
   200                              <1>     prolog 2;
   192 00000409 55                  <2>  push rbp
   193 0000040A 4889E5              <2>  mov rbp, rsp
   194                              <2> 
   195                              <2> 
   196 0000040D 488945F8            <2>  mov [rbp-8],rax
   197 00000411 B802000000          <2>  mov rax, %1
   198 00000416 4883C00F            <2>  add rax, 15
   199 0000041A 4883E0F0            <2>  and rax, ~15
   200 0000041E 4829C4              <2>  sub rsp, rax
   201 00000421 488B45F8            <2>  mov rax,[rbp-8]
   202                              <2> 
   203                              <2>  pushallq
   246 00000425 50                  <3>  push rax
   247 00000426 53                  <3>  push rbx
   248 00000427 51                  <3>  push rcx
   249 00000428 52                  <3>  push rdx
   250 00000429 56                  <3>  push rsi
   251 0000042A 57                  <3>  push rdi
   252 0000042B 4150                <3>  push r8
   253 0000042D 4151                <3>  push r9
   254 0000042F 4152                <3>  push r10
   255 00000431 4153                <3>  push r11
   256 00000433 4154                <3>  push r12
   257 00000435 4155                <3>  push r13
   258 00000437 4156                <3>  push r14
   259 00000439 4157                <3>  push r15
   204                              <2> 
   205                              <2> 
   206                              <2> 
   207                              <2> 
   208                              <2> 
   201                              <1> 
   202                              <1>     ; function draw_screen,0,0x00000000
   203                              <1>     function draw_pixel,1,1000,200,0x00FFFFFF
   120                              <2>  %assign param_count %0 - 2
   121                              <2> 
   122                              <2>  %if param_count < 0
   123                              <2>  %assign param_count 0
   124                              <2>  %endif
   125                              <2>  %if param_count < 1
   126                              <2>  %assign ret_param_count 0
   127                              <2>  %else
   128                              <2>  %assign ret_param_count %2
   129                              <2>  %endif
   130                              <2> 
   131                              <2> 
   132                              <2>  prepare_call param_count, ret_param_count
   228                              <3>  %assign total_space ((%1 + %2) * 8)
   229                              <3> 
   230                              <3>  %if (total_space % 16) != 0
   231                              <3>  %assign total_space total_space + 8
   232                              <3>  %endif
   233                              <3> 
   234 0000043B 4883EC20            <3>  sub rsp, total_space
   133                              <2> 
   134                              <2> 
   135                              <2>  %if param_count > 0
   136                              <2>  %assign i 0
   137 0000043F 48894424F8          <2>  mov [rsp-8], rax
   138                              <2>  %rep param_count
   139                              <2>  %rotate 1
   140                              <2>  mov rax, %2
   141                              <2>  mov [rsp + 8*i], rax
   142                              <2>  %assign i i+1
   143                              <2>  %endrep
   139                              <3>  %rotate 1
   140 00000444 B8E8030000          <3>  mov rax, %2
   141 00000449 48890424            <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   139                              <3>  %rotate 1
   140 0000044D B8C8000000          <3>  mov rax, %2
   141 00000452 4889442408          <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   139                              <3>  %rotate 1
   140 00000457 B8FFFFFF00          <3>  mov rax, %2
   141 0000045C 4889442410          <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   144                              <2>  %rotate 1
   145                              <2>  %rotate 1
   146 00000461 488B4424F8          <2>  mov rax,[rsp-8]
   147                              <2>  %endif
   148                              <2> 
   149                              <2> 
   150 00000466 E84D020000          <2>  call %1
   151                              <2> 
   152                              <2> 
   153                              <2>  cleanup_call param_count, ret_param_count
   238                              <3>  %assign total_space ((%1 + %2) * 8)
   239                              <3>  %if (total_space % 16) != 0
   240                              <3>  %assign total_space total_space + 8
   241                              <3>  %endif
   242 0000046B 4883C420            <3>  add rsp, total_space
   154                              <2> 
   204                              <1>     function draw_line,1,1000,200,1500,400,0x00FFFFFF
   120                              <2>  %assign param_count %0 - 2
   121                              <2> 
   122                              <2>  %if param_count < 0
   123                              <2>  %assign param_count 0
   124                              <2>  %endif
   125                              <2>  %if param_count < 1
   126                              <2>  %assign ret_param_count 0
   127                              <2>  %else
   128                              <2>  %assign ret_param_count %2
   129                              <2>  %endif
   130                              <2> 
   131                              <2> 
   132                              <2>  prepare_call param_count, ret_param_count
   228                              <3>  %assign total_space ((%1 + %2) * 8)
   229                              <3> 
   230                              <3>  %if (total_space % 16) != 0
   231                              <3>  %assign total_space total_space + 8
   232                              <3>  %endif
   233                              <3> 
   234 0000046F 4883EC30            <3>  sub rsp, total_space
   133                              <2> 
   134                              <2> 
   135                              <2>  %if param_count > 0
   136                              <2>  %assign i 0
   137 00000473 48894424F8          <2>  mov [rsp-8], rax
   138                              <2>  %rep param_count
   139                              <2>  %rotate 1
   140                              <2>  mov rax, %2
   141                              <2>  mov [rsp + 8*i], rax
   142                              <2>  %assign i i+1
   143                              <2>  %endrep
   139                              <3>  %rotate 1
   140 00000478 B8E8030000          <3>  mov rax, %2
   141 0000047D 48890424            <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   139                              <3>  %rotate 1
   140 00000481 B8C8000000          <3>  mov rax, %2
   141 00000486 4889442408          <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   139                              <3>  %rotate 1
   140 0000048B B8DC050000          <3>  mov rax, %2
   141 00000490 4889442410          <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   139                              <3>  %rotate 1
   140 00000495 B890010000          <3>  mov rax, %2
   141 0000049A 4889442418          <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   139                              <3>  %rotate 1
   140 0000049F B8FFFFFF00          <3>  mov rax, %2
   141 000004A4 4889442420          <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   144                              <2>  %rotate 1
   145                              <2>  %rotate 1
   146 000004A9 488B4424F8          <2>  mov rax,[rsp-8]
   147                              <2>  %endif
   148                              <2> 
   149                              <2> 
   150 000004AE E88C020000          <2>  call %1
   151                              <2> 
   152                              <2> 
   153                              <2>  cleanup_call param_count, ret_param_count
   238                              <3>  %assign total_space ((%1 + %2) * 8)
   239                              <3>  %if (total_space % 16) != 0
   240                              <3>  %assign total_space total_space + 8
   241                              <3>  %endif
   242 000004B3 4883C430            <3>  add rsp, total_space
   154                              <2> 
   205                              <1>     function draw_rect,1,1100,300,1300,500,0x00FFFFFF
   120                              <2>  %assign param_count %0 - 2
   121                              <2> 
   122                              <2>  %if param_count < 0
   123                              <2>  %assign param_count 0
   124                              <2>  %endif
   125                              <2>  %if param_count < 1
   126                              <2>  %assign ret_param_count 0
   127                              <2>  %else
   128                              <2>  %assign ret_param_count %2
   129                              <2>  %endif
   130                              <2> 
   131                              <2> 
   132                              <2>  prepare_call param_count, ret_param_count
   228                              <3>  %assign total_space ((%1 + %2) * 8)
   229                              <3> 
   230                              <3>  %if (total_space % 16) != 0
   231                              <3>  %assign total_space total_space + 8
   232                              <3>  %endif
   233                              <3> 
   234 000004B7 4883EC30            <3>  sub rsp, total_space
   133                              <2> 
   134                              <2> 
   135                              <2>  %if param_count > 0
   136                              <2>  %assign i 0
   137 000004BB 48894424F8          <2>  mov [rsp-8], rax
   138                              <2>  %rep param_count
   139                              <2>  %rotate 1
   140                              <2>  mov rax, %2
   141                              <2>  mov [rsp + 8*i], rax
   142                              <2>  %assign i i+1
   143                              <2>  %endrep
   139                              <3>  %rotate 1
   140 000004C0 B84C040000          <3>  mov rax, %2
   141 000004C5 48890424            <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   139                              <3>  %rotate 1
   140 000004C9 B82C010000          <3>  mov rax, %2
   141 000004CE 4889442408          <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   139                              <3>  %rotate 1
   140 000004D3 B814050000          <3>  mov rax, %2
   141 000004D8 4889442410          <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   139                              <3>  %rotate 1
   140 000004DD B8F4010000          <3>  mov rax, %2
   141 000004E2 4889442418          <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   139                              <3>  %rotate 1
   140 000004E7 B8FFFFFF00          <3>  mov rax, %2
   141 000004EC 4889442420          <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   144                              <2>  %rotate 1
   145                              <2>  %rotate 1
   146 000004F1 488B4424F8          <2>  mov rax,[rsp-8]
   147                              <2>  %endif
   148                              <2> 
   149                              <2> 
   150 000004F6 E8A8030000          <2>  call %1
   151                              <2> 
   152                              <2> 
   153                              <2>  cleanup_call param_count, ret_param_count
   238                              <3>  %assign total_space ((%1 + %2) * 8)
   239                              <3>  %if (total_space % 16) != 0
   240                              <3>  %assign total_space total_space + 8
   241                              <3>  %endif
   242 000004FB 4883C430            <3>  add rsp, total_space
   154                              <2> 
   206                              <1>     function draw_circle,1,1000,400,100,0x00FFFFFF
   120                              <2>  %assign param_count %0 - 2
   121                              <2> 
   122                              <2>  %if param_count < 0
   123                              <2>  %assign param_count 0
   124                              <2>  %endif
   125                              <2>  %if param_count < 1
   126                              <2>  %assign ret_param_count 0
   127                              <2>  %else
   128                              <2>  %assign ret_param_count %2
   129                              <2>  %endif
   130                              <2> 
   131                              <2> 
   132                              <2>  prepare_call param_count, ret_param_count
   228                              <3>  %assign total_space ((%1 + %2) * 8)
   229                              <3> 
   230                              <3>  %if (total_space % 16) != 0
   231                              <3>  %assign total_space total_space + 8
   232                              <3>  %endif
   233                              <3> 
   234 000004FF 4883EC30            <3>  sub rsp, total_space
   133                              <2> 
   134                              <2> 
   135                              <2>  %if param_count > 0
   136                              <2>  %assign i 0
   137 00000503 48894424F8          <2>  mov [rsp-8], rax
   138                              <2>  %rep param_count
   139                              <2>  %rotate 1
   140                              <2>  mov rax, %2
   141                              <2>  mov [rsp + 8*i], rax
   142                              <2>  %assign i i+1
   143                              <2>  %endrep
   139                              <3>  %rotate 1
   140 00000508 B8E8030000          <3>  mov rax, %2
   141 0000050D 48890424            <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   139                              <3>  %rotate 1
   140 00000511 B890010000          <3>  mov rax, %2
   141 00000516 4889442408          <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   139                              <3>  %rotate 1
   140 0000051B B864000000          <3>  mov rax, %2
   141 00000520 4889442410          <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   139                              <3>  %rotate 1
   140 00000525 B8FFFFFF00          <3>  mov rax, %2
   141 0000052A 4889442418          <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   144                              <2>  %rotate 1
   145                              <2>  %rotate 1
   146 0000052F 488B4424F8          <2>  mov rax,[rsp-8]
   147                              <2>  %endif
   148                              <2> 
   149                              <2> 
   150 00000534 E8EF050000          <2>  call %1
   151                              <2> 
   152                              <2> 
   153                              <2>  cleanup_call param_count, ret_param_count
   238                              <3>  %assign total_space ((%1 + %2) * 8)
   239                              <3>  %if (total_space % 16) != 0
   240                              <3>  %assign total_space total_space + 8
   241                              <3>  %endif
   242 00000539 4883C430            <3>  add rsp, total_space
   154                              <2> 
   207                              <1>     function draw_triangle,1,1000,100,1100,100,1050,200,0x00FFFFFF
   120                              <2>  %assign param_count %0 - 2
   121                              <2> 
   122                              <2>  %if param_count < 0
   123                              <2>  %assign param_count 0
   124                              <2>  %endif
   125                              <2>  %if param_count < 1
   126                              <2>  %assign ret_param_count 0
   127                              <2>  %else
   128                              <2>  %assign ret_param_count %2
   129                              <2>  %endif
   130                              <2> 
   131                              <2> 
   132                              <2>  prepare_call param_count, ret_param_count
   228                              <3>  %assign total_space ((%1 + %2) * 8)
   229                              <3> 
   230                              <3>  %if (total_space % 16) != 0
   231                              <3>  %assign total_space total_space + 8
   232                              <3>  %endif
   233                              <3> 
   234 0000053D 4883EC40            <3>  sub rsp, total_space
   133                              <2> 
   134                              <2> 
   135                              <2>  %if param_count > 0
   136                              <2>  %assign i 0
   137 00000541 48894424F8          <2>  mov [rsp-8], rax
   138                              <2>  %rep param_count
   139                              <2>  %rotate 1
   140                              <2>  mov rax, %2
   141                              <2>  mov [rsp + 8*i], rax
   142                              <2>  %assign i i+1
   143                              <2>  %endrep
   139                              <3>  %rotate 1
   140 00000546 B8E8030000          <3>  mov rax, %2
   141 0000054B 48890424            <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   139                              <3>  %rotate 1
   140 0000054F B864000000          <3>  mov rax, %2
   141 00000554 4889442408          <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   139                              <3>  %rotate 1
   140 00000559 B84C040000          <3>  mov rax, %2
   141 0000055E 4889442410          <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   139                              <3>  %rotate 1
   140 00000563 B864000000          <3>  mov rax, %2
   141 00000568 4889442418          <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   139                              <3>  %rotate 1
   140 0000056D B81A040000          <3>  mov rax, %2
   141 00000572 4889442420          <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   139                              <3>  %rotate 1
   140 00000577 B8C8000000          <3>  mov rax, %2
   141 0000057C 4889442428          <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   139                              <3>  %rotate 1
   140 00000581 B8FFFFFF00          <3>  mov rax, %2
   141 00000586 4889442430          <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   144                              <2>  %rotate 1
   145                              <2>  %rotate 1
   146 0000058B 488B4424F8          <2>  mov rax,[rsp-8]
   147                              <2>  %endif
   148                              <2> 
   149                              <2> 
   150 00000590 E8B7040000          <2>  call %1
   151                              <2> 
   152                              <2> 
   153                              <2>  cleanup_call param_count, ret_param_count
   238                              <3>  %assign total_space ((%1 + %2) * 8)
   239                              <3>  %if (total_space % 16) != 0
   240                              <3>  %assign total_space total_space + 8
   241                              <3>  %endif
   242 00000595 4883C440            <3>  add rsp, total_space
   154                              <2> 
   208                              <1> 
   209                              <1>     epilog    
   212                              <2>  popallq
   263 00000599 415F                <3>  pop r15
   264 0000059B 415E                <3>  pop r14
   265 0000059D 415D                <3>  pop r13
   266 0000059F 415C                <3>  pop r12
   267 000005A1 415B                <3>  pop r11
   268 000005A3 415A                <3>  pop r10
   269 000005A5 4159                <3>  pop r9
   270 000005A7 4158                <3>  pop r8
   271 000005A9 5F                  <3>  pop rdi
   272 000005AA 5E                  <3>  pop rsi
   273 000005AB 5A                  <3>  pop rdx
   274 000005AC 59                  <3>  pop rcx
   275 000005AD 5B                  <3>  pop rbx
   276 000005AE 58                  <3>  pop rax
   213                              <2> 
   214 000005AF 4889EC              <2>  mov rsp, rbp
   215 000005B2 5D                  <2>  pop rbp
   216 000005B3 C3                  <2>  ret
   210                              <1> 
   211                              <1> test_memory:;test memory
   212                              <1>     prolog 2;
   192 000005B4 55                  <2>  push rbp
   193 000005B5 4889E5              <2>  mov rbp, rsp
   194                              <2> 
   195                              <2> 
   196 000005B8 488945F8            <2>  mov [rbp-8],rax
   197 000005BC B802000000          <2>  mov rax, %1
   198 000005C1 4883C00F            <2>  add rax, 15
   199 000005C5 4883E0F0            <2>  and rax, ~15
   200 000005C9 4829C4              <2>  sub rsp, rax
   201 000005CC 488B45F8            <2>  mov rax,[rbp-8]
   202                              <2> 
   203                              <2>  pushallq
   246 000005D0 50                  <3>  push rax
   247 000005D1 53                  <3>  push rbx
   248 000005D2 51                  <3>  push rcx
   249 000005D3 52                  <3>  push rdx
   250 000005D4 56                  <3>  push rsi
   251 000005D5 57                  <3>  push rdi
   252 000005D6 4150                <3>  push r8
   253 000005D8 4151                <3>  push r9
   254 000005DA 4152                <3>  push r10
   255 000005DC 4153                <3>  push r11
   256 000005DE 4154                <3>  push r12
   257 000005E0 4155                <3>  push r13
   258 000005E2 4156                <3>  push r14
   259 000005E4 4157                <3>  push r15
   204                              <2> 
   205                              <2> 
   206                              <2> 
   207                              <2> 
   208                              <2> 
   213                              <1> 
   214                              <1> 
   215                              <1> 
   216                              <1>     epilog
   212                              <2>  popallq
   263 000005E6 415F                <3>  pop r15
   264 000005E8 415E                <3>  pop r14
   265 000005EA 415D                <3>  pop r13
   266 000005EC 415C                <3>  pop r12
   267 000005EE 415B                <3>  pop r11
   268 000005F0 415A                <3>  pop r10
   269 000005F2 4159                <3>  pop r9
   270 000005F4 4158                <3>  pop r8
   271 000005F6 5F                  <3>  pop rdi
   272 000005F7 5E                  <3>  pop rsi
   273 000005F8 5A                  <3>  pop rdx
   274 000005F9 59                  <3>  pop rcx
   275 000005FA 5B                  <3>  pop rbx
   276 000005FB 58                  <3>  pop rax
   213                              <2> 
   214 000005FC 4889EC              <2>  mov rsp, rbp
   215 000005FF 5D                  <2>  pop rbp
   216 00000600 C3                  <2>  ret
   217                              <1>     
   218                              <1> 
   219                              <1> %include "../kernel/printk.asm"
     1                              <2> %ifndef PRINTK_ASM
     2                              <2> %define PRINTK_ASM
     3                              <2> 
     4                              <2> %include "../bootloader/global_def.asm"
     1                              <3> %ifndef GLOBAL_DEF_ASM
     2                              <3> %define GLOBAL_DEF_ASM
     3                              <3> %define PLATFORM_QEMU_X64 1
     4                              <3> %define PLATFORM_X64 2
     5                              <3> %define DEBUG_PLATFORM PLATFORM_QEMU_X64
     6                              <3> %define DEBUG_MODE 1
     7                              <3> 
     8                              <3> 
     9                              <3> ;|----------------------|
    10                              <3> ;|	100000 ~ END	|
    11                              <3> ;|	   KERNEL	|
    12                              <3> ;|----------------------|
    13                              <3> ;|	E0000 ~ 100000	|
    14                              <3> ;| Extended System BIOS |
    15                              <3> ;|----------------------|
    16                              <3> ;|	C0000 ~ Dffff	|
    17                              <3> ;|     Expansion Area   |
    18                              <3> ;|----------------------|
    19                              <3> ;|	A0000 ~ bffff	|
    20                              <3> ;|   Legacy Video Area  |
    21                              <3> ;|----------------------|
    22                              <3> ;|	9f000 ~ A0000	|
    23                              <3> ;|	 BIOS reserve	|
    24                              <3> ;|----------------------|
    25                              <3> ;|	90000 ~ 9f000	|
    26                              <3> ;|	 kernel tmpbuf	|
    27                              <3> ;|----------------------|
    28                              <3> ;|	10000 ~ 90000	|
    29                              <3> ;|	   LOADER	|
    30                              <3> ;|----------------------|
    31                              <3> ;|	8000 ~ 10000	|
    32                              <3> ;|	  VBE info	|
    33                              <3> ;|----------------------|
    34                              <3> ;|	7e00 ~ 8000	|
    35                              <3> ;|	  mem info	|
    36                              <3> ;|----------------------|
    37                              <3> ;|	7c00 ~ 7e00	|
    38                              <3> ;|	 MBR (BOOT)	|
    39                              <3> ;|----------------------|
    40                              <3> ;|	0000 ~ 7c00	|
    41                              <3> ;|	 BIOS Code	|
    42                              <3> ;|----------------------|
    43                              <3> 
    44                              <3> 
    45                              <3> ;_______________________________________________________
    46                              <3> ; START	END	    SIZE	        USED
    47                              <3> ; FFFF0	FFFFF	16B	        BIOS System Entry
    48                              <3> ; F0000	FFFEF	64KB-16B	BIOS System Code
    49                              <3> ; C8000	EFFFF	160KB	    ROM/Mapped IO
    50                              <3> ; C0000	C7FFF	32KB	    Graphic Adapter BIOS
    51                              <3> ; B8000	BFFFF	32KB	    Chroma Text Video Buffer
    52                              <3> ; B0000	B7FFF	32KB	    Mono Text Video Buffer
    53                              <3> ; A0000	AFFFF	64KB	    Graphic Video Buffer
    54                              <3> ; 9FC00	9FFFF	1KB	        Extended BIOS Data Area
    55                              <3> ; 7E00	9FBFF	622080B     Useable 608KB	
    56                              <3> ; 7C00	7DFF	512B	    MBR
    57                              <3> ; 500	7BFF	30464B      Useable 30KB	
    58                              <3> ; 400	4FF	    256B	    BIOS Data Area
    59                              <3> ; 000	3FF	    1KB	        IVT
    60                              <3> ; _____________________________________________________
    61                              <3> 
    62                              <3> 
    63                              <3> 
    64                              <3> 
    65                              <3> 
    66                              <3> 
    67                              <3> 
    68                              <3> 
    69                              <3> 
    70                              <3> 
    71                              <3> 
    72                              <3> ;|----------------------|
    73                              <3> ;|	100000 ~ END	|
    74                              <3> ;|	   KERNEL	|
    75                              <3> ;|----------------------|
    76                              <3> ;|	E0000 ~ 100000	|
    77                              <3> ;| Extended System BIOS |
    78                              <3> ;|----------------------|
    79                              <3> ;|	C0000 ~ Dffff	|
    80                              <3> ;|     Expansion Area   |
    81                              <3> ;|----------------------|
    82                              <3> ;|	A0000 ~ bffff	|
    83                              <3> ;|   Legacy Video Area  |
    84                              <3> ;|----------------------|
    85                              <3> ;|	9F000 ~ A0000	|
    86                              <3> ;|	 BIOS reserve	|
    87                              <3> ;|----------------------|
    88                              <3> ;|	90000 ~ 9F000	|
    89                              <3> ;|	 kernel tmpbuf	|
    90                              <3> ;|----------------------|
    91                              <3> ;|	10000 ~ 90000	|
    92                              <3> ;|	   LOADER	|
    93                              <3> ;|----------------------|
    94                              <3> ;|	8000 ~ 10000	|
    95                              <3> ;|	  VBE info	|
    96                              <3> ;|----------------------|
    97                              <3> ;|	7E00 ~ 8000	|
    98                              <3> ;|	  mem info	|
    99                              <3> ;|----------------------|
   100                              <3> ;|	7C00 ~ 7E00	|
   101                              <3> ;|	 MBR (BOOT)	|
   102                              <3> ;|----------------------|
   103                              <3> ;|	0000 ~ 7C00	|
   104                              <3> ;|	 BIOS Code	|
   105                              <3> ;|----------------------|
   106                              <3> 
   107                              <3> 
   108                              <3> 
   109                              <3> 
   110                              <3> 
   111                              <3> 
   112                              <3> 
   113                              <3> 
   114                              <3> 
   115                              <3> 
   116                              <3> ;______________________________________________
   117                              <3> ; ----------------Vbe Info Block------------
   118                              <3> ; typedef struct {
   119                              <3> ;     unsigned char       vbe_signature;
   120                              <3> ;     unsigned short      vbe_version;
   121                              <3> ;     unsigned long       oem_string_ptr;
   122                              <3> ;     unsigned char       capabilities;
   123                              <3> ;     unsigned long       video_mode_ptr;
   124                              <3> ;     unsigned short      total_memory;
   125                              <3> ;     unsigned short      oem_software_rev;
   126                              <3> ;     unsigned long       oem_vendor_name_ptr;
   127                              <3> ;     unsigned long       oem_product_name_ptr;
   128                              <3> ;     unsigned long       oem_product_rev_ptr;
   129                              <3> ;     unsigned char       reserved[222];
   130                              <3> ;     unsigned char       oem_data[256];  
   131                              <3> ; } VbeInfoBlock;
   132                              <3> ;______________________________________________
   133                              <3> 
   134                              <3> 
   135                              <3> BaseOfKernelFile	equ	0x00
   136                              <3> OffsetOfKernelFile	equ	0x100000
   137                              <3> BaseTmpOfKernelAddr	equ	0x9000
   138                              <3> OffsetTmpOfKernelFile	equ	0x0000
   139                              <3> VBEStructBufferAddr	equ	0x8000
   140                              <3> VBEModeStructBufferAddr	equ	0x8200
   141                              <3> MemoryStructBufferAddr	equ	0x8800
   142                              <3> 
   143                              <3> 
   144                              <3> 
   145                              <3> KernelSpaceUpperAddress equ 0xFFFF800000000000
   146                              <3> 
   147                              <3> GDTPointerUpperAddr equ 0xFFFF800000104000
   148                              <3> IDTPointerUpperAddr equ 0xFFFF80000010400a
   149                              <3> TSSPointerUpperAddr equ 0xFFFF800000104014
   150                              <3> 
   151                              <3> VideoFrameBufferAddress equ 0xFFFF800003000000
   152                              <3> KernelStartSectorNum	equ	16
   153                              <3> 
   154                              <3> 
   155                              <3> 
   156                              <3> 
   157                              <3> MasterSectorReadNumPort    equ	0x1F2
   158                              <3> MasterSectorReadPort    equ	0x1F0
   159                              <3> 
   160                              <3> SlaveReadNumPort    equ	0x172
   161                              <3> SlaveSectorReadPort    equ	0x170
   162                              <3> 
   163                              <3> SectorReadNumPort    equ	MasterSectorReadNumPort
   164                              <3> SectorReadPort    equ	MasterSectorReadPort
   165                              <3> 
   166                              <3> struc vbe_info_block
   167                              <3>     .signature                 resb 4    ; 'VESA' signature (must be "VESA")
   168                              <3>     .version                   resw 1    ; VBE version (e.g., 0x0300 for VBE 3.0)
   169                              <3>     .oem_string_ptr            resd 1    ; Pointer to OEM string
   170                              <3>     .capabilities              resd 1    ; Capabilities of the video card
   171                              <3>     .video_mode_ptr            resd 1    ; Pointer to supported video modes
   172                              <3>     .total_memory              resw 1    ; Total memory in 64KB blocks
   173                              <3> 
   174                              <3>     ; VBE 2.0+ fields
   175                              <3>     .oem_software_rev          resw 1    ; OEM software revision
   176                              <3>     .oem_vendor_name_ptr       resd 1    ; Pointer to OEM vendor name string
   177                              <3>     .oem_product_name_ptr      resd 1    ; Pointer to OEM product name string
   178                              <3>     .oem_product_rev_ptr       resd 1    ; Pointer to OEM product revision string
   179                              <3>     .reserved                  resb 222  ; Reserved for VBE implementation
   180                              <3>     .oem_data                  resb 256  ; Data area for OEM-specific information
   181                              <3> endstruc
   182                              <3> 
   183                              <3> struc vbe_mode_info_block
   184                              <3>     .attributes                resw 1    ; Mode attributes
   185                              <3>     .winA_attributes           resb 1    ; Window A attributes
   186                              <3>     .winB_attributes           resb 1    ; Window B attributes
   187                              <3>     .win_granularity           resw 1    ; Window granularity in KB
   188                              <3>     .win_size                  resw 1    ; Window size in KB
   189                              <3>     .winA_segment              resw 1    ; Window A segment
   190                              <3>     .winB_segment              resw 1    ; Window B segment
   191                              <3>     .win_func_ptr              resd 1    ; Pointer to window function
   192                              <3>     .bytes_per_scanline        resw 1    ; Bytes per scanline
   193                              <3> 
   194                              <3>     ; VBE 1.2+ fields
   195                              <3>     .x_resolution              resw 1    ; Horizontal resolution in pixels
   196                              <3>     .y_resolution              resw 1    ; Vertical resolution in pixels
   197                              <3>     .x_char_size               resb 1    ; Character cell width in pixels
   198                              <3>     .y_char_size               resb 1    ; Character cell height in pixels
   199                              <3>     .number_of_planes          resb 1    ; Number of memory planes
   200                              <3>     .bits_per_pixel            resb 1    ; Bits per pixel
   201                              <3>     .number_of_banks           resb 1    ; Number of banks
   202                              <3>     .memory_model              resb 1    ; Memory model type
   203                              <3>     .bank_size                 resb 1    ; Bank size in KB
   204                              <3>     .number_of_image_pages     resb 1    ; Number of images
   205                              <3>     .reserved1                 resb 1    ; Reserved
   206                              <3> 
   207                              <3>     ; Direct Color fields (VBE 1.2+)
   208                              <3>     .red_mask_size             resb 1    ; Size of direct color red mask
   209                              <3>     .red_field_position        resb 1    ; Bit position of red mask
   210                              <3>     .green_mask_size           resb 1    ; Size of direct color green mask
   211                              <3>     .green_field_position      resb 1    ; Bit position of green mask
   212                              <3>     .blue_mask_size            resb 1    ; Size of direct color blue mask
   213                              <3>     .blue_field_position       resb 1    ; Bit position of blue mask
   214                              <3>     .reserved_mask_size        resb 1    ; Size of direct color reserved mask
   215                              <3>     .reserved_field_position   resb 1    ; Bit position of reserved mask
   216                              <3>     .direct_color_mode_info    resb 1    ; Direct color mode attributes
   217                              <3> 
   218                              <3>     ; VBE 2.0+ fields
   219                              <3>     .phys_base_ptr             resd 1    ; Physical address for flat memory frame buffer
   220                              <3>     .reserved2                 resd 1    ; Reserved
   221                              <3>     .reserved3                 resw 1    ; Reserved
   222                              <3> 
   223                              <3>     ; VBE 3.0+ fields
   224                              <3>     .lin_bytes_per_scanline    resw 1    ; Bytes per scanline for linear modes
   225                              <3>     .bnk_number_of_image_pages resb 1    ; Number of images for banked modes
   226                              <3>     .lin_number_of_image_pages resb 1    ; Number of images for linear modes
   227                              <3>     .lin_red_mask_size         resb 1    ; Size of direct color red mask (linear modes)
   228                              <3>     .lin_red_field_position    resb 1    ; Bit position of red mask (linear modes)
   229                              <3>     .lin_green_mask_size       resb 1    ; Size of direct color green mask (linear modes)
   230                              <3>     .lin_green_field_position  resb 1    ; Bit position of green mask (linear modes)
   231                              <3>     .lin_blue_mask_size        resb 1    ; Size of direct color blue mask (linear modes)
   232                              <3>     .lin_blue_field_position   resb 1    ; Bit position of blue mask (linear modes)
   233                              <3>     .lin_reserved_mask_size    resb 1    ; Size of direct color reserved mask (linear modes)
   234                              <3>     .lin_reserved_field_position resb 1  ; Bit position of reserved mask (linear modes)
   235                              <3>     .max_pixel_clock           resd 1    ; Maximum pixel clock (Hz)
   236                              <3>     .reserved4                 resb 190  ; Reserved for future expansion
   237                              <3> endstruc
   238                              <3> 
   239                              <3> struc e820_memory_entry
   240                              <3>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   241                              <3>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   242                              <3>     .length_low               resd 1    ; Lower 32 bits of the length
   243                              <3>     .length_high              resd 1    ; Upper 32 bits of the length
   244                              <3>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   245                              <3>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   246                              <3> endstruc
   247                              <3> 
   248                              <3> %endif
     5                              <2> %include "../kernel/video.asm"
     1                              <3> %ifndef VIDEO_ASM
     2                              <3> %define VIDEO_ASM
     3                              <3> %include "../bootloader/global_def.asm"
     1                              <4> %ifndef GLOBAL_DEF_ASM
     2                              <4> %define GLOBAL_DEF_ASM
     3                              <4> %define PLATFORM_QEMU_X64 1
     4                              <4> %define PLATFORM_X64 2
     5                              <4> %define DEBUG_PLATFORM PLATFORM_QEMU_X64
     6                              <4> %define DEBUG_MODE 1
     7                              <4> 
     8                              <4> 
     9                              <4> ;|----------------------|
    10                              <4> ;|	100000 ~ END	|
    11                              <4> ;|	   KERNEL	|
    12                              <4> ;|----------------------|
    13                              <4> ;|	E0000 ~ 100000	|
    14                              <4> ;| Extended System BIOS |
    15                              <4> ;|----------------------|
    16                              <4> ;|	C0000 ~ Dffff	|
    17                              <4> ;|     Expansion Area   |
    18                              <4> ;|----------------------|
    19                              <4> ;|	A0000 ~ bffff	|
    20                              <4> ;|   Legacy Video Area  |
    21                              <4> ;|----------------------|
    22                              <4> ;|	9f000 ~ A0000	|
    23                              <4> ;|	 BIOS reserve	|
    24                              <4> ;|----------------------|
    25                              <4> ;|	90000 ~ 9f000	|
    26                              <4> ;|	 kernel tmpbuf	|
    27                              <4> ;|----------------------|
    28                              <4> ;|	10000 ~ 90000	|
    29                              <4> ;|	   LOADER	|
    30                              <4> ;|----------------------|
    31                              <4> ;|	8000 ~ 10000	|
    32                              <4> ;|	  VBE info	|
    33                              <4> ;|----------------------|
    34                              <4> ;|	7e00 ~ 8000	|
    35                              <4> ;|	  mem info	|
    36                              <4> ;|----------------------|
    37                              <4> ;|	7c00 ~ 7e00	|
    38                              <4> ;|	 MBR (BOOT)	|
    39                              <4> ;|----------------------|
    40                              <4> ;|	0000 ~ 7c00	|
    41                              <4> ;|	 BIOS Code	|
    42                              <4> ;|----------------------|
    43                              <4> 
    44                              <4> 
    45                              <4> ;_______________________________________________________
    46                              <4> ; START	END	    SIZE	        USED
    47                              <4> ; FFFF0	FFFFF	16B	        BIOS System Entry
    48                              <4> ; F0000	FFFEF	64KB-16B	BIOS System Code
    49                              <4> ; C8000	EFFFF	160KB	    ROM/Mapped IO
    50                              <4> ; C0000	C7FFF	32KB	    Graphic Adapter BIOS
    51                              <4> ; B8000	BFFFF	32KB	    Chroma Text Video Buffer
    52                              <4> ; B0000	B7FFF	32KB	    Mono Text Video Buffer
    53                              <4> ; A0000	AFFFF	64KB	    Graphic Video Buffer
    54                              <4> ; 9FC00	9FFFF	1KB	        Extended BIOS Data Area
    55                              <4> ; 7E00	9FBFF	622080B     Useable 608KB	
    56                              <4> ; 7C00	7DFF	512B	    MBR
    57                              <4> ; 500	7BFF	30464B      Useable 30KB	
    58                              <4> ; 400	4FF	    256B	    BIOS Data Area
    59                              <4> ; 000	3FF	    1KB	        IVT
    60                              <4> ; _____________________________________________________
    61                              <4> 
    62                              <4> 
    63                              <4> 
    64                              <4> 
    65                              <4> 
    66                              <4> 
    67                              <4> 
    68                              <4> 
    69                              <4> 
    70                              <4> 
    71                              <4> 
    72                              <4> ;|----------------------|
    73                              <4> ;|	100000 ~ END	|
    74                              <4> ;|	   KERNEL	|
    75                              <4> ;|----------------------|
    76                              <4> ;|	E0000 ~ 100000	|
    77                              <4> ;| Extended System BIOS |
    78                              <4> ;|----------------------|
    79                              <4> ;|	C0000 ~ Dffff	|
    80                              <4> ;|     Expansion Area   |
    81                              <4> ;|----------------------|
    82                              <4> ;|	A0000 ~ bffff	|
    83                              <4> ;|   Legacy Video Area  |
    84                              <4> ;|----------------------|
    85                              <4> ;|	9F000 ~ A0000	|
    86                              <4> ;|	 BIOS reserve	|
    87                              <4> ;|----------------------|
    88                              <4> ;|	90000 ~ 9F000	|
    89                              <4> ;|	 kernel tmpbuf	|
    90                              <4> ;|----------------------|
    91                              <4> ;|	10000 ~ 90000	|
    92                              <4> ;|	   LOADER	|
    93                              <4> ;|----------------------|
    94                              <4> ;|	8000 ~ 10000	|
    95                              <4> ;|	  VBE info	|
    96                              <4> ;|----------------------|
    97                              <4> ;|	7E00 ~ 8000	|
    98                              <4> ;|	  mem info	|
    99                              <4> ;|----------------------|
   100                              <4> ;|	7C00 ~ 7E00	|
   101                              <4> ;|	 MBR (BOOT)	|
   102                              <4> ;|----------------------|
   103                              <4> ;|	0000 ~ 7C00	|
   104                              <4> ;|	 BIOS Code	|
   105                              <4> ;|----------------------|
   106                              <4> 
   107                              <4> 
   108                              <4> 
   109                              <4> 
   110                              <4> 
   111                              <4> 
   112                              <4> 
   113                              <4> 
   114                              <4> 
   115                              <4> 
   116                              <4> ;______________________________________________
   117                              <4> ; ----------------Vbe Info Block------------
   118                              <4> ; typedef struct {
   119                              <4> ;     unsigned char       vbe_signature;
   120                              <4> ;     unsigned short      vbe_version;
   121                              <4> ;     unsigned long       oem_string_ptr;
   122                              <4> ;     unsigned char       capabilities;
   123                              <4> ;     unsigned long       video_mode_ptr;
   124                              <4> ;     unsigned short      total_memory;
   125                              <4> ;     unsigned short      oem_software_rev;
   126                              <4> ;     unsigned long       oem_vendor_name_ptr;
   127                              <4> ;     unsigned long       oem_product_name_ptr;
   128                              <4> ;     unsigned long       oem_product_rev_ptr;
   129                              <4> ;     unsigned char       reserved[222];
   130                              <4> ;     unsigned char       oem_data[256];  
   131                              <4> ; } VbeInfoBlock;
   132                              <4> ;______________________________________________
   133                              <4> 
   134                              <4> 
   135                              <4> BaseOfKernelFile	equ	0x00
   136                              <4> OffsetOfKernelFile	equ	0x100000
   137                              <4> BaseTmpOfKernelAddr	equ	0x9000
   138                              <4> OffsetTmpOfKernelFile	equ	0x0000
   139                              <4> VBEStructBufferAddr	equ	0x8000
   140                              <4> VBEModeStructBufferAddr	equ	0x8200
   141                              <4> MemoryStructBufferAddr	equ	0x8800
   142                              <4> 
   143                              <4> 
   144                              <4> 
   145                              <4> KernelSpaceUpperAddress equ 0xFFFF800000000000
   146                              <4> 
   147                              <4> GDTPointerUpperAddr equ 0xFFFF800000104000
   148                              <4> IDTPointerUpperAddr equ 0xFFFF80000010400a
   149                              <4> TSSPointerUpperAddr equ 0xFFFF800000104014
   150                              <4> 
   151                              <4> VideoFrameBufferAddress equ 0xFFFF800003000000
   152                              <4> KernelStartSectorNum	equ	16
   153                              <4> 
   154                              <4> 
   155                              <4> 
   156                              <4> 
   157                              <4> MasterSectorReadNumPort    equ	0x1F2
   158                              <4> MasterSectorReadPort    equ	0x1F0
   159                              <4> 
   160                              <4> SlaveReadNumPort    equ	0x172
   161                              <4> SlaveSectorReadPort    equ	0x170
   162                              <4> 
   163                              <4> SectorReadNumPort    equ	MasterSectorReadNumPort
   164                              <4> SectorReadPort    equ	MasterSectorReadPort
   165                              <4> 
   166                              <4> struc vbe_info_block
   167                              <4>     .signature                 resb 4    ; 'VESA' signature (must be "VESA")
   168                              <4>     .version                   resw 1    ; VBE version (e.g., 0x0300 for VBE 3.0)
   169                              <4>     .oem_string_ptr            resd 1    ; Pointer to OEM string
   170                              <4>     .capabilities              resd 1    ; Capabilities of the video card
   171                              <4>     .video_mode_ptr            resd 1    ; Pointer to supported video modes
   172                              <4>     .total_memory              resw 1    ; Total memory in 64KB blocks
   173                              <4> 
   174                              <4>     ; VBE 2.0+ fields
   175                              <4>     .oem_software_rev          resw 1    ; OEM software revision
   176                              <4>     .oem_vendor_name_ptr       resd 1    ; Pointer to OEM vendor name string
   177                              <4>     .oem_product_name_ptr      resd 1    ; Pointer to OEM product name string
   178                              <4>     .oem_product_rev_ptr       resd 1    ; Pointer to OEM product revision string
   179                              <4>     .reserved                  resb 222  ; Reserved for VBE implementation
   180                              <4>     .oem_data                  resb 256  ; Data area for OEM-specific information
   181                              <4> endstruc
   182                              <4> 
   183                              <4> struc vbe_mode_info_block
   184                              <4>     .attributes                resw 1    ; Mode attributes
   185                              <4>     .winA_attributes           resb 1    ; Window A attributes
   186                              <4>     .winB_attributes           resb 1    ; Window B attributes
   187                              <4>     .win_granularity           resw 1    ; Window granularity in KB
   188                              <4>     .win_size                  resw 1    ; Window size in KB
   189                              <4>     .winA_segment              resw 1    ; Window A segment
   190                              <4>     .winB_segment              resw 1    ; Window B segment
   191                              <4>     .win_func_ptr              resd 1    ; Pointer to window function
   192                              <4>     .bytes_per_scanline        resw 1    ; Bytes per scanline
   193                              <4> 
   194                              <4>     ; VBE 1.2+ fields
   195                              <4>     .x_resolution              resw 1    ; Horizontal resolution in pixels
   196                              <4>     .y_resolution              resw 1    ; Vertical resolution in pixels
   197                              <4>     .x_char_size               resb 1    ; Character cell width in pixels
   198                              <4>     .y_char_size               resb 1    ; Character cell height in pixels
   199                              <4>     .number_of_planes          resb 1    ; Number of memory planes
   200                              <4>     .bits_per_pixel            resb 1    ; Bits per pixel
   201                              <4>     .number_of_banks           resb 1    ; Number of banks
   202                              <4>     .memory_model              resb 1    ; Memory model type
   203                              <4>     .bank_size                 resb 1    ; Bank size in KB
   204                              <4>     .number_of_image_pages     resb 1    ; Number of images
   205                              <4>     .reserved1                 resb 1    ; Reserved
   206                              <4> 
   207                              <4>     ; Direct Color fields (VBE 1.2+)
   208                              <4>     .red_mask_size             resb 1    ; Size of direct color red mask
   209                              <4>     .red_field_position        resb 1    ; Bit position of red mask
   210                              <4>     .green_mask_size           resb 1    ; Size of direct color green mask
   211                              <4>     .green_field_position      resb 1    ; Bit position of green mask
   212                              <4>     .blue_mask_size            resb 1    ; Size of direct color blue mask
   213                              <4>     .blue_field_position       resb 1    ; Bit position of blue mask
   214                              <4>     .reserved_mask_size        resb 1    ; Size of direct color reserved mask
   215                              <4>     .reserved_field_position   resb 1    ; Bit position of reserved mask
   216                              <4>     .direct_color_mode_info    resb 1    ; Direct color mode attributes
   217                              <4> 
   218                              <4>     ; VBE 2.0+ fields
   219                              <4>     .phys_base_ptr             resd 1    ; Physical address for flat memory frame buffer
   220                              <4>     .reserved2                 resd 1    ; Reserved
   221                              <4>     .reserved3                 resw 1    ; Reserved
   222                              <4> 
   223                              <4>     ; VBE 3.0+ fields
   224                              <4>     .lin_bytes_per_scanline    resw 1    ; Bytes per scanline for linear modes
   225                              <4>     .bnk_number_of_image_pages resb 1    ; Number of images for banked modes
   226                              <4>     .lin_number_of_image_pages resb 1    ; Number of images for linear modes
   227                              <4>     .lin_red_mask_size         resb 1    ; Size of direct color red mask (linear modes)
   228                              <4>     .lin_red_field_position    resb 1    ; Bit position of red mask (linear modes)
   229                              <4>     .lin_green_mask_size       resb 1    ; Size of direct color green mask (linear modes)
   230                              <4>     .lin_green_field_position  resb 1    ; Bit position of green mask (linear modes)
   231                              <4>     .lin_blue_mask_size        resb 1    ; Size of direct color blue mask (linear modes)
   232                              <4>     .lin_blue_field_position   resb 1    ; Bit position of blue mask (linear modes)
   233                              <4>     .lin_reserved_mask_size    resb 1    ; Size of direct color reserved mask (linear modes)
   234                              <4>     .lin_reserved_field_position resb 1  ; Bit position of reserved mask (linear modes)
   235                              <4>     .max_pixel_clock           resd 1    ; Maximum pixel clock (Hz)
   236                              <4>     .reserved4                 resb 190  ; Reserved for future expansion
   237                              <4> endstruc
   238                              <4> 
   239                              <4> struc e820_memory_entry
   240                              <4>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   241                              <4>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   242                              <4>     .length_low               resd 1    ; Lower 32 bits of the length
   243                              <4>     .length_high              resd 1    ; Upper 32 bits of the length
   244                              <4>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   245                              <4>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   246                              <4> endstruc
   247                              <4> 
   248                              <4> %endif
     4                              <3> %include "../kernel/stddef.asm"
     1                              <4> %ifndef STDDEF_ASM
     2                              <4> %define STDDEF_ASM
     3                              <4> 
     4                              <4> ;-----------Data Type Standard------------;
     5                              <4> %define USE_DT_STANDARD
     6                              <4> %ifdef USE_DT_STANDARD
     7                              <4>     %macro gbyte 1 ; 参数1：变量名, 参数2：初始值(1字节)
     8                              <4>         %1: db %2
     9                              <4>         %endmacro
    10                              <4> 
    11                              <4>     %macro g2byte 1 ; 参数1：变量名, 参数2：初始值(4字节)
    12                              <4>         %1: dw %2
    13                              <4>         %endmacro
    14                              <4> 
    15                              <4>     %macro g4byte 1 ; 参数1：变量名, 参数2：初始值(4字节)
    16                              <4>         %1: dd %2
    17                              <4>         %endmacro
    18                              <4> 
    19                              <4>     %macro g8byte 1 ; 参数1：变量名, 参数2：初始值(8字节)
    20                              <4>         %1: dq %2
    21                              <4>         %endmacro
    22                              <4> 
    23                              <4> 
    24                              <4>     ; %macro lvar 1
    25                              <4>     ;     %define %1 qword [rbp - 112-(__local_offset + 8)]
    26                              <4> 
    27                              <4>     ;     %assign __local_offset  __local_offset + 8
    28                              <4> 
    29                              <4>     ;     sub rsp, 8
    30                              <4>     ;     %endmacro
    31                              <4> 
    32                              <4>     ; 初始化局部变量追踪
    33                              <4>     %macro LOCAL_BEGIN 0
    34                              <4>         %push local_ctx              ; 创建新的局部上下文
    35                              <4>         %assign %$local_offset 0     ; 初始化局部偏移计数器
    36                              <4>     %endmacro
    37                              <4> 
    38                              <4>     ; 定义局部变量
    39                              <4>     ; %1 - 变量名
    40                              <4>     ; %2 - 变量大小(字节)
    41                              <4>     %macro lvar 1
    42                              <4>         %assign %$local_offset %$local_offset+8   ; 累加偏移
    43                              <4>         %define %$var_%1 %$local_offset               ; 定义变量偏移
    44                              <4>         %define %1 qword [rbp - %$var_%1]
    45                              <4>         sub rsp,8
    46                              <4>     %endmacro
    47                              <4> 
    48                              <4>     %macro lstr 1
    49                              <4>         %assign %$local_offset %$local_offset+8   ; 累加偏移
    50                              <4>         %define %$str_%1 %$local_offset               ; 定义变量偏移
    51                              <4>         %define %1  rbp - %$str_%1
    52                              <4>         %define %1.size 5
    53                              <4>         sub rsp,%1.size
    54                              <4>     %endmacro
    55                              <4> 
    56                              <4>     ; 分配栈空间并保存寄存器
    57                              <4>     %macro lalloc 0
    58                              <4>         %if %$local_offset > 0
    59                              <4>             ; 16字节对齐
    60                              <4>             %assign pad (16 - (%$local_offset % 16))
    61                              <4>             %if pad < 16
    62                              <4>                 %assign %$local_offset %$local_offset + pad
    63                              <4>             %endif
    64                              <4>             sub rsp, %$local_offset
    65                              <4>         %endif
    66                              <4>     %endmacro
    67                              <4> 
    68                              <4> 
    69                              <4>     ; ; 获取局部变量的访问表达式
    70                              <4>     ; %macro locvar 1-*
    71                              <4>     ;     ; [rbp - %$var_%1 ]
    72                              <4> 
    73                              <4>     ;     %ifctx local_ctx
    74                              <4>     ;         ; %ifidn %2, ""
    75                              <4>     ;             qword [rbp - %$var_%1]
    76                              <4>     ;         ; %else
    77                              <4>     ;         ;     [rbp - %$var_%1 - %2]
    78                              <4>     ;         ; %endif
    79                              <4>     ;     %endif
    80                              <4>     ; %endmacro
    81                              <4> 
    82                              <4>     ;     %macro locvar 1-2
    83                              <4>     ;     ; [rbp - %$var_%1 ]
    84                              <4> 
    85                              <4>     ;     %ifctx local_ctx
    86                              <4>     ;         %ifidn %2, ""
    87                              <4>     ;             [rbp - %$var_%1]
    88                              <4>     ;         %else
    89                              <4>     ;             [rbp - %$var_%1 - %2]
    90                              <4>     ;         %endif
    91                              <4>     ;     %endif
    92                              <4>     ; %endmacro
    93                              <4> 
    94                              <4> 
    95                              <4> %endif
    96                              <4> 
    97                              <4> ;-----------Calling Conventions Standard------------;
    98                              <4> %define USE_CC_STANDARD
    99                              <4> %ifdef USE_CC_STANDARD
   100                              <4> 
   101                              <4>     ;caller maintain the stack balance 
   102                              <4>         ; debug_times: db 0
   103                              <4>         ; cmp byte [rel debug_times],3
   104                              <4>         ; je debug_stop
   105                              <4>         ; add byte [rel debug_times],1
   106                              <4>     ; -------------------------------
   107                              <4>     ; 栈帧结构定义
   108                              <4>     ; -------------------------------
   109                              <4>     ; 调用后的栈布局:
   110                              <4>     ; [rsp+0x00] 返回地址 (8字节)
   111                              <4>     ; [rsp+0x08] 旧RBP     (8字节) <- rbp指向这里
   112                              <4>     ; [rsp+0x10] 参数1     (8字节)
   113                              <4>     ; [rsp+0x18] 参数2
   114                              <4>     ; ...
   115                              <4>     ; [rsp+X]    局部变量区
   116                              <4>     ; -------------------------------
   117                              <4> 
   118                              <4>     %define PARAM_OFFSET   16      ; 第一个参数的偏移量(返回地址8 + 旧RBP8)
   119                              <4>     %macro function 1-* ; 1=函数名, 2=返回参数数量, 3=参数列表
   120                              <4>         %assign param_count %0 - 2 ; 参数数量
   121                              <4>         
   122                              <4>         %if param_count < 0
   123                              <4>             %assign param_count 0 ; 如果没有参数，设置为 0
   124                              <4>         %endif
   125                              <4>         %if param_count < 1
   126                              <4>             %assign ret_param_count 0 ; 返回参数数量
   127                              <4>         %else
   128                              <4>             %assign ret_param_count %2 ; 返回参数数量
   129                              <4>         %endif
   130                              <4> 
   131                              <4>         ; 准备调用
   132                              <4>         prepare_call param_count, ret_param_count
   133                              <4> 
   134                              <4>         ; 如果有参数，将参数压入栈
   135                              <4>         %if param_count > 0
   136                              <4>             %assign i 0
   137                              <4>             mov [rsp-8], rax ; 保存返回地址
   138                              <4>             %rep param_count
   139                              <4>                 %rotate 1
   140                              <4>                 mov rax, %2
   141                              <4>                 mov [rsp + 8*i], rax ; 将参数压入栈
   142                              <4>                 %assign i i+1
   143                              <4>             %endrep
   144                              <4>             %rotate 1
   145                              <4>             %rotate 1
   146                              <4>             mov rax,[rsp-8]; 保存返回地址
   147                              <4>         %endif
   148                              <4> 
   149                              <4>         ; 调用函数
   150                              <4>         call %1
   151                              <4> 
   152                              <4>         ; 清理栈空间
   153                              <4>         cleanup_call param_count, ret_param_count
   154                              <4> 
   155                              <4>     %endmacro
   156                              <4> 
   157                              <4>     %macro align_stack_16 0
   158                              <4>         test rsp, 0xF
   159                              <4>         jz %%skip_align
   160                              <4>         sub rsp,8
   161                              <4>         %%skip_align:
   162                              <4>     %endmacro
   163                              <4> 
   164                              <4>     %macro prologue 0;local var size(bytes)
   165                              <4>         push rbp
   166                              <4>         mov rbp, rsp
   167                              <4> 
   168                              <4> 
   169                              <4>         pushallq
   170                              <4>         LOCAL_BEGIN
   171                              <4>         
   172                              <4> 
   173                              <4>         ; 调试信息可以放在这里
   174                              <4>         ; %ifdef DEBUG
   175                              <4>         ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
   176                              <4>         ; %endif
   177                              <4>     %endmacro
   178                              <4>     %macro epilogue 0
   179                              <4>         %pop
   180                              <4>         mov rax, rbp
   181                              <4>         sub rax, 8*14
   182                              <4>         mov rsp, rax
   183                              <4> 
   184                              <4>         popallq
   185                              <4> 
   186                              <4>         mov rsp, rbp
   187                              <4>         pop rbp
   188                              <4>         ret
   189                              <4>     %endmacro
   190                              <4> 
   191                              <4>     %macro prolog 1;local var size(bytes)
   192                              <4>         push rbp
   193                              <4>         mov rbp, rsp
   194                              <4> 
   195                              <4> 
   196                              <4>         mov [rbp-8],rax
   197                              <4>         mov rax, %1
   198                              <4>         add rax, 15
   199                              <4>         and rax, ~15
   200                              <4>         sub rsp, rax
   201                              <4>         mov rax,[rbp-8]
   202                              <4> 
   203                              <4>         pushallq
   204                              <4>         
   205                              <4>         ; 调试信息可以放在这里
   206                              <4>         ; %ifdef DEBUG
   207                              <4>         ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
   208                              <4>         ; %endif
   209                              <4>     %endmacro
   210                              <4> 
   211                              <4>     %macro epilog 0
   212                              <4>         popallq
   213                              <4> 
   214                              <4>         mov rsp, rbp
   215                              <4>         pop rbp
   216                              <4>         ret
   217                              <4>     %endmacro
   218                              <4> 
   219                              <4>     %macro get_param 2;1=register, 2=param index(from 1)
   220                              <4>         mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   221                              <4>     %endmacro
   222                              <4> 
   223                              <4>     %macro set_ret_param 2;1=register, 2=param index(from 1)
   224                              <4>         mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   225                              <4>     %endmacro
   226                              <4> 
   227                              <4>     %macro prepare_call 2;1=param count, 2=return param count
   228                              <4>         %assign total_space ((%1 + %2) * 8)
   229                              <4>         
   230                              <4>         %if (total_space % 16) != 0
   231                              <4>             %assign total_space total_space + 8  ; 添加填充
   232                              <4>         %endif
   233                              <4>         
   234                              <4>         sub rsp, total_space
   235                              <4>     %endmacro
   236                              <4> 
   237                              <4>     %macro cleanup_call 2;1=param count, 2=return param count
   238                              <4>         %assign total_space ((%1 + %2) * 8)
   239                              <4>         %if (total_space % 16) != 0
   240                              <4>             %assign total_space total_space + 8
   241                              <4>         %endif
   242                              <4>         add rsp, total_space
   243                              <4>     %endmacro
   244                              <4> 
   245                              <4>     %macro pushallq 0
   246                              <4>         push rax
   247                              <4>         push rbx
   248                              <4>         push rcx
   249                              <4>         push rdx
   250                              <4>         push rsi
   251                              <4>         push rdi
   252                              <4>         push r8
   253                              <4>         push r9
   254                              <4>         push r10
   255                              <4>         push r11
   256                              <4>         push r12
   257                              <4>         push r13
   258                              <4>         push r14
   259                              <4>         push r15
   260                              <4>     %endmacro
   261                              <4> 
   262                              <4>     %macro popallq 0
   263                              <4>         pop r15
   264                              <4>         pop r14
   265                              <4>         pop r13
   266                              <4>         pop r12
   267                              <4>         pop r11
   268                              <4>         pop r10
   269                              <4>         pop r9
   270                              <4>         pop r8
   271                              <4>         pop rdi
   272                              <4>         pop rsi
   273                              <4>         pop rdx
   274                              <4>         pop rcx
   275                              <4>         pop rbx
   276                              <4>         pop rax
   277                              <4>     %endmacro
   278                              <4> 
   279                              <4>     %endif
   280                              <4> ;---------------------ABI Standard------------------;
   281                              <4> %define USE_ABI_STANDARD
   282                              <4> %ifdef USE_ABI_STANDARD
   283                              <4> 
   284                              <4> 
   285                              <4>     %define ABI_File_None   0       ; 无文件类型
   286                              <4>     %define ABI_File_REL    1       ; 可重定位文件
   287                              <4>     %define ABI_File_EXEC   2       ; 可执行文件
   288                              <4>     %define ABI_File_DYN    3       ; 共享目标文件
   289                              <4>     %define ABI_File_CORE   4       ; 核心文件
   290                              <4> 
   291                              <4>     %define Section_Type_NULL    0      ; 未使用
   292                              <4>     %define Section_Type_LOAD    1      ; 可加载段
   293                              <4>     %define Section_Type_DYNAMIC 2      ; 动态链接信息
   294                              <4>     %define Section_Type_INTERP  3      ; 解释器路径
   295                              <4>     %define Section_Type_NOTE    4      ; 辅助信息
   296                              <4>     %define Section_Type_SHLIB   5      ; 保留
   297                              <4> 
   298                              <4>     %macro ABI_HEADER 4 ;1=File Type, 2=Entry Point Address, 3=Section Header Offset, 4=Section Header Count
   299                              <4>         db 0xA5, 'A', 'B', 'I'     ; ABI Magic Number
   300                              <4>         db 1                       ; Encode Type
   301                              <4>         db 1                       ; ABI Version
   302                              <4> 
   303                              <4>         dw %1                      ; ABI File Type
   304                              <4>         dq %2                      ; Entry Point Address
   305                              <4>         dw 32                      ; ABI Headers Size
   306                              <4> 
   307                              <4>         dq %3                      ; Section Header Offset
   308                              <4>         dw 32                      ; Section Header Size
   309                              <4>         dw %4                      ; Section Header Count
   310                              <4>         dw 0                       ; Symble Table Entry Size
   311                              <4>     %endmacro
   312                              <4>     STRUC struct_ABI_HEADER
   313                              <4>         .magic:         resb 4    ; ABI Magic Number (4 bytes)
   314                              <4>         .encode_type:   resb 1    ; Encode Type (1 byte)
   315                              <4>         .abi_version:   resb 1    ; ABI Version (1 byte)
   316                              <4>         .file_type:     resw 1    ; ABI File Type (2 bytes)
   317                              <4>         .entry_point:   resq 1    ; Entry Point Address (8 bytes)
   318                              <4>         .header_size:   resw 1    ; ABI Headers Size (2 bytes)
   319                              <4>         .section_offset: resq 1   ; Section Header Offset (8 bytes)
   320                              <4>         .section_size:  resw 1    ; Section Header Size (2 bytes)
   321                              <4>         .section_count: resw 1    ; Section Header Count (2 bytes)
   322                              <4>         .sym_table_size: resw 1   ; Symbol Table Entry Size (2 bytes)
   323                              <4>     ENDSTRUC
   324                              <4> 
   325                              <4>     %macro SECTION_HEADER 4 ;1=Section Type, 2=Virtual Address, 3=Section Offset, 4=Section Size
   326                              <4>         dq %1                  ; Section Type
   327                              <4>         dq %2                  ; Virtual Address
   328                              <4>         dq %3                  ; Section Offset
   329                              <4>         dq %4                  ; Section Size
   330                              <4>     %endmacro
   331                              <4>     STRUC struct_SECTION_HEADER
   332                              <4>         .type:      resq 1    ; Section Type (8 bytes)
   333                              <4>         .vaddr:     resq 1    ; Virtual Address (8 bytes)
   334                              <4>         .offset:    resq 1    ; Section Offset (8 bytes)
   335                              <4>         .size:      resq 1    ; Section Size (8 bytes)
   336                              <4>     ENDSTRUC
   337                              <4>     %endif
   338                              <4> 
   339                              <4> %endif
     5                              <3> [BITS 64]
     6                              <3> struc video_info
     7                              <3>     .start:
     8 00000000 ????                <3>     .xpixel:            resw 1      
     9 00000002 ????                <3>     .ypixel:            resw 1       
    10 00000004 ??                  <3>     .byte_per_pixel:    resb 1     
    11 00000005 ????????????????    <3>     .video_framebuffer: resq 1
    12                              <3>     .end:
    13                              <3>     endstruc
    14                              <3> video_info_ptr:;
    15                              <3>     istruc video_info
    16 00000601 0000                <3>         at video_info.xpixel, dw 0
    17 00000603 0000                <3>         at video_info.ypixel, dw 0
    18 00000605 00                  <3>         at video_info.byte_per_pixel, db 0
    19 00000606 0000000000000000    <3>         at video_info.video_framebuffer, dq 0
    20                              <3>     iend
    21                              <3> 
    22                              <3> video_init:;ARGB
    23                              <3>     prolog 0;
   192 0000060E 55                  <4>  push rbp
   193 0000060F 4889E5              <4>  mov rbp, rsp
   194                              <4> 
   195                              <4> 
   196 00000612 488945F8            <4>  mov [rbp-8],rax
   197 00000616 B800000000          <4>  mov rax, %1
   198 0000061B 4883C00F            <4>  add rax, 15
   199 0000061F 4883E0F0            <4>  and rax, ~15
   200 00000623 4829C4              <4>  sub rsp, rax
   201 00000626 488B45F8            <4>  mov rax,[rbp-8]
   202                              <4> 
   203                              <4>  pushallq
   246 0000062A 50                  <5>  push rax
   247 0000062B 53                  <5>  push rbx
   248 0000062C 51                  <5>  push rcx
   249 0000062D 52                  <5>  push rdx
   250 0000062E 56                  <5>  push rsi
   251 0000062F 57                  <5>  push rdi
   252 00000630 4150                <5>  push r8
   253 00000632 4151                <5>  push r9
   254 00000634 4152                <5>  push r10
   255 00000636 4153                <5>  push r11
   256 00000638 4154                <5>  push r12
   257 0000063A 4155                <5>  push r13
   258 0000063C 4156                <5>  push r14
   259 0000063E 4157                <5>  push r15
   204                              <4> 
   205                              <4> 
   206                              <4> 
   207                              <4> 
   208                              <4> 
    24 00000640 48BE128200000080FF- <3>     mov rsi,KernelSpaceUpperAddress + VBEModeStructBufferAddr + vbe_mode_info_block.x_resolution
    24 00000649 FF                  <3>
    25 0000064A BB00000000          <3>     mov rbx,0
    26 0000064F 668B1E              <3>     mov  bx, word [rsi]
    27 00000652 66891DA8FFFFFF      <3>     mov word [rel video_info_ptr + video_info.xpixel],bx
    28                              <3> 
    29 00000659 48BE148200000080FF- <3>     mov rsi,KernelSpaceUpperAddress + VBEModeStructBufferAddr + vbe_mode_info_block.y_resolution
    29 00000662 FF                  <3>
    30 00000663 BB00000000          <3>     mov rbx,0
    31 00000668 668B1E              <3>     mov  bx, word [rsi]
    32 0000066B 66891D91FFFFFF      <3>     mov word [rel video_info_ptr + video_info.ypixel],bx
    33                              <3> 
    34 00000672 48BE198200000080FF- <3>     mov rsi,KernelSpaceUpperAddress + VBEModeStructBufferAddr + vbe_mode_info_block.bits_per_pixel
    34 0000067B FF                  <3>
    35 0000067C BB00000000          <3>     mov rbx,0
    36 00000681 8A1E                <3>     mov bl, byte [rsi]
    37 00000683 C0EB03              <3>     shr bl,3
    38 00000686 881D79FFFFFF        <3>     mov byte [rel video_info_ptr + video_info.byte_per_pixel],bl
    39                              <3> 
    40                              <3>     ; mov rsi,KernelSpaceUpperAddress + VBEModeStructBufferAddr + vbe_mode_info_block.y_resolution
    41                              <3>     ; mov rbx,0
    42                              <3>     ; mov  bx, word [rsi]
    43 0000068C 48BE000000030080FF- <3>     mov rsi,VideoFrameBufferAddress
    43 00000695 FF                  <3>
    44 00000696 48893569FFFFFF      <3>     mov qword [rel video_info_ptr + video_info.video_framebuffer],rsi
    45                              <3> 
    46                              <3>     epilog
   212                              <4>  popallq
   263 0000069D 415F                <5>  pop r15
   264 0000069F 415E                <5>  pop r14
   265 000006A1 415D                <5>  pop r13
   266 000006A3 415C                <5>  pop r12
   267 000006A5 415B                <5>  pop r11
   268 000006A7 415A                <5>  pop r10
   269 000006A9 4159                <5>  pop r9
   270 000006AB 4158                <5>  pop r8
   271 000006AD 5F                  <5>  pop rdi
   272 000006AE 5E                  <5>  pop rsi
   273 000006AF 5A                  <5>  pop rdx
   274 000006B0 59                  <5>  pop rcx
   275 000006B1 5B                  <5>  pop rbx
   276 000006B2 58                  <5>  pop rax
   213                              <4> 
   214 000006B3 4889EC              <4>  mov rsp, rbp
   215 000006B6 5D                  <4>  pop rbp
   216 000006B7 C3                  <4>  ret
    47                              <3> 
    48                              <3> draw_pixel:; Input: x,y,color
    49                              <3>     prolog 2;
   192 000006B8 55                  <4>  push rbp
   193 000006B9 4889E5              <4>  mov rbp, rsp
   194                              <4> 
   195                              <4> 
   196 000006BC 488945F8            <4>  mov [rbp-8],rax
   197 000006C0 B802000000          <4>  mov rax, %1
   198 000006C5 4883C00F            <4>  add rax, 15
   199 000006C9 4883E0F0            <4>  and rax, ~15
   200 000006CD 4829C4              <4>  sub rsp, rax
   201 000006D0 488B45F8            <4>  mov rax,[rbp-8]
   202                              <4> 
   203                              <4>  pushallq
   246 000006D4 50                  <5>  push rax
   247 000006D5 53                  <5>  push rbx
   248 000006D6 51                  <5>  push rcx
   249 000006D7 52                  <5>  push rdx
   250 000006D8 56                  <5>  push rsi
   251 000006D9 57                  <5>  push rdi
   252 000006DA 4150                <5>  push r8
   253 000006DC 4151                <5>  push r9
   254 000006DE 4152                <5>  push r10
   255 000006E0 4153                <5>  push r11
   256 000006E2 4154                <5>  push r12
   257 000006E4 4155                <5>  push r13
   258 000006E6 4156                <5>  push r14
   259 000006E8 4157                <5>  push r15
   204                              <4> 
   205                              <4> 
   206                              <4> 
   207                              <4> 
   208                              <4> 
    50                              <3>         ; jmp $
    51                              <3>     get_param rdi, 1   ; x
   220 000006EA 488B7D10            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    52                              <3>     get_param rsi, 2   ; y
   220 000006EE 488B7518            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    53                              <3>     get_param rdx, 3   ; c
   220 000006F2 488B5520            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    54 000006F6 52                  <3>     push rdx
    55                              <3>     ; mov []
    56 000006F7 488D1D03FFFFFF      <3>     lea rbx, [rel video_info_ptr] ; Load video info structure address
    57                              <3> 
    58                              <3> 
    59                              <3> 
    60                              <3>     ; Calculate pixel offset
    61 000006FE B800000000          <3>     mov rax,0
    62 00000703 480FB703            <3>     movzx rax, word [rbx + video_info.xpixel] ; Screen width
    63                              <3> 
    64 00000707 48F7E6              <3>     mul rsi                                 ; y * screen width
    65                              <3>         ; jmp $
    66 0000070A 4801F8              <3>     add rax, rdi                             ; Add x
    67 0000070D 480FB64B04          <3>     movzx rcx, byte [rbx + video_info.byte_per_pixel] ; Bytes per pixel
    68 00000712 480FAFC1            <3>     imul rax, rcx                          ; Offset = (y * width + x) * bytes_per_pixel
    69                              <3> 
    70                              <3>     ; Write color to framebuffer
    71 00000716 488B5B05            <3>     mov rbx, qword [rbx + video_info.video_framebuffer] ; Framebuffer address
    72 0000071A 4801C3              <3>     add rbx, rax                          ; rbx = framebuffer + offset
    73                              <3> 
    74 0000071D 5A                  <3>     pop rdx
    75 0000071E 8913                <3>     mov dword [rbx], edx                        ; Write color (assumes 32-bit color)
    76                              <3> 
    77                              <3>         ; jmp $
    78                              <3>     set_ret_param rax,4
   224 00000720 48894528            <4>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
    79                              <3>     epilog
   212                              <4>  popallq
   263 00000724 415F                <5>  pop r15
   264 00000726 415E                <5>  pop r14
   265 00000728 415D                <5>  pop r13
   266 0000072A 415C                <5>  pop r12
   267 0000072C 415B                <5>  pop r11
   268 0000072E 415A                <5>  pop r10
   269 00000730 4159                <5>  pop r9
   270 00000732 4158                <5>  pop r8
   271 00000734 5F                  <5>  pop rdi
   272 00000735 5E                  <5>  pop rsi
   273 00000736 5A                  <5>  pop rdx
   274 00000737 59                  <5>  pop rcx
   275 00000738 5B                  <5>  pop rbx
   276 00000739 58                  <5>  pop rax
   213                              <4> 
   214 0000073A 4889EC              <4>  mov rsp, rbp
   215 0000073D 5D                  <4>  pop rbp
   216 0000073E C3                  <4>  ret
    80                              <3> 
    81                              <3> draw_line:; Bresenham's line algorithm Input: x1,y1,x2,y2,color
    82                              <3>     prolog 2;
   192 0000073F 55                  <4>  push rbp
   193 00000740 4889E5              <4>  mov rbp, rsp
   194                              <4> 
   195                              <4> 
   196 00000743 488945F8            <4>  mov [rbp-8],rax
   197 00000747 B802000000          <4>  mov rax, %1
   198 0000074C 4883C00F            <4>  add rax, 15
   199 00000750 4883E0F0            <4>  and rax, ~15
   200 00000754 4829C4              <4>  sub rsp, rax
   201 00000757 488B45F8            <4>  mov rax,[rbp-8]
   202                              <4> 
   203                              <4>  pushallq
   246 0000075B 50                  <5>  push rax
   247 0000075C 53                  <5>  push rbx
   248 0000075D 51                  <5>  push rcx
   249 0000075E 52                  <5>  push rdx
   250 0000075F 56                  <5>  push rsi
   251 00000760 57                  <5>  push rdi
   252 00000761 4150                <5>  push r8
   253 00000763 4151                <5>  push r9
   254 00000765 4152                <5>  push r10
   255 00000767 4153                <5>  push r11
   256 00000769 4154                <5>  push r12
   257 0000076B 4155                <5>  push r13
   258 0000076D 4156                <5>  push r14
   259 0000076F 4157                <5>  push r15
   204                              <4> 
   205                              <4> 
   206                              <4> 
   207                              <4> 
   208                              <4> 
    83                              <3>     get_param rdi, 1    ; x1
   220 00000771 488B7D10            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    84                              <3>     get_param rsi, 2    ; y1
   220 00000775 488B7518            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    85                              <3>     get_param rdx, 3    ; x2
   220 00000779 488B5520            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    86                              <3>     get_param rcx, 4    ; y2
   220 0000077D 488B4D28            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    87                              <3>     get_param r8,  5    ; color
   220 00000781 4C8B4530            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    88                              <3> 
    89                              <3>     ; Calculate dx and dy
    90 00000785 4989D1              <3>     mov r9, rdx         ; r9 = x2
    91 00000788 4929F9              <3>     sub r9, rdi         ; dx = x2 - x1
    92 0000078B 4989CA              <3>     mov r10, rcx        ; r10 = y2
    93 0000078E 4929F2              <3>     sub r10, rsi        ; dy = y2 - y1
    94                              <3> 
    95                              <3>     ; Determine the absolute values of dx and dy
    96 00000791 4D89CB              <3>     mov r11, r9         ; r11 = dx
    97 00000794 4D85DB              <3>     test r11, r11
    98 00000797 7903                <3>     jns .dx_positive
    99 00000799 49F7DB              <3>     neg r11             ; r11 = abs(dx)
   100                              <3>     .dx_positive:
   101 0000079C 4D89D4              <3>         mov r12, r10        ; r12 = dy
   102 0000079F 4D85E4              <3>         test r12, r12
   103 000007A2 7903                <3>         jns .dy_positive
   104 000007A4 49F7DC              <3>         neg r12             ; r12 = abs(dy)
   105                              <3>     .dy_positive:
   106                              <3> 
   107                              <3>         ; Determine the direction of the line
   108 000007A7 41BD01000000        <3>         mov r13, 1          ; x_step = 1
   109 000007AD 4D85C9              <3>         test r9, r9
   110 000007B0 7907                <3>         jns .x_step_positive
   111 000007B2 49C7C5FFFFFFFF      <3>         mov r13, -1         ; x_step = -1
   112                              <3>     .x_step_positive:
   113 000007B9 41BE01000000        <3>         mov r14, 1          ; y_step = 1
   114 000007BF 4D85D2              <3>         test r10, r10
   115 000007C2 7907                <3>         jns .y_step_positive
   116 000007C4 49C7C6FFFFFFFF      <3>         mov r14, -1         ; y_step = -1
   117                              <3>     .y_step_positive:
   118                              <3> 
   119 000007CB 4D39E3              <3>     cmp r11, r12        ; Compare abs(dx) and abs(dy)
   120 000007CE 7D21                <3>     jge .steep_x        ; If abs(dx) >= abs(dy), use x-major line
   121 000007D0 4D89DF              <3>     mov r15, r11        ; error = abs(dx)
   122 000007D3 49D1E7              <3>     shl r15, 1          ; error = 2 * abs(dx)
   123 000007D6 4D29E7              <3>     sub r15, r12         ; error = 2 * abs(dx) - abs(dy)
   124                              <3> 
   125 000007D9 4D89D9              <3>     mov r9, r11         ; r9 = abs(dx)
   126 000007DC 49D1E1              <3>     shl r9, 1           ; delta_error = 2 * abs(dx)
   127                              <3> 
   128 000007DF 4D89CA              <3>     mov r10,r9
   129 000007E2 4157                <3>     push r15
   130 000007E4 4D89E7              <3>     mov r15, r12
   131 000007E7 49D1E7              <3>     shl r15, 1           ; delta_error = 2 * abs(dy)
   132 000007EA 4D29FA              <3>     sub r10,r15
   133 000007ED 415F                <3>     pop r15
   134 000007EF EB21                <3>     jmp .draw_loop_dy
   135                              <3>     .steep_x:
   136 000007F1 4D89E7              <3>         mov r15, r12        ; error = abs(dy)
   137 000007F4 49D1E7              <3>         shl r15, 1          ; error = 2 * abs(dy)
   138 000007F7 4D29DF              <3>         sub r15, r11         ; error = 2 * abs(dy) - abs(dx)
   139                              <3> 
   140 000007FA 4D89E1              <3>         mov r9, r12         ; r9 = abs(dy)
   141 000007FD 49D1E1              <3>         shl r9, 1           ; delta_error = 2 * abs(dy)
   142                              <3> 
   143 00000800 4D89CA              <3>         mov r10,r9
   144 00000803 4157                <3>         push r15
   145 00000805 4D89DF              <3>         mov r15, r11
   146 00000808 49D1E7              <3>         shl r15, 1           ; delta_error = 2 * abs(dx)
   147 0000080B 4D29FA              <3>         sub r10,r15
   148 0000080E 415F                <3>         pop r15
   149 00000810 EB39                <3>         jmp .draw_loop_dx
   150                              <3>     .draw_loop_dy:
   151 00000812 4839CE              <3>         cmp rsi, rcx        ; Compare y1 with y2
   152 00000815 746D                <3>         je .done            ; If both match, we're done
   153                              <3> 
   154 00000817 4983FF00            <3>         cmp r15,0
   155 0000081B 7D08                <3>         jge .yup1
   156 0000081D 4C01F6              <3>         add rsi, r14        ; y += y_step
   157 00000820 4D01CF              <3>         add r15,r9
   158 00000823 EB09                <3>         jmp .ydrawloop
   159                              <3>         .yup1:
   160 00000825 4C01EF              <3>             add rdi, r13        ; x += x_step
   161 00000828 4C01F6              <3>             add rsi, r14        ; y += y_step
   162 0000082B 4D01D7              <3>             add r15,r10
   163                              <3>         .ydrawloop:
   164                              <3>             ; Draw the current pixel
   165                              <3>             prepare_call 3,1
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 0000082E 4883EC20            <4>  sub rsp, total_space
   166 00000832 4C89442410          <3>             mov qword [rsp+16], r8
   167 00000837 4889742408          <3>             mov qword [rsp+8], rsi
   168 0000083C 48893C24            <3>             mov qword [rsp], rdi
   169 00000840 E873FEFFFF          <3>             call draw_pixel
   170                              <3>             cleanup_call 3,1
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 00000845 4883C420            <4>  add rsp, total_space
   171                              <3>             ; mov rax, [rsp-8]
   172 00000849 EBC7                <3>             jmp .draw_loop_dy            ; If both match, we're done
   173                              <3> 
   174                              <3>     .draw_loop_dx:
   175 0000084B 4839D7              <3>         cmp rdi, rdx        ; Compare y1 with y2
   176 0000084E 7434                <3>         je .done            ; If both match, we're done
   177                              <3> 
   178 00000850 4983FF00            <3>         cmp r15,0
   179 00000854 7D08                <3>         jge .xup1
   180 00000856 4C01EF              <3>         add rdi, r13        ; y += y_step
   181 00000859 4D01CF              <3>         add r15,r9
   182 0000085C EB09                <3>         jmp .xdrawloop
   183                              <3>         .xup1:
   184 0000085E 4C01EF              <3>             add rdi, r13        ; x += x_step
   185 00000861 4C01F6              <3>             add rsi, r14        ; y += y_step
   186 00000864 4D01D7              <3>             add r15,r10
   187                              <3>         .xdrawloop:
   188                              <3>             ; Draw the current pixel
   189                              <3>             prepare_call 3,1
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00000867 4883EC20            <4>  sub rsp, total_space
   190 0000086B 4C89442410          <3>             mov qword [rsp+16], r8
   191 00000870 4889742408          <3>             mov qword [rsp+8], rsi
   192 00000875 48893C24            <3>             mov qword [rsp], rdi
   193 00000879 E83AFEFFFF          <3>             call draw_pixel
   194                              <3>             cleanup_call 3,1
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 0000087E 4883C420            <4>  add rsp, total_space
   195                              <3>             ; mov rax, [rsp-8]
   196 00000882 EBC7                <3>             jmp .draw_loop_dx            ; If both match, we're done
   197                              <3>         
   198                              <3>     .done:
   199                              <3>         set_ret_param rcx,6
   224 00000884 48894D38            <4>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   200                              <3>         epilog
   212                              <4>  popallq
   263 00000888 415F                <5>  pop r15
   264 0000088A 415E                <5>  pop r14
   265 0000088C 415D                <5>  pop r13
   266 0000088E 415C                <5>  pop r12
   267 00000890 415B                <5>  pop r11
   268 00000892 415A                <5>  pop r10
   269 00000894 4159                <5>  pop r9
   270 00000896 4158                <5>  pop r8
   271 00000898 5F                  <5>  pop rdi
   272 00000899 5E                  <5>  pop rsi
   273 0000089A 5A                  <5>  pop rdx
   274 0000089B 59                  <5>  pop rcx
   275 0000089C 5B                  <5>  pop rbx
   276 0000089D 58                  <5>  pop rax
   213                              <4> 
   214 0000089E 4889EC              <4>  mov rsp, rbp
   215 000008A1 5D                  <4>  pop rbp
   216 000008A2 C3                  <4>  ret
   201                              <3> 
   202                              <3> draw_rect:; Input: x1,y1,x2,y2,color
   203                              <3>     prolog 2;
   192 000008A3 55                  <4>  push rbp
   193 000008A4 4889E5              <4>  mov rbp, rsp
   194                              <4> 
   195                              <4> 
   196 000008A7 488945F8            <4>  mov [rbp-8],rax
   197 000008AB B802000000          <4>  mov rax, %1
   198 000008B0 4883C00F            <4>  add rax, 15
   199 000008B4 4883E0F0            <4>  and rax, ~15
   200 000008B8 4829C4              <4>  sub rsp, rax
   201 000008BB 488B45F8            <4>  mov rax,[rbp-8]
   202                              <4> 
   203                              <4>  pushallq
   246 000008BF 50                  <5>  push rax
   247 000008C0 53                  <5>  push rbx
   248 000008C1 51                  <5>  push rcx
   249 000008C2 52                  <5>  push rdx
   250 000008C3 56                  <5>  push rsi
   251 000008C4 57                  <5>  push rdi
   252 000008C5 4150                <5>  push r8
   253 000008C7 4151                <5>  push r9
   254 000008C9 4152                <5>  push r10
   255 000008CB 4153                <5>  push r11
   256 000008CD 4154                <5>  push r12
   257 000008CF 4155                <5>  push r13
   258 000008D1 4156                <5>  push r14
   259 000008D3 4157                <5>  push r15
   204                              <4> 
   205                              <4> 
   206                              <4> 
   207                              <4> 
   208                              <4> 
   204                              <3>     get_param rdi, 1    ; x1
   220 000008D5 488B7D10            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   205                              <3>     get_param rsi, 2    ; y1
   220 000008D9 488B7518            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   206                              <3>     get_param rdx, 3    ; x2
   220 000008DD 488B5520            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   207                              <3>     get_param rcx, 4    ; y2
   220 000008E1 488B4D28            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   208                              <3>     get_param r8,  5    ; color
   220 000008E5 4C8B4530            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   209                              <3>     ; jmp $
   210                              <3>     .line1:
   211                              <3>         prepare_call 5,1
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 000008E9 4883EC30            <4>  sub rsp, total_space
   212 000008ED 48C7442420FFFFFF00  <3>         mov qword [rsp+32], 0x00FFFFFF
   213 000008F6 4889742418          <3>         mov qword [rsp+24], rsi
   214 000008FB 4889542410          <3>         mov qword [rsp+16], rdx
   215                              <3> 
   216 00000900 4889742408          <3>         mov qword [rsp+8], rsi
   217 00000905 48893C24            <3>         mov qword [rsp], rdi
   218 00000909 E831FEFFFF          <3>         call draw_line
   219                              <3>         cleanup_call 5,1
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 0000090E 4883C430            <4>  add rsp, total_space
   220 00000912 488B4424F8          <3>         mov rax, [rsp-8]
   221                              <3>     .line2:
   222                              <3>         prepare_call 5,1
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00000917 4883EC30            <4>  sub rsp, total_space
   223 0000091B 48C7442420FFFFFF00  <3>         mov qword [rsp+32], 0x00FFFFFF
   224 00000924 48894C2418          <3>         mov qword [rsp+24], rcx
   225 00000929 4889542410          <3>         mov qword [rsp+16], rdx
   226                              <3> 
   227 0000092E 4889742408          <3>         mov qword [rsp+8], rsi
   228 00000933 48891424            <3>         mov qword [rsp], rdx
   229 00000937 E803FEFFFF          <3>         call draw_line
   230                              <3>         cleanup_call 5,1
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 0000093C 4883C430            <4>  add rsp, total_space
   231 00000940 488B4424F8          <3>         mov rax, [rsp-8]
   232                              <3>     .line3:
   233                              <3>         prepare_call 5,1
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00000945 4883EC30            <4>  sub rsp, total_space
   234 00000949 48C7442420FFFFFF00  <3>         mov qword [rsp+32], 0x00FFFFFF
   235 00000952 48894C2418          <3>         mov qword [rsp+24], rcx
   236 00000957 48897C2410          <3>         mov qword [rsp+16], rdi
   237                              <3> 
   238 0000095C 48894C2408          <3>         mov qword [rsp+8], rcx
   239 00000961 48891424            <3>         mov qword [rsp], rdx
   240 00000965 E8D5FDFFFF          <3>         call draw_line
   241                              <3>         cleanup_call 5,1
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 0000096A 4883C430            <4>  add rsp, total_space
   242 0000096E 488B4424F8          <3>         mov rax, [rsp-8]
   243                              <3>     .line4:
   244                              <3>         prepare_call 5,1
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00000973 4883EC30            <4>  sub rsp, total_space
   245 00000977 48C7442420FFFFFF00  <3>         mov qword [rsp+32], 0x00FFFFFF
   246 00000980 4889742418          <3>         mov qword [rsp+24], rsi
   247 00000985 48897C2410          <3>         mov qword [rsp+16], rdi
   248                              <3> 
   249 0000098A 48894C2408          <3>         mov qword [rsp+8], rcx
   250 0000098F 48893C24            <3>         mov qword [rsp], rdi
   251 00000993 E8A7FDFFFF          <3>         call draw_line
   252                              <3>         cleanup_call 5,1
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 00000998 4883C430            <4>  add rsp, total_space
   253 0000099C 488B4424F8          <3>         mov rax, [rsp-8]
   254                              <3>     .done:
   255                              <3>         set_ret_param rcx,6
   224 000009A1 48894D38            <4>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   256                              <3>         epilog
   212                              <4>  popallq
   263 000009A5 415F                <5>  pop r15
   264 000009A7 415E                <5>  pop r14
   265 000009A9 415D                <5>  pop r13
   266 000009AB 415C                <5>  pop r12
   267 000009AD 415B                <5>  pop r11
   268 000009AF 415A                <5>  pop r10
   269 000009B1 4159                <5>  pop r9
   270 000009B3 4158                <5>  pop r8
   271 000009B5 5F                  <5>  pop rdi
   272 000009B6 5E                  <5>  pop rsi
   273 000009B7 5A                  <5>  pop rdx
   274 000009B8 59                  <5>  pop rcx
   275 000009B9 5B                  <5>  pop rbx
   276 000009BA 58                  <5>  pop rax
   213                              <4> 
   214 000009BB 4889EC              <4>  mov rsp, rbp
   215 000009BE 5D                  <4>  pop rbp
   216 000009BF C3                  <4>  ret
   257                              <3> 
   258                              <3> draw_screen:;Input:color
   259                              <3>     prolog 2;
   192 000009C0 55                  <4>  push rbp
   193 000009C1 4889E5              <4>  mov rbp, rsp
   194                              <4> 
   195                              <4> 
   196 000009C4 488945F8            <4>  mov [rbp-8],rax
   197 000009C8 B802000000          <4>  mov rax, %1
   198 000009CD 4883C00F            <4>  add rax, 15
   199 000009D1 4883E0F0            <4>  and rax, ~15
   200 000009D5 4829C4              <4>  sub rsp, rax
   201 000009D8 488B45F8            <4>  mov rax,[rbp-8]
   202                              <4> 
   203                              <4>  pushallq
   246 000009DC 50                  <5>  push rax
   247 000009DD 53                  <5>  push rbx
   248 000009DE 51                  <5>  push rcx
   249 000009DF 52                  <5>  push rdx
   250 000009E0 56                  <5>  push rsi
   251 000009E1 57                  <5>  push rdi
   252 000009E2 4150                <5>  push r8
   253 000009E4 4151                <5>  push r9
   254 000009E6 4152                <5>  push r10
   255 000009E8 4153                <5>  push r11
   256 000009EA 4154                <5>  push r12
   257 000009EC 4155                <5>  push r13
   258 000009EE 4156                <5>  push r14
   259 000009F0 4157                <5>  push r15
   204                              <4> 
   205                              <4> 
   206                              <4> 
   207                              <4> 
   208                              <4> 
   260                              <3> 
   261                              <3>     get_param rdi, 1   ; x
   220 000009F2 488B7D10            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   262                              <3> 
   263 000009F6 488D1D04FCFFFF      <3>     lea rbx, [rel video_info_ptr] ; Load video info structure address
   264                              <3>     ; Calculate pixel offset
   265 000009FD B800000000          <3>     mov rax,0
   266 00000A02 480FB703            <3>     movzx rax, word [rbx + video_info.xpixel] ; Screen width
   267                              <3> 
   268 00000A06 B900000000          <3>     mov rcx,0
   269 00000A0B 480FB74B02          <3>     movzx rcx, word [rbx + video_info.ypixel] ; Screen height
   270                              <3> 
   271 00000A10 48F7E1              <3>     mul rcx
   272                              <3> 
   273 00000A13 4889C1              <3>     mov rcx,rax
   274 00000A16 480FB65304          <3>     movzx rdx, byte [rbx + video_info.byte_per_pixel] ; Bytes per pixel
   275 00000A1B 48F7E2              <3>     mul rdx                          ; Offset = (y * width + x) * bytes_per_pixel
   276                              <3> 
   277 00000A1E 488B5B05            <3>     mov rbx, qword [rbx + video_info.video_framebuffer] ; Framebuffer address
   278 00000A22 4801C3              <3>     add rbx,rax
   279                              <3>     .write_color:
   280                              <3>         ; Write color to framebuffer
   281                              <3>         
   282 00000A25 893B                <3>         mov dword [rbx], edi                        ; Write color (assumes 32-bit color)
   283 00000A27 4883EB04            <3>         sub rbx,4                          ; rbx = framebuffer + offset
   284 00000A2B E2F8                <3>         loop .write_color
   285                              <3> 
   286                              <3>         ; jmp $
   287                              <3>     set_ret_param rax,2
   224 00000A2D 48894518            <4>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   288                              <3> 
   289                              <3>     epilog
   212                              <4>  popallq
   263 00000A31 415F                <5>  pop r15
   264 00000A33 415E                <5>  pop r14
   265 00000A35 415D                <5>  pop r13
   266 00000A37 415C                <5>  pop r12
   267 00000A39 415B                <5>  pop r11
   268 00000A3B 415A                <5>  pop r10
   269 00000A3D 4159                <5>  pop r9
   270 00000A3F 4158                <5>  pop r8
   271 00000A41 5F                  <5>  pop rdi
   272 00000A42 5E                  <5>  pop rsi
   273 00000A43 5A                  <5>  pop rdx
   274 00000A44 59                  <5>  pop rcx
   275 00000A45 5B                  <5>  pop rbx
   276 00000A46 58                  <5>  pop rax
   213                              <4> 
   214 00000A47 4889EC              <4>  mov rsp, rbp
   215 00000A4A 5D                  <4>  pop rbp
   216 00000A4B C3                  <4>  ret
   290                              <3> 
   291                              <3> 
   292                              <3> draw_triangle: ; Input: x1, y1, x2, y2, x3, y3, color
   293                              <3>     prolog 2;
   192 00000A4C 55                  <4>  push rbp
   193 00000A4D 4889E5              <4>  mov rbp, rsp
   194                              <4> 
   195                              <4> 
   196 00000A50 488945F8            <4>  mov [rbp-8],rax
   197 00000A54 B802000000          <4>  mov rax, %1
   198 00000A59 4883C00F            <4>  add rax, 15
   199 00000A5D 4883E0F0            <4>  and rax, ~15
   200 00000A61 4829C4              <4>  sub rsp, rax
   201 00000A64 488B45F8            <4>  mov rax,[rbp-8]
   202                              <4> 
   203                              <4>  pushallq
   246 00000A68 50                  <5>  push rax
   247 00000A69 53                  <5>  push rbx
   248 00000A6A 51                  <5>  push rcx
   249 00000A6B 52                  <5>  push rdx
   250 00000A6C 56                  <5>  push rsi
   251 00000A6D 57                  <5>  push rdi
   252 00000A6E 4150                <5>  push r8
   253 00000A70 4151                <5>  push r9
   254 00000A72 4152                <5>  push r10
   255 00000A74 4153                <5>  push r11
   256 00000A76 4154                <5>  push r12
   257 00000A78 4155                <5>  push r13
   258 00000A7A 4156                <5>  push r14
   259 00000A7C 4157                <5>  push r15
   204                              <4> 
   205                              <4> 
   206                              <4> 
   207                              <4> 
   208                              <4> 
   294                              <3>     get_param rdi, 1    ; x1
   220 00000A7E 488B7D10            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   295                              <3>     get_param rsi, 2    ; y1
   220 00000A82 488B7518            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   296                              <3>     get_param rdx, 3    ; x2
   220 00000A86 488B5520            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   297                              <3>     get_param rcx, 4    ; y2
   220 00000A8A 488B4D28            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   298                              <3>     get_param r8,  5    ; x3
   220 00000A8E 4C8B4530            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   299                              <3>     get_param r9,  6    ; y3
   220 00000A92 4C8B4D38            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   300                              <3>     get_param r10, 7    ; color
   220 00000A96 4C8B5540            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   301                              <3> 
   302                              <3>     ; Draw line from (x1, y1) to (x2, y2)
   303                              <3>     prepare_call 5, 1
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00000A9A 4883EC30            <4>  sub rsp, total_space
   304 00000A9E 4C89542420          <3>     mov qword [rsp+32], r10 ; color
   305 00000AA3 48894C2418          <3>     mov qword [rsp+24], rcx ; y2
   306 00000AA8 4889542410          <3>     mov qword [rsp+16], rdx ; x2
   307 00000AAD 4889742408          <3>     mov qword [rsp+8], rsi  ; y1
   308 00000AB2 48893C24            <3>     mov qword [rsp], rdi    ; x1
   309 00000AB6 E884FCFFFF          <3>     call draw_line
   310                              <3>     cleanup_call 5, 1
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 00000ABB 4883C430            <4>  add rsp, total_space
   311                              <3> 
   312                              <3>     ; Draw line from (x2, y2) to (x3, y3)
   313                              <3>     prepare_call 5, 1
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00000ABF 4883EC30            <4>  sub rsp, total_space
   314 00000AC3 4C89542420          <3>     mov qword [rsp+32], r10 ; color
   315 00000AC8 4C894C2418          <3>     mov qword [rsp+24], r9  ; y3
   316 00000ACD 4C89442410          <3>     mov qword [rsp+16], r8  ; x3
   317 00000AD2 48894C2408          <3>     mov qword [rsp+8], rcx  ; y2
   318 00000AD7 48891424            <3>     mov qword [rsp], rdx    ; x2
   319 00000ADB E85FFCFFFF          <3>     call draw_line
   320                              <3>     cleanup_call 5, 1
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 00000AE0 4883C430            <4>  add rsp, total_space
   321                              <3> 
   322                              <3>     ; Draw line from (x3, y3) to (x1, y1)
   323                              <3>     prepare_call 5, 1
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00000AE4 4883EC30            <4>  sub rsp, total_space
   324 00000AE8 4C89542420          <3>     mov qword [rsp+32], r10 ; color
   325 00000AED 4889742418          <3>     mov qword [rsp+24], rsi ; y1
   326 00000AF2 48897C2410          <3>     mov qword [rsp+16], rdi ; x1
   327 00000AF7 4C894C2408          <3>     mov qword [rsp+8], r9   ; y3
   328 00000AFC 4C890424            <3>     mov qword [rsp], r8     ; x3
   329 00000B00 E83AFCFFFF          <3>     call draw_line
   330                              <3>     cleanup_call 5, 1
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 00000B05 4883C430            <4>  add rsp, total_space
   331                              <3> 
   332                              <3>     set_ret_param rax, 8
   224 00000B09 48894548            <4>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   333                              <3>     epilog
   212                              <4>  popallq
   263 00000B0D 415F                <5>  pop r15
   264 00000B0F 415E                <5>  pop r14
   265 00000B11 415D                <5>  pop r13
   266 00000B13 415C                <5>  pop r12
   267 00000B15 415B                <5>  pop r11
   268 00000B17 415A                <5>  pop r10
   269 00000B19 4159                <5>  pop r9
   270 00000B1B 4158                <5>  pop r8
   271 00000B1D 5F                  <5>  pop rdi
   272 00000B1E 5E                  <5>  pop rsi
   273 00000B1F 5A                  <5>  pop rdx
   274 00000B20 59                  <5>  pop rcx
   275 00000B21 5B                  <5>  pop rbx
   276 00000B22 58                  <5>  pop rax
   213                              <4> 
   214 00000B23 4889EC              <4>  mov rsp, rbp
   215 00000B26 5D                  <4>  pop rbp
   216 00000B27 C3                  <4>  ret
   334                              <3> 
   335                              <3> draw_circle: ; Input: x_center, y_center, radius, color
   336                              <3>     prolog 2;
   192 00000B28 55                  <4>  push rbp
   193 00000B29 4889E5              <4>  mov rbp, rsp
   194                              <4> 
   195                              <4> 
   196 00000B2C 488945F8            <4>  mov [rbp-8],rax
   197 00000B30 B802000000          <4>  mov rax, %1
   198 00000B35 4883C00F            <4>  add rax, 15
   199 00000B39 4883E0F0            <4>  and rax, ~15
   200 00000B3D 4829C4              <4>  sub rsp, rax
   201 00000B40 488B45F8            <4>  mov rax,[rbp-8]
   202                              <4> 
   203                              <4>  pushallq
   246 00000B44 50                  <5>  push rax
   247 00000B45 53                  <5>  push rbx
   248 00000B46 51                  <5>  push rcx
   249 00000B47 52                  <5>  push rdx
   250 00000B48 56                  <5>  push rsi
   251 00000B49 57                  <5>  push rdi
   252 00000B4A 4150                <5>  push r8
   253 00000B4C 4151                <5>  push r9
   254 00000B4E 4152                <5>  push r10
   255 00000B50 4153                <5>  push r11
   256 00000B52 4154                <5>  push r12
   257 00000B54 4155                <5>  push r13
   258 00000B56 4156                <5>  push r14
   259 00000B58 4157                <5>  push r15
   204                              <4> 
   205                              <4> 
   206                              <4> 
   207                              <4> 
   208                              <4> 
   337                              <3>     get_param rdi, 1    ; x_center
   220 00000B5A 488B7D10            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   338                              <3>     get_param rsi, 2    ; y_center
   220 00000B5E 488B7518            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   339                              <3>     get_param rdx, 3    ; radius
   220 00000B62 488B5520            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   340                              <3>     get_param rcx, 4    ; color
   220 00000B66 488B4D28            <4>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   341                              <3> 
   342                              <3>     ; Initialize variables
   343 00000B6A 41B800000000        <3>     mov r8, 0           ; x = 0
   344 00000B70 4989D1              <3>     mov r9, rdx         ; y = radius
   345 00000B73 41BA03000000        <3>     mov r10, 3          ; decision = 1 - radius
   346 00000B79 4889D0              <3>     mov rax, rdx         ; r = radius
   347 00000B7C BB02000000          <3>     mov rbx,2
   348 00000B81 48F7E3              <3>     mul rbx
   349 00000B84 4929C2              <3>     sub r10,rax
   350                              <3>     ; d = 3 - 2 * r;
   351                              <3> 
   352                              <3>     .circle_loop:
   353                              <3>         ; Draw the 8 symmetric points of the circle
   354                              <3>         prepare_call 3, 1
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00000B87 4883EC20            <4>  sub rsp, total_space
   355 00000B8B 48894C2410          <3>         mov qword [rsp+16], rcx
   356 00000B90 4889742408          <3>         mov qword [rsp+8], rsi
   357 00000B95 48893C24            <3>         mov qword [rsp], rdi
   358 00000B99 4C010424            <3>         add qword [rsp], r8
   359 00000B9D 4C014C2408          <3>         add qword [rsp+8], r9
   360 00000BA2 E811FBFFFF          <3>         call draw_pixel
   361                              <3>         cleanup_call 3, 1
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 00000BA7 4883C420            <4>  add rsp, total_space
   362                              <3> 
   363                              <3>         prepare_call 3, 1
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00000BAB 4883EC20            <4>  sub rsp, total_space
   364 00000BAF 48894C2410          <3>         mov qword [rsp+16], rcx
   365 00000BB4 4889742408          <3>         mov qword [rsp+8], rsi
   366 00000BB9 48893C24            <3>         mov qword [rsp], rdi
   367 00000BBD 4C290424            <3>         sub qword [rsp], r8
   368 00000BC1 4C014C2408          <3>         add qword [rsp+8], r9
   369 00000BC6 E8EDFAFFFF          <3>         call draw_pixel
   370                              <3>         cleanup_call 3, 1
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 00000BCB 4883C420            <4>  add rsp, total_space
   371                              <3> 
   372                              <3>         prepare_call 3, 1
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00000BCF 4883EC20            <4>  sub rsp, total_space
   373 00000BD3 48894C2410          <3>         mov qword [rsp+16], rcx
   374 00000BD8 4889742408          <3>         mov qword [rsp+8], rsi
   375 00000BDD 48893C24            <3>         mov qword [rsp], rdi
   376 00000BE1 4C010424            <3>         add qword [rsp], r8
   377 00000BE5 4C294C2408          <3>         sub qword [rsp+8], r9
   378 00000BEA E8C9FAFFFF          <3>         call draw_pixel
   379                              <3>         cleanup_call 3, 1
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 00000BEF 4883C420            <4>  add rsp, total_space
   380                              <3> 
   381                              <3>         prepare_call 3, 1
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00000BF3 4883EC20            <4>  sub rsp, total_space
   382 00000BF7 48894C2410          <3>         mov qword [rsp+16], rcx
   383 00000BFC 4889742408          <3>         mov qword [rsp+8], rsi
   384 00000C01 48893C24            <3>         mov qword [rsp], rdi
   385 00000C05 4C290424            <3>         sub qword [rsp], r8
   386 00000C09 4C294C2408          <3>         sub qword [rsp+8], r9
   387 00000C0E E8A5FAFFFF          <3>         call draw_pixel
   388                              <3>         cleanup_call 3, 1
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 00000C13 4883C420            <4>  add rsp, total_space
   389                              <3> 
   390                              <3>         prepare_call 3, 1
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00000C17 4883EC20            <4>  sub rsp, total_space
   391 00000C1B 48894C2410          <3>         mov qword [rsp+16], rcx
   392 00000C20 4889742408          <3>         mov qword [rsp+8], rsi
   393 00000C25 48893C24            <3>         mov qword [rsp], rdi
   394 00000C29 4C010C24            <3>         add qword [rsp], r9
   395 00000C2D 4C01442408          <3>         add qword [rsp+8], r8
   396 00000C32 E881FAFFFF          <3>         call draw_pixel
   397                              <3>         cleanup_call 3, 1
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 00000C37 4883C420            <4>  add rsp, total_space
   398                              <3> 
   399                              <3>         prepare_call 3, 1
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00000C3B 4883EC20            <4>  sub rsp, total_space
   400 00000C3F 48894C2410          <3>         mov qword [rsp+16], rcx
   401 00000C44 4889742408          <3>         mov qword [rsp+8], rsi
   402 00000C49 48893C24            <3>         mov qword [rsp], rdi
   403 00000C4D 4C290C24            <3>         sub qword [rsp], r9
   404 00000C51 4C01442408          <3>         add qword [rsp+8], r8
   405 00000C56 E85DFAFFFF          <3>         call draw_pixel
   406                              <3>         cleanup_call 3, 1
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 00000C5B 4883C420            <4>  add rsp, total_space
   407                              <3> 
   408                              <3>         prepare_call 3, 1
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00000C5F 4883EC20            <4>  sub rsp, total_space
   409 00000C63 48894C2410          <3>         mov qword [rsp+16], rcx
   410 00000C68 4889742408          <3>         mov qword [rsp+8], rsi
   411 00000C6D 48893C24            <3>         mov qword [rsp], rdi
   412 00000C71 4C010C24            <3>         add qword [rsp], r9
   413 00000C75 4C29442408          <3>         sub qword [rsp+8], r8
   414 00000C7A E839FAFFFF          <3>         call draw_pixel
   415                              <3>         cleanup_call 3, 1
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 00000C7F 4883C420            <4>  add rsp, total_space
   416                              <3> 
   417                              <3>         prepare_call 3, 1
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00000C83 4883EC20            <4>  sub rsp, total_space
   418 00000C87 48894C2410          <3>         mov qword [rsp+16], rcx
   419 00000C8C 4889742408          <3>         mov qword [rsp+8], rsi
   420 00000C91 48893C24            <3>         mov qword [rsp], rdi
   421 00000C95 4C290C24            <3>         sub qword [rsp], r9
   422 00000C99 4C29442408          <3>         sub qword [rsp+8], r8
   423 00000C9E E815FAFFFF          <3>         call draw_pixel
   424                              <3>         cleanup_call 3, 1
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 00000CA3 4883C420            <4>  add rsp, total_space
   425                              <3> 
   426                              <3>         ; Update decision parameter and coordinates
   427                              <3> 
   428                              <3> 
   429                              <3>         ;     if (d < 0) {
   430                              <3>         ;         d = d + 4 * x + 6;
   431                              <3>         ;     } else {
   432                              <3>         ;         d = d + 4 * (x - y) + 10;
   433                              <3>         ;         y --;
   434                              <3>         ;     }
   435                              <3>         ;     x ++;
   436                              <3>         ; }
   437                              <3>         ; r10
   438 00000CA7 4983FA00            <3>         cmp r10, 0
   439 00000CAB 7C1B                <3>         jl .update_y
   440 00000CAD 4C89C0              <3>         mov rax, r8
   441 00000CB0 4C29C8              <3>         sub rax, r9
   442                              <3>         
   443 00000CB3 BB04000000          <3>         mov rbx,4
   444 00000CB8 48F7E3              <3>         mul rbx
   445 00000CBB 4883C00A            <3>         add rax,10
   446 00000CBF 4901C2              <3>         add r10, rax         ; d = d + 4 * (x - y) + 10;
   447                              <3> 
   448 00000CC2 4983E901            <3>         sub r9, 1           ; y--
   449 00000CC6 EB12                <3>         jmp .update_x
   450                              <3>         .update_y:
   451 00000CC8 4C89C0              <3>             mov rax, r8
   452                              <3> 
   453 00000CCB BB04000000          <3>             mov rbx,4
   454 00000CD0 48F7E3              <3>             mul rbx
   455                              <3> 
   456 00000CD3 4883C006            <3>             add rax,6
   457 00000CD7 4901C2              <3>             add r10, rax         ;d = d + 4 * x + 6;
   458                              <3>         .update_x:
   459 00000CDA 4983C001            <3>             add r8, 1           ; x++
   460 00000CDE 4D39C8              <3>             cmp r8, r9
   461 00000CE1 0F8EA0FEFFFF        <3>             jle .circle_loop
   462                              <3> 
   463                              <3>         set_ret_param rax, 5
   224 00000CE7 48894530            <4>  mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   464                              <3>         epilog
   212                              <4>  popallq
   263 00000CEB 415F                <5>  pop r15
   264 00000CED 415E                <5>  pop r14
   265 00000CEF 415D                <5>  pop r13
   266 00000CF1 415C                <5>  pop r12
   267 00000CF3 415B                <5>  pop r11
   268 00000CF5 415A                <5>  pop r10
   269 00000CF7 4159                <5>  pop r9
   270 00000CF9 4158                <5>  pop r8
   271 00000CFB 5F                  <5>  pop rdi
   272 00000CFC 5E                  <5>  pop rsi
   273 00000CFD 5A                  <5>  pop rdx
   274 00000CFE 59                  <5>  pop rcx
   275 00000CFF 5B                  <5>  pop rbx
   276 00000D00 58                  <5>  pop rax
   213                              <4> 
   214 00000D01 4889EC              <4>  mov rsp, rbp
   215 00000D04 5D                  <4>  pop rbp
   216 00000D05 C3                  <4>  ret
   465                              <3> 
   466                              <3> %endif
     6                              <2>     
     7                              <2> [BITS 64]
     8                              <2> 
     9                              <2> %define COLOR_WHITE 	0x00ffffff		;WHITE
    10                              <2> %define COLOR_BLACK 	0x00000000		;BLACK
    11                              <2> %define COLOR_RED	    0x00ff0000		;RED
    12                              <2> %define COLOR_ORANGE	0x00ff8000		;ORANGE
    13                              <2> %define COLOR_YELLOW	0x00ffff00		;YELLOW
    14                              <2> %define COLOR_GREEN	    0x0000ff00		;GREEN
    15                              <2> %define COLOR_BLUE	    0x000000ff		;BLUE
    16                              <2> %define COLOR_INDIGO	0x0000ffff		;INDIGO
    17                              <2> %define COLOR_PURPLE	0x008000ff		;PURPLE
    18                              <2> 
    19                              <2> struc print_info
    20 00000000 ????                <2>     .cursor_xposition:     resw 1
    21 00000002 ????                <2>     .cursor_yposition:     resw 1
    22 00000004 ????                <2>     .cursor_line:          resw 1
    23                              <2> 
    24 00000006 ????                <2>     .print_xposition:      resw 1
    25 00000008 ????                <2>     .print_yposition:      resw 1
    26 0000000A ????                <2>     .print_line:           resw 1
    27 0000000C ????????????????    <2>     .print_address:        resq 1
    28                              <2> 
    29 00000014 ????                <2>     .screen_xmax:          resw 1
    30 00000016 ????                <2>     .screen_ymax:          resw 1
    31                              <2> 
    32 00000018 ????????????????    <2>     .font_base_address:    resq 1
    33 00000020 ????                <2>     .font_size:            resw 1
    34 00000022 ????                <2>     .font_width:           resw 1
    35 00000024 ????                <2>     .font_height:          resw 1
    36                              <2> 
    37 00000026 ????                <2>     .pixel_line_start:     resw 1
    38 00000028 ????                <2>     .pixel_line_height:       resw 1 
    39                              <2> 
    40 0000002A ????????            <2>     .default_color:        resd 1
    41 0000002E ????????            <2>     .current_color:        resd 1
    42                              <2>  endstruc
    43                              <2> print_info_ptr:;
    44                              <2>     istruc print_info
    45 00000D06 0000                <2>         at print_info.cursor_xposition, dw 0
    46 00000D08 0000                <2>         at print_info.cursor_yposition, dw 0
    47 00000D0A 0000                <2>         at print_info.cursor_line, dw 0
    48                              <2> 
    49 00000D0C 0000                <2>         at print_info.print_xposition, dw 0
    50 00000D0E 0000                <2>         at print_info.print_yposition, dw 0
    51 00000D10 0000                <2>         at print_info.print_line, dw 0
    52 00000D12 0000000000000000    <2>         at print_info.print_address, dq 0
    53                              <2> 
    54 00000D1A 0000                <2>         at print_info.screen_xmax, dw 0
    55 00000D1C 0000                <2>         at print_info.screen_ymax, dw 0
    56                              <2> 
    57 00000D1E 0000000000000000    <2>         at print_info.font_base_address, dq 0
    58 00000D26 0000                <2>         at print_info.font_size, dw 0
    59 00000D28 0000                <2>         at print_info.font_width, dw 0
    60 00000D2A 0000                <2>         at print_info.font_height, dw 0
    61                              <2> 
    62 00000D2C 0000                <2>         at print_info.pixel_line_start, dw 0
    63 00000D2E 0000                <2>         at print_info.pixel_line_height, dw 0
    64                              <2> 
    65 00000D30 00000000            <2>         at print_info.default_color, dd 0
    66 00000D34 00000000            <2>         at print_info.current_color, dd 0
    67                              <2>     iend
    68                              <2> 
    69                              <2> printk_init:;init printk
    70                              <2>     prolog 0;
   192 00000D38 55                  <3>  push rbp
   193 00000D39 4889E5              <3>  mov rbp, rsp
   194                              <3> 
   195                              <3> 
   196 00000D3C 488945F8            <3>  mov [rbp-8],rax
   197 00000D40 B800000000          <3>  mov rax, %1
   198 00000D45 4883C00F            <3>  add rax, 15
   199 00000D49 4883E0F0            <3>  and rax, ~15
   200 00000D4D 4829C4              <3>  sub rsp, rax
   201 00000D50 488B45F8            <3>  mov rax,[rbp-8]
   202                              <3> 
   203                              <3>  pushallq
   246 00000D54 50                  <4>  push rax
   247 00000D55 53                  <4>  push rbx
   248 00000D56 51                  <4>  push rcx
   249 00000D57 52                  <4>  push rdx
   250 00000D58 56                  <4>  push rsi
   251 00000D59 57                  <4>  push rdi
   252 00000D5A 4150                <4>  push r8
   253 00000D5C 4151                <4>  push r9
   254 00000D5E 4152                <4>  push r10
   255 00000D60 4153                <4>  push r11
   256 00000D62 4154                <4>  push r12
   257 00000D64 4155                <4>  push r13
   258 00000D66 4156                <4>  push r14
   259 00000D68 4157                <4>  push r15
   204                              <3> 
   205                              <3> 
   206                              <3> 
   207                              <3> 
   208                              <3> 
    71                              <2> 
    72 00000D6A 66C70593FFFFFF0000  <2>     mov word [rel print_info_ptr + print_info.cursor_xposition],0
    73 00000D73 66C7058CFFFFFF0000  <2>     mov word [rel print_info_ptr + print_info.cursor_yposition],0
    74 00000D7C 66C70585FFFFFF0000  <2>     mov word [rel print_info_ptr + print_info.cursor_line],0
    75                              <2> 
    76                              <2> 
    77 00000D85 66C7057EFFFFFF0000  <2>     mov word [rel print_info_ptr + print_info.print_xposition],0
    78 00000D8E 66C70577FFFFFF0000  <2>     mov word [rel print_info_ptr + print_info.print_yposition],0    
    79 00000D97 66C70570FFFFFF0000  <2>     mov word [rel print_info_ptr + print_info.print_line],0
    80 00000DA0 48C70567FFFFFF0000- <2>     mov qword [rel print_info_ptr + print_info.print_address],0
    80 00000DA9 0000                <2>
    81                              <2> 
    82 00000DAB 66C70566FFFFFFF000  <2>     mov word [rel print_info_ptr + print_info.screen_xmax],240
    83 00000DB4 66C7055FFFFFFF3600  <2>     mov word [rel print_info_ptr + print_info.screen_ymax],54    
    84                              <2> 
    85 00000DBD 48BE005210000080FF- <2>     mov rsi,0xFFFF800000105200
    85 00000DC6 FF                  <2>
    86 00000DC7 48893550FFFFFF      <2>     mov qword [rel print_info_ptr + print_info.font_base_address],rsi
    87 00000DCE 66C7054FFFFFFF1000  <2>     mov word [rel print_info_ptr + print_info.font_size],16
    88 00000DD7 66C70548FFFFFF0800  <2>     mov word [rel print_info_ptr + print_info.font_width],8
    89 00000DE0 66C70541FFFFFF1000  <2>     mov word [rel print_info_ptr + print_info.font_height],16
    90                              <2> 
    91 00000DE9 66C7053AFFFFFF0400  <2>     mov word [rel print_info_ptr + print_info.pixel_line_start],4
    92 00000DF2 66C70533FFFFFF1400  <2>     mov word [rel print_info_ptr + print_info.pixel_line_height],20
    93                              <2> 
    94 00000DFB C7052BFFFFFFFFFFFF- <2>     mov dword [rel print_info_ptr + print_info.default_color],COLOR_WHITE
    94 00000E04 00                  <2>
    95 00000E05 C70525FFFFFFFFFFFF- <2>     mov dword [rel print_info_ptr + print_info.current_color],COLOR_WHITE
    95 00000E0E 00                  <2>
    96                              <2> 
    97                              <2>     epilog
   212                              <3>  popallq
   263 00000E0F 415F                <4>  pop r15
   264 00000E11 415E                <4>  pop r14
   265 00000E13 415D                <4>  pop r13
   266 00000E15 415C                <4>  pop r12
   267 00000E17 415B                <4>  pop r11
   268 00000E19 415A                <4>  pop r10
   269 00000E1B 4159                <4>  pop r9
   270 00000E1D 4158                <4>  pop r8
   271 00000E1F 5F                  <4>  pop rdi
   272 00000E20 5E                  <4>  pop rsi
   273 00000E21 5A                  <4>  pop rdx
   274 00000E22 59                  <4>  pop rcx
   275 00000E23 5B                  <4>  pop rbx
   276 00000E24 58                  <4>  pop rax
   213                              <3> 
   214 00000E25 4889EC              <3>  mov rsp, rbp
   215 00000E28 5D                  <3>  pop rbp
   216 00000E29 C3                  <3>  ret
    98                              <2> 
    99                              <2> printk:; input: format string,pointer to arguments
   100                              <2> 
   101                              <2>     prolog 2
   192 00000E2A 55                  <3>  push rbp
   193 00000E2B 4889E5              <3>  mov rbp, rsp
   194                              <3> 
   195                              <3> 
   196 00000E2E 488945F8            <3>  mov [rbp-8],rax
   197 00000E32 B802000000          <3>  mov rax, %1
   198 00000E37 4883C00F            <3>  add rax, 15
   199 00000E3B 4883E0F0            <3>  and rax, ~15
   200 00000E3F 4829C4              <3>  sub rsp, rax
   201 00000E42 488B45F8            <3>  mov rax,[rbp-8]
   202                              <3> 
   203                              <3>  pushallq
   246 00000E46 50                  <4>  push rax
   247 00000E47 53                  <4>  push rbx
   248 00000E48 51                  <4>  push rcx
   249 00000E49 52                  <4>  push rdx
   250 00000E4A 56                  <4>  push rsi
   251 00000E4B 57                  <4>  push rdi
   252 00000E4C 4150                <4>  push r8
   253 00000E4E 4151                <4>  push r9
   254 00000E50 4152                <4>  push r10
   255 00000E52 4153                <4>  push r11
   256 00000E54 4154                <4>  push r12
   257 00000E56 4155                <4>  push r13
   258 00000E58 4156                <4>  push r14
   259 00000E5A 4157                <4>  push r15
   204                              <3> 
   205                              <3> 
   206                              <3> 
   207                              <3> 
   208                              <3> 
   102                              <2>     get_param rsi, 1   ; rsi = format string
   220 00000E5C 488B7510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   103                              <2>     get_param rdx, 2   ; rdx = pointer to arguments
   220 00000E60 488B5518            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   104                              <2> 
   105 00000E64 B800000000          <2>     mov rax,0
   106                              <2> 
   107                              <2>     .next_char:
   108 00000E69 AC                  <2>         lodsb                  ; Load next character from format string into AL
   109 00000E6A 84C0                <2>         test al, al            ; Check if end of string
   110 00000E6C 0F84BE000000        <2>         jz .done
   111                              <2> 
   112 00000E72 3C5C                <2>         cmp al, '\'           ; Check for escape character
   113 00000E74 0F8499000000        <2>         je .escape_character
   114                              <2> 
   115 00000E7A 3C25                <2>         cmp al, '%'            ; Check for format specifier
   116 00000E7C 750F                <2>         jne .print_char
   117 00000E7E AC                  <2>         lodsb                  ; Load format specifier
   118 00000E7F 3C64                <2>         cmp al, 'd'            ; Check for %d
   119 00000E81 742A                <2>         je .print_decimal
   120 00000E83 3C78                <2>         cmp al, 'x'            ; Check for %x
   121 00000E85 7446                <2>         je .print_hex
   122 00000E87 3C73                <2>         cmp al, 's'            ; Check for %s
   123 00000E89 7465                <2>         je .print_string
   124 00000E8B EBDC                <2>         jmp .next_char         ; Skip unknown specifier
   125                              <2> 
   126                              <2>     .print_char:
   127                              <2>         function print_char,1,rax
   120                              <3>  %assign param_count %0 - 2
   121                              <3> 
   122                              <3>  %if param_count < 0
   123                              <3>  %assign param_count 0
   124                              <3>  %endif
   125                              <3>  %if param_count < 1
   126                              <3>  %assign ret_param_count 0
   127                              <3>  %else
   128                              <3>  %assign ret_param_count %2
   129                              <3>  %endif
   130                              <3> 
   131                              <3> 
   132                              <3>  prepare_call param_count, ret_param_count
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00000E8D 4883EC10            <4>  sub rsp, total_space
   133                              <3> 
   134                              <3> 
   135                              <3>  %if param_count > 0
   136                              <3>  %assign i 0
   137 00000E91 48894424F8          <3>  mov [rsp-8], rax
   138                              <3>  %rep param_count
   139                              <3>  %rotate 1
   140                              <3>  mov rax, %2
   141                              <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   143                              <3>  %endrep
   139                              <4>  %rotate 1
   140 00000E96 4889C0              <4>  mov rax, %2
   141 00000E99 48890424            <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   144                              <3>  %rotate 1
   145                              <3>  %rotate 1
   146 00000E9D 488B4424F8          <3>  mov rax,[rsp-8]
   147                              <3>  %endif
   148                              <3> 
   149                              <3> 
   150 00000EA2 E8A4000000          <3>  call %1
   151                              <3> 
   152                              <3> 
   153                              <3>  cleanup_call param_count, ret_param_count
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 00000EA7 4883C410            <4>  add rsp, total_space
   154                              <3> 
   128 00000EAB EBBC                <2>         jmp .next_char
   129                              <2> 
   130                              <2>     .print_decimal:
   131                              <2>         function print_decimal,1,rdx
   120                              <3>  %assign param_count %0 - 2
   121                              <3> 
   122                              <3>  %if param_count < 0
   123                              <3>  %assign param_count 0
   124                              <3>  %endif
   125                              <3>  %if param_count < 1
   126                              <3>  %assign ret_param_count 0
   127                              <3>  %else
   128                              <3>  %assign ret_param_count %2
   129                              <3>  %endif
   130                              <3> 
   131                              <3> 
   132                              <3>  prepare_call param_count, ret_param_count
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00000EAD 4883EC10            <4>  sub rsp, total_space
   133                              <3> 
   134                              <3> 
   135                              <3>  %if param_count > 0
   136                              <3>  %assign i 0
   137 00000EB1 48894424F8          <3>  mov [rsp-8], rax
   138                              <3>  %rep param_count
   139                              <3>  %rotate 1
   140                              <3>  mov rax, %2
   141                              <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   143                              <3>  %endrep
   139                              <4>  %rotate 1
   140 00000EB6 4889D0              <4>  mov rax, %2
   141 00000EB9 48890424            <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   144                              <3>  %rotate 1
   145                              <3>  %rotate 1
   146 00000EBD 488B4424F8          <3>  mov rax,[rsp-8]
   147                              <3>  %endif
   148                              <3> 
   149                              <3> 
   150 00000EC2 E8AF010000          <3>  call %1
   151                              <3> 
   152                              <3> 
   153                              <3>  cleanup_call param_count, ret_param_count
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 00000EC7 4883C410            <4>  add rsp, total_space
   154                              <3> 
   132 00000ECB EB9C                <2>         jmp .next_char
   133                              <2> 
   134                              <2>     .print_hex:
   135                              <2>         function print_hex,1,rdx
   120                              <3>  %assign param_count %0 - 2
   121                              <3> 
   122                              <3>  %if param_count < 0
   123                              <3>  %assign param_count 0
   124                              <3>  %endif
   125                              <3>  %if param_count < 1
   126                              <3>  %assign ret_param_count 0
   127                              <3>  %else
   128                              <3>  %assign ret_param_count %2
   129                              <3>  %endif
   130                              <3> 
   131                              <3> 
   132                              <3>  prepare_call param_count, ret_param_count
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00000ECD 4883EC10            <4>  sub rsp, total_space
   133                              <3> 
   134                              <3> 
   135                              <3>  %if param_count > 0
   136                              <3>  %assign i 0
   137 00000ED1 48894424F8          <3>  mov [rsp-8], rax
   138                              <3>  %rep param_count
   139                              <3>  %rotate 1
   140                              <3>  mov rax, %2
   141                              <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   143                              <3>  %endrep
   139                              <4>  %rotate 1
   140 00000ED6 4889D0              <4>  mov rax, %2
   141 00000ED9 48890424            <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   144                              <3>  %rotate 1
   145                              <3>  %rotate 1
   146 00000EDD 488B4424F8          <3>  mov rax,[rsp-8]
   147                              <3>  %endif
   148                              <3> 
   149                              <3> 
   150 00000EE2 E82D020000          <3>  call %1
   151                              <3> 
   152                              <3> 
   153                              <3>  cleanup_call param_count, ret_param_count
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 00000EE7 4883C410            <4>  add rsp, total_space
   154                              <3> 
   136 00000EEB E979FFFFFF          <2>         jmp .next_char
   137                              <2> 
   138                              <2>     .print_string:
   139                              <2> 
   140                              <2>         function print_string,1,rdx
   120                              <3>  %assign param_count %0 - 2
   121                              <3> 
   122                              <3>  %if param_count < 0
   123                              <3>  %assign param_count 0
   124                              <3>  %endif
   125                              <3>  %if param_count < 1
   126                              <3>  %assign ret_param_count 0
   127                              <3>  %else
   128                              <3>  %assign ret_param_count %2
   129                              <3>  %endif
   130                              <3> 
   131                              <3> 
   132                              <3>  prepare_call param_count, ret_param_count
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00000EF0 4883EC10            <4>  sub rsp, total_space
   133                              <3> 
   134                              <3> 
   135                              <3>  %if param_count > 0
   136                              <3>  %assign i 0
   137 00000EF4 48894424F8          <3>  mov [rsp-8], rax
   138                              <3>  %rep param_count
   139                              <3>  %rotate 1
   140                              <3>  mov rax, %2
   141                              <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   143                              <3>  %endrep
   139                              <4>  %rotate 1
   140 00000EF9 4889D0              <4>  mov rax, %2
   141 00000EFC 48890424            <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   144                              <3>  %rotate 1
   145                              <3>  %rotate 1
   146 00000F00 488B4424F8          <3>  mov rax,[rsp-8]
   147                              <3>  %endif
   148                              <3> 
   149                              <3> 
   150 00000F05 E8A5020000          <3>  call %1
   151                              <3> 
   152                              <3> 
   153                              <3>  cleanup_call param_count, ret_param_count
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 00000F0A 4883C410            <4>  add rsp, total_space
   154                              <3> 
   141 00000F0E E956FFFFFF          <2>         jmp .next_char
   142                              <2> 
   143                              <2>     .escape_character:
   144 00000F13 AC                  <2>         lodsb                  ; Load next character from string into AL
   145 00000F14 3C6E                <2>         cmp al, 'n'            ; Check for %d
   146 00000F16 7402                <2>         je .new_line
   147 00000F18 EB11                <2>         jmp .escape_done
   148                              <2>         .new_line:
   149 00000F1A 668305ECFDFFFF01    <2>             add word [rel print_info_ptr + print_info.print_yposition],1
   150 00000F22 66C705E1FDFFFF0000  <2>             mov word [rel print_info_ptr + print_info.print_xposition],0
   151                              <2>         .escape_done:
   152 00000F2B E939FFFFFF          <2>             jmp .next_char           
   153                              <2> 
   154                              <2>     .done:
   155                              <2>         epilog
   212                              <3>  popallq
   263 00000F30 415F                <4>  pop r15
   264 00000F32 415E                <4>  pop r14
   265 00000F34 415D                <4>  pop r13
   266 00000F36 415C                <4>  pop r12
   267 00000F38 415B                <4>  pop r11
   268 00000F3A 415A                <4>  pop r10
   269 00000F3C 4159                <4>  pop r9
   270 00000F3E 4158                <4>  pop r8
   271 00000F40 5F                  <4>  pop rdi
   272 00000F41 5E                  <4>  pop rsi
   273 00000F42 5A                  <4>  pop rdx
   274 00000F43 59                  <4>  pop rcx
   275 00000F44 5B                  <4>  pop rbx
   276 00000F45 58                  <4>  pop rax
   213                              <3> 
   214 00000F46 4889EC              <3>  mov rsp, rbp
   215 00000F49 5D                  <3>  pop rbp
   216 00000F4A C3                  <3>  ret
   156                              <2> 
   157                              <2> print_char:; input:char
   158                              <2>     prolog 2;
   192 00000F4B 55                  <3>  push rbp
   193 00000F4C 4889E5              <3>  mov rbp, rsp
   194                              <3> 
   195                              <3> 
   196 00000F4F 488945F8            <3>  mov [rbp-8],rax
   197 00000F53 B802000000          <3>  mov rax, %1
   198 00000F58 4883C00F            <3>  add rax, 15
   199 00000F5C 4883E0F0            <3>  and rax, ~15
   200 00000F60 4829C4              <3>  sub rsp, rax
   201 00000F63 488B45F8            <3>  mov rax,[rbp-8]
   202                              <3> 
   203                              <3>  pushallq
   246 00000F67 50                  <4>  push rax
   247 00000F68 53                  <4>  push rbx
   248 00000F69 51                  <4>  push rcx
   249 00000F6A 52                  <4>  push rdx
   250 00000F6B 56                  <4>  push rsi
   251 00000F6C 57                  <4>  push rdi
   252 00000F6D 4150                <4>  push r8
   253 00000F6F 4151                <4>  push r9
   254 00000F71 4152                <4>  push r10
   255 00000F73 4153                <4>  push r11
   256 00000F75 4154                <4>  push r12
   257 00000F77 4155                <4>  push r13
   258 00000F79 4156                <4>  push r14
   259 00000F7B 4157                <4>  push r15
   204                              <3> 
   205                              <3> 
   206                              <3> 
   207                              <3> 
   208                              <3> 
   159                              <2> 
   160                              <2>     get_param rsi, 1   ; char
   220 00000F7D 488B7510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   161                              <2> 
   162                              <2> 
   163                              <2> 
   164 00000F81 B800000000          <2>     mov rax, 0
   165 00000F86 668B0581FDFFFF      <2>     mov ax, word [rel print_info_ptr + print_info.print_yposition]
   166                              <2> 
   167 00000F8D BB00000000          <2>     mov rbx,0
   168 00000F92 668B1D68F6FFFF      <2>     mov bx,word [rel video_info_ptr + video_info.xpixel]
   169 00000F99 48F7E3              <2>     mul rbx
   170                              <2> 
   171                              <2> 
   172 00000F9C BB00000000          <2>     mov rbx,0
   173 00000FA1 668B1D86FDFFFF      <2>     mov bx,word [rel print_info_ptr + print_info.pixel_line_height]
   174 00000FA8 48F7E3              <2>     mul rbx
   175                              <2> 
   176 00000FAB 50                  <2>     push rax
   177 00000FAC 4831C0              <2>     xor rax,rax
   178 00000FAF 668B0556FDFFFF      <2>     mov ax,word [rel print_info_ptr + print_info.print_xposition]
   179 00000FB6 BB00000000          <2>     mov rbx,0
   180 00000FBB 668B1D66FDFFFF      <2>     mov bx,word [rel print_info_ptr + print_info.font_width]
   181 00000FC2 48F7E3              <2>     mul rbx
   182                              <2> 
   183                              <2> 
   184 00000FC5 B900000000          <2>     mov rcx,0
   185 00000FCA 59                  <2>     pop rcx
   186 00000FCB 4801C8              <2>     add rax, rcx
   187                              <2> 
   188 00000FCE BB00000000          <2>     mov rbx,0
   189 00000FD3 8A1D2CF6FFFF        <2>     mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   190 00000FD9 48F7E3              <2>     mul rbx
   191                              <2> 
   192 00000FDC 488B3D23F6FFFF      <2>     mov rdi, qword [rel video_info_ptr + video_info.video_framebuffer]
   193 00000FE3 4801C7              <2>     add rdi, rax        ;rdi=屏幕地址
   194                              <2> 
   195                              <2> 
   196 00000FE6 48C1E604            <2>     shl rsi, 4
   197                              <2> 
   198 00000FEA BB00000000          <2>     mov rbx,0
   199 00000FEF 488B1D28FDFFFF      <2>     mov rbx, [rel print_info_ptr + print_info.font_base_address]
   200 00000FF6 4801DE              <2>     add rsi, rbx        ; RSI = 字符数据地址
   201                              <2> 
   202 00000FF9 4831C9              <2>     xor rcx,rcx
   203 00000FFC 668B0D27FDFFFF      <2>     mov cx, word [rel print_info_ptr + print_info.font_height]
   204                              <2> 
   205                              <2>     .next_line:
   206 00001003 57                  <2>         push rdi               ; 保存当前行起始位置
   207                              <2>         
   208                              <2>         ; 处理一行(8像素)
   209 00001004 8A16                <2>         mov dl, [rsi]          ; 获取字模数据
   210 00001006 B608                <2>         mov dh, 8              ; 8位/行
   211                              <2>         .next_pixel:
   212 00001008 4831C0              <2>             xor rax,rax
   213 0000100B 8A05F4F5FFFF        <2>             mov al,byte [rel video_info_ptr + video_info.byte_per_pixel]
   214                              <2> 
   215 00001011 F6C280              <2>             test dl, 0x80       ; 测试最高位
   216 00001014 7413                <2>             jz .skip_pixel
   217                              <2> 
   218                              <2> 
   219 00001016 3C04                <2>             cmp al,4
   220 00001018 7208                <2>             jb .pixel_2byte
   221 0000101A C64702FF            <2>             mov byte [rdi+2], 0xFF ; 绘制像素(白色)
   222 0000101E C6470300            <2>             mov byte [rdi+3], 0x00 ; 绘制像素(白色)
   223                              <2>             .pixel_2byte:
   224 00001022 C607FF              <2>                 mov byte [rdi], 0xFF ; 绘制像素(白色)
   225 00001025 C64701FF            <2>                 mov byte [rdi+1], 0xFF ; 绘制像素(白色)
   226                              <2>             ; jmp $
   227                              <2>         .skip_pixel:
   228 00001029 D0E2                <2>             shl dl, 1           ; 移到下一位
   229 0000102B 4801C7              <2>             add rdi,rax
   230 0000102E FECE                <2>             dec dh
   231 00001030 75D6                <2>             jnz .next_pixel
   232                              <2>         
   233 00001032 5F                  <2>         pop rdi                 ; 恢复行起始位置
   234 00001033 4831C0              <2>         xor rax,rax
   235 00001036 668B05C4F5FFFF      <2>         mov ax,word [rel video_info_ptr + video_info.xpixel]
   236                              <2> 
   237 0000103D BB00000000          <2>         mov rbx,0
   238 00001042 8A1DBDF5FFFF        <2>         mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   239 00001048 48F7E3              <2>         mul rbx
   240                              <2> 
   241 0000104B 4801C7              <2>         add rdi,rax; 移到下一行(320=屏幕宽度)
   242                              <2> 
   243 0000104E 48FFC6              <2>         inc rsi                 ; 下一个字模字节
   244                              <2> 
   245 00001051 E2B0                <2>         loop .next_line
   246                              <2>     
   247 00001053 668305B1FCFFFF01    <2>     add word [rel print_info_ptr + print_info.print_xposition],1
   248                              <2>     epilog
   212                              <3>  popallq
   263 0000105B 415F                <4>  pop r15
   264 0000105D 415E                <4>  pop r14
   265 0000105F 415D                <4>  pop r13
   266 00001061 415C                <4>  pop r12
   267 00001063 415B                <4>  pop r11
   268 00001065 415A                <4>  pop r10
   269 00001067 4159                <4>  pop r9
   270 00001069 4158                <4>  pop r8
   271 0000106B 5F                  <4>  pop rdi
   272 0000106C 5E                  <4>  pop rsi
   273 0000106D 5A                  <4>  pop rdx
   274 0000106E 59                  <4>  pop rcx
   275 0000106F 5B                  <4>  pop rbx
   276 00001070 58                  <4>  pop rax
   213                              <3> 
   214 00001071 4889EC              <3>  mov rsp, rbp
   215 00001074 5D                  <3>  pop rbp
   216 00001075 C3                  <3>  ret
   249                              <2> 
   250                              <2> print_decimal:;input:rsi=decimal number
   251                              <2> 
   252                              <2>     prolog 2;
   192 00001076 55                  <3>  push rbp
   193 00001077 4889E5              <3>  mov rbp, rsp
   194                              <3> 
   195                              <3> 
   196 0000107A 488945F8            <3>  mov [rbp-8],rax
   197 0000107E B802000000          <3>  mov rax, %1
   198 00001083 4883C00F            <3>  add rax, 15
   199 00001087 4883E0F0            <3>  and rax, ~15
   200 0000108B 4829C4              <3>  sub rsp, rax
   201 0000108E 488B45F8            <3>  mov rax,[rbp-8]
   202                              <3> 
   203                              <3>  pushallq
   246 00001092 50                  <4>  push rax
   247 00001093 53                  <4>  push rbx
   248 00001094 51                  <4>  push rcx
   249 00001095 52                  <4>  push rdx
   250 00001096 56                  <4>  push rsi
   251 00001097 57                  <4>  push rdi
   252 00001098 4150                <4>  push r8
   253 0000109A 4151                <4>  push r9
   254 0000109C 4152                <4>  push r10
   255 0000109E 4153                <4>  push r11
   256 000010A0 4154                <4>  push r12
   257 000010A2 4155                <4>  push r13
   258 000010A4 4156                <4>  push r14
   259 000010A6 4157                <4>  push r15
   204                              <3> 
   205                              <3> 
   206                              <3> 
   207                              <3> 
   208                              <3> 
   253                              <2> 
   254                              <2>     get_param rsi, 1   ; dec
   220 000010A8 488B7510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   255                              <2> 
   256                              <2>     ; mov rbx, 'D'
   257                              <2>     ; function print_char,1,rbx    
   258                              <2> 
   259 000010AC 4831C0              <2>     xor rax, rax
   260 000010AF 4831DB              <2>     xor rbx, rbx
   261 000010B2 4831D2              <2>     xor rdx, rdx
   262 000010B5 488B06              <2>     mov rax, [rsi]
   263                              <2> 
   264 000010B8 4831DB              <2>     xor rbx, rbx
   265 000010BB BB0A000000          <2>     mov rbx, 10              ; Base 10
   266 000010C0 4831C9              <2>     xor rcx, rcx             ; Digit counter
   267                              <2> 
   268                              <2>     .convert_loop:
   269 000010C3 4831D2              <2>         xor rdx, rdx
   270 000010C6 48F7F3              <2>         div rbx              ; Divide rax by 10, remainder in rdx
   271 000010C9 52                  <2>         push rdx             ; Save remainder (digit)
   272 000010CA 48FFC1              <2>         inc rcx              ; Increment digit counter
   273 000010CD 4885C0              <2>         test rax, rax
   274 000010D0 75F1                <2>         jnz .convert_loop    ; Repeat until rax == 0
   275                              <2> 
   276                              <2>     .print_digits:
   277 000010D2 5A                  <2>         pop rdx              ; Get digit from stack
   278 000010D3 80C230              <2>         add dl, '0'          ; Convert to ASCII
   279                              <2> 
   280 000010D6 4889D3              <2>         mov rbx, rdx
   281                              <2>         function print_char,1,rbx    
   120                              <3>  %assign param_count %0 - 2
   121                              <3> 
   122                              <3>  %if param_count < 0
   123                              <3>  %assign param_count 0
   124                              <3>  %endif
   125                              <3>  %if param_count < 1
   126                              <3>  %assign ret_param_count 0
   127                              <3>  %else
   128                              <3>  %assign ret_param_count %2
   129                              <3>  %endif
   130                              <3> 
   131                              <3> 
   132                              <3>  prepare_call param_count, ret_param_count
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 000010D9 4883EC10            <4>  sub rsp, total_space
   133                              <3> 
   134                              <3> 
   135                              <3>  %if param_count > 0
   136                              <3>  %assign i 0
   137 000010DD 48894424F8          <3>  mov [rsp-8], rax
   138                              <3>  %rep param_count
   139                              <3>  %rotate 1
   140                              <3>  mov rax, %2
   141                              <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   143                              <3>  %endrep
   139                              <4>  %rotate 1
   140 000010E2 4889D8              <4>  mov rax, %2
   141 000010E5 48890424            <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   144                              <3>  %rotate 1
   145                              <3>  %rotate 1
   146 000010E9 488B4424F8          <3>  mov rax,[rsp-8]
   147                              <3>  %endif
   148                              <3> 
   149                              <3> 
   150 000010EE E858FEFFFF          <3>  call %1
   151                              <3> 
   152                              <3> 
   153                              <3>  cleanup_call param_count, ret_param_count
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 000010F3 4883C410            <4>  add rsp, total_space
   154                              <3> 
   282                              <2> 
   283 000010F7 E2D9                <2>         loop .print_digits
   284                              <2> 
   285                              <2>     epilog
   212                              <3>  popallq
   263 000010F9 415F                <4>  pop r15
   264 000010FB 415E                <4>  pop r14
   265 000010FD 415D                <4>  pop r13
   266 000010FF 415C                <4>  pop r12
   267 00001101 415B                <4>  pop r11
   268 00001103 415A                <4>  pop r10
   269 00001105 4159                <4>  pop r9
   270 00001107 4158                <4>  pop r8
   271 00001109 5F                  <4>  pop rdi
   272 0000110A 5E                  <4>  pop rsi
   273 0000110B 5A                  <4>  pop rdx
   274 0000110C 59                  <4>  pop rcx
   275 0000110D 5B                  <4>  pop rbx
   276 0000110E 58                  <4>  pop rax
   213                              <3> 
   214 0000110F 4889EC              <3>  mov rsp, rbp
   215 00001112 5D                  <3>  pop rbp
   216 00001113 C3                  <3>  ret
   286                              <2> 
   287                              <2> 
   288                              <2> print_hex:;input:rsi=hex number
   289                              <2> 
   290                              <2>     prolog 2;
   192 00001114 55                  <3>  push rbp
   193 00001115 4889E5              <3>  mov rbp, rsp
   194                              <3> 
   195                              <3> 
   196 00001118 488945F8            <3>  mov [rbp-8],rax
   197 0000111C B802000000          <3>  mov rax, %1
   198 00001121 4883C00F            <3>  add rax, 15
   199 00001125 4883E0F0            <3>  and rax, ~15
   200 00001129 4829C4              <3>  sub rsp, rax
   201 0000112C 488B45F8            <3>  mov rax,[rbp-8]
   202                              <3> 
   203                              <3>  pushallq
   246 00001130 50                  <4>  push rax
   247 00001131 53                  <4>  push rbx
   248 00001132 51                  <4>  push rcx
   249 00001133 52                  <4>  push rdx
   250 00001134 56                  <4>  push rsi
   251 00001135 57                  <4>  push rdi
   252 00001136 4150                <4>  push r8
   253 00001138 4151                <4>  push r9
   254 0000113A 4152                <4>  push r10
   255 0000113C 4153                <4>  push r11
   256 0000113E 4154                <4>  push r12
   257 00001140 4155                <4>  push r13
   258 00001142 4156                <4>  push r14
   259 00001144 4157                <4>  push r15
   204                              <3> 
   205                              <3> 
   206                              <3> 
   207                              <3> 
   208                              <3> 
   291                              <2> 
   292                              <2>     get_param rsi, 1   ; dec
   220 00001146 488B7510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   293                              <2> 
   294                              <2>     ; mov rbx, 'X'
   295                              <2>     ; function print_char,1,rbx    
   296                              <2> 
   297 0000114A 4831C0              <2>     xor rax, rax
   298 0000114D 4831DB              <2>     xor rbx, rbx
   299 00001150 4831D2              <2>     xor rdx, rdx
   300 00001153 488B06              <2>     mov rax, [rsi]
   301                              <2> 
   302 00001156 B910000000          <2>     mov rcx, 16              ; Process 16 digits (64-bit number)
   303                              <2>     .convert_loop:
   304 0000115B 48C1C004            <2>         rol rax, 4           ; Rotate left by 4 bits
   305 0000115F 88C2                <2>         mov dl, al           ; Extract lower nibble
   306 00001161 80E20F              <2>         and dl, 0x0F         ; Mask to get a single hex digit
   307 00001164 80FA0A              <2>         cmp dl, 10
   308 00001167 7C05                <2>         jl .digit
   309 00001169 80C257              <2>         add dl, 'a' - 10     ; Convert to 'A'-'F'
   310 0000116C EB03                <2>         jmp .output
   311                              <2>     .digit:
   312 0000116E 80C230              <2>         add dl, '0'          ; Convert to '0'-'9'
   313                              <2>     .output:
   314 00001171 4889D3              <2>         mov rbx, rdx
   315                              <2>         function print_char,1,rbx    
   120                              <3>  %assign param_count %0 - 2
   121                              <3> 
   122                              <3>  %if param_count < 0
   123                              <3>  %assign param_count 0
   124                              <3>  %endif
   125                              <3>  %if param_count < 1
   126                              <3>  %assign ret_param_count 0
   127                              <3>  %else
   128                              <3>  %assign ret_param_count %2
   129                              <3>  %endif
   130                              <3> 
   131                              <3> 
   132                              <3>  prepare_call param_count, ret_param_count
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00001174 4883EC10            <4>  sub rsp, total_space
   133                              <3> 
   134                              <3> 
   135                              <3>  %if param_count > 0
   136                              <3>  %assign i 0
   137 00001178 48894424F8          <3>  mov [rsp-8], rax
   138                              <3>  %rep param_count
   139                              <3>  %rotate 1
   140                              <3>  mov rax, %2
   141                              <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   143                              <3>  %endrep
   139                              <4>  %rotate 1
   140 0000117D 4889D8              <4>  mov rax, %2
   141 00001180 48890424            <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   144                              <3>  %rotate 1
   145                              <3>  %rotate 1
   146 00001184 488B4424F8          <3>  mov rax,[rsp-8]
   147                              <3>  %endif
   148                              <3> 
   149                              <3> 
   150 00001189 E8BDFDFFFF          <3>  call %1
   151                              <3> 
   152                              <3> 
   153                              <3>  cleanup_call param_count, ret_param_count
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 0000118E 4883C410            <4>  add rsp, total_space
   154                              <3> 
   316 00001192 E2C7                <2>         loop .convert_loop
   317                              <2>     epilog
   212                              <3>  popallq
   263 00001194 415F                <4>  pop r15
   264 00001196 415E                <4>  pop r14
   265 00001198 415D                <4>  pop r13
   266 0000119A 415C                <4>  pop r12
   267 0000119C 415B                <4>  pop r11
   268 0000119E 415A                <4>  pop r10
   269 000011A0 4159                <4>  pop r9
   270 000011A2 4158                <4>  pop r8
   271 000011A4 5F                  <4>  pop rdi
   272 000011A5 5E                  <4>  pop rsi
   273 000011A6 5A                  <4>  pop rdx
   274 000011A7 59                  <4>  pop rcx
   275 000011A8 5B                  <4>  pop rbx
   276 000011A9 58                  <4>  pop rax
   213                              <3> 
   214 000011AA 4889EC              <3>  mov rsp, rbp
   215 000011AD 5D                  <3>  pop rbp
   216 000011AE C3                  <3>  ret
   318                              <2> 
   319                              <2> 
   320                              <2> 
   321                              <2> print_string:;input: string
   322                              <2>     prolog 2;
   192 000011AF 55                  <3>  push rbp
   193 000011B0 4889E5              <3>  mov rbp, rsp
   194                              <3> 
   195                              <3> 
   196 000011B3 488945F8            <3>  mov [rbp-8],rax
   197 000011B7 B802000000          <3>  mov rax, %1
   198 000011BC 4883C00F            <3>  add rax, 15
   199 000011C0 4883E0F0            <3>  and rax, ~15
   200 000011C4 4829C4              <3>  sub rsp, rax
   201 000011C7 488B45F8            <3>  mov rax,[rbp-8]
   202                              <3> 
   203                              <3>  pushallq
   246 000011CB 50                  <4>  push rax
   247 000011CC 53                  <4>  push rbx
   248 000011CD 51                  <4>  push rcx
   249 000011CE 52                  <4>  push rdx
   250 000011CF 56                  <4>  push rsi
   251 000011D0 57                  <4>  push rdi
   252 000011D1 4150                <4>  push r8
   253 000011D3 4151                <4>  push r9
   254 000011D5 4152                <4>  push r10
   255 000011D7 4153                <4>  push r11
   256 000011D9 4154                <4>  push r12
   257 000011DB 4155                <4>  push r13
   258 000011DD 4156                <4>  push r14
   259 000011DF 4157                <4>  push r15
   204                              <3> 
   205                              <3> 
   206                              <3> 
   207                              <3> 
   208                              <3> 
   323                              <2>     get_param rsi, 1   ; string
   220 000011E1 488B7510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   324                              <2> 
   325 000011E5 4831C0              <2>     xor rax,rax
   326                              <2>     .next_char_t:
   327 000011E8 AC                  <2>         lodsb                  ; Load next character from string into AL
   328 000011E9 84C0                <2>         test al, al            ; Check if end of string
   329 000011EB 743E                <2>         jz .done_t
   330                              <2> 
   331 000011ED 3C5C                <2>         cmp al, '\'           ; Check for escape character
   332 000011EF 7420                <2>         je .escape_character
   333                              <2> 
   334                              <2>         function print_char,1,rax
   120                              <3>  %assign param_count %0 - 2
   121                              <3> 
   122                              <3>  %if param_count < 0
   123                              <3>  %assign param_count 0
   124                              <3>  %endif
   125                              <3>  %if param_count < 1
   126                              <3>  %assign ret_param_count 0
   127                              <3>  %else
   128                              <3>  %assign ret_param_count %2
   129                              <3>  %endif
   130                              <3> 
   131                              <3> 
   132                              <3>  prepare_call param_count, ret_param_count
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 000011F1 4883EC10            <4>  sub rsp, total_space
   133                              <3> 
   134                              <3> 
   135                              <3>  %if param_count > 0
   136                              <3>  %assign i 0
   137 000011F5 48894424F8          <3>  mov [rsp-8], rax
   138                              <3>  %rep param_count
   139                              <3>  %rotate 1
   140                              <3>  mov rax, %2
   141                              <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   143                              <3>  %endrep
   139                              <4>  %rotate 1
   140 000011FA 4889C0              <4>  mov rax, %2
   141 000011FD 48890424            <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   144                              <3>  %rotate 1
   145                              <3>  %rotate 1
   146 00001201 488B4424F8          <3>  mov rax,[rsp-8]
   147                              <3>  %endif
   148                              <3> 
   149                              <3> 
   150 00001206 E840FDFFFF          <3>  call %1
   151                              <3> 
   152                              <3> 
   153                              <3>  cleanup_call param_count, ret_param_count
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 0000120B 4883C410            <4>  add rsp, total_space
   154                              <3> 
   335                              <2> 
   336 0000120F EBD7                <2>         jmp .next_char_t
   337                              <2>         .escape_character:
   338 00001211 AC                  <2>             lodsb                  ; Load next character from string into AL
   339 00001212 3C6E                <2>             cmp al, 'n'            ; Check for %d
   340 00001214 7402                <2>             je .new_line
   341 00001216 EB11                <2>             jmp .escape_done
   342                              <2>             .new_line:
   343 00001218 668305EEFAFFFF01    <2>                 add word [rel print_info_ptr + print_info.print_yposition],1
   344 00001220 66C705E3FAFFFF0000  <2>                 mov word [rel print_info_ptr + print_info.print_xposition],0
   345                              <2>             .escape_done:
   346 00001229 EBBD                <2>                 jmp .next_char_t            
   347                              <2>     .done_t:
   348                              <2>     epilog
   212                              <3>  popallq
   263 0000122B 415F                <4>  pop r15
   264 0000122D 415E                <4>  pop r14
   265 0000122F 415D                <4>  pop r13
   266 00001231 415C                <4>  pop r12
   267 00001233 415B                <4>  pop r11
   268 00001235 415A                <4>  pop r10
   269 00001237 4159                <4>  pop r9
   270 00001239 4158                <4>  pop r8
   271 0000123B 5F                  <4>  pop rdi
   272 0000123C 5E                  <4>  pop rsi
   273 0000123D 5A                  <4>  pop rdx
   274 0000123E 59                  <4>  pop rcx
   275 0000123F 5B                  <4>  pop rbx
   276 00001240 58                  <4>  pop rax
   213                              <3> 
   214 00001241 4889EC              <3>  mov rsp, rbp
   215 00001244 5D                  <3>  pop rbp
   216 00001245 C3                  <3>  ret
   349                              <2> flush_framebuffer:;flush framebuffer
   350                              <2>     prolog 0;
   192 00001246 55                  <3>  push rbp
   193 00001247 4889E5              <3>  mov rbp, rsp
   194                              <3> 
   195                              <3> 
   196 0000124A 488945F8            <3>  mov [rbp-8],rax
   197 0000124E B800000000          <3>  mov rax, %1
   198 00001253 4883C00F            <3>  add rax, 15
   199 00001257 4883E0F0            <3>  and rax, ~15
   200 0000125B 4829C4              <3>  sub rsp, rax
   201 0000125E 488B45F8            <3>  mov rax,[rbp-8]
   202                              <3> 
   203                              <3>  pushallq
   246 00001262 50                  <4>  push rax
   247 00001263 53                  <4>  push rbx
   248 00001264 51                  <4>  push rcx
   249 00001265 52                  <4>  push rdx
   250 00001266 56                  <4>  push rsi
   251 00001267 57                  <4>  push rdi
   252 00001268 4150                <4>  push r8
   253 0000126A 4151                <4>  push r9
   254 0000126C 4152                <4>  push r10
   255 0000126E 4153                <4>  push r11
   256 00001270 4154                <4>  push r12
   257 00001272 4155                <4>  push r13
   258 00001274 4156                <4>  push r14
   259 00001276 4157                <4>  push r15
   204                              <3> 
   205                              <3> 
   206                              <3> 
   207                              <3> 
   208                              <3> 
   351 00001278 B800000000          <2>     mov rax, 0
   352 0000127D 668B058AFAFFFF      <2>     mov ax, word [rel print_info_ptr + print_info.print_yposition]
   353 00001284 BB00000000          <2>     mov rbx,0
   354 00001289 668B1D71F3FFFF      <2>     mov bx,word [rel video_info_ptr + video_info.xpixel]
   355 00001290 480FAFC3            <2>     imul rax,rbx
   356 00001294 B900000000          <2>     mov rcx,0
   357 00001299 668B0D6CFAFFFF      <2>     mov cx,word [rel print_info_ptr + print_info.print_xposition]
   358 000012A0 4801C8              <2>     add rax, rcx
   359 000012A3 BB00000000          <2>     mov rbx,0
   360 000012A8 8A1D57F3FFFF        <2>     mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   361 000012AE 480FAFC3            <2>     imul rax,rbx
   362                              <2>     ; jmp $
   363 000012B2 488B3D4DF3FFFF      <2>     mov rdi, qword [rel video_info_ptr + video_info.video_framebuffer]
   364 000012B9 4801C7              <2>     add rdi, rax
   365 000012BC B800000000          <2>     mov rax,0
   366                              <2>     epilog
   212                              <3>  popallq
   263 000012C1 415F                <4>  pop r15
   264 000012C3 415E                <4>  pop r14
   265 000012C5 415D                <4>  pop r13
   266 000012C7 415C                <4>  pop r12
   267 000012C9 415B                <4>  pop r11
   268 000012CB 415A                <4>  pop r10
   269 000012CD 4159                <4>  pop r9
   270 000012CF 4158                <4>  pop r8
   271 000012D1 5F                  <4>  pop rdi
   272 000012D2 5E                  <4>  pop rsi
   273 000012D3 5A                  <4>  pop rdx
   274 000012D4 59                  <4>  pop rcx
   275 000012D5 5B                  <4>  pop rbx
   276 000012D6 58                  <4>  pop rax
   213                              <3> 
   214 000012D7 4889EC              <3>  mov rsp, rbp
   215 000012DA 5D                  <3>  pop rbp
   216 000012DB C3                  <3>  ret
   367                              <2> 
   368                              <2> draw_char:; input: x,y,char; draw a character
   369                              <2>     prolog 2;
   192 000012DC 55                  <3>  push rbp
   193 000012DD 4889E5              <3>  mov rbp, rsp
   194                              <3> 
   195                              <3> 
   196 000012E0 488945F8            <3>  mov [rbp-8],rax
   197 000012E4 B802000000          <3>  mov rax, %1
   198 000012E9 4883C00F            <3>  add rax, 15
   199 000012ED 4883E0F0            <3>  and rax, ~15
   200 000012F1 4829C4              <3>  sub rsp, rax
   201 000012F4 488B45F8            <3>  mov rax,[rbp-8]
   202                              <3> 
   203                              <3>  pushallq
   246 000012F8 50                  <4>  push rax
   247 000012F9 53                  <4>  push rbx
   248 000012FA 51                  <4>  push rcx
   249 000012FB 52                  <4>  push rdx
   250 000012FC 56                  <4>  push rsi
   251 000012FD 57                  <4>  push rdi
   252 000012FE 4150                <4>  push r8
   253 00001300 4151                <4>  push r9
   254 00001302 4152                <4>  push r10
   255 00001304 4153                <4>  push r11
   256 00001306 4154                <4>  push r12
   257 00001308 4155                <4>  push r13
   258 0000130A 4156                <4>  push r14
   259 0000130C 4157                <4>  push r15
   204                              <3> 
   205                              <3> 
   206                              <3> 
   207                              <3> 
   208                              <3> 
   370                              <2>     get_param r8, 1   ; x
   220 0000130E 4C8B4510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   371                              <2>     get_param r9, 2   ; y
   220 00001312 4C8B4D18            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   372                              <2>     get_param rsi, 3   ; char
   220 00001316 488B7520            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   373                              <2> 
   374 0000131A B800000000          <2>     mov rax, 0
   375 0000131F 4C89C8              <2>     mov rax, r9
   376                              <2> 
   377 00001322 BB00000000          <2>     mov rbx,0
   378 00001327 668B1DD3F2FFFF      <2>     mov bx,word [rel video_info_ptr + video_info.xpixel]
   379 0000132E 480FAFC3            <2>     imul rax,rbx
   380                              <2> 
   381 00001332 B900000000          <2>     mov rcx,0
   382 00001337 4C89C1              <2>     mov rcx,r8
   383 0000133A 4801C8              <2>     add rax, rcx
   384                              <2> 
   385 0000133D BB00000000          <2>     mov rbx,0
   386 00001342 8A1DBDF2FFFF        <2>     mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   387 00001348 480FAFC3            <2>     imul rax,rbx
   388                              <2>     ; jmp $
   389 0000134C 488B3DB3F2FFFF      <2>     mov rdi, qword [rel video_info_ptr + video_info.video_framebuffer]
   390 00001353 4801C7              <2>     add rdi, rax        ;rdi=屏幕地址
   391                              <2> 
   392                              <2> 
   393 00001356 4831C0              <2>     xor rax, rax
   394 00001359 4889F0              <2>     mov rax,rsi
   395                              <2> 
   396 0000135C 48C1E004            <2>     shl rax, 4                 ; 乘以16(每个字符16字节)
   397 00001360 488B1DB7F9FFFF      <2>     mov rbx, [rel print_info_ptr + print_info.font_base_address]
   398 00001367 4801C3              <2>     add rbx, rax         ; RSI = 字符数据地址
   399 0000136A 4889DE              <2>     mov rsi,rbx
   400                              <2> 
   401                              <2> 
   402 0000136D B910000000          <2>     mov rcx, 16                ; 16行高度
   403 00001372 57                  <2>     push rdi               ; 保存当前行起始位置
   404                              <2>     .next_line:
   405 00001373 57                  <2>         push rdi               ; 保存当前行起始位置
   406                              <2>         
   407                              <2>         ; 处理一行(8像素)
   408 00001374 8A16                <2>         mov dl, [rsi]          ; 获取字模数据
   409 00001376 B608                <2>         mov dh, 8              ; 8位/行
   410                              <2>         .next_pixel:
   411 00001378 4831C0              <2>             xor rax,rax
   412 0000137B 8A0584F2FFFF        <2>             mov al,byte [rel video_info_ptr + video_info.byte_per_pixel]
   413                              <2> 
   414 00001381 F6C280              <2>             test dl, 0x80       ; 测试最高位
   415 00001384 7413                <2>             jz .skip_pixel
   416                              <2> 
   417                              <2> 
   418 00001386 3C04                <2>             cmp al,4
   419 00001388 7208                <2>             jb .pixel_2byte
   420 0000138A C64702FF            <2>             mov byte [rdi+2], 0xFF ; 绘制像素(白色)
   421 0000138E C6470300            <2>             mov byte [rdi+3], 0x00 ; 绘制像素(白色)
   422                              <2>             .pixel_2byte:
   423 00001392 C607FF              <2>                 mov byte [rdi], 0xFF ; 绘制像素(白色)
   424 00001395 C64701FF            <2>                 mov byte [rdi+1], 0xFF ; 绘制像素(白色)
   425                              <2>             ; jmp $
   426                              <2>         .skip_pixel:
   427 00001399 D0E2                <2>             shl dl, 1           ; 移到下一位
   428 0000139B 4801C7              <2>             add rdi,rax
   429 0000139E FECE                <2>             dec dh
   430 000013A0 75D6                <2>             jnz .next_pixel
   431                              <2>         
   432 000013A2 5F                  <2>         pop rdi                 ; 恢复行起始位置
   433                              <2> 
   434 000013A3 4831C0              <2>         xor rax,rax
   435 000013A6 668B0554F2FFFF      <2>         mov ax,word [rel video_info_ptr + video_info.xpixel]
   436                              <2> 
   437 000013AD BB00000000          <2>         mov rbx,0
   438 000013B2 8A1D4DF2FFFF        <2>         mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   439 000013B8 480FAFC3            <2>         imul rax,rbx
   440 000013BC 4801C7              <2>         add rdi,rax
   441 000013BF 48FFC6              <2>         inc rsi                 ; next char font
   442 000013C2 E2AF                <2>         loop .next_line
   443                              <2>                 ; jmp $
   444 000013C4 5F                  <2>     pop rdi                 ; 恢复行起始位置
   445                              <2>     epilog
   212                              <3>  popallq
   263 000013C5 415F                <4>  pop r15
   264 000013C7 415E                <4>  pop r14
   265 000013C9 415D                <4>  pop r13
   266 000013CB 415C                <4>  pop r12
   267 000013CD 415B                <4>  pop r11
   268 000013CF 415A                <4>  pop r10
   269 000013D1 4159                <4>  pop r9
   270 000013D3 4158                <4>  pop r8
   271 000013D5 5F                  <4>  pop rdi
   272 000013D6 5E                  <4>  pop rsi
   273 000013D7 5A                  <4>  pop rdx
   274 000013D8 59                  <4>  pop rcx
   275 000013D9 5B                  <4>  pop rbx
   276 000013DA 58                  <4>  pop rax
   213                              <3> 
   214 000013DB 4889EC              <3>  mov rsp, rbp
   215 000013DE 5D                  <3>  pop rbp
   216 000013DF C3                  <3>  ret
   446                              <2> 
   447                              <2> 
   448                              <2> 
   449                              <2> draw_string:; input: x,y,string; draw string
   450                              <2>     prolog 2;
   192 000013E0 55                  <3>  push rbp
   193 000013E1 4889E5              <3>  mov rbp, rsp
   194                              <3> 
   195                              <3> 
   196 000013E4 488945F8            <3>  mov [rbp-8],rax
   197 000013E8 B802000000          <3>  mov rax, %1
   198 000013ED 4883C00F            <3>  add rax, 15
   199 000013F1 4883E0F0            <3>  and rax, ~15
   200 000013F5 4829C4              <3>  sub rsp, rax
   201 000013F8 488B45F8            <3>  mov rax,[rbp-8]
   202                              <3> 
   203                              <3>  pushallq
   246 000013FC 50                  <4>  push rax
   247 000013FD 53                  <4>  push rbx
   248 000013FE 51                  <4>  push rcx
   249 000013FF 52                  <4>  push rdx
   250 00001400 56                  <4>  push rsi
   251 00001401 57                  <4>  push rdi
   252 00001402 4150                <4>  push r8
   253 00001404 4151                <4>  push r9
   254 00001406 4152                <4>  push r10
   255 00001408 4153                <4>  push r11
   256 0000140A 4154                <4>  push r12
   257 0000140C 4155                <4>  push r13
   258 0000140E 4156                <4>  push r14
   259 00001410 4157                <4>  push r15
   204                              <3> 
   205                              <3> 
   206                              <3> 
   207                              <3> 
   208                              <3> 
   451                              <2>     get_param r8, 1   ; x
   220 00001412 4C8B4510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   452                              <2>     get_param r9, 2   ; y
   220 00001416 4C8B4D18            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   453                              <2>     get_param rsi, 3   ; string
   220 0000141A 488B7520            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   454                              <2> 
   455                              <2>     .next_char:
   456 0000141E AC                  <2>         lodsb                  
   457 0000141F 84C0                <2>         test al, al
   458 00001421 743B                <2>         jz .done
   459 00001423 BB00000000          <2>         mov rbx, 0
   460 00001428 88C3                <2>         mov bl, al
   461                              <2>         function draw_char,1,r8,r9,rbx
   120                              <3>  %assign param_count %0 - 2
   121                              <3> 
   122                              <3>  %if param_count < 0
   123                              <3>  %assign param_count 0
   124                              <3>  %endif
   125                              <3>  %if param_count < 1
   126                              <3>  %assign ret_param_count 0
   127                              <3>  %else
   128                              <3>  %assign ret_param_count %2
   129                              <3>  %endif
   130                              <3> 
   131                              <3> 
   132                              <3>  prepare_call param_count, ret_param_count
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 0000142A 4883EC20            <4>  sub rsp, total_space
   133                              <3> 
   134                              <3> 
   135                              <3>  %if param_count > 0
   136                              <3>  %assign i 0
   137 0000142E 48894424F8          <3>  mov [rsp-8], rax
   138                              <3>  %rep param_count
   139                              <3>  %rotate 1
   140                              <3>  mov rax, %2
   141                              <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   143                              <3>  %endrep
   139                              <4>  %rotate 1
   140 00001433 4C89C0              <4>  mov rax, %2
   141 00001436 48890424            <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   139                              <4>  %rotate 1
   140 0000143A 4C89C8              <4>  mov rax, %2
   141 0000143D 4889442408          <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   139                              <4>  %rotate 1
   140 00001442 4889D8              <4>  mov rax, %2
   141 00001445 4889442410          <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   144                              <3>  %rotate 1
   145                              <3>  %rotate 1
   146 0000144A 488B4424F8          <3>  mov rax,[rsp-8]
   147                              <3>  %endif
   148                              <3> 
   149                              <3> 
   150 0000144F E888FEFFFF          <3>  call %1
   151                              <3> 
   152                              <3> 
   153                              <3>  cleanup_call param_count, ret_param_count
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 00001454 4883C420            <4>  add rsp, total_space
   154                              <3> 
   462 00001458 4983C008            <2>         add r8, 8
   463                              <2> 
   464 0000145C EBC0                <2>         jmp .next_char
   465                              <2>     .done:
   466                              <2>     epilog
   212                              <3>  popallq
   263 0000145E 415F                <4>  pop r15
   264 00001460 415E                <4>  pop r14
   265 00001462 415D                <4>  pop r13
   266 00001464 415C                <4>  pop r12
   267 00001466 415B                <4>  pop r11
   268 00001468 415A                <4>  pop r10
   269 0000146A 4159                <4>  pop r9
   270 0000146C 4158                <4>  pop r8
   271 0000146E 5F                  <4>  pop rdi
   272 0000146F 5E                  <4>  pop rsi
   273 00001470 5A                  <4>  pop rdx
   274 00001471 59                  <4>  pop rcx
   275 00001472 5B                  <4>  pop rbx
   276 00001473 58                  <4>  pop rax
   213                              <3> 
   214 00001474 4889EC              <3>  mov rsp, rbp
   215 00001477 5D                  <3>  pop rbp
   216 00001478 C3                  <3>  ret
   467                              <2> 
   468                              <2> draw_hex:; input: x,y,hex; draw hex
   469                              <2>     prolog 2;
   192 00001479 55                  <3>  push rbp
   193 0000147A 4889E5              <3>  mov rbp, rsp
   194                              <3> 
   195                              <3> 
   196 0000147D 488945F8            <3>  mov [rbp-8],rax
   197 00001481 B802000000          <3>  mov rax, %1
   198 00001486 4883C00F            <3>  add rax, 15
   199 0000148A 4883E0F0            <3>  and rax, ~15
   200 0000148E 4829C4              <3>  sub rsp, rax
   201 00001491 488B45F8            <3>  mov rax,[rbp-8]
   202                              <3> 
   203                              <3>  pushallq
   246 00001495 50                  <4>  push rax
   247 00001496 53                  <4>  push rbx
   248 00001497 51                  <4>  push rcx
   249 00001498 52                  <4>  push rdx
   250 00001499 56                  <4>  push rsi
   251 0000149A 57                  <4>  push rdi
   252 0000149B 4150                <4>  push r8
   253 0000149D 4151                <4>  push r9
   254 0000149F 4152                <4>  push r10
   255 000014A1 4153                <4>  push r11
   256 000014A3 4154                <4>  push r12
   257 000014A5 4155                <4>  push r13
   258 000014A7 4156                <4>  push r14
   259 000014A9 4157                <4>  push r15
   204                              <3> 
   205                              <3> 
   206                              <3> 
   207                              <3> 
   208                              <3> 
   470                              <2>     get_param r8, 1   ; x
   220 000014AB 4C8B4510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   471                              <2>     get_param r9, 2   ; y
   220 000014AF 4C8B4D18            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   472                              <2>     get_param rsi, 3   ; hex
   220 000014B3 488B7520            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   473                              <2> 
   474 000014B7 BB58000000          <2>     mov rbx, 'X'
   475                              <2>     function draw_char,1,r8,r9,rbx    
   120                              <3>  %assign param_count %0 - 2
   121                              <3> 
   122                              <3>  %if param_count < 0
   123                              <3>  %assign param_count 0
   124                              <3>  %endif
   125                              <3>  %if param_count < 1
   126                              <3>  %assign ret_param_count 0
   127                              <3>  %else
   128                              <3>  %assign ret_param_count %2
   129                              <3>  %endif
   130                              <3> 
   131                              <3> 
   132                              <3>  prepare_call param_count, ret_param_count
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 000014BC 4883EC20            <4>  sub rsp, total_space
   133                              <3> 
   134                              <3> 
   135                              <3>  %if param_count > 0
   136                              <3>  %assign i 0
   137 000014C0 48894424F8          <3>  mov [rsp-8], rax
   138                              <3>  %rep param_count
   139                              <3>  %rotate 1
   140                              <3>  mov rax, %2
   141                              <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   143                              <3>  %endrep
   139                              <4>  %rotate 1
   140 000014C5 4C89C0              <4>  mov rax, %2
   141 000014C8 48890424            <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   139                              <4>  %rotate 1
   140 000014CC 4C89C8              <4>  mov rax, %2
   141 000014CF 4889442408          <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   139                              <4>  %rotate 1
   140 000014D4 4889D8              <4>  mov rax, %2
   141 000014D7 4889442410          <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   144                              <3>  %rotate 1
   145                              <3>  %rotate 1
   146 000014DC 488B4424F8          <3>  mov rax,[rsp-8]
   147                              <3>  %endif
   148                              <3> 
   149                              <3> 
   150 000014E1 E8F6FDFFFF          <3>  call %1
   151                              <3> 
   152                              <3> 
   153                              <3>  cleanup_call param_count, ret_param_count
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 000014E6 4883C420            <4>  add rsp, total_space
   154                              <3> 
   476 000014EA 4983C008            <2>     add r8, 8
   477                              <2> 
   478                              <2> 
   479 000014EE 4831C0              <2>     xor rax, rax
   480 000014F1 4831DB              <2>     xor rbx, rbx
   481 000014F4 4831D2              <2>     xor rdx, rdx
   482 000014F7 488B06              <2>     mov rax, [rsi]
   483                              <2> 
   484 000014FA B910000000          <2>     mov rcx, 16              ; Process 16 digits (64-bit number)
   485                              <2>     .convert_loopqq:
   486 000014FF 48C1C004            <2>         rol rax, 4           ; Rotate left by 4 bits
   487 00001503 88C2                <2>         mov dl, al           ; Extract lower nibble
   488                              <2> 
   489 00001505 80E20F              <2>         and dl, 0x0F         ; Mask to get a single hex digit
   490                              <2> 
   491 00001508 80FA0A              <2>         cmp dl, 10
   492 0000150B 7C05                <2>         jl .digitqq
   493 0000150D 80C257              <2>         add dl, 'a' - 10     ; Convert to 'A'-'F'
   494 00001510 EB03                <2>         jmp .outputqq
   495                              <2>     .digitqq:
   496 00001512 80C230              <2>         add dl, '0'          ; Convert to '0'-'9'
   497                              <2>     .outputqq:
   498 00001515 4889D3              <2>         mov rbx, rdx
   499                              <2> 
   500                              <2>         function draw_char,1,r8,r9,rbx
   120                              <3>  %assign param_count %0 - 2
   121                              <3> 
   122                              <3>  %if param_count < 0
   123                              <3>  %assign param_count 0
   124                              <3>  %endif
   125                              <3>  %if param_count < 1
   126                              <3>  %assign ret_param_count 0
   127                              <3>  %else
   128                              <3>  %assign ret_param_count %2
   129                              <3>  %endif
   130                              <3> 
   131                              <3> 
   132                              <3>  prepare_call param_count, ret_param_count
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00001518 4883EC20            <4>  sub rsp, total_space
   133                              <3> 
   134                              <3> 
   135                              <3>  %if param_count > 0
   136                              <3>  %assign i 0
   137 0000151C 48894424F8          <3>  mov [rsp-8], rax
   138                              <3>  %rep param_count
   139                              <3>  %rotate 1
   140                              <3>  mov rax, %2
   141                              <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   143                              <3>  %endrep
   139                              <4>  %rotate 1
   140 00001521 4C89C0              <4>  mov rax, %2
   141 00001524 48890424            <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   139                              <4>  %rotate 1
   140 00001528 4C89C8              <4>  mov rax, %2
   141 0000152B 4889442408          <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   139                              <4>  %rotate 1
   140 00001530 4889D8              <4>  mov rax, %2
   141 00001533 4889442410          <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   144                              <3>  %rotate 1
   145                              <3>  %rotate 1
   146 00001538 488B4424F8          <3>  mov rax,[rsp-8]
   147                              <3>  %endif
   148                              <3> 
   149                              <3> 
   150 0000153D E89AFDFFFF          <3>  call %1
   151                              <3> 
   152                              <3> 
   153                              <3>  cleanup_call param_count, ret_param_count
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 00001542 4883C420            <4>  add rsp, total_space
   154                              <3> 
   501                              <2>         
   502 00001546 4983C008            <2>         add r8, 8
   503 0000154A E2B3                <2>         loop .convert_loopqq
   504                              <2> 
   505                              <2>     epilog
   212                              <3>  popallq
   263 0000154C 415F                <4>  pop r15
   264 0000154E 415E                <4>  pop r14
   265 00001550 415D                <4>  pop r13
   266 00001552 415C                <4>  pop r12
   267 00001554 415B                <4>  pop r11
   268 00001556 415A                <4>  pop r10
   269 00001558 4159                <4>  pop r9
   270 0000155A 4158                <4>  pop r8
   271 0000155C 5F                  <4>  pop rdi
   272 0000155D 5E                  <4>  pop rsi
   273 0000155E 5A                  <4>  pop rdx
   274 0000155F 59                  <4>  pop rcx
   275 00001560 5B                  <4>  pop rbx
   276 00001561 58                  <4>  pop rax
   213                              <3> 
   214 00001562 4889EC              <3>  mov rsp, rbp
   215 00001565 5D                  <3>  pop rbp
   216 00001566 C3                  <3>  ret
   506                              <2> draw_decimal:; input: x,y,decimal address; draw dec
   507                              <2>     prolog 2;
   192 00001567 55                  <3>  push rbp
   193 00001568 4889E5              <3>  mov rbp, rsp
   194                              <3> 
   195                              <3> 
   196 0000156B 488945F8            <3>  mov [rbp-8],rax
   197 0000156F B802000000          <3>  mov rax, %1
   198 00001574 4883C00F            <3>  add rax, 15
   199 00001578 4883E0F0            <3>  and rax, ~15
   200 0000157C 4829C4              <3>  sub rsp, rax
   201 0000157F 488B45F8            <3>  mov rax,[rbp-8]
   202                              <3> 
   203                              <3>  pushallq
   246 00001583 50                  <4>  push rax
   247 00001584 53                  <4>  push rbx
   248 00001585 51                  <4>  push rcx
   249 00001586 52                  <4>  push rdx
   250 00001587 56                  <4>  push rsi
   251 00001588 57                  <4>  push rdi
   252 00001589 4150                <4>  push r8
   253 0000158B 4151                <4>  push r9
   254 0000158D 4152                <4>  push r10
   255 0000158F 4153                <4>  push r11
   256 00001591 4154                <4>  push r12
   257 00001593 4155                <4>  push r13
   258 00001595 4156                <4>  push r14
   259 00001597 4157                <4>  push r15
   204                              <3> 
   205                              <3> 
   206                              <3> 
   207                              <3> 
   208                              <3> 
   508                              <2>     get_param r8, 1   ; x
   220 00001599 4C8B4510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   509                              <2>     get_param r9, 2   ; y
   220 0000159D 4C8B4D18            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   510                              <2>     get_param rsi, 3   ; dec
   220 000015A1 488B7520            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   511                              <2> 
   512 000015A5 BB44000000          <2>     mov rbx, 'D'
   513                              <2>     function draw_char,1,r8,r9,rbx    
   120                              <3>  %assign param_count %0 - 2
   121                              <3> 
   122                              <3>  %if param_count < 0
   123                              <3>  %assign param_count 0
   124                              <3>  %endif
   125                              <3>  %if param_count < 1
   126                              <3>  %assign ret_param_count 0
   127                              <3>  %else
   128                              <3>  %assign ret_param_count %2
   129                              <3>  %endif
   130                              <3> 
   131                              <3> 
   132                              <3>  prepare_call param_count, ret_param_count
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 000015AA 4883EC20            <4>  sub rsp, total_space
   133                              <3> 
   134                              <3> 
   135                              <3>  %if param_count > 0
   136                              <3>  %assign i 0
   137 000015AE 48894424F8          <3>  mov [rsp-8], rax
   138                              <3>  %rep param_count
   139                              <3>  %rotate 1
   140                              <3>  mov rax, %2
   141                              <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   143                              <3>  %endrep
   139                              <4>  %rotate 1
   140 000015B3 4C89C0              <4>  mov rax, %2
   141 000015B6 48890424            <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   139                              <4>  %rotate 1
   140 000015BA 4C89C8              <4>  mov rax, %2
   141 000015BD 4889442408          <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   139                              <4>  %rotate 1
   140 000015C2 4889D8              <4>  mov rax, %2
   141 000015C5 4889442410          <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   144                              <3>  %rotate 1
   145                              <3>  %rotate 1
   146 000015CA 488B4424F8          <3>  mov rax,[rsp-8]
   147                              <3>  %endif
   148                              <3> 
   149                              <3> 
   150 000015CF E808FDFFFF          <3>  call %1
   151                              <3> 
   152                              <3> 
   153                              <3>  cleanup_call param_count, ret_param_count
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 000015D4 4883C420            <4>  add rsp, total_space
   154                              <3> 
   514 000015D8 4983C008            <2>     add r8, 8
   515                              <2> 
   516 000015DC 4831C0              <2>     xor rax, rax
   517 000015DF 4831DB              <2>     xor rbx, rbx
   518 000015E2 4831D2              <2>     xor rdx, rdx
   519 000015E5 488B06              <2>     mov rax, [rsi]
   520                              <2> 
   521 000015E8 4831DB              <2>     xor rbx, rbx
   522 000015EB BB0A000000          <2>     mov rbx, 10              ; Base 10
   523 000015F0 4831C9              <2>     xor rcx, rcx             ; Digit counter
   524                              <2> 
   525                              <2>     .convert_loop:
   526 000015F3 4831D2              <2>         xor rdx, rdx
   527 000015F6 48F7F3              <2>         div rbx              ; Divide rax by 10, remainder in rdx
   528 000015F9 52                  <2>         push rdx             ; Save remainder (digit)
   529 000015FA 48FFC1              <2>         inc rcx              ; Increment digit counter
   530 000015FD 4885C0              <2>         test rax, rax
   531 00001600 75F1                <2>         jnz .convert_loop    ; Repeat until rax == 0
   532                              <2> 
   533                              <2>     .print_digits:
   534 00001602 5A                  <2>         pop rdx              ; Get digit from stack
   535 00001603 80C230              <2>         add dl, '0'          ; Convert to ASCII
   536                              <2> 
   537 00001606 4889D3              <2>         mov rbx, rdx
   538                              <2>         function draw_char,1,r8,r9,rbx    
   120                              <3>  %assign param_count %0 - 2
   121                              <3> 
   122                              <3>  %if param_count < 0
   123                              <3>  %assign param_count 0
   124                              <3>  %endif
   125                              <3>  %if param_count < 1
   126                              <3>  %assign ret_param_count 0
   127                              <3>  %else
   128                              <3>  %assign ret_param_count %2
   129                              <3>  %endif
   130                              <3> 
   131                              <3> 
   132                              <3>  prepare_call param_count, ret_param_count
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00001609 4883EC20            <4>  sub rsp, total_space
   133                              <3> 
   134                              <3> 
   135                              <3>  %if param_count > 0
   136                              <3>  %assign i 0
   137 0000160D 48894424F8          <3>  mov [rsp-8], rax
   138                              <3>  %rep param_count
   139                              <3>  %rotate 1
   140                              <3>  mov rax, %2
   141                              <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   143                              <3>  %endrep
   139                              <4>  %rotate 1
   140 00001612 4C89C0              <4>  mov rax, %2
   141 00001615 48890424            <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   139                              <4>  %rotate 1
   140 00001619 4C89C8              <4>  mov rax, %2
   141 0000161C 4889442408          <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   139                              <4>  %rotate 1
   140 00001621 4889D8              <4>  mov rax, %2
   141 00001624 4889442410          <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   144                              <3>  %rotate 1
   145                              <3>  %rotate 1
   146 00001629 488B4424F8          <3>  mov rax,[rsp-8]
   147                              <3>  %endif
   148                              <3> 
   149                              <3> 
   150 0000162E E8A9FCFFFF          <3>  call %1
   151                              <3> 
   152                              <3> 
   153                              <3>  cleanup_call param_count, ret_param_count
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 00001633 4883C420            <4>  add rsp, total_space
   154                              <3> 
   539 00001637 4983C008            <2>         add r8, 8
   540                              <2> 
   541 0000163B E2C5                <2>         loop .print_digits
   542                              <2> 
   543                              <2>     epilog
   212                              <3>  popallq
   263 0000163D 415F                <4>  pop r15
   264 0000163F 415E                <4>  pop r14
   265 00001641 415D                <4>  pop r13
   266 00001643 415C                <4>  pop r12
   267 00001645 415B                <4>  pop r11
   268 00001647 415A                <4>  pop r10
   269 00001649 4159                <4>  pop r9
   270 0000164B 4158                <4>  pop r8
   271 0000164D 5F                  <4>  pop rdi
   272 0000164E 5E                  <4>  pop rsi
   273 0000164F 5A                  <4>  pop rdx
   274 00001650 59                  <4>  pop rcx
   275 00001651 5B                  <4>  pop rbx
   276 00001652 58                  <4>  pop rax
   213                              <3> 
   214 00001653 4889EC              <3>  mov rsp, rbp
   215 00001656 5D                  <3>  pop rbp
   216 00001657 C3                  <3>  ret
   544                              <2> ; debug_stop:
   545                              <2> ;     mov r15,0x99999
   546                              <2> ;     jmp $
   547                              <2> %endif
   220                              <1> %include "../kernel/expection.asm"
     1                              <2> %ifndef EXPECTION_ASM
     2                              <2> %define EXPECTION_ASM
     3                              <2> 
     4                              <2> %include "../bootloader/global_def.asm"
     1                              <3> %ifndef GLOBAL_DEF_ASM
     2                              <3> %define GLOBAL_DEF_ASM
     3                              <3> %define PLATFORM_QEMU_X64 1
     4                              <3> %define PLATFORM_X64 2
     5                              <3> %define DEBUG_PLATFORM PLATFORM_QEMU_X64
     6                              <3> %define DEBUG_MODE 1
     7                              <3> 
     8                              <3> 
     9                              <3> ;|----------------------|
    10                              <3> ;|	100000 ~ END	|
    11                              <3> ;|	   KERNEL	|
    12                              <3> ;|----------------------|
    13                              <3> ;|	E0000 ~ 100000	|
    14                              <3> ;| Extended System BIOS |
    15                              <3> ;|----------------------|
    16                              <3> ;|	C0000 ~ Dffff	|
    17                              <3> ;|     Expansion Area   |
    18                              <3> ;|----------------------|
    19                              <3> ;|	A0000 ~ bffff	|
    20                              <3> ;|   Legacy Video Area  |
    21                              <3> ;|----------------------|
    22                              <3> ;|	9f000 ~ A0000	|
    23                              <3> ;|	 BIOS reserve	|
    24                              <3> ;|----------------------|
    25                              <3> ;|	90000 ~ 9f000	|
    26                              <3> ;|	 kernel tmpbuf	|
    27                              <3> ;|----------------------|
    28                              <3> ;|	10000 ~ 90000	|
    29                              <3> ;|	   LOADER	|
    30                              <3> ;|----------------------|
    31                              <3> ;|	8000 ~ 10000	|
    32                              <3> ;|	  VBE info	|
    33                              <3> ;|----------------------|
    34                              <3> ;|	7e00 ~ 8000	|
    35                              <3> ;|	  mem info	|
    36                              <3> ;|----------------------|
    37                              <3> ;|	7c00 ~ 7e00	|
    38                              <3> ;|	 MBR (BOOT)	|
    39                              <3> ;|----------------------|
    40                              <3> ;|	0000 ~ 7c00	|
    41                              <3> ;|	 BIOS Code	|
    42                              <3> ;|----------------------|
    43                              <3> 
    44                              <3> 
    45                              <3> ;_______________________________________________________
    46                              <3> ; START	END	    SIZE	        USED
    47                              <3> ; FFFF0	FFFFF	16B	        BIOS System Entry
    48                              <3> ; F0000	FFFEF	64KB-16B	BIOS System Code
    49                              <3> ; C8000	EFFFF	160KB	    ROM/Mapped IO
    50                              <3> ; C0000	C7FFF	32KB	    Graphic Adapter BIOS
    51                              <3> ; B8000	BFFFF	32KB	    Chroma Text Video Buffer
    52                              <3> ; B0000	B7FFF	32KB	    Mono Text Video Buffer
    53                              <3> ; A0000	AFFFF	64KB	    Graphic Video Buffer
    54                              <3> ; 9FC00	9FFFF	1KB	        Extended BIOS Data Area
    55                              <3> ; 7E00	9FBFF	622080B     Useable 608KB	
    56                              <3> ; 7C00	7DFF	512B	    MBR
    57                              <3> ; 500	7BFF	30464B      Useable 30KB	
    58                              <3> ; 400	4FF	    256B	    BIOS Data Area
    59                              <3> ; 000	3FF	    1KB	        IVT
    60                              <3> ; _____________________________________________________
    61                              <3> 
    62                              <3> 
    63                              <3> 
    64                              <3> 
    65                              <3> 
    66                              <3> 
    67                              <3> 
    68                              <3> 
    69                              <3> 
    70                              <3> 
    71                              <3> 
    72                              <3> ;|----------------------|
    73                              <3> ;|	100000 ~ END	|
    74                              <3> ;|	   KERNEL	|
    75                              <3> ;|----------------------|
    76                              <3> ;|	E0000 ~ 100000	|
    77                              <3> ;| Extended System BIOS |
    78                              <3> ;|----------------------|
    79                              <3> ;|	C0000 ~ Dffff	|
    80                              <3> ;|     Expansion Area   |
    81                              <3> ;|----------------------|
    82                              <3> ;|	A0000 ~ bffff	|
    83                              <3> ;|   Legacy Video Area  |
    84                              <3> ;|----------------------|
    85                              <3> ;|	9F000 ~ A0000	|
    86                              <3> ;|	 BIOS reserve	|
    87                              <3> ;|----------------------|
    88                              <3> ;|	90000 ~ 9F000	|
    89                              <3> ;|	 kernel tmpbuf	|
    90                              <3> ;|----------------------|
    91                              <3> ;|	10000 ~ 90000	|
    92                              <3> ;|	   LOADER	|
    93                              <3> ;|----------------------|
    94                              <3> ;|	8000 ~ 10000	|
    95                              <3> ;|	  VBE info	|
    96                              <3> ;|----------------------|
    97                              <3> ;|	7E00 ~ 8000	|
    98                              <3> ;|	  mem info	|
    99                              <3> ;|----------------------|
   100                              <3> ;|	7C00 ~ 7E00	|
   101                              <3> ;|	 MBR (BOOT)	|
   102                              <3> ;|----------------------|
   103                              <3> ;|	0000 ~ 7C00	|
   104                              <3> ;|	 BIOS Code	|
   105                              <3> ;|----------------------|
   106                              <3> 
   107                              <3> 
   108                              <3> 
   109                              <3> 
   110                              <3> 
   111                              <3> 
   112                              <3> 
   113                              <3> 
   114                              <3> 
   115                              <3> 
   116                              <3> ;______________________________________________
   117                              <3> ; ----------------Vbe Info Block------------
   118                              <3> ; typedef struct {
   119                              <3> ;     unsigned char       vbe_signature;
   120                              <3> ;     unsigned short      vbe_version;
   121                              <3> ;     unsigned long       oem_string_ptr;
   122                              <3> ;     unsigned char       capabilities;
   123                              <3> ;     unsigned long       video_mode_ptr;
   124                              <3> ;     unsigned short      total_memory;
   125                              <3> ;     unsigned short      oem_software_rev;
   126                              <3> ;     unsigned long       oem_vendor_name_ptr;
   127                              <3> ;     unsigned long       oem_product_name_ptr;
   128                              <3> ;     unsigned long       oem_product_rev_ptr;
   129                              <3> ;     unsigned char       reserved[222];
   130                              <3> ;     unsigned char       oem_data[256];  
   131                              <3> ; } VbeInfoBlock;
   132                              <3> ;______________________________________________
   133                              <3> 
   134                              <3> 
   135                              <3> BaseOfKernelFile	equ	0x00
   136                              <3> OffsetOfKernelFile	equ	0x100000
   137                              <3> BaseTmpOfKernelAddr	equ	0x9000
   138                              <3> OffsetTmpOfKernelFile	equ	0x0000
   139                              <3> VBEStructBufferAddr	equ	0x8000
   140                              <3> VBEModeStructBufferAddr	equ	0x8200
   141                              <3> MemoryStructBufferAddr	equ	0x8800
   142                              <3> 
   143                              <3> 
   144                              <3> 
   145                              <3> KernelSpaceUpperAddress equ 0xFFFF800000000000
   146                              <3> 
   147                              <3> GDTPointerUpperAddr equ 0xFFFF800000104000
   148                              <3> IDTPointerUpperAddr equ 0xFFFF80000010400a
   149                              <3> TSSPointerUpperAddr equ 0xFFFF800000104014
   150                              <3> 
   151                              <3> VideoFrameBufferAddress equ 0xFFFF800003000000
   152                              <3> KernelStartSectorNum	equ	16
   153                              <3> 
   154                              <3> 
   155                              <3> 
   156                              <3> 
   157                              <3> MasterSectorReadNumPort    equ	0x1F2
   158                              <3> MasterSectorReadPort    equ	0x1F0
   159                              <3> 
   160                              <3> SlaveReadNumPort    equ	0x172
   161                              <3> SlaveSectorReadPort    equ	0x170
   162                              <3> 
   163                              <3> SectorReadNumPort    equ	MasterSectorReadNumPort
   164                              <3> SectorReadPort    equ	MasterSectorReadPort
   165                              <3> 
   166                              <3> struc vbe_info_block
   167                              <3>     .signature                 resb 4    ; 'VESA' signature (must be "VESA")
   168                              <3>     .version                   resw 1    ; VBE version (e.g., 0x0300 for VBE 3.0)
   169                              <3>     .oem_string_ptr            resd 1    ; Pointer to OEM string
   170                              <3>     .capabilities              resd 1    ; Capabilities of the video card
   171                              <3>     .video_mode_ptr            resd 1    ; Pointer to supported video modes
   172                              <3>     .total_memory              resw 1    ; Total memory in 64KB blocks
   173                              <3> 
   174                              <3>     ; VBE 2.0+ fields
   175                              <3>     .oem_software_rev          resw 1    ; OEM software revision
   176                              <3>     .oem_vendor_name_ptr       resd 1    ; Pointer to OEM vendor name string
   177                              <3>     .oem_product_name_ptr      resd 1    ; Pointer to OEM product name string
   178                              <3>     .oem_product_rev_ptr       resd 1    ; Pointer to OEM product revision string
   179                              <3>     .reserved                  resb 222  ; Reserved for VBE implementation
   180                              <3>     .oem_data                  resb 256  ; Data area for OEM-specific information
   181                              <3> endstruc
   182                              <3> 
   183                              <3> struc vbe_mode_info_block
   184                              <3>     .attributes                resw 1    ; Mode attributes
   185                              <3>     .winA_attributes           resb 1    ; Window A attributes
   186                              <3>     .winB_attributes           resb 1    ; Window B attributes
   187                              <3>     .win_granularity           resw 1    ; Window granularity in KB
   188                              <3>     .win_size                  resw 1    ; Window size in KB
   189                              <3>     .winA_segment              resw 1    ; Window A segment
   190                              <3>     .winB_segment              resw 1    ; Window B segment
   191                              <3>     .win_func_ptr              resd 1    ; Pointer to window function
   192                              <3>     .bytes_per_scanline        resw 1    ; Bytes per scanline
   193                              <3> 
   194                              <3>     ; VBE 1.2+ fields
   195                              <3>     .x_resolution              resw 1    ; Horizontal resolution in pixels
   196                              <3>     .y_resolution              resw 1    ; Vertical resolution in pixels
   197                              <3>     .x_char_size               resb 1    ; Character cell width in pixels
   198                              <3>     .y_char_size               resb 1    ; Character cell height in pixels
   199                              <3>     .number_of_planes          resb 1    ; Number of memory planes
   200                              <3>     .bits_per_pixel            resb 1    ; Bits per pixel
   201                              <3>     .number_of_banks           resb 1    ; Number of banks
   202                              <3>     .memory_model              resb 1    ; Memory model type
   203                              <3>     .bank_size                 resb 1    ; Bank size in KB
   204                              <3>     .number_of_image_pages     resb 1    ; Number of images
   205                              <3>     .reserved1                 resb 1    ; Reserved
   206                              <3> 
   207                              <3>     ; Direct Color fields (VBE 1.2+)
   208                              <3>     .red_mask_size             resb 1    ; Size of direct color red mask
   209                              <3>     .red_field_position        resb 1    ; Bit position of red mask
   210                              <3>     .green_mask_size           resb 1    ; Size of direct color green mask
   211                              <3>     .green_field_position      resb 1    ; Bit position of green mask
   212                              <3>     .blue_mask_size            resb 1    ; Size of direct color blue mask
   213                              <3>     .blue_field_position       resb 1    ; Bit position of blue mask
   214                              <3>     .reserved_mask_size        resb 1    ; Size of direct color reserved mask
   215                              <3>     .reserved_field_position   resb 1    ; Bit position of reserved mask
   216                              <3>     .direct_color_mode_info    resb 1    ; Direct color mode attributes
   217                              <3> 
   218                              <3>     ; VBE 2.0+ fields
   219                              <3>     .phys_base_ptr             resd 1    ; Physical address for flat memory frame buffer
   220                              <3>     .reserved2                 resd 1    ; Reserved
   221                              <3>     .reserved3                 resw 1    ; Reserved
   222                              <3> 
   223                              <3>     ; VBE 3.0+ fields
   224                              <3>     .lin_bytes_per_scanline    resw 1    ; Bytes per scanline for linear modes
   225                              <3>     .bnk_number_of_image_pages resb 1    ; Number of images for banked modes
   226                              <3>     .lin_number_of_image_pages resb 1    ; Number of images for linear modes
   227                              <3>     .lin_red_mask_size         resb 1    ; Size of direct color red mask (linear modes)
   228                              <3>     .lin_red_field_position    resb 1    ; Bit position of red mask (linear modes)
   229                              <3>     .lin_green_mask_size       resb 1    ; Size of direct color green mask (linear modes)
   230                              <3>     .lin_green_field_position  resb 1    ; Bit position of green mask (linear modes)
   231                              <3>     .lin_blue_mask_size        resb 1    ; Size of direct color blue mask (linear modes)
   232                              <3>     .lin_blue_field_position   resb 1    ; Bit position of blue mask (linear modes)
   233                              <3>     .lin_reserved_mask_size    resb 1    ; Size of direct color reserved mask (linear modes)
   234                              <3>     .lin_reserved_field_position resb 1  ; Bit position of reserved mask (linear modes)
   235                              <3>     .max_pixel_clock           resd 1    ; Maximum pixel clock (Hz)
   236                              <3>     .reserved4                 resb 190  ; Reserved for future expansion
   237                              <3> endstruc
   238                              <3> 
   239                              <3> struc e820_memory_entry
   240                              <3>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   241                              <3>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   242                              <3>     .length_low               resd 1    ; Lower 32 bits of the length
   243                              <3>     .length_high              resd 1    ; Upper 32 bits of the length
   244                              <3>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   245                              <3>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   246                              <3> endstruc
   247                              <3> 
   248                              <3> %endif
     5                              <2> %include "../kernel/stddef.asm"
     1                              <3> %ifndef STDDEF_ASM
     2                              <3> %define STDDEF_ASM
     3                              <3> 
     4                              <3> ;-----------Data Type Standard------------;
     5                              <3> %define USE_DT_STANDARD
     6                              <3> %ifdef USE_DT_STANDARD
     7                              <3>     %macro gbyte 1 ; 参数1：变量名, 参数2：初始值(1字节)
     8                              <3>         %1: db %2
     9                              <3>         %endmacro
    10                              <3> 
    11                              <3>     %macro g2byte 1 ; 参数1：变量名, 参数2：初始值(4字节)
    12                              <3>         %1: dw %2
    13                              <3>         %endmacro
    14                              <3> 
    15                              <3>     %macro g4byte 1 ; 参数1：变量名, 参数2：初始值(4字节)
    16                              <3>         %1: dd %2
    17                              <3>         %endmacro
    18                              <3> 
    19                              <3>     %macro g8byte 1 ; 参数1：变量名, 参数2：初始值(8字节)
    20                              <3>         %1: dq %2
    21                              <3>         %endmacro
    22                              <3> 
    23                              <3> 
    24                              <3>     ; %macro lvar 1
    25                              <3>     ;     %define %1 qword [rbp - 112-(__local_offset + 8)]
    26                              <3> 
    27                              <3>     ;     %assign __local_offset  __local_offset + 8
    28                              <3> 
    29                              <3>     ;     sub rsp, 8
    30                              <3>     ;     %endmacro
    31                              <3> 
    32                              <3>     ; 初始化局部变量追踪
    33                              <3>     %macro LOCAL_BEGIN 0
    34                              <3>         %push local_ctx              ; 创建新的局部上下文
    35                              <3>         %assign %$local_offset 0     ; 初始化局部偏移计数器
    36                              <3>     %endmacro
    37                              <3> 
    38                              <3>     ; 定义局部变量
    39                              <3>     ; %1 - 变量名
    40                              <3>     ; %2 - 变量大小(字节)
    41                              <3>     %macro lvar 1
    42                              <3>         %assign %$local_offset %$local_offset+8   ; 累加偏移
    43                              <3>         %define %$var_%1 %$local_offset               ; 定义变量偏移
    44                              <3>         %define %1 qword [rbp - %$var_%1]
    45                              <3>         sub rsp,8
    46                              <3>     %endmacro
    47                              <3> 
    48                              <3>     %macro lstr 1
    49                              <3>         %assign %$local_offset %$local_offset+8   ; 累加偏移
    50                              <3>         %define %$str_%1 %$local_offset               ; 定义变量偏移
    51                              <3>         %define %1  rbp - %$str_%1
    52                              <3>         %define %1.size 5
    53                              <3>         sub rsp,%1.size
    54                              <3>     %endmacro
    55                              <3> 
    56                              <3>     ; 分配栈空间并保存寄存器
    57                              <3>     %macro lalloc 0
    58                              <3>         %if %$local_offset > 0
    59                              <3>             ; 16字节对齐
    60                              <3>             %assign pad (16 - (%$local_offset % 16))
    61                              <3>             %if pad < 16
    62                              <3>                 %assign %$local_offset %$local_offset + pad
    63                              <3>             %endif
    64                              <3>             sub rsp, %$local_offset
    65                              <3>         %endif
    66                              <3>     %endmacro
    67                              <3> 
    68                              <3> 
    69                              <3>     ; ; 获取局部变量的访问表达式
    70                              <3>     ; %macro locvar 1-*
    71                              <3>     ;     ; [rbp - %$var_%1 ]
    72                              <3> 
    73                              <3>     ;     %ifctx local_ctx
    74                              <3>     ;         ; %ifidn %2, ""
    75                              <3>     ;             qword [rbp - %$var_%1]
    76                              <3>     ;         ; %else
    77                              <3>     ;         ;     [rbp - %$var_%1 - %2]
    78                              <3>     ;         ; %endif
    79                              <3>     ;     %endif
    80                              <3>     ; %endmacro
    81                              <3> 
    82                              <3>     ;     %macro locvar 1-2
    83                              <3>     ;     ; [rbp - %$var_%1 ]
    84                              <3> 
    85                              <3>     ;     %ifctx local_ctx
    86                              <3>     ;         %ifidn %2, ""
    87                              <3>     ;             [rbp - %$var_%1]
    88                              <3>     ;         %else
    89                              <3>     ;             [rbp - %$var_%1 - %2]
    90                              <3>     ;         %endif
    91                              <3>     ;     %endif
    92                              <3>     ; %endmacro
    93                              <3> 
    94                              <3> 
    95                              <3> %endif
    96                              <3> 
    97                              <3> ;-----------Calling Conventions Standard------------;
    98                              <3> %define USE_CC_STANDARD
    99                              <3> %ifdef USE_CC_STANDARD
   100                              <3> 
   101                              <3>     ;caller maintain the stack balance 
   102                              <3>         ; debug_times: db 0
   103                              <3>         ; cmp byte [rel debug_times],3
   104                              <3>         ; je debug_stop
   105                              <3>         ; add byte [rel debug_times],1
   106                              <3>     ; -------------------------------
   107                              <3>     ; 栈帧结构定义
   108                              <3>     ; -------------------------------
   109                              <3>     ; 调用后的栈布局:
   110                              <3>     ; [rsp+0x00] 返回地址 (8字节)
   111                              <3>     ; [rsp+0x08] 旧RBP     (8字节) <- rbp指向这里
   112                              <3>     ; [rsp+0x10] 参数1     (8字节)
   113                              <3>     ; [rsp+0x18] 参数2
   114                              <3>     ; ...
   115                              <3>     ; [rsp+X]    局部变量区
   116                              <3>     ; -------------------------------
   117                              <3> 
   118                              <3>     %define PARAM_OFFSET   16      ; 第一个参数的偏移量(返回地址8 + 旧RBP8)
   119                              <3>     %macro function 1-* ; 1=函数名, 2=返回参数数量, 3=参数列表
   120                              <3>         %assign param_count %0 - 2 ; 参数数量
   121                              <3>         
   122                              <3>         %if param_count < 0
   123                              <3>             %assign param_count 0 ; 如果没有参数，设置为 0
   124                              <3>         %endif
   125                              <3>         %if param_count < 1
   126                              <3>             %assign ret_param_count 0 ; 返回参数数量
   127                              <3>         %else
   128                              <3>             %assign ret_param_count %2 ; 返回参数数量
   129                              <3>         %endif
   130                              <3> 
   131                              <3>         ; 准备调用
   132                              <3>         prepare_call param_count, ret_param_count
   133                              <3> 
   134                              <3>         ; 如果有参数，将参数压入栈
   135                              <3>         %if param_count > 0
   136                              <3>             %assign i 0
   137                              <3>             mov [rsp-8], rax ; 保存返回地址
   138                              <3>             %rep param_count
   139                              <3>                 %rotate 1
   140                              <3>                 mov rax, %2
   141                              <3>                 mov [rsp + 8*i], rax ; 将参数压入栈
   142                              <3>                 %assign i i+1
   143                              <3>             %endrep
   144                              <3>             %rotate 1
   145                              <3>             %rotate 1
   146                              <3>             mov rax,[rsp-8]; 保存返回地址
   147                              <3>         %endif
   148                              <3> 
   149                              <3>         ; 调用函数
   150                              <3>         call %1
   151                              <3> 
   152                              <3>         ; 清理栈空间
   153                              <3>         cleanup_call param_count, ret_param_count
   154                              <3> 
   155                              <3>     %endmacro
   156                              <3> 
   157                              <3>     %macro align_stack_16 0
   158                              <3>         test rsp, 0xF
   159                              <3>         jz %%skip_align
   160                              <3>         sub rsp,8
   161                              <3>         %%skip_align:
   162                              <3>     %endmacro
   163                              <3> 
   164                              <3>     %macro prologue 0;local var size(bytes)
   165                              <3>         push rbp
   166                              <3>         mov rbp, rsp
   167                              <3> 
   168                              <3> 
   169                              <3>         pushallq
   170                              <3>         LOCAL_BEGIN
   171                              <3>         
   172                              <3> 
   173                              <3>         ; 调试信息可以放在这里
   174                              <3>         ; %ifdef DEBUG
   175                              <3>         ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
   176                              <3>         ; %endif
   177                              <3>     %endmacro
   178                              <3>     %macro epilogue 0
   179                              <3>         %pop
   180                              <3>         mov rax, rbp
   181                              <3>         sub rax, 8*14
   182                              <3>         mov rsp, rax
   183                              <3> 
   184                              <3>         popallq
   185                              <3> 
   186                              <3>         mov rsp, rbp
   187                              <3>         pop rbp
   188                              <3>         ret
   189                              <3>     %endmacro
   190                              <3> 
   191                              <3>     %macro prolog 1;local var size(bytes)
   192                              <3>         push rbp
   193                              <3>         mov rbp, rsp
   194                              <3> 
   195                              <3> 
   196                              <3>         mov [rbp-8],rax
   197                              <3>         mov rax, %1
   198                              <3>         add rax, 15
   199                              <3>         and rax, ~15
   200                              <3>         sub rsp, rax
   201                              <3>         mov rax,[rbp-8]
   202                              <3> 
   203                              <3>         pushallq
   204                              <3>         
   205                              <3>         ; 调试信息可以放在这里
   206                              <3>         ; %ifdef DEBUG
   207                              <3>         ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
   208                              <3>         ; %endif
   209                              <3>     %endmacro
   210                              <3> 
   211                              <3>     %macro epilog 0
   212                              <3>         popallq
   213                              <3> 
   214                              <3>         mov rsp, rbp
   215                              <3>         pop rbp
   216                              <3>         ret
   217                              <3>     %endmacro
   218                              <3> 
   219                              <3>     %macro get_param 2;1=register, 2=param index(from 1)
   220                              <3>         mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   221                              <3>     %endmacro
   222                              <3> 
   223                              <3>     %macro set_ret_param 2;1=register, 2=param index(from 1)
   224                              <3>         mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   225                              <3>     %endmacro
   226                              <3> 
   227                              <3>     %macro prepare_call 2;1=param count, 2=return param count
   228                              <3>         %assign total_space ((%1 + %2) * 8)
   229                              <3>         
   230                              <3>         %if (total_space % 16) != 0
   231                              <3>             %assign total_space total_space + 8  ; 添加填充
   232                              <3>         %endif
   233                              <3>         
   234                              <3>         sub rsp, total_space
   235                              <3>     %endmacro
   236                              <3> 
   237                              <3>     %macro cleanup_call 2;1=param count, 2=return param count
   238                              <3>         %assign total_space ((%1 + %2) * 8)
   239                              <3>         %if (total_space % 16) != 0
   240                              <3>             %assign total_space total_space + 8
   241                              <3>         %endif
   242                              <3>         add rsp, total_space
   243                              <3>     %endmacro
   244                              <3> 
   245                              <3>     %macro pushallq 0
   246                              <3>         push rax
   247                              <3>         push rbx
   248                              <3>         push rcx
   249                              <3>         push rdx
   250                              <3>         push rsi
   251                              <3>         push rdi
   252                              <3>         push r8
   253                              <3>         push r9
   254                              <3>         push r10
   255                              <3>         push r11
   256                              <3>         push r12
   257                              <3>         push r13
   258                              <3>         push r14
   259                              <3>         push r15
   260                              <3>     %endmacro
   261                              <3> 
   262                              <3>     %macro popallq 0
   263                              <3>         pop r15
   264                              <3>         pop r14
   265                              <3>         pop r13
   266                              <3>         pop r12
   267                              <3>         pop r11
   268                              <3>         pop r10
   269                              <3>         pop r9
   270                              <3>         pop r8
   271                              <3>         pop rdi
   272                              <3>         pop rsi
   273                              <3>         pop rdx
   274                              <3>         pop rcx
   275                              <3>         pop rbx
   276                              <3>         pop rax
   277                              <3>     %endmacro
   278                              <3> 
   279                              <3>     %endif
   280                              <3> ;---------------------ABI Standard------------------;
   281                              <3> %define USE_ABI_STANDARD
   282                              <3> %ifdef USE_ABI_STANDARD
   283                              <3> 
   284                              <3> 
   285                              <3>     %define ABI_File_None   0       ; 无文件类型
   286                              <3>     %define ABI_File_REL    1       ; 可重定位文件
   287                              <3>     %define ABI_File_EXEC   2       ; 可执行文件
   288                              <3>     %define ABI_File_DYN    3       ; 共享目标文件
   289                              <3>     %define ABI_File_CORE   4       ; 核心文件
   290                              <3> 
   291                              <3>     %define Section_Type_NULL    0      ; 未使用
   292                              <3>     %define Section_Type_LOAD    1      ; 可加载段
   293                              <3>     %define Section_Type_DYNAMIC 2      ; 动态链接信息
   294                              <3>     %define Section_Type_INTERP  3      ; 解释器路径
   295                              <3>     %define Section_Type_NOTE    4      ; 辅助信息
   296                              <3>     %define Section_Type_SHLIB   5      ; 保留
   297                              <3> 
   298                              <3>     %macro ABI_HEADER 4 ;1=File Type, 2=Entry Point Address, 3=Section Header Offset, 4=Section Header Count
   299                              <3>         db 0xA5, 'A', 'B', 'I'     ; ABI Magic Number
   300                              <3>         db 1                       ; Encode Type
   301                              <3>         db 1                       ; ABI Version
   302                              <3> 
   303                              <3>         dw %1                      ; ABI File Type
   304                              <3>         dq %2                      ; Entry Point Address
   305                              <3>         dw 32                      ; ABI Headers Size
   306                              <3> 
   307                              <3>         dq %3                      ; Section Header Offset
   308                              <3>         dw 32                      ; Section Header Size
   309                              <3>         dw %4                      ; Section Header Count
   310                              <3>         dw 0                       ; Symble Table Entry Size
   311                              <3>     %endmacro
   312                              <3>     STRUC struct_ABI_HEADER
   313                              <3>         .magic:         resb 4    ; ABI Magic Number (4 bytes)
   314                              <3>         .encode_type:   resb 1    ; Encode Type (1 byte)
   315                              <3>         .abi_version:   resb 1    ; ABI Version (1 byte)
   316                              <3>         .file_type:     resw 1    ; ABI File Type (2 bytes)
   317                              <3>         .entry_point:   resq 1    ; Entry Point Address (8 bytes)
   318                              <3>         .header_size:   resw 1    ; ABI Headers Size (2 bytes)
   319                              <3>         .section_offset: resq 1   ; Section Header Offset (8 bytes)
   320                              <3>         .section_size:  resw 1    ; Section Header Size (2 bytes)
   321                              <3>         .section_count: resw 1    ; Section Header Count (2 bytes)
   322                              <3>         .sym_table_size: resw 1   ; Symbol Table Entry Size (2 bytes)
   323                              <3>     ENDSTRUC
   324                              <3> 
   325                              <3>     %macro SECTION_HEADER 4 ;1=Section Type, 2=Virtual Address, 3=Section Offset, 4=Section Size
   326                              <3>         dq %1                  ; Section Type
   327                              <3>         dq %2                  ; Virtual Address
   328                              <3>         dq %3                  ; Section Offset
   329                              <3>         dq %4                  ; Section Size
   330                              <3>     %endmacro
   331                              <3>     STRUC struct_SECTION_HEADER
   332                              <3>         .type:      resq 1    ; Section Type (8 bytes)
   333                              <3>         .vaddr:     resq 1    ; Virtual Address (8 bytes)
   334                              <3>         .offset:    resq 1    ; Section Offset (8 bytes)
   335                              <3>         .size:      resq 1    ; Section Size (8 bytes)
   336                              <3>     ENDSTRUC
   337                              <3>     %endif
   338                              <3> 
   339                              <3> %endif
     6                              <2> 
     7                              <2> [BITS 64]
     8                              <2> ; GDTPointerUpperAddr equ 0xFFFF800000104000
     9                              <2> ; IDTPointerUpperAddr equ 0xFFFF80000010400a
    10                              <2> ; TSSPointerUpperAddr equ 0xFFFF800000104004
    11 00001658 64656661756C742065- <2> expection_default_message: db 'default expection:%x\n', 0
    11 00001661 7870656374696F6E3A- <2>
    11 0000166A 25785C6E00          <2>
    12 0000166F 646976696465206578- <2> expection_div_message: db 'divide expection:%x\n', 0
    12 00001678 70656374696F6E3A25- <2>
    12 00001681 785C6E00            <2>
    13 00001685 646562756720657870- <2> expection_debug_message: db 'debug expection:%x\n', 0
    13 0000168E 656374696F6E3A2578- <2>
    13 00001697 5C6E00              <2>
    14                              <2> 
    15 0000169A 0000000000000000    <2> expection_error_code: dq 0
    16                              <2> 
    17                              <2> 
    18                              <2> 
    19                              <2> ; ; 描述符类型常量
    20                              <2> %define INTGATE 0x8E    ; 64位中断门(P=1, DPL=00, 类型=1110)
    21                              <2> %define TRAPGATE 0x8F   ; 64位陷阱门(P=1, DPL=00, 类型=1111)
    22                              <2> 
    23                              <2> ; ; 64位IDT条目结构(16字节)
    24                              <2> struc idt_info
    25 00000000 ????                <2>     .offset_low:   resw 1  ; 0  偏移低16位(0..15)
    26 00000002 ????                <2>     .selector:     resw 1  ; 16 代码段选择子
    27                              <2> 
    28 00000004 ??                  <2>     .ist:          resb 1  ; 32 IST索引(0表示不使用)
    29 00000005 ??                  <2>     .type_attr:    resb 1  ; 40 类型属性
    30                              <2> 
    31 00000006 ????                <2>     .offset_mid:   resw 1  ; 48 偏移中16位(16..31)
    32                              <2> 
    33 00000008 ????????            <2>     .offset_high:  resd 1  ; 64 偏移高32位(32..63)
    34                              <2> 
    35 0000000C ????????            <2>     .reserved:     resd 1  ; 96 保留
    36                              <2>     endstruc
    37                              <2> init_expection:;init expection idt
    38                              <2>     prolog 0;
   192 000016A2 55                  <3>  push rbp
   193 000016A3 4889E5              <3>  mov rbp, rsp
   194                              <3> 
   195                              <3> 
   196 000016A6 488945F8            <3>  mov [rbp-8],rax
   197 000016AA B800000000          <3>  mov rax, %1
   198 000016AF 4883C00F            <3>  add rax, 15
   199 000016B3 4883E0F0            <3>  and rax, ~15
   200 000016B7 4829C4              <3>  sub rsp, rax
   201 000016BA 488B45F8            <3>  mov rax,[rbp-8]
   202                              <3> 
   203                              <3>  pushallq
   246 000016BE 50                  <4>  push rax
   247 000016BF 53                  <4>  push rbx
   248 000016C0 51                  <4>  push rcx
   249 000016C1 52                  <4>  push rdx
   250 000016C2 56                  <4>  push rsi
   251 000016C3 57                  <4>  push rdi
   252 000016C4 4150                <4>  push r8
   253 000016C6 4151                <4>  push r9
   254 000016C8 4152                <4>  push r10
   255 000016CA 4153                <4>  push r11
   256 000016CC 4154                <4>  push r12
   257 000016CE 4155                <4>  push r13
   258 000016D0 4156                <4>  push r14
   259 000016D2 4157                <4>  push r15
   204                              <3> 
   205                              <3> 
   206                              <3> 
   207                              <3> 
   208                              <3> 
    39 000016D4 488D35F8010000      <2>     lea rsi,[rel default_exception_handler]
    40                              <2>     function setup_default_expection_idt,1,rsi
   120                              <3>  %assign param_count %0 - 2
   121                              <3> 
   122                              <3>  %if param_count < 0
   123                              <3>  %assign param_count 0
   124                              <3>  %endif
   125                              <3>  %if param_count < 1
   126                              <3>  %assign ret_param_count 0
   127                              <3>  %else
   128                              <3>  %assign ret_param_count %2
   129                              <3>  %endif
   130                              <3> 
   131                              <3> 
   132                              <3>  prepare_call param_count, ret_param_count
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 000016DB 4883EC10            <4>  sub rsp, total_space
   133                              <3> 
   134                              <3> 
   135                              <3>  %if param_count > 0
   136                              <3>  %assign i 0
   137 000016DF 48894424F8          <3>  mov [rsp-8], rax
   138                              <3>  %rep param_count
   139                              <3>  %rotate 1
   140                              <3>  mov rax, %2
   141                              <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   143                              <3>  %endrep
   139                              <4>  %rotate 1
   140 000016E4 4889F0              <4>  mov rax, %2
   141 000016E7 48890424            <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   144                              <3>  %rotate 1
   145                              <3>  %rotate 1
   146 000016EB 488B4424F8          <3>  mov rax,[rsp-8]
   147                              <3>  %endif
   148                              <3> 
   149                              <3> 
   150 000016F0 E83B010000          <3>  call %1
   151                              <3> 
   152                              <3> 
   153                              <3>  cleanup_call param_count, ret_param_count
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 000016F5 4883C410            <4>  add rsp, total_space
   154                              <3> 
    41                              <2>     ; jmp $
    42 000016F9 488D350B020000      <2>     lea rsi,[rel div0_exception_handler]
    43                              <2>     function register_expection_idt,1,0,1,rsi
   120                              <3>  %assign param_count %0 - 2
   121                              <3> 
   122                              <3>  %if param_count < 0
   123                              <3>  %assign param_count 0
   124                              <3>  %endif
   125                              <3>  %if param_count < 1
   126                              <3>  %assign ret_param_count 0
   127                              <3>  %else
   128                              <3>  %assign ret_param_count %2
   129                              <3>  %endif
   130                              <3> 
   131                              <3> 
   132                              <3>  prepare_call param_count, ret_param_count
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00001700 4883EC20            <4>  sub rsp, total_space
   133                              <3> 
   134                              <3> 
   135                              <3>  %if param_count > 0
   136                              <3>  %assign i 0
   137 00001704 48894424F8          <3>  mov [rsp-8], rax
   138                              <3>  %rep param_count
   139                              <3>  %rotate 1
   140                              <3>  mov rax, %2
   141                              <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   143                              <3>  %endrep
   139                              <4>  %rotate 1
   140 00001709 B800000000          <4>  mov rax, %2
   141 0000170E 48890424            <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   139                              <4>  %rotate 1
   140 00001712 B801000000          <4>  mov rax, %2
   141 00001717 4889442408          <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   139                              <4>  %rotate 1
   140 0000171C 4889F0              <4>  mov rax, %2
   141 0000171F 4889442410          <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   144                              <3>  %rotate 1
   145                              <3>  %rotate 1
   146 00001724 488B4424F8          <3>  mov rax,[rsp-8]
   147                              <3>  %endif
   148                              <3> 
   149                              <3> 
   150 00001729 E858000000          <3>  call %1
   151                              <3> 
   152                              <3> 
   153                              <3>  cleanup_call param_count, ret_param_count
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 0000172E 4883C420            <4>  add rsp, total_space
   154                              <3> 
    44                              <2> 
    45 00001732 488D3538020000      <2>     lea rsi,[rel debug_exception_handler]
    46                              <2>     function register_expection_idt,1,1,1,rsi
   120                              <3>  %assign param_count %0 - 2
   121                              <3> 
   122                              <3>  %if param_count < 0
   123                              <3>  %assign param_count 0
   124                              <3>  %endif
   125                              <3>  %if param_count < 1
   126                              <3>  %assign ret_param_count 0
   127                              <3>  %else
   128                              <3>  %assign ret_param_count %2
   129                              <3>  %endif
   130                              <3> 
   131                              <3> 
   132                              <3>  prepare_call param_count, ret_param_count
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00001739 4883EC20            <4>  sub rsp, total_space
   133                              <3> 
   134                              <3> 
   135                              <3>  %if param_count > 0
   136                              <3>  %assign i 0
   137 0000173D 48894424F8          <3>  mov [rsp-8], rax
   138                              <3>  %rep param_count
   139                              <3>  %rotate 1
   140                              <3>  mov rax, %2
   141                              <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   143                              <3>  %endrep
   139                              <4>  %rotate 1
   140 00001742 B801000000          <4>  mov rax, %2
   141 00001747 48890424            <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   139                              <4>  %rotate 1
   140 0000174B B801000000          <4>  mov rax, %2
   141 00001750 4889442408          <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   139                              <4>  %rotate 1
   140 00001755 4889F0              <4>  mov rax, %2
   141 00001758 4889442410          <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   144                              <3>  %rotate 1
   145                              <3>  %rotate 1
   146 0000175D 488B4424F8          <3>  mov rax,[rsp-8]
   147                              <3>  %endif
   148                              <3> 
   149                              <3> 
   150 00001762 E81F000000          <3>  call %1
   151                              <3> 
   152                              <3> 
   153                              <3>  cleanup_call param_count, ret_param_count
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 00001767 4883C420            <4>  add rsp, total_space
   154                              <3> 
    47                              <2> 
    48                              <2>     ; mov rax,0x123123
    49                              <2>     ; jmp $
    50                              <2> 
    51                              <2>     epilog
   212                              <3>  popallq
   263 0000176B 415F                <4>  pop r15
   264 0000176D 415E                <4>  pop r14
   265 0000176F 415D                <4>  pop r13
   266 00001771 415C                <4>  pop r12
   267 00001773 415B                <4>  pop r11
   268 00001775 415A                <4>  pop r10
   269 00001777 4159                <4>  pop r9
   270 00001779 4158                <4>  pop r8
   271 0000177B 5F                  <4>  pop rdi
   272 0000177C 5E                  <4>  pop rsi
   273 0000177D 5A                  <4>  pop rdx
   274 0000177E 59                  <4>  pop rcx
   275 0000177F 5B                  <4>  pop rbx
   276 00001780 58                  <4>  pop rax
   213                              <3> 
   214 00001781 4889EC              <3>  mov rsp, rbp
   215 00001784 5D                  <3>  pop rbp
   216 00001785 C3                  <3>  ret
    52                              <2> register_expection_idt:;vector_num,rsp,handler
    53                              <2>     prolog 0;
   192 00001786 55                  <3>  push rbp
   193 00001787 4889E5              <3>  mov rbp, rsp
   194                              <3> 
   195                              <3> 
   196 0000178A 488945F8            <3>  mov [rbp-8],rax
   197 0000178E B800000000          <3>  mov rax, %1
   198 00001793 4883C00F            <3>  add rax, 15
   199 00001797 4883E0F0            <3>  and rax, ~15
   200 0000179B 4829C4              <3>  sub rsp, rax
   201 0000179E 488B45F8            <3>  mov rax,[rbp-8]
   202                              <3> 
   203                              <3>  pushallq
   246 000017A2 50                  <4>  push rax
   247 000017A3 53                  <4>  push rbx
   248 000017A4 51                  <4>  push rcx
   249 000017A5 52                  <4>  push rdx
   250 000017A6 56                  <4>  push rsi
   251 000017A7 57                  <4>  push rdi
   252 000017A8 4150                <4>  push r8
   253 000017AA 4151                <4>  push r9
   254 000017AC 4152                <4>  push r10
   255 000017AE 4153                <4>  push r11
   256 000017B0 4154                <4>  push r12
   257 000017B2 4155                <4>  push r13
   258 000017B4 4156                <4>  push r14
   259 000017B6 4157                <4>  push r15
   204                              <3> 
   205                              <3> 
   206                              <3> 
   207                              <3> 
   208                              <3> 
    54                              <2>     get_param rsi, 1
   220 000017B8 488B7510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    55                              <2>     get_param r15, 2
   220 000017BC 4C8B7D18            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    56                              <2>     get_param rdi, 3
   220 000017C0 488B7D20            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    57 000017C4 48BB0A4010000080FF- <2>     mov rbx,IDTPointerUpperAddr
    57 000017CD FF                  <2>
    58 000017CE 488B4302            <2>     mov rax,[rbx + 2]
    59                              <2> 
    60 000017D2 4989F0              <2>     mov r8,rsi
    61 000017D5 49C1E004            <2>     shl r8, 4
    62 000017D9 4C01C0              <2>     add rax, r8
    63                              <2> 
    64                              <2>     ; jmp $
    65                              <2> 
    66 000017DC 4989F8              <2>     mov r8,rdi
    67 000017DF 49C1E820            <2>     shr r8,32
    68                              <2> 
    69 000017E3 4989F9              <2>     mov r9,rdi
    70 000017E6 49C1E910            <2>     shr r9,16
    71 000017EA 4981E1FFFF0000      <2>     and r9,0xFFFF
    72                              <2> 
    73 000017F1 B900000000          <2>     mov rcx,0
    74 000017F6 4C89F9              <2>     mov rcx, r15
    75                              <2>     ; jmp $
    76 000017F9 668938              <2>     mov word [rax + idt_info.offset_low], di
    77                              <2>         ; mov ax,di
    78                              <2>     ; jmp $
    79 000017FC 66C740020800        <2>     mov word [rax + idt_info.selector], 0x08
    80 00001802 884804              <2>     mov byte [rax + idt_info.ist], cl
    81 00001805 C640058F            <2>     mov byte [rax + idt_info.type_attr], TRAPGATE
    82 00001809 6644894806          <2>     mov word [rax + idt_info.offset_mid], r9w
    83 0000180E 4C894008            <2>     mov qword [rax + idt_info.offset_high], r8
    84                              <2> 
    85 00001812 0F011B              <2>     lidt	[rbx]
    86                              <2>     epilog
   212                              <3>  popallq
   263 00001815 415F                <4>  pop r15
   264 00001817 415E                <4>  pop r14
   265 00001819 415D                <4>  pop r13
   266 0000181B 415C                <4>  pop r12
   267 0000181D 415B                <4>  pop r11
   268 0000181F 415A                <4>  pop r10
   269 00001821 4159                <4>  pop r9
   270 00001823 4158                <4>  pop r8
   271 00001825 5F                  <4>  pop rdi
   272 00001826 5E                  <4>  pop rsi
   273 00001827 5A                  <4>  pop rdx
   274 00001828 59                  <4>  pop rcx
   275 00001829 5B                  <4>  pop rbx
   276 0000182A 58                  <4>  pop rax
   213                              <3> 
   214 0000182B 4889EC              <3>  mov rsp, rbp
   215 0000182E 5D                  <3>  pop rbp
   216 0000182F C3                  <3>  ret
    87                              <2> 
    88                              <2> setup_default_expection_idt:;setup expection idt 0~31
    89                              <2>     prolog 0;
   192 00001830 55                  <3>  push rbp
   193 00001831 4889E5              <3>  mov rbp, rsp
   194                              <3> 
   195                              <3> 
   196 00001834 488945F8            <3>  mov [rbp-8],rax
   197 00001838 B800000000          <3>  mov rax, %1
   198 0000183D 4883C00F            <3>  add rax, 15
   199 00001841 4883E0F0            <3>  and rax, ~15
   200 00001845 4829C4              <3>  sub rsp, rax
   201 00001848 488B45F8            <3>  mov rax,[rbp-8]
   202                              <3> 
   203                              <3>  pushallq
   246 0000184C 50                  <4>  push rax
   247 0000184D 53                  <4>  push rbx
   248 0000184E 51                  <4>  push rcx
   249 0000184F 52                  <4>  push rdx
   250 00001850 56                  <4>  push rsi
   251 00001851 57                  <4>  push rdi
   252 00001852 4150                <4>  push r8
   253 00001854 4151                <4>  push r9
   254 00001856 4152                <4>  push r10
   255 00001858 4153                <4>  push r11
   256 0000185A 4154                <4>  push r12
   257 0000185C 4155                <4>  push r13
   258 0000185E 4156                <4>  push r14
   259 00001860 4157                <4>  push r15
   204                              <3> 
   205                              <3> 
   206                              <3> 
   207                              <3> 
   208                              <3> 
    90                              <2>     get_param rsi, 1
   220 00001862 488B7510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    91 00001866 4989F0              <2>     mov r8,rsi
    92 00001869 49C1E820            <2>     shr r8,32
    93 0000186D 4989F1              <2>     mov r9,rsi
    94 00001870 49C1E910            <2>     shr r9,16
    95 00001874 4981E1FFFF0000      <2>     and r9,0xFFFF
    96                              <2> 
    97 0000187B B900000000          <2>     mov rcx,0
    98 00001880 48BB0A4010000080FF- <2>     mov rbx,IDTPointerUpperAddr
    98 00001889 FF                  <2>
    99 0000188A 488B4302            <2>     mov rax,[rbx + 2]
   100                              <2> 
   101                              <2>     .expection_idt:
   102 0000188E 668930              <2>         mov word [rax + idt_info.offset_low], si
   103 00001891 66C740020800        <2>         mov word [rax + idt_info.selector], 0x08
   104                              <2> 
   105 00001897 C6400401            <2>         mov byte [rax + idt_info.ist], 0x01
   106 0000189B C640058F            <2>         mov byte [rax + idt_info.type_attr], TRAPGATE
   107                              <2> 
   108 0000189F 6644894806          <2>         mov word [rax + idt_info.offset_mid], r9w
   109                              <2> 
   110 000018A4 4C894008            <2>         mov qword [rax + idt_info.offset_high], r8
   111                              <2> 
   112 000018A8 4883C010            <2>         add rax, 16
   113 000018AC 48FFC1              <2>         inc rcx
   114 000018AF 4883F920            <2>         cmp rcx, 32
   115 000018B3 7ED9                <2>         jle .expection_idt
   116                              <2> 
   117 000018B5 0F011B              <2>     lidt	[rbx]
   118                              <2>     epilog
   212                              <3>  popallq
   263 000018B8 415F                <4>  pop r15
   264 000018BA 415E                <4>  pop r14
   265 000018BC 415D                <4>  pop r13
   266 000018BE 415C                <4>  pop r12
   267 000018C0 415B                <4>  pop r11
   268 000018C2 415A                <4>  pop r10
   269 000018C4 4159                <4>  pop r9
   270 000018C6 4158                <4>  pop r8
   271 000018C8 5F                  <4>  pop rdi
   272 000018C9 5E                  <4>  pop rsi
   273 000018CA 5A                  <4>  pop rdx
   274 000018CB 59                  <4>  pop rcx
   275 000018CC 5B                  <4>  pop rbx
   276 000018CD 58                  <4>  pop rax
   213                              <3> 
   214 000018CE 4889EC              <3>  mov rsp, rbp
   215 000018D1 5D                  <3>  pop rbp
   216 000018D2 C3                  <3>  ret
   119                              <2> 
   120                              <2> 
   121                              <2> default_exception_handler:;
   122                              <2>     ; mov rax,0xffff
   123 000018D3 488D357EFDFFFF      <2>     lea rsi, [rel expection_default_message]
   124 000018DA 488D15B9FDFFFF      <2>     lea rdx, [rel expection_error_code]
   125                              <2>     function printk,1,rsi,rdx
   120                              <3>  %assign param_count %0 - 2
   121                              <3> 
   122                              <3>  %if param_count < 0
   123                              <3>  %assign param_count 0
   124                              <3>  %endif
   125                              <3>  %if param_count < 1
   126                              <3>  %assign ret_param_count 0
   127                              <3>  %else
   128                              <3>  %assign ret_param_count %2
   129                              <3>  %endif
   130                              <3> 
   131                              <3> 
   132                              <3>  prepare_call param_count, ret_param_count
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 000018E1 4883EC20            <4>  sub rsp, total_space
   133                              <3> 
   134                              <3> 
   135                              <3>  %if param_count > 0
   136                              <3>  %assign i 0
   137 000018E5 48894424F8          <3>  mov [rsp-8], rax
   138                              <3>  %rep param_count
   139                              <3>  %rotate 1
   140                              <3>  mov rax, %2
   141                              <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   143                              <3>  %endrep
   139                              <4>  %rotate 1
   140 000018EA 4889F0              <4>  mov rax, %2
   141 000018ED 48890424            <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   139                              <4>  %rotate 1
   140 000018F1 4889D0              <4>  mov rax, %2
   141 000018F4 4889442408          <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   144                              <3>  %rotate 1
   145                              <3>  %rotate 1
   146 000018F9 488B4424F8          <3>  mov rax,[rsp-8]
   147                              <3>  %endif
   148                              <3> 
   149                              <3> 
   150 000018FE E827F5FFFF          <3>  call %1
   151                              <3> 
   152                              <3> 
   153                              <3>  cleanup_call param_count, ret_param_count
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 00001903 4883C420            <4>  add rsp, total_space
   154                              <3> 
   126                              <2> 
   127 00001907 EBFE                <2>     jmp $
   128 00001909 48CF                <2>     iretq
   129                              <2> div0_exception_handler:;
   130                              <2>     ; mov rbx,0x1111
   131                              <2>     ; jmp $
   132 0000190B 50                  <2>     push rax
   133 0000190C 53                  <2>     push rbx
   134 0000190D 51                  <2>     push rcx
   135 0000190E 52                  <2>     push rdx
   136 0000190F 56                  <2>     push rsi
   137 00001910 57                  <2>     push rdi
   138 00001911 55                  <2>     push rbp
   139 00001912 4150                <2>     push r8
   140 00001914 4151                <2>     push r9
   141 00001916 4152                <2>     push r10
   142 00001918 4153                <2>     push r11
   143 0000191A 4154                <2>     push r12
   144 0000191C 4155                <2>     push r13
   145 0000191E 4156                <2>     push r14
   146 00001920 4157                <2>     push r15
   147                              <2> 
   148                              <2> 
   149 00001922 488D3546FDFFFF      <2>     lea rsi, [rel expection_div_message]
   150 00001929 488D156AFDFFFF      <2>     lea rdx, [rel expection_error_code]
   151                              <2>     function printk,1,rsi,rdx
   120                              <3>  %assign param_count %0 - 2
   121                              <3> 
   122                              <3>  %if param_count < 0
   123                              <3>  %assign param_count 0
   124                              <3>  %endif
   125                              <3>  %if param_count < 1
   126                              <3>  %assign ret_param_count 0
   127                              <3>  %else
   128                              <3>  %assign ret_param_count %2
   129                              <3>  %endif
   130                              <3> 
   131                              <3> 
   132                              <3>  prepare_call param_count, ret_param_count
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00001930 4883EC20            <4>  sub rsp, total_space
   133                              <3> 
   134                              <3> 
   135                              <3>  %if param_count > 0
   136                              <3>  %assign i 0
   137 00001934 48894424F8          <3>  mov [rsp-8], rax
   138                              <3>  %rep param_count
   139                              <3>  %rotate 1
   140                              <3>  mov rax, %2
   141                              <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   143                              <3>  %endrep
   139                              <4>  %rotate 1
   140 00001939 4889F0              <4>  mov rax, %2
   141 0000193C 48890424            <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   139                              <4>  %rotate 1
   140 00001940 4889D0              <4>  mov rax, %2
   141 00001943 4889442408          <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   144                              <3>  %rotate 1
   145                              <3>  %rotate 1
   146 00001948 488B4424F8          <3>  mov rax,[rsp-8]
   147                              <3>  %endif
   148                              <3> 
   149                              <3> 
   150 0000194D E8D8F4FFFF          <3>  call %1
   151                              <3> 
   152                              <3> 
   153                              <3>  cleanup_call param_count, ret_param_count
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 00001952 4883C420            <4>  add rsp, total_space
   154                              <3> 
   152                              <2> 
   153                              <2> 
   154 00001956 EBFE                <2>     jmp $
   155                              <2>     ; hlt
   156                              <2> 
   157 00001958 415F                <2>     pop r15
   158 0000195A 415E                <2>     pop r14
   159 0000195C 415D                <2>     pop r13
   160 0000195E 415C                <2>     pop r12
   161 00001960 415B                <2>     pop r11
   162 00001962 415A                <2>     pop r10
   163 00001964 4159                <2>     pop r9
   164 00001966 4158                <2>     pop r8
   165 00001968 5D                  <2>     pop rbp
   166 00001969 5F                  <2>     pop rdi
   167 0000196A 5E                  <2>     pop rsi
   168 0000196B 5A                  <2>     pop rdx
   169 0000196C 59                  <2>     pop rcx
   170 0000196D 5B                  <2>     pop rbx
   171 0000196E 58                  <2>     pop rax
   172                              <2> 
   173 0000196F 48CF                <2>     iretq
   174                              <2> debug_exception_handler:;
   175                              <2>     ; mov rbx,0x2222
   176                              <2>     ; jmp $
   177 00001971 50                  <2>     push rax
   178 00001972 53                  <2>     push rbx
   179 00001973 51                  <2>     push rcx
   180 00001974 52                  <2>     push rdx
   181 00001975 56                  <2>     push rsi
   182 00001976 57                  <2>     push rdi
   183 00001977 55                  <2>     push rbp
   184 00001978 4150                <2>     push r8
   185 0000197A 4151                <2>     push r9
   186 0000197C 4152                <2>     push r10
   187 0000197E 4153                <2>     push r11
   188 00001980 4154                <2>     push r12
   189 00001982 4155                <2>     push r13
   190 00001984 4156                <2>     push r14
   191 00001986 4157                <2>     push r15
   192                              <2> 
   193                              <2> 
   194 00001988 488D35F6FCFFFF      <2>     lea rsi, [rel expection_debug_message]
   195 0000198F 488D1504FDFFFF      <2>     lea rdx, [rel expection_error_code]
   196                              <2>     function printk,1,rsi,rdx
   120                              <3>  %assign param_count %0 - 2
   121                              <3> 
   122                              <3>  %if param_count < 0
   123                              <3>  %assign param_count 0
   124                              <3>  %endif
   125                              <3>  %if param_count < 1
   126                              <3>  %assign ret_param_count 0
   127                              <3>  %else
   128                              <3>  %assign ret_param_count %2
   129                              <3>  %endif
   130                              <3> 
   131                              <3> 
   132                              <3>  prepare_call param_count, ret_param_count
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00001996 4883EC20            <4>  sub rsp, total_space
   133                              <3> 
   134                              <3> 
   135                              <3>  %if param_count > 0
   136                              <3>  %assign i 0
   137 0000199A 48894424F8          <3>  mov [rsp-8], rax
   138                              <3>  %rep param_count
   139                              <3>  %rotate 1
   140                              <3>  mov rax, %2
   141                              <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   143                              <3>  %endrep
   139                              <4>  %rotate 1
   140 0000199F 4889F0              <4>  mov rax, %2
   141 000019A2 48890424            <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   139                              <4>  %rotate 1
   140 000019A6 4889D0              <4>  mov rax, %2
   141 000019A9 4889442408          <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   144                              <3>  %rotate 1
   145                              <3>  %rotate 1
   146 000019AE 488B4424F8          <3>  mov rax,[rsp-8]
   147                              <3>  %endif
   148                              <3> 
   149                              <3> 
   150 000019B3 E872F4FFFF          <3>  call %1
   151                              <3> 
   152                              <3> 
   153                              <3>  cleanup_call param_count, ret_param_count
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 000019B8 4883C420            <4>  add rsp, total_space
   154                              <3> 
   197 000019BC EBFE                <2>     jmp $
   198                              <2> 
   199 000019BE 415F                <2>     pop r15
   200 000019C0 415E                <2>     pop r14
   201 000019C2 415D                <2>     pop r13
   202 000019C4 415C                <2>     pop r12
   203 000019C6 415B                <2>     pop r11
   204 000019C8 415A                <2>     pop r10
   205 000019CA 4159                <2>     pop r9
   206 000019CC 4158                <2>     pop r8
   207 000019CE 5D                  <2>     pop rbp
   208 000019CF 5F                  <2>     pop rdi
   209 000019D0 5E                  <2>     pop rsi
   210 000019D1 5A                  <2>     pop rdx
   211 000019D2 59                  <2>     pop rcx
   212 000019D3 5B                  <2>     pop rbx
   213 000019D4 58                  <2>     pop rax
   214                              <2> 
   215 000019D5 48CF                <2>     iretq
   216                              <2>     ; function draw_screen,0,0x00000000
   217                              <2>     ;  jmp $
   218                              <2>     ; lea rsi,[rel expection_div_messige]
   219                              <2>     ; function draw_string,1,0,0,rsi
   220                              <2>     ; jmp $
   221                              <2>     ; iretq
   222                              <2> ; make_call_gate:                          	;创建64位的调用门
   223                              <2> ;                                           	;输入：RAX=例程的线性地址
   224                              <2> ;                                           	;输出：RDI:RSI=调用门
   225                              <2> ;          mov rdi, rax
   226                              <2> ;          shr rdi, 32                     	;得到门的高64位，在RDI中
   227                              <2> 
   228                              <2> ;          push rax                        	;构造数据结构，并预置线性地址的位15~0
   229                              <2> ;          mov word [rsp + 2], CORE_CODE64_SEL	;预置段选择子部分
   230                              <2> ;          mov [rsp + 4], eax                  	;预置线性地址的位31~16
   231                              <2> ;          mov word [rsp + 4], 0x8c00         	;添加P=1，TYPE=64位调用门
   232                              <2> ;          pop rsi
   233                              <2> 
   234                              <2> ;          ret
   235                              <2> 
   236                              <2> ; ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   237                              <2> ; make_interrupt_gate:                      	;创建64位的中断门
   238                              <2> ;                                             	;输入：RAX=例程的线性地址
   239                              <2> ;                                             	;输出：RDI:RSI=中断门
   240                              <2> ;          mov rdi, rax
   241                              <2> ;          shr rdi, 32                       	;得到门的高64位，在RDI中
   242                              <2> 
   243                              <2> ;          push rax                          	;构造数据结构，并预置线性地址的位15~0
   244                              <2> ;          mov word [rsp + 2], CORE_CODE64_SEL	;预置段选择子部分
   245                              <2> ;          mov [rsp + 4], eax                  	;预置线性地址的位31~16
   246                              <2> ;          mov word [rsp + 4], 0x8e00         	;添加P=1，TYPE=64位中断门
   247                              <2> ;          pop rsi
   248                              <2> 
   249                              <2> ;          ret
   250                              <2> 
   251                              <2> ; ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   252                              <2> ; make_trap_gate:                             	;创建64位的陷阱门
   253                              <2> ;                                              	;输入：RAX=例程的线性地址
   254                              <2> ;                                              	;输出：RDI:RSI=陷阱门
   255                              <2> ;          mov rdi, rax
   256                              <2> ;          shr rdi, 32                        	;得到门的高64位，在RDI中
   257                              <2> 
   258                              <2> ;          push rax                           	;构造数据结构，并预置线性地址的位15~0
   259                              <2> ;          mov word [rsp + 2], CORE_CODE64_SEL	;预置段选择子部分
   260                              <2> ;          mov [rsp + 4], eax                  	;预置线性地址的位31~16
   261                              <2> ;          mov word [rsp + 4], 0x8f00         	;添加P=1，TYPE=64位陷阱门
   262                              <2> ;          pop rsi
   263                              <2> 
   264                              <2> ;          ret
   265                              <2> 
   266                              <2> ; ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   267                              <2> ; make_tss_descriptor:                    	;创建64位的TSS描述符
   268                              <2> ;                                           	;输入：RAX=TSS的线性地址
   269                              <2> ;                                           	;输出：RDI:RSI=TSS描述符
   270                              <2> ;          push rax
   271                              <2> 
   272                              <2> ;          mov rdi, rax
   273                              <2> ;          shr rdi, 32                    	;得到门的高64位，在RDI中
   274                              <2> 
   275                              <2> ;          push rax                       	;先将部分线性地址移到适当位置
   276                              <2> ;          shl qword [rsp], 16           	;将线性地址的位23~00移到正确位置
   277                              <2> ;          mov word [rsp], 104           	;段界限的标准长度
   278                              <2> ;          mov al, [rsp + 5]
   279                              <2> ;          mov [rsp + 7], al             	;将线性地址的位31~24移到正确位置
   280                              <2> ;          mov byte [rsp + 5], 0x89     	;P=1，DPL=00，TYPE=1001（64位TSS）
   281                              <2> ;          mov byte [rsp + 6], 0        	;G、0、0、AVL和limit
   282                              <2> ;          pop rsi                       	;门的低64位
   283                              <2> 
   284                              <2> ;          pop rax
   285                              <2> 
   286                              <2> ;          ret
   287                              <2> 
   288                              <2> ; ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   289                              <2> ; mount_idt_entry:                     	;在中断描述符表IDT中安装门描述符
   290                              <2> ;                                        	;R8=中断向量
   291                              <2> ;                                        	;RDI:RSI=门描述符
   292                              <2> ;          push r8
   293                              <2> ;          push r9
   294                              <2> 
   295                              <2> ;          shl r8, 4                         	;中断号乘以16，得到表内偏移
   296                              <2> ;          mov r9, UPPER_IDT_LINEAR        	;中断描述符表的高端线性地址
   297                              <2> ;          mov [r9 + r8], rsi
   298                              <2> ;          mov [r9 + r8 + 8], rdi
   299                              <2> 
   300                              <2> ;          pop r9
   301                              <2> ;          pop r8
   302                              <2> 
   303                              <2> ;          ret
   304                              <2> %include "../kernel/printk.asm"
     1                              <3> %ifndef PRINTK_ASM
     2                              <3> %define PRINTK_ASM
     3                              <3> 
     4                              <3> %include "../bootloader/global_def.asm"
     5                              <3> %include "../kernel/video.asm"
     6                              <3>     
     7                              <3> [BITS 64]
     8                              <3> 
     9                              <3> %define COLOR_WHITE 	0x00ffffff		;WHITE
    10                              <3> %define COLOR_BLACK 	0x00000000		;BLACK
    11                              <3> %define COLOR_RED	    0x00ff0000		;RED
    12                              <3> %define COLOR_ORANGE	0x00ff8000		;ORANGE
    13                              <3> %define COLOR_YELLOW	0x00ffff00		;YELLOW
    14                              <3> %define COLOR_GREEN	    0x0000ff00		;GREEN
    15                              <3> %define COLOR_BLUE	    0x000000ff		;BLUE
    16                              <3> %define COLOR_INDIGO	0x0000ffff		;INDIGO
    17                              <3> %define COLOR_PURPLE	0x008000ff		;PURPLE
    18                              <3> 
    19                              <3> struc print_info
    20                              <3>     .cursor_xposition:     resw 1
    21                              <3>     .cursor_yposition:     resw 1
    22                              <3>     .cursor_line:          resw 1
    23                              <3> 
    24                              <3>     .print_xposition:      resw 1
    25                              <3>     .print_yposition:      resw 1
    26                              <3>     .print_line:           resw 1
    27                              <3>     .print_address:        resq 1
    28                              <3> 
    29                              <3>     .screen_xmax:          resw 1
    30                              <3>     .screen_ymax:          resw 1
    31                              <3> 
    32                              <3>     .font_base_address:    resq 1
    33                              <3>     .font_size:            resw 1
    34                              <3>     .font_width:           resw 1
    35                              <3>     .font_height:          resw 1
    36                              <3> 
    37                              <3>     .pixel_line_start:     resw 1
    38                              <3>     .pixel_line_height:       resw 1 
    39                              <3> 
    40                              <3>     .default_color:        resd 1
    41                              <3>     .current_color:        resd 1
    42                              <3>  endstruc
    43                              <3> print_info_ptr:;
    44                              <3>     istruc print_info
    45                              <3>         at print_info.cursor_xposition, dw 0
    46                              <3>         at print_info.cursor_yposition, dw 0
    47                              <3>         at print_info.cursor_line, dw 0
    48                              <3> 
    49                              <3>         at print_info.print_xposition, dw 0
    50                              <3>         at print_info.print_yposition, dw 0
    51                              <3>         at print_info.print_line, dw 0
    52                              <3>         at print_info.print_address, dq 0
    53                              <3> 
    54                              <3>         at print_info.screen_xmax, dw 0
    55                              <3>         at print_info.screen_ymax, dw 0
    56                              <3> 
    57                              <3>         at print_info.font_base_address, dq 0
    58                              <3>         at print_info.font_size, dw 0
    59                              <3>         at print_info.font_width, dw 0
    60                              <3>         at print_info.font_height, dw 0
    61                              <3> 
    62                              <3>         at print_info.pixel_line_start, dw 0
    63                              <3>         at print_info.pixel_line_height, dw 0
    64                              <3> 
    65                              <3>         at print_info.default_color, dd 0
    66                              <3>         at print_info.current_color, dd 0
    67                              <3>     iend
    68                              <3> 
    69                              <3> printk_init:;init printk
    70                              <3>     prolog 0;
    71                              <3> 
    72                              <3>     mov word [rel print_info_ptr + print_info.cursor_xposition],0
    73                              <3>     mov word [rel print_info_ptr + print_info.cursor_yposition],0
    74                              <3>     mov word [rel print_info_ptr + print_info.cursor_line],0
    75                              <3> 
    76                              <3> 
    77                              <3>     mov word [rel print_info_ptr + print_info.print_xposition],0
    78                              <3>     mov word [rel print_info_ptr + print_info.print_yposition],0    
    79                              <3>     mov word [rel print_info_ptr + print_info.print_line],0
    80                              <3>     mov qword [rel print_info_ptr + print_info.print_address],0
    81                              <3> 
    82                              <3>     mov word [rel print_info_ptr + print_info.screen_xmax],240
    83                              <3>     mov word [rel print_info_ptr + print_info.screen_ymax],54    
    84                              <3> 
    85                              <3>     mov rsi,0xFFFF800000105200
    86                              <3>     mov qword [rel print_info_ptr + print_info.font_base_address],rsi
    87                              <3>     mov word [rel print_info_ptr + print_info.font_size],16
    88                              <3>     mov word [rel print_info_ptr + print_info.font_width],8
    89                              <3>     mov word [rel print_info_ptr + print_info.font_height],16
    90                              <3> 
    91                              <3>     mov word [rel print_info_ptr + print_info.pixel_line_start],4
    92                              <3>     mov word [rel print_info_ptr + print_info.pixel_line_height],20
    93                              <3> 
    94                              <3>     mov dword [rel print_info_ptr + print_info.default_color],COLOR_WHITE
    95                              <3>     mov dword [rel print_info_ptr + print_info.current_color],COLOR_WHITE
    96                              <3> 
    97                              <3>     epilog
    98                              <3> 
    99                              <3> printk:; input: format string,pointer to arguments
   100                              <3> 
   101                              <3>     prolog 2
   102                              <3>     get_param rsi, 1   ; rsi = format string
   103                              <3>     get_param rdx, 2   ; rdx = pointer to arguments
   104                              <3> 
   105                              <3>     mov rax,0
   106                              <3> 
   107                              <3>     .next_char:
   108                              <3>         lodsb                  ; Load next character from format string into AL
   109                              <3>         test al, al            ; Check if end of string
   110                              <3>         jz .done
   111                              <3> 
   112                              <3>         cmp al, '\'           ; Check for escape character
   113                              <3>         je .escape_character
   114                              <3> 
   115                              <3>         cmp al, '%'            ; Check for format specifier
   116                              <3>         jne .print_char
   117                              <3>         lodsb                  ; Load format specifier
   118                              <3>         cmp al, 'd'            ; Check for %d
   119                              <3>         je .print_decimal
   120                              <3>         cmp al, 'x'            ; Check for %x
   121                              <3>         je .print_hex
   122                              <3>         cmp al, 's'            ; Check for %s
   123                              <3>         je .print_string
   124                              <3>         jmp .next_char         ; Skip unknown specifier
   125                              <3> 
   126                              <3>     .print_char:
   127                              <3>         function print_char,1,rax
   128                              <3>         jmp .next_char
   129                              <3> 
   130                              <3>     .print_decimal:
   131                              <3>         function print_decimal,1,rdx
   132                              <3>         jmp .next_char
   133                              <3> 
   134                              <3>     .print_hex:
   135                              <3>         function print_hex,1,rdx
   136                              <3>         jmp .next_char
   137                              <3> 
   138                              <3>     .print_string:
   139                              <3> 
   140                              <3>         function print_string,1,rdx
   141                              <3>         jmp .next_char
   142                              <3> 
   143                              <3>     .escape_character:
   144                              <3>         lodsb                  ; Load next character from string into AL
   145                              <3>         cmp al, 'n'            ; Check for %d
   146                              <3>         je .new_line
   147                              <3>         jmp .escape_done
   148                              <3>         .new_line:
   149                              <3>             add word [rel print_info_ptr + print_info.print_yposition],1
   150                              <3>             mov word [rel print_info_ptr + print_info.print_xposition],0
   151                              <3>         .escape_done:
   152                              <3>             jmp .next_char           
   153                              <3> 
   154                              <3>     .done:
   155                              <3>         epilog
   156                              <3> 
   157                              <3> print_char:; input:char
   158                              <3>     prolog 2;
   159                              <3> 
   160                              <3>     get_param rsi, 1   ; char
   161                              <3> 
   162                              <3> 
   163                              <3> 
   164                              <3>     mov rax, 0
   165                              <3>     mov ax, word [rel print_info_ptr + print_info.print_yposition]
   166                              <3> 
   167                              <3>     mov rbx,0
   168                              <3>     mov bx,word [rel video_info_ptr + video_info.xpixel]
   169                              <3>     mul rbx
   170                              <3> 
   171                              <3> 
   172                              <3>     mov rbx,0
   173                              <3>     mov bx,word [rel print_info_ptr + print_info.pixel_line_height]
   174                              <3>     mul rbx
   175                              <3> 
   176                              <3>     push rax
   177                              <3>     xor rax,rax
   178                              <3>     mov ax,word [rel print_info_ptr + print_info.print_xposition]
   179                              <3>     mov rbx,0
   180                              <3>     mov bx,word [rel print_info_ptr + print_info.font_width]
   181                              <3>     mul rbx
   182                              <3> 
   183                              <3> 
   184                              <3>     mov rcx,0
   185                              <3>     pop rcx
   186                              <3>     add rax, rcx
   187                              <3> 
   188                              <3>     mov rbx,0
   189                              <3>     mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   190                              <3>     mul rbx
   191                              <3> 
   192                              <3>     mov rdi, qword [rel video_info_ptr + video_info.video_framebuffer]
   193                              <3>     add rdi, rax        ;rdi=屏幕地址
   194                              <3> 
   195                              <3> 
   196                              <3>     shl rsi, 4
   197                              <3> 
   198                              <3>     mov rbx,0
   199                              <3>     mov rbx, [rel print_info_ptr + print_info.font_base_address]
   200                              <3>     add rsi, rbx        ; RSI = 字符数据地址
   201                              <3> 
   202                              <3>     xor rcx,rcx
   203                              <3>     mov cx, word [rel print_info_ptr + print_info.font_height]
   204                              <3> 
   205                              <3>     .next_line:
   206                              <3>         push rdi               ; 保存当前行起始位置
   207                              <3>         
   208                              <3>         ; 处理一行(8像素)
   209                              <3>         mov dl, [rsi]          ; 获取字模数据
   210                              <3>         mov dh, 8              ; 8位/行
   211                              <3>         .next_pixel:
   212                              <3>             xor rax,rax
   213                              <3>             mov al,byte [rel video_info_ptr + video_info.byte_per_pixel]
   214                              <3> 
   215                              <3>             test dl, 0x80       ; 测试最高位
   216                              <3>             jz .skip_pixel
   217                              <3> 
   218                              <3> 
   219                              <3>             cmp al,4
   220                              <3>             jb .pixel_2byte
   221                              <3>             mov byte [rdi+2], 0xFF ; 绘制像素(白色)
   222                              <3>             mov byte [rdi+3], 0x00 ; 绘制像素(白色)
   223                              <3>             .pixel_2byte:
   224                              <3>                 mov byte [rdi], 0xFF ; 绘制像素(白色)
   225                              <3>                 mov byte [rdi+1], 0xFF ; 绘制像素(白色)
   226                              <3>             ; jmp $
   227                              <3>         .skip_pixel:
   228                              <3>             shl dl, 1           ; 移到下一位
   229                              <3>             add rdi,rax
   230                              <3>             dec dh
   231                              <3>             jnz .next_pixel
   232                              <3>         
   233                              <3>         pop rdi                 ; 恢复行起始位置
   234                              <3>         xor rax,rax
   235                              <3>         mov ax,word [rel video_info_ptr + video_info.xpixel]
   236                              <3> 
   237                              <3>         mov rbx,0
   238                              <3>         mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   239                              <3>         mul rbx
   240                              <3> 
   241                              <3>         add rdi,rax; 移到下一行(320=屏幕宽度)
   242                              <3> 
   243                              <3>         inc rsi                 ; 下一个字模字节
   244                              <3> 
   245                              <3>         loop .next_line
   246                              <3>     
   247                              <3>     add word [rel print_info_ptr + print_info.print_xposition],1
   248                              <3>     epilog
   249                              <3> 
   250                              <3> print_decimal:;input:rsi=decimal number
   251                              <3> 
   252                              <3>     prolog 2;
   253                              <3> 
   254                              <3>     get_param rsi, 1   ; dec
   255                              <3> 
   256                              <3>     ; mov rbx, 'D'
   257                              <3>     ; function print_char,1,rbx    
   258                              <3> 
   259                              <3>     xor rax, rax
   260                              <3>     xor rbx, rbx
   261                              <3>     xor rdx, rdx
   262                              <3>     mov rax, [rsi]
   263                              <3> 
   264                              <3>     xor rbx, rbx
   265                              <3>     mov rbx, 10              ; Base 10
   266                              <3>     xor rcx, rcx             ; Digit counter
   267                              <3> 
   268                              <3>     .convert_loop:
   269                              <3>         xor rdx, rdx
   270                              <3>         div rbx              ; Divide rax by 10, remainder in rdx
   271                              <3>         push rdx             ; Save remainder (digit)
   272                              <3>         inc rcx              ; Increment digit counter
   273                              <3>         test rax, rax
   274                              <3>         jnz .convert_loop    ; Repeat until rax == 0
   275                              <3> 
   276                              <3>     .print_digits:
   277                              <3>         pop rdx              ; Get digit from stack
   278                              <3>         add dl, '0'          ; Convert to ASCII
   279                              <3> 
   280                              <3>         mov rbx, rdx
   281                              <3>         function print_char,1,rbx    
   282                              <3> 
   283                              <3>         loop .print_digits
   284                              <3> 
   285                              <3>     epilog
   286                              <3> 
   287                              <3> 
   288                              <3> print_hex:;input:rsi=hex number
   289                              <3> 
   290                              <3>     prolog 2;
   291                              <3> 
   292                              <3>     get_param rsi, 1   ; dec
   293                              <3> 
   294                              <3>     ; mov rbx, 'X'
   295                              <3>     ; function print_char,1,rbx    
   296                              <3> 
   297                              <3>     xor rax, rax
   298                              <3>     xor rbx, rbx
   299                              <3>     xor rdx, rdx
   300                              <3>     mov rax, [rsi]
   301                              <3> 
   302                              <3>     mov rcx, 16              ; Process 16 digits (64-bit number)
   303                              <3>     .convert_loop:
   304                              <3>         rol rax, 4           ; Rotate left by 4 bits
   305                              <3>         mov dl, al           ; Extract lower nibble
   306                              <3>         and dl, 0x0F         ; Mask to get a single hex digit
   307                              <3>         cmp dl, 10
   308                              <3>         jl .digit
   309                              <3>         add dl, 'a' - 10     ; Convert to 'A'-'F'
   310                              <3>         jmp .output
   311                              <3>     .digit:
   312                              <3>         add dl, '0'          ; Convert to '0'-'9'
   313                              <3>     .output:
   314                              <3>         mov rbx, rdx
   315                              <3>         function print_char,1,rbx    
   316                              <3>         loop .convert_loop
   317                              <3>     epilog
   318                              <3> 
   319                              <3> 
   320                              <3> 
   321                              <3> print_string:;input: string
   322                              <3>     prolog 2;
   323                              <3>     get_param rsi, 1   ; string
   324                              <3> 
   325                              <3>     xor rax,rax
   326                              <3>     .next_char_t:
   327                              <3>         lodsb                  ; Load next character from string into AL
   328                              <3>         test al, al            ; Check if end of string
   329                              <3>         jz .done_t
   330                              <3> 
   331                              <3>         cmp al, '\'           ; Check for escape character
   332                              <3>         je .escape_character
   333                              <3> 
   334                              <3>         function print_char,1,rax
   335                              <3> 
   336                              <3>         jmp .next_char_t
   337                              <3>         .escape_character:
   338                              <3>             lodsb                  ; Load next character from string into AL
   339                              <3>             cmp al, 'n'            ; Check for %d
   340                              <3>             je .new_line
   341                              <3>             jmp .escape_done
   342                              <3>             .new_line:
   343                              <3>                 add word [rel print_info_ptr + print_info.print_yposition],1
   344                              <3>                 mov word [rel print_info_ptr + print_info.print_xposition],0
   345                              <3>             .escape_done:
   346                              <3>                 jmp .next_char_t            
   347                              <3>     .done_t:
   348                              <3>     epilog
   349                              <3> flush_framebuffer:;flush framebuffer
   350                              <3>     prolog 0;
   351                              <3>     mov rax, 0
   352                              <3>     mov ax, word [rel print_info_ptr + print_info.print_yposition]
   353                              <3>     mov rbx,0
   354                              <3>     mov bx,word [rel video_info_ptr + video_info.xpixel]
   355                              <3>     imul rax,rbx
   356                              <3>     mov rcx,0
   357                              <3>     mov cx,word [rel print_info_ptr + print_info.print_xposition]
   358                              <3>     add rax, rcx
   359                              <3>     mov rbx,0
   360                              <3>     mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   361                              <3>     imul rax,rbx
   362                              <3>     ; jmp $
   363                              <3>     mov rdi, qword [rel video_info_ptr + video_info.video_framebuffer]
   364                              <3>     add rdi, rax
   365                              <3>     mov rax,0
   366                              <3>     epilog
   367                              <3> 
   368                              <3> draw_char:; input: x,y,char; draw a character
   369                              <3>     prolog 2;
   370                              <3>     get_param r8, 1   ; x
   371                              <3>     get_param r9, 2   ; y
   372                              <3>     get_param rsi, 3   ; char
   373                              <3> 
   374                              <3>     mov rax, 0
   375                              <3>     mov rax, r9
   376                              <3> 
   377                              <3>     mov rbx,0
   378                              <3>     mov bx,word [rel video_info_ptr + video_info.xpixel]
   379                              <3>     imul rax,rbx
   380                              <3> 
   381                              <3>     mov rcx,0
   382                              <3>     mov rcx,r8
   383                              <3>     add rax, rcx
   384                              <3> 
   385                              <3>     mov rbx,0
   386                              <3>     mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   387                              <3>     imul rax,rbx
   388                              <3>     ; jmp $
   389                              <3>     mov rdi, qword [rel video_info_ptr + video_info.video_framebuffer]
   390                              <3>     add rdi, rax        ;rdi=屏幕地址
   391                              <3> 
   392                              <3> 
   393                              <3>     xor rax, rax
   394                              <3>     mov rax,rsi
   395                              <3> 
   396                              <3>     shl rax, 4                 ; 乘以16(每个字符16字节)
   397                              <3>     mov rbx, [rel print_info_ptr + print_info.font_base_address]
   398                              <3>     add rbx, rax         ; RSI = 字符数据地址
   399                              <3>     mov rsi,rbx
   400                              <3> 
   401                              <3> 
   402                              <3>     mov rcx, 16                ; 16行高度
   403                              <3>     push rdi               ; 保存当前行起始位置
   404                              <3>     .next_line:
   405                              <3>         push rdi               ; 保存当前行起始位置
   406                              <3>         
   407                              <3>         ; 处理一行(8像素)
   408                              <3>         mov dl, [rsi]          ; 获取字模数据
   409                              <3>         mov dh, 8              ; 8位/行
   410                              <3>         .next_pixel:
   411                              <3>             xor rax,rax
   412                              <3>             mov al,byte [rel video_info_ptr + video_info.byte_per_pixel]
   413                              <3> 
   414                              <3>             test dl, 0x80       ; 测试最高位
   415                              <3>             jz .skip_pixel
   416                              <3> 
   417                              <3> 
   418                              <3>             cmp al,4
   419                              <3>             jb .pixel_2byte
   420                              <3>             mov byte [rdi+2], 0xFF ; 绘制像素(白色)
   421                              <3>             mov byte [rdi+3], 0x00 ; 绘制像素(白色)
   422                              <3>             .pixel_2byte:
   423                              <3>                 mov byte [rdi], 0xFF ; 绘制像素(白色)
   424                              <3>                 mov byte [rdi+1], 0xFF ; 绘制像素(白色)
   425                              <3>             ; jmp $
   426                              <3>         .skip_pixel:
   427                              <3>             shl dl, 1           ; 移到下一位
   428                              <3>             add rdi,rax
   429                              <3>             dec dh
   430                              <3>             jnz .next_pixel
   431                              <3>         
   432                              <3>         pop rdi                 ; 恢复行起始位置
   433                              <3> 
   434                              <3>         xor rax,rax
   435                              <3>         mov ax,word [rel video_info_ptr + video_info.xpixel]
   436                              <3> 
   437                              <3>         mov rbx,0
   438                              <3>         mov bl,byte [rel video_info_ptr + video_info.byte_per_pixel]
   439                              <3>         imul rax,rbx
   440                              <3>         add rdi,rax
   441                              <3>         inc rsi                 ; next char font
   442                              <3>         loop .next_line
   443                              <3>                 ; jmp $
   444                              <3>     pop rdi                 ; 恢复行起始位置
   445                              <3>     epilog
   446                              <3> 
   447                              <3> 
   448                              <3> 
   449                              <3> draw_string:; input: x,y,string; draw string
   450                              <3>     prolog 2;
   451                              <3>     get_param r8, 1   ; x
   452                              <3>     get_param r9, 2   ; y
   453                              <3>     get_param rsi, 3   ; string
   454                              <3> 
   455                              <3>     .next_char:
   456                              <3>         lodsb                  
   457                              <3>         test al, al
   458                              <3>         jz .done
   459                              <3>         mov rbx, 0
   460                              <3>         mov bl, al
   461                              <3>         function draw_char,1,r8,r9,rbx
   462                              <3>         add r8, 8
   463                              <3> 
   464                              <3>         jmp .next_char
   465                              <3>     .done:
   466                              <3>     epilog
   467                              <3> 
   468                              <3> draw_hex:; input: x,y,hex; draw hex
   469                              <3>     prolog 2;
   470                              <3>     get_param r8, 1   ; x
   471                              <3>     get_param r9, 2   ; y
   472                              <3>     get_param rsi, 3   ; hex
   473                              <3> 
   474                              <3>     mov rbx, 'X'
   475                              <3>     function draw_char,1,r8,r9,rbx    
   476                              <3>     add r8, 8
   477                              <3> 
   478                              <3> 
   479                              <3>     xor rax, rax
   480                              <3>     xor rbx, rbx
   481                              <3>     xor rdx, rdx
   482                              <3>     mov rax, [rsi]
   483                              <3> 
   484                              <3>     mov rcx, 16              ; Process 16 digits (64-bit number)
   485                              <3>     .convert_loopqq:
   486                              <3>         rol rax, 4           ; Rotate left by 4 bits
   487                              <3>         mov dl, al           ; Extract lower nibble
   488                              <3> 
   489                              <3>         and dl, 0x0F         ; Mask to get a single hex digit
   490                              <3> 
   491                              <3>         cmp dl, 10
   492                              <3>         jl .digitqq
   493                              <3>         add dl, 'a' - 10     ; Convert to 'A'-'F'
   494                              <3>         jmp .outputqq
   495                              <3>     .digitqq:
   496                              <3>         add dl, '0'          ; Convert to '0'-'9'
   497                              <3>     .outputqq:
   498                              <3>         mov rbx, rdx
   499                              <3> 
   500                              <3>         function draw_char,1,r8,r9,rbx
   501                              <3>         
   502                              <3>         add r8, 8
   503                              <3>         loop .convert_loopqq
   504                              <3> 
   505                              <3>     epilog
   506                              <3> draw_decimal:; input: x,y,decimal address; draw dec
   507                              <3>     prolog 2;
   508                              <3>     get_param r8, 1   ; x
   509                              <3>     get_param r9, 2   ; y
   510                              <3>     get_param rsi, 3   ; dec
   511                              <3> 
   512                              <3>     mov rbx, 'D'
   513                              <3>     function draw_char,1,r8,r9,rbx    
   514                              <3>     add r8, 8
   515                              <3> 
   516                              <3>     xor rax, rax
   517                              <3>     xor rbx, rbx
   518                              <3>     xor rdx, rdx
   519                              <3>     mov rax, [rsi]
   520                              <3> 
   521                              <3>     xor rbx, rbx
   522                              <3>     mov rbx, 10              ; Base 10
   523                              <3>     xor rcx, rcx             ; Digit counter
   524                              <3> 
   525                              <3>     .convert_loop:
   526                              <3>         xor rdx, rdx
   527                              <3>         div rbx              ; Divide rax by 10, remainder in rdx
   528                              <3>         push rdx             ; Save remainder (digit)
   529                              <3>         inc rcx              ; Increment digit counter
   530                              <3>         test rax, rax
   531                              <3>         jnz .convert_loop    ; Repeat until rax == 0
   532                              <3> 
   533                              <3>     .print_digits:
   534                              <3>         pop rdx              ; Get digit from stack
   535                              <3>         add dl, '0'          ; Convert to ASCII
   536                              <3> 
   537                              <3>         mov rbx, rdx
   538                              <3>         function draw_char,1,r8,r9,rbx    
   539                              <3>         add r8, 8
   540                              <3> 
   541                              <3>         loop .print_digits
   542                              <3> 
   543                              <3>     epilog
   544                              <3> ; debug_stop:
   545                              <3> ;     mov r15,0x99999
   546                              <3> ;     jmp $
   547                              <3> %endif
   305                              <2> %endif
   221                              <1> %include "../kernel/interrupt.asm"
     1                              <2> %ifndef INTERRUPT_ASM
     2                              <2> %define INTERRUPT_ASM
     3                              <2> 
     4                              <2> %include "../bootloader/global_def.asm"
     1                              <3> %ifndef GLOBAL_DEF_ASM
     2                              <3> %define GLOBAL_DEF_ASM
     3                              <3> %define PLATFORM_QEMU_X64 1
     4                              <3> %define PLATFORM_X64 2
     5                              <3> %define DEBUG_PLATFORM PLATFORM_QEMU_X64
     6                              <3> %define DEBUG_MODE 1
     7                              <3> 
     8                              <3> 
     9                              <3> ;|----------------------|
    10                              <3> ;|	100000 ~ END	|
    11                              <3> ;|	   KERNEL	|
    12                              <3> ;|----------------------|
    13                              <3> ;|	E0000 ~ 100000	|
    14                              <3> ;| Extended System BIOS |
    15                              <3> ;|----------------------|
    16                              <3> ;|	C0000 ~ Dffff	|
    17                              <3> ;|     Expansion Area   |
    18                              <3> ;|----------------------|
    19                              <3> ;|	A0000 ~ bffff	|
    20                              <3> ;|   Legacy Video Area  |
    21                              <3> ;|----------------------|
    22                              <3> ;|	9f000 ~ A0000	|
    23                              <3> ;|	 BIOS reserve	|
    24                              <3> ;|----------------------|
    25                              <3> ;|	90000 ~ 9f000	|
    26                              <3> ;|	 kernel tmpbuf	|
    27                              <3> ;|----------------------|
    28                              <3> ;|	10000 ~ 90000	|
    29                              <3> ;|	   LOADER	|
    30                              <3> ;|----------------------|
    31                              <3> ;|	8000 ~ 10000	|
    32                              <3> ;|	  VBE info	|
    33                              <3> ;|----------------------|
    34                              <3> ;|	7e00 ~ 8000	|
    35                              <3> ;|	  mem info	|
    36                              <3> ;|----------------------|
    37                              <3> ;|	7c00 ~ 7e00	|
    38                              <3> ;|	 MBR (BOOT)	|
    39                              <3> ;|----------------------|
    40                              <3> ;|	0000 ~ 7c00	|
    41                              <3> ;|	 BIOS Code	|
    42                              <3> ;|----------------------|
    43                              <3> 
    44                              <3> 
    45                              <3> ;_______________________________________________________
    46                              <3> ; START	END	    SIZE	        USED
    47                              <3> ; FFFF0	FFFFF	16B	        BIOS System Entry
    48                              <3> ; F0000	FFFEF	64KB-16B	BIOS System Code
    49                              <3> ; C8000	EFFFF	160KB	    ROM/Mapped IO
    50                              <3> ; C0000	C7FFF	32KB	    Graphic Adapter BIOS
    51                              <3> ; B8000	BFFFF	32KB	    Chroma Text Video Buffer
    52                              <3> ; B0000	B7FFF	32KB	    Mono Text Video Buffer
    53                              <3> ; A0000	AFFFF	64KB	    Graphic Video Buffer
    54                              <3> ; 9FC00	9FFFF	1KB	        Extended BIOS Data Area
    55                              <3> ; 7E00	9FBFF	622080B     Useable 608KB	
    56                              <3> ; 7C00	7DFF	512B	    MBR
    57                              <3> ; 500	7BFF	30464B      Useable 30KB	
    58                              <3> ; 400	4FF	    256B	    BIOS Data Area
    59                              <3> ; 000	3FF	    1KB	        IVT
    60                              <3> ; _____________________________________________________
    61                              <3> 
    62                              <3> 
    63                              <3> 
    64                              <3> 
    65                              <3> 
    66                              <3> 
    67                              <3> 
    68                              <3> 
    69                              <3> 
    70                              <3> 
    71                              <3> 
    72                              <3> ;|----------------------|
    73                              <3> ;|	100000 ~ END	|
    74                              <3> ;|	   KERNEL	|
    75                              <3> ;|----------------------|
    76                              <3> ;|	E0000 ~ 100000	|
    77                              <3> ;| Extended System BIOS |
    78                              <3> ;|----------------------|
    79                              <3> ;|	C0000 ~ Dffff	|
    80                              <3> ;|     Expansion Area   |
    81                              <3> ;|----------------------|
    82                              <3> ;|	A0000 ~ bffff	|
    83                              <3> ;|   Legacy Video Area  |
    84                              <3> ;|----------------------|
    85                              <3> ;|	9F000 ~ A0000	|
    86                              <3> ;|	 BIOS reserve	|
    87                              <3> ;|----------------------|
    88                              <3> ;|	90000 ~ 9F000	|
    89                              <3> ;|	 kernel tmpbuf	|
    90                              <3> ;|----------------------|
    91                              <3> ;|	10000 ~ 90000	|
    92                              <3> ;|	   LOADER	|
    93                              <3> ;|----------------------|
    94                              <3> ;|	8000 ~ 10000	|
    95                              <3> ;|	  VBE info	|
    96                              <3> ;|----------------------|
    97                              <3> ;|	7E00 ~ 8000	|
    98                              <3> ;|	  mem info	|
    99                              <3> ;|----------------------|
   100                              <3> ;|	7C00 ~ 7E00	|
   101                              <3> ;|	 MBR (BOOT)	|
   102                              <3> ;|----------------------|
   103                              <3> ;|	0000 ~ 7C00	|
   104                              <3> ;|	 BIOS Code	|
   105                              <3> ;|----------------------|
   106                              <3> 
   107                              <3> 
   108                              <3> 
   109                              <3> 
   110                              <3> 
   111                              <3> 
   112                              <3> 
   113                              <3> 
   114                              <3> 
   115                              <3> 
   116                              <3> ;______________________________________________
   117                              <3> ; ----------------Vbe Info Block------------
   118                              <3> ; typedef struct {
   119                              <3> ;     unsigned char       vbe_signature;
   120                              <3> ;     unsigned short      vbe_version;
   121                              <3> ;     unsigned long       oem_string_ptr;
   122                              <3> ;     unsigned char       capabilities;
   123                              <3> ;     unsigned long       video_mode_ptr;
   124                              <3> ;     unsigned short      total_memory;
   125                              <3> ;     unsigned short      oem_software_rev;
   126                              <3> ;     unsigned long       oem_vendor_name_ptr;
   127                              <3> ;     unsigned long       oem_product_name_ptr;
   128                              <3> ;     unsigned long       oem_product_rev_ptr;
   129                              <3> ;     unsigned char       reserved[222];
   130                              <3> ;     unsigned char       oem_data[256];  
   131                              <3> ; } VbeInfoBlock;
   132                              <3> ;______________________________________________
   133                              <3> 
   134                              <3> 
   135                              <3> BaseOfKernelFile	equ	0x00
   136                              <3> OffsetOfKernelFile	equ	0x100000
   137                              <3> BaseTmpOfKernelAddr	equ	0x9000
   138                              <3> OffsetTmpOfKernelFile	equ	0x0000
   139                              <3> VBEStructBufferAddr	equ	0x8000
   140                              <3> VBEModeStructBufferAddr	equ	0x8200
   141                              <3> MemoryStructBufferAddr	equ	0x8800
   142                              <3> 
   143                              <3> 
   144                              <3> 
   145                              <3> KernelSpaceUpperAddress equ 0xFFFF800000000000
   146                              <3> 
   147                              <3> GDTPointerUpperAddr equ 0xFFFF800000104000
   148                              <3> IDTPointerUpperAddr equ 0xFFFF80000010400a
   149                              <3> TSSPointerUpperAddr equ 0xFFFF800000104014
   150                              <3> 
   151                              <3> VideoFrameBufferAddress equ 0xFFFF800003000000
   152                              <3> KernelStartSectorNum	equ	16
   153                              <3> 
   154                              <3> 
   155                              <3> 
   156                              <3> 
   157                              <3> MasterSectorReadNumPort    equ	0x1F2
   158                              <3> MasterSectorReadPort    equ	0x1F0
   159                              <3> 
   160                              <3> SlaveReadNumPort    equ	0x172
   161                              <3> SlaveSectorReadPort    equ	0x170
   162                              <3> 
   163                              <3> SectorReadNumPort    equ	MasterSectorReadNumPort
   164                              <3> SectorReadPort    equ	MasterSectorReadPort
   165                              <3> 
   166                              <3> struc vbe_info_block
   167                              <3>     .signature                 resb 4    ; 'VESA' signature (must be "VESA")
   168                              <3>     .version                   resw 1    ; VBE version (e.g., 0x0300 for VBE 3.0)
   169                              <3>     .oem_string_ptr            resd 1    ; Pointer to OEM string
   170                              <3>     .capabilities              resd 1    ; Capabilities of the video card
   171                              <3>     .video_mode_ptr            resd 1    ; Pointer to supported video modes
   172                              <3>     .total_memory              resw 1    ; Total memory in 64KB blocks
   173                              <3> 
   174                              <3>     ; VBE 2.0+ fields
   175                              <3>     .oem_software_rev          resw 1    ; OEM software revision
   176                              <3>     .oem_vendor_name_ptr       resd 1    ; Pointer to OEM vendor name string
   177                              <3>     .oem_product_name_ptr      resd 1    ; Pointer to OEM product name string
   178                              <3>     .oem_product_rev_ptr       resd 1    ; Pointer to OEM product revision string
   179                              <3>     .reserved                  resb 222  ; Reserved for VBE implementation
   180                              <3>     .oem_data                  resb 256  ; Data area for OEM-specific information
   181                              <3> endstruc
   182                              <3> 
   183                              <3> struc vbe_mode_info_block
   184                              <3>     .attributes                resw 1    ; Mode attributes
   185                              <3>     .winA_attributes           resb 1    ; Window A attributes
   186                              <3>     .winB_attributes           resb 1    ; Window B attributes
   187                              <3>     .win_granularity           resw 1    ; Window granularity in KB
   188                              <3>     .win_size                  resw 1    ; Window size in KB
   189                              <3>     .winA_segment              resw 1    ; Window A segment
   190                              <3>     .winB_segment              resw 1    ; Window B segment
   191                              <3>     .win_func_ptr              resd 1    ; Pointer to window function
   192                              <3>     .bytes_per_scanline        resw 1    ; Bytes per scanline
   193                              <3> 
   194                              <3>     ; VBE 1.2+ fields
   195                              <3>     .x_resolution              resw 1    ; Horizontal resolution in pixels
   196                              <3>     .y_resolution              resw 1    ; Vertical resolution in pixels
   197                              <3>     .x_char_size               resb 1    ; Character cell width in pixels
   198                              <3>     .y_char_size               resb 1    ; Character cell height in pixels
   199                              <3>     .number_of_planes          resb 1    ; Number of memory planes
   200                              <3>     .bits_per_pixel            resb 1    ; Bits per pixel
   201                              <3>     .number_of_banks           resb 1    ; Number of banks
   202                              <3>     .memory_model              resb 1    ; Memory model type
   203                              <3>     .bank_size                 resb 1    ; Bank size in KB
   204                              <3>     .number_of_image_pages     resb 1    ; Number of images
   205                              <3>     .reserved1                 resb 1    ; Reserved
   206                              <3> 
   207                              <3>     ; Direct Color fields (VBE 1.2+)
   208                              <3>     .red_mask_size             resb 1    ; Size of direct color red mask
   209                              <3>     .red_field_position        resb 1    ; Bit position of red mask
   210                              <3>     .green_mask_size           resb 1    ; Size of direct color green mask
   211                              <3>     .green_field_position      resb 1    ; Bit position of green mask
   212                              <3>     .blue_mask_size            resb 1    ; Size of direct color blue mask
   213                              <3>     .blue_field_position       resb 1    ; Bit position of blue mask
   214                              <3>     .reserved_mask_size        resb 1    ; Size of direct color reserved mask
   215                              <3>     .reserved_field_position   resb 1    ; Bit position of reserved mask
   216                              <3>     .direct_color_mode_info    resb 1    ; Direct color mode attributes
   217                              <3> 
   218                              <3>     ; VBE 2.0+ fields
   219                              <3>     .phys_base_ptr             resd 1    ; Physical address for flat memory frame buffer
   220                              <3>     .reserved2                 resd 1    ; Reserved
   221                              <3>     .reserved3                 resw 1    ; Reserved
   222                              <3> 
   223                              <3>     ; VBE 3.0+ fields
   224                              <3>     .lin_bytes_per_scanline    resw 1    ; Bytes per scanline for linear modes
   225                              <3>     .bnk_number_of_image_pages resb 1    ; Number of images for banked modes
   226                              <3>     .lin_number_of_image_pages resb 1    ; Number of images for linear modes
   227                              <3>     .lin_red_mask_size         resb 1    ; Size of direct color red mask (linear modes)
   228                              <3>     .lin_red_field_position    resb 1    ; Bit position of red mask (linear modes)
   229                              <3>     .lin_green_mask_size       resb 1    ; Size of direct color green mask (linear modes)
   230                              <3>     .lin_green_field_position  resb 1    ; Bit position of green mask (linear modes)
   231                              <3>     .lin_blue_mask_size        resb 1    ; Size of direct color blue mask (linear modes)
   232                              <3>     .lin_blue_field_position   resb 1    ; Bit position of blue mask (linear modes)
   233                              <3>     .lin_reserved_mask_size    resb 1    ; Size of direct color reserved mask (linear modes)
   234                              <3>     .lin_reserved_field_position resb 1  ; Bit position of reserved mask (linear modes)
   235                              <3>     .max_pixel_clock           resd 1    ; Maximum pixel clock (Hz)
   236                              <3>     .reserved4                 resb 190  ; Reserved for future expansion
   237                              <3> endstruc
   238                              <3> 
   239                              <3> struc e820_memory_entry
   240                              <3>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   241                              <3>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   242                              <3>     .length_low               resd 1    ; Lower 32 bits of the length
   243                              <3>     .length_high              resd 1    ; Upper 32 bits of the length
   244                              <3>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   245                              <3>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   246                              <3> endstruc
   247                              <3> 
   248                              <3> %endif
     5                              <2> %include "../kernel/stddef.asm"
     1                              <3> %ifndef STDDEF_ASM
     2                              <3> %define STDDEF_ASM
     3                              <3> 
     4                              <3> ;-----------Data Type Standard------------;
     5                              <3> %define USE_DT_STANDARD
     6                              <3> %ifdef USE_DT_STANDARD
     7                              <3>     %macro gbyte 1 ; 参数1：变量名, 参数2：初始值(1字节)
     8                              <3>         %1: db %2
     9                              <3>         %endmacro
    10                              <3> 
    11                              <3>     %macro g2byte 1 ; 参数1：变量名, 参数2：初始值(4字节)
    12                              <3>         %1: dw %2
    13                              <3>         %endmacro
    14                              <3> 
    15                              <3>     %macro g4byte 1 ; 参数1：变量名, 参数2：初始值(4字节)
    16                              <3>         %1: dd %2
    17                              <3>         %endmacro
    18                              <3> 
    19                              <3>     %macro g8byte 1 ; 参数1：变量名, 参数2：初始值(8字节)
    20                              <3>         %1: dq %2
    21                              <3>         %endmacro
    22                              <3> 
    23                              <3> 
    24                              <3>     ; %macro lvar 1
    25                              <3>     ;     %define %1 qword [rbp - 112-(__local_offset + 8)]
    26                              <3> 
    27                              <3>     ;     %assign __local_offset  __local_offset + 8
    28                              <3> 
    29                              <3>     ;     sub rsp, 8
    30                              <3>     ;     %endmacro
    31                              <3> 
    32                              <3>     ; 初始化局部变量追踪
    33                              <3>     %macro LOCAL_BEGIN 0
    34                              <3>         %push local_ctx              ; 创建新的局部上下文
    35                              <3>         %assign %$local_offset 0     ; 初始化局部偏移计数器
    36                              <3>     %endmacro
    37                              <3> 
    38                              <3>     ; 定义局部变量
    39                              <3>     ; %1 - 变量名
    40                              <3>     ; %2 - 变量大小(字节)
    41                              <3>     %macro lvar 1
    42                              <3>         %assign %$local_offset %$local_offset+8   ; 累加偏移
    43                              <3>         %define %$var_%1 %$local_offset               ; 定义变量偏移
    44                              <3>         %define %1 qword [rbp - %$var_%1]
    45                              <3>         sub rsp,8
    46                              <3>     %endmacro
    47                              <3> 
    48                              <3>     %macro lstr 1
    49                              <3>         %assign %$local_offset %$local_offset+8   ; 累加偏移
    50                              <3>         %define %$str_%1 %$local_offset               ; 定义变量偏移
    51                              <3>         %define %1  rbp - %$str_%1
    52                              <3>         %define %1.size 5
    53                              <3>         sub rsp,%1.size
    54                              <3>     %endmacro
    55                              <3> 
    56                              <3>     ; 分配栈空间并保存寄存器
    57                              <3>     %macro lalloc 0
    58                              <3>         %if %$local_offset > 0
    59                              <3>             ; 16字节对齐
    60                              <3>             %assign pad (16 - (%$local_offset % 16))
    61                              <3>             %if pad < 16
    62                              <3>                 %assign %$local_offset %$local_offset + pad
    63                              <3>             %endif
    64                              <3>             sub rsp, %$local_offset
    65                              <3>         %endif
    66                              <3>     %endmacro
    67                              <3> 
    68                              <3> 
    69                              <3>     ; ; 获取局部变量的访问表达式
    70                              <3>     ; %macro locvar 1-*
    71                              <3>     ;     ; [rbp - %$var_%1 ]
    72                              <3> 
    73                              <3>     ;     %ifctx local_ctx
    74                              <3>     ;         ; %ifidn %2, ""
    75                              <3>     ;             qword [rbp - %$var_%1]
    76                              <3>     ;         ; %else
    77                              <3>     ;         ;     [rbp - %$var_%1 - %2]
    78                              <3>     ;         ; %endif
    79                              <3>     ;     %endif
    80                              <3>     ; %endmacro
    81                              <3> 
    82                              <3>     ;     %macro locvar 1-2
    83                              <3>     ;     ; [rbp - %$var_%1 ]
    84                              <3> 
    85                              <3>     ;     %ifctx local_ctx
    86                              <3>     ;         %ifidn %2, ""
    87                              <3>     ;             [rbp - %$var_%1]
    88                              <3>     ;         %else
    89                              <3>     ;             [rbp - %$var_%1 - %2]
    90                              <3>     ;         %endif
    91                              <3>     ;     %endif
    92                              <3>     ; %endmacro
    93                              <3> 
    94                              <3> 
    95                              <3> %endif
    96                              <3> 
    97                              <3> ;-----------Calling Conventions Standard------------;
    98                              <3> %define USE_CC_STANDARD
    99                              <3> %ifdef USE_CC_STANDARD
   100                              <3> 
   101                              <3>     ;caller maintain the stack balance 
   102                              <3>         ; debug_times: db 0
   103                              <3>         ; cmp byte [rel debug_times],3
   104                              <3>         ; je debug_stop
   105                              <3>         ; add byte [rel debug_times],1
   106                              <3>     ; -------------------------------
   107                              <3>     ; 栈帧结构定义
   108                              <3>     ; -------------------------------
   109                              <3>     ; 调用后的栈布局:
   110                              <3>     ; [rsp+0x00] 返回地址 (8字节)
   111                              <3>     ; [rsp+0x08] 旧RBP     (8字节) <- rbp指向这里
   112                              <3>     ; [rsp+0x10] 参数1     (8字节)
   113                              <3>     ; [rsp+0x18] 参数2
   114                              <3>     ; ...
   115                              <3>     ; [rsp+X]    局部变量区
   116                              <3>     ; -------------------------------
   117                              <3> 
   118                              <3>     %define PARAM_OFFSET   16      ; 第一个参数的偏移量(返回地址8 + 旧RBP8)
   119                              <3>     %macro function 1-* ; 1=函数名, 2=返回参数数量, 3=参数列表
   120                              <3>         %assign param_count %0 - 2 ; 参数数量
   121                              <3>         
   122                              <3>         %if param_count < 0
   123                              <3>             %assign param_count 0 ; 如果没有参数，设置为 0
   124                              <3>         %endif
   125                              <3>         %if param_count < 1
   126                              <3>             %assign ret_param_count 0 ; 返回参数数量
   127                              <3>         %else
   128                              <3>             %assign ret_param_count %2 ; 返回参数数量
   129                              <3>         %endif
   130                              <3> 
   131                              <3>         ; 准备调用
   132                              <3>         prepare_call param_count, ret_param_count
   133                              <3> 
   134                              <3>         ; 如果有参数，将参数压入栈
   135                              <3>         %if param_count > 0
   136                              <3>             %assign i 0
   137                              <3>             mov [rsp-8], rax ; 保存返回地址
   138                              <3>             %rep param_count
   139                              <3>                 %rotate 1
   140                              <3>                 mov rax, %2
   141                              <3>                 mov [rsp + 8*i], rax ; 将参数压入栈
   142                              <3>                 %assign i i+1
   143                              <3>             %endrep
   144                              <3>             %rotate 1
   145                              <3>             %rotate 1
   146                              <3>             mov rax,[rsp-8]; 保存返回地址
   147                              <3>         %endif
   148                              <3> 
   149                              <3>         ; 调用函数
   150                              <3>         call %1
   151                              <3> 
   152                              <3>         ; 清理栈空间
   153                              <3>         cleanup_call param_count, ret_param_count
   154                              <3> 
   155                              <3>     %endmacro
   156                              <3> 
   157                              <3>     %macro align_stack_16 0
   158                              <3>         test rsp, 0xF
   159                              <3>         jz %%skip_align
   160                              <3>         sub rsp,8
   161                              <3>         %%skip_align:
   162                              <3>     %endmacro
   163                              <3> 
   164                              <3>     %macro prologue 0;local var size(bytes)
   165                              <3>         push rbp
   166                              <3>         mov rbp, rsp
   167                              <3> 
   168                              <3> 
   169                              <3>         pushallq
   170                              <3>         LOCAL_BEGIN
   171                              <3>         
   172                              <3> 
   173                              <3>         ; 调试信息可以放在这里
   174                              <3>         ; %ifdef DEBUG
   175                              <3>         ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
   176                              <3>         ; %endif
   177                              <3>     %endmacro
   178                              <3>     %macro epilogue 0
   179                              <3>         %pop
   180                              <3>         mov rax, rbp
   181                              <3>         sub rax, 8*14
   182                              <3>         mov rsp, rax
   183                              <3> 
   184                              <3>         popallq
   185                              <3> 
   186                              <3>         mov rsp, rbp
   187                              <3>         pop rbp
   188                              <3>         ret
   189                              <3>     %endmacro
   190                              <3> 
   191                              <3>     %macro prolog 1;local var size(bytes)
   192                              <3>         push rbp
   193                              <3>         mov rbp, rsp
   194                              <3> 
   195                              <3> 
   196                              <3>         mov [rbp-8],rax
   197                              <3>         mov rax, %1
   198                              <3>         add rax, 15
   199                              <3>         and rax, ~15
   200                              <3>         sub rsp, rax
   201                              <3>         mov rax,[rbp-8]
   202                              <3> 
   203                              <3>         pushallq
   204                              <3>         
   205                              <3>         ; 调试信息可以放在这里
   206                              <3>         ; %ifdef DEBUG
   207                              <3>         ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
   208                              <3>         ; %endif
   209                              <3>     %endmacro
   210                              <3> 
   211                              <3>     %macro epilog 0
   212                              <3>         popallq
   213                              <3> 
   214                              <3>         mov rsp, rbp
   215                              <3>         pop rbp
   216                              <3>         ret
   217                              <3>     %endmacro
   218                              <3> 
   219                              <3>     %macro get_param 2;1=register, 2=param index(from 1)
   220                              <3>         mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   221                              <3>     %endmacro
   222                              <3> 
   223                              <3>     %macro set_ret_param 2;1=register, 2=param index(from 1)
   224                              <3>         mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   225                              <3>     %endmacro
   226                              <3> 
   227                              <3>     %macro prepare_call 2;1=param count, 2=return param count
   228                              <3>         %assign total_space ((%1 + %2) * 8)
   229                              <3>         
   230                              <3>         %if (total_space % 16) != 0
   231                              <3>             %assign total_space total_space + 8  ; 添加填充
   232                              <3>         %endif
   233                              <3>         
   234                              <3>         sub rsp, total_space
   235                              <3>     %endmacro
   236                              <3> 
   237                              <3>     %macro cleanup_call 2;1=param count, 2=return param count
   238                              <3>         %assign total_space ((%1 + %2) * 8)
   239                              <3>         %if (total_space % 16) != 0
   240                              <3>             %assign total_space total_space + 8
   241                              <3>         %endif
   242                              <3>         add rsp, total_space
   243                              <3>     %endmacro
   244                              <3> 
   245                              <3>     %macro pushallq 0
   246                              <3>         push rax
   247                              <3>         push rbx
   248                              <3>         push rcx
   249                              <3>         push rdx
   250                              <3>         push rsi
   251                              <3>         push rdi
   252                              <3>         push r8
   253                              <3>         push r9
   254                              <3>         push r10
   255                              <3>         push r11
   256                              <3>         push r12
   257                              <3>         push r13
   258                              <3>         push r14
   259                              <3>         push r15
   260                              <3>     %endmacro
   261                              <3> 
   262                              <3>     %macro popallq 0
   263                              <3>         pop r15
   264                              <3>         pop r14
   265                              <3>         pop r13
   266                              <3>         pop r12
   267                              <3>         pop r11
   268                              <3>         pop r10
   269                              <3>         pop r9
   270                              <3>         pop r8
   271                              <3>         pop rdi
   272                              <3>         pop rsi
   273                              <3>         pop rdx
   274                              <3>         pop rcx
   275                              <3>         pop rbx
   276                              <3>         pop rax
   277                              <3>     %endmacro
   278                              <3> 
   279                              <3>     %endif
   280                              <3> ;---------------------ABI Standard------------------;
   281                              <3> %define USE_ABI_STANDARD
   282                              <3> %ifdef USE_ABI_STANDARD
   283                              <3> 
   284                              <3> 
   285                              <3>     %define ABI_File_None   0       ; 无文件类型
   286                              <3>     %define ABI_File_REL    1       ; 可重定位文件
   287                              <3>     %define ABI_File_EXEC   2       ; 可执行文件
   288                              <3>     %define ABI_File_DYN    3       ; 共享目标文件
   289                              <3>     %define ABI_File_CORE   4       ; 核心文件
   290                              <3> 
   291                              <3>     %define Section_Type_NULL    0      ; 未使用
   292                              <3>     %define Section_Type_LOAD    1      ; 可加载段
   293                              <3>     %define Section_Type_DYNAMIC 2      ; 动态链接信息
   294                              <3>     %define Section_Type_INTERP  3      ; 解释器路径
   295                              <3>     %define Section_Type_NOTE    4      ; 辅助信息
   296                              <3>     %define Section_Type_SHLIB   5      ; 保留
   297                              <3> 
   298                              <3>     %macro ABI_HEADER 4 ;1=File Type, 2=Entry Point Address, 3=Section Header Offset, 4=Section Header Count
   299                              <3>         db 0xA5, 'A', 'B', 'I'     ; ABI Magic Number
   300                              <3>         db 1                       ; Encode Type
   301                              <3>         db 1                       ; ABI Version
   302                              <3> 
   303                              <3>         dw %1                      ; ABI File Type
   304                              <3>         dq %2                      ; Entry Point Address
   305                              <3>         dw 32                      ; ABI Headers Size
   306                              <3> 
   307                              <3>         dq %3                      ; Section Header Offset
   308                              <3>         dw 32                      ; Section Header Size
   309                              <3>         dw %4                      ; Section Header Count
   310                              <3>         dw 0                       ; Symble Table Entry Size
   311                              <3>     %endmacro
   312                              <3>     STRUC struct_ABI_HEADER
   313                              <3>         .magic:         resb 4    ; ABI Magic Number (4 bytes)
   314                              <3>         .encode_type:   resb 1    ; Encode Type (1 byte)
   315                              <3>         .abi_version:   resb 1    ; ABI Version (1 byte)
   316                              <3>         .file_type:     resw 1    ; ABI File Type (2 bytes)
   317                              <3>         .entry_point:   resq 1    ; Entry Point Address (8 bytes)
   318                              <3>         .header_size:   resw 1    ; ABI Headers Size (2 bytes)
   319                              <3>         .section_offset: resq 1   ; Section Header Offset (8 bytes)
   320                              <3>         .section_size:  resw 1    ; Section Header Size (2 bytes)
   321                              <3>         .section_count: resw 1    ; Section Header Count (2 bytes)
   322                              <3>         .sym_table_size: resw 1   ; Symbol Table Entry Size (2 bytes)
   323                              <3>     ENDSTRUC
   324                              <3> 
   325                              <3>     %macro SECTION_HEADER 4 ;1=Section Type, 2=Virtual Address, 3=Section Offset, 4=Section Size
   326                              <3>         dq %1                  ; Section Type
   327                              <3>         dq %2                  ; Virtual Address
   328                              <3>         dq %3                  ; Section Offset
   329                              <3>         dq %4                  ; Section Size
   330                              <3>     %endmacro
   331                              <3>     STRUC struct_SECTION_HEADER
   332                              <3>         .type:      resq 1    ; Section Type (8 bytes)
   333                              <3>         .vaddr:     resq 1    ; Virtual Address (8 bytes)
   334                              <3>         .offset:    resq 1    ; Section Offset (8 bytes)
   335                              <3>         .size:      resq 1    ; Section Size (8 bytes)
   336                              <3>     ENDSTRUC
   337                              <3>     %endif
   338                              <3> 
   339                              <3> %endif
     6                              <2> 
     7                              <2> [BITS 64]
     8                              <2> ; GDTPointerUpperAddr equ 0xFFFF800000104000
     9                              <2> ; IDTPointerUpperAddr equ 0xFFFF80000010400a
    10                              <2> ; TSSPointerUpperAddr equ 0xFFFF800000104004
    11                              <2> 
    12                              <2> 
    13                              <2> ; ; 描述符类型常量
    14                              <2> %define INTGATE 0x8E    ; 64位中断门(P=1, DPL=00, 类型=1110)
    15                              <2> %define TRAPGATE 0x8F   ; 64位陷阱门(P=1, DPL=00, 类型=1111)
    16                              <2> 
    17                              <2> ; ; 64位IDT条目结构(16字节)
    18                              <2> struc idt_info
    19 00000000 ????                <2>     .offset_low:   resw 1  ; 偏移低16位(0..15)
    20 00000002 ????                <2>     .selector:     resw 1  ; 代码段选择子
    21                              <2> 
    22 00000004 ??                  <2>     .ist:          resb 1  ; IST索引(0表示不使用)
    23 00000005 ??                  <2>     .type_attr:    resb 1  ; 类型属性
    24                              <2> 
    25 00000006 ????                <2>     .offset_mid:   resw 1  ; 偏移中16位(16..31)
    26                              <2> 
    27 00000008 ????????            <2>     .offset_high:  resd 1  ; 偏移高32位(32..63)
    28                              <2> 
    29 0000000C ????????            <2>     .reserved:     resd 1  ; 保留
    30                              <2> endstruc
    31                              <2> init_interrupt:;init expection idt
    32                              <2>     prolog 0;
   192 000019D7 55                  <3>  push rbp
   193 000019D8 4889E5              <3>  mov rbp, rsp
   194                              <3> 
   195                              <3> 
   196 000019DB 488945F8            <3>  mov [rbp-8],rax
   197 000019DF B800000000          <3>  mov rax, %1
   198 000019E4 4883C00F            <3>  add rax, 15
   199 000019E8 4883E0F0            <3>  and rax, ~15
   200 000019EC 4829C4              <3>  sub rsp, rax
   201 000019EF 488B45F8            <3>  mov rax,[rbp-8]
   202                              <3> 
   203                              <3>  pushallq
   246 000019F3 50                  <4>  push rax
   247 000019F4 53                  <4>  push rbx
   248 000019F5 51                  <4>  push rcx
   249 000019F6 52                  <4>  push rdx
   250 000019F7 56                  <4>  push rsi
   251 000019F8 57                  <4>  push rdi
   252 000019F9 4150                <4>  push r8
   253 000019FB 4151                <4>  push r9
   254 000019FD 4152                <4>  push r10
   255 000019FF 4153                <4>  push r11
   256 00001A01 4154                <4>  push r12
   257 00001A03 4155                <4>  push r13
   258 00001A05 4156                <4>  push r14
   259 00001A07 4157                <4>  push r15
   204                              <3> 
   205                              <3> 
   206                              <3> 
   207                              <3> 
   208                              <3> 
    33 00001A09 488D35EB000000      <2>     lea rsi,[rel default_interrupt_handler]
    34                              <2>     function setup_default_interrupt_idt,0,rsi
   120                              <3>  %assign param_count %0 - 2
   121                              <3> 
   122                              <3>  %if param_count < 0
   123                              <3>  %assign param_count 0
   124                              <3>  %endif
   125                              <3>  %if param_count < 1
   126                              <3>  %assign ret_param_count 0
   127                              <3>  %else
   128                              <3>  %assign ret_param_count %2
   129                              <3>  %endif
   130                              <3> 
   131                              <3> 
   132                              <3>  prepare_call param_count, ret_param_count
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00001A10 4883EC10            <4>  sub rsp, total_space
   133                              <3> 
   134                              <3> 
   135                              <3>  %if param_count > 0
   136                              <3>  %assign i 0
   137 00001A14 48894424F8          <3>  mov [rsp-8], rax
   138                              <3>  %rep param_count
   139                              <3>  %rotate 1
   140                              <3>  mov rax, %2
   141                              <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   143                              <3>  %endrep
   139                              <4>  %rotate 1
   140 00001A19 4889F0              <4>  mov rax, %2
   141 00001A1C 48890424            <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   144                              <3>  %rotate 1
   145                              <3>  %rotate 1
   146 00001A20 488B4424F8          <3>  mov rax,[rsp-8]
   147                              <3>  %endif
   148                              <3> 
   149                              <3> 
   150 00001A25 E81F000000          <3>  call %1
   151                              <3> 
   152                              <3> 
   153                              <3>  cleanup_call param_count, ret_param_count
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 00001A2A 4883C410            <4>  add rsp, total_space
   154                              <3> 
    35                              <2>     epilog
   212                              <3>  popallq
   263 00001A2E 415F                <4>  pop r15
   264 00001A30 415E                <4>  pop r14
   265 00001A32 415D                <4>  pop r13
   266 00001A34 415C                <4>  pop r12
   267 00001A36 415B                <4>  pop r11
   268 00001A38 415A                <4>  pop r10
   269 00001A3A 4159                <4>  pop r9
   270 00001A3C 4158                <4>  pop r8
   271 00001A3E 5F                  <4>  pop rdi
   272 00001A3F 5E                  <4>  pop rsi
   273 00001A40 5A                  <4>  pop rdx
   274 00001A41 59                  <4>  pop rcx
   275 00001A42 5B                  <4>  pop rbx
   276 00001A43 58                  <4>  pop rax
   213                              <3> 
   214 00001A44 4889EC              <3>  mov rsp, rbp
   215 00001A47 5D                  <3>  pop rbp
   216 00001A48 C3                  <3>  ret
    36                              <2>     
    37                              <2> setup_default_interrupt_idt:;setup expection idt 0~31
    38                              <2>     prolog 0;
   192 00001A49 55                  <3>  push rbp
   193 00001A4A 4889E5              <3>  mov rbp, rsp
   194                              <3> 
   195                              <3> 
   196 00001A4D 488945F8            <3>  mov [rbp-8],rax
   197 00001A51 B800000000          <3>  mov rax, %1
   198 00001A56 4883C00F            <3>  add rax, 15
   199 00001A5A 4883E0F0            <3>  and rax, ~15
   200 00001A5E 4829C4              <3>  sub rsp, rax
   201 00001A61 488B45F8            <3>  mov rax,[rbp-8]
   202                              <3> 
   203                              <3>  pushallq
   246 00001A65 50                  <4>  push rax
   247 00001A66 53                  <4>  push rbx
   248 00001A67 51                  <4>  push rcx
   249 00001A68 52                  <4>  push rdx
   250 00001A69 56                  <4>  push rsi
   251 00001A6A 57                  <4>  push rdi
   252 00001A6B 4150                <4>  push r8
   253 00001A6D 4151                <4>  push r9
   254 00001A6F 4152                <4>  push r10
   255 00001A71 4153                <4>  push r11
   256 00001A73 4154                <4>  push r12
   257 00001A75 4155                <4>  push r13
   258 00001A77 4156                <4>  push r14
   259 00001A79 4157                <4>  push r15
   204                              <3> 
   205                              <3> 
   206                              <3> 
   207                              <3> 
   208                              <3> 
    39                              <2>     get_param rsi, 1
   220 00001A7B 488B7510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
    40 00001A7F 4989F0              <2>     mov r8,rsi
    41 00001A82 49C1E820            <2>     shr r8,32
    42 00001A86 4989F1              <2>     mov r9,rsi
    43 00001A89 49C1E910            <2>     shr r9,16
    44 00001A8D 4981E1FFFF0000      <2>     and r9,0xFFFF
    45                              <2> 
    46 00001A94 B920000000          <2>     mov rcx,32
    47 00001A99 48BB0A4010000080FF- <2>     mov rbx,IDTPointerUpperAddr
    47 00001AA2 FF                  <2>
    48 00001AA3 488B4302            <2>     mov rax,[rbx + 2]
    49                              <2>     
    50 00001AA7 BA20000000          <2>     mov rdx,32
    51 00001AAC 48C1E204            <2>     shl rdx, 4
    52 00001AB0 4801D0              <2>     add rax, rdx
    53                              <2> 
    54                              <2>     .expection_idt:
    55 00001AB3 668930              <2>         mov word [rax + idt_info.offset_low], si
    56 00001AB6 66C740020800        <2>         mov word [rax + idt_info.selector], 0x08
    57                              <2> 
    58 00001ABC C6400400            <2>         mov byte [rax + idt_info.ist], 0x00
    59 00001AC0 C640058E            <2>         mov byte [rax + idt_info.type_attr], INTGATE
    60                              <2> 
    61 00001AC4 6644894806          <2>         mov word [rax + idt_info.offset_mid], r9w
    62                              <2> 
    63 00001AC9 4C894008            <2>         mov qword [rax + idt_info.offset_high], r8
    64                              <2> 
    65 00001ACD 4883C010            <2>         add rax, 16
    66 00001AD1 48FFC1              <2>         inc rcx
    67 00001AD4 4881F900010000      <2>         cmp rcx, 256
    68 00001ADB 7ED6                <2>         jle .expection_idt
    69                              <2> 
    70 00001ADD 0F011B              <2>     lidt	[rbx]
    71                              <2>     epilog
   212                              <3>  popallq
   263 00001AE0 415F                <4>  pop r15
   264 00001AE2 415E                <4>  pop r14
   265 00001AE4 415D                <4>  pop r13
   266 00001AE6 415C                <4>  pop r12
   267 00001AE8 415B                <4>  pop r11
   268 00001AEA 415A                <4>  pop r10
   269 00001AEC 4159                <4>  pop r9
   270 00001AEE 4158                <4>  pop r8
   271 00001AF0 5F                  <4>  pop rdi
   272 00001AF1 5E                  <4>  pop rsi
   273 00001AF2 5A                  <4>  pop rdx
   274 00001AF3 59                  <4>  pop rcx
   275 00001AF4 5B                  <4>  pop rbx
   276 00001AF5 58                  <4>  pop rax
   213                              <3> 
   214 00001AF6 4889EC              <3>  mov rsp, rbp
   215 00001AF9 5D                  <3>  pop rbp
   216 00001AFA C3                  <3>  ret
    72                              <2> 
    73                              <2> 
    74                              <2> default_interrupt_handler:;
    75 00001AFB 48B8ABAAAAAAAAAA00- <2>     mov rax,0xaaaaaaaaaaab
    75 00001B04 00                  <2>
    76 00001B05 EBFE                <2>     jmp $
    77 00001B07 48CF                <2>     iretq
    78                              <2> 
    79                              <2> ; make_call_gate:                          	;创建64位的调用门
    80                              <2> ;                                           	;输入：RAX=例程的线性地址
    81                              <2> ;                                           	;输出：RDI:RSI=调用门
    82                              <2> ;          mov rdi, rax
    83                              <2> ;          shr rdi, 32                     	;得到门的高64位，在RDI中
    84                              <2> 
    85                              <2> ;          push rax                        	;构造数据结构，并预置线性地址的位15~0
    86                              <2> ;          mov word [rsp + 2], CORE_CODE64_SEL	;预置段选择子部分
    87                              <2> ;          mov [rsp + 4], eax                  	;预置线性地址的位31~16
    88                              <2> ;          mov word [rsp + 4], 0x8c00         	;添加P=1，TYPE=64位调用门
    89                              <2> ;          pop rsi
    90                              <2> 
    91                              <2> ;          ret
    92                              <2> 
    93                              <2> ; ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    94                              <2> ; make_interrupt_gate:                      	;创建64位的中断门
    95                              <2> ;                                             	;输入：RAX=例程的线性地址
    96                              <2> ;                                             	;输出：RDI:RSI=中断门
    97                              <2> ;          mov rdi, rax
    98                              <2> ;          shr rdi, 32                       	;得到门的高64位，在RDI中
    99                              <2> 
   100                              <2> ;          push rax                          	;构造数据结构，并预置线性地址的位15~0
   101                              <2> ;          mov word [rsp + 2], CORE_CODE64_SEL	;预置段选择子部分
   102                              <2> ;          mov [rsp + 4], eax                  	;预置线性地址的位31~16
   103                              <2> ;          mov word [rsp + 4], 0x8e00         	;添加P=1，TYPE=64位中断门
   104                              <2> ;          pop rsi
   105                              <2> 
   106                              <2> ;          ret
   107                              <2> 
   108                              <2> ; ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   109                              <2> ; make_trap_gate:                             	;创建64位的陷阱门
   110                              <2> ;                                              	;输入：RAX=例程的线性地址
   111                              <2> ;                                              	;输出：RDI:RSI=陷阱门
   112                              <2> ;          mov rdi, rax
   113                              <2> ;          shr rdi, 32                        	;得到门的高64位，在RDI中
   114                              <2> 
   115                              <2> ;          push rax                           	;构造数据结构，并预置线性地址的位15~0
   116                              <2> ;          mov word [rsp + 2], CORE_CODE64_SEL	;预置段选择子部分
   117                              <2> ;          mov [rsp + 4], eax                  	;预置线性地址的位31~16
   118                              <2> ;          mov word [rsp + 4], 0x8f00         	;添加P=1，TYPE=64位陷阱门
   119                              <2> ;          pop rsi
   120                              <2> 
   121                              <2> ;          ret
   122                              <2> 
   123                              <2> ; ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   124                              <2> ; make_tss_descriptor:                    	;创建64位的TSS描述符
   125                              <2> ;                                           	;输入：RAX=TSS的线性地址
   126                              <2> ;                                           	;输出：RDI:RSI=TSS描述符
   127                              <2> ;          push rax
   128                              <2> 
   129                              <2> ;          mov rdi, rax
   130                              <2> ;          shr rdi, 32                    	;得到门的高64位，在RDI中
   131                              <2> 
   132                              <2> ;          push rax                       	;先将部分线性地址移到适当位置
   133                              <2> ;          shl qword [rsp], 16           	;将线性地址的位23~00移到正确位置
   134                              <2> ;          mov word [rsp], 104           	;段界限的标准长度
   135                              <2> ;          mov al, [rsp + 5]
   136                              <2> ;          mov [rsp + 7], al             	;将线性地址的位31~24移到正确位置
   137                              <2> ;          mov byte [rsp + 5], 0x89     	;P=1，DPL=00，TYPE=1001（64位TSS）
   138                              <2> ;          mov byte [rsp + 6], 0        	;G、0、0、AVL和limit
   139                              <2> ;          pop rsi                       	;门的低64位
   140                              <2> 
   141                              <2> ;          pop rax
   142                              <2> 
   143                              <2> ;          ret
   144                              <2> 
   145                              <2> ; ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   146                              <2> ; mount_idt_entry:                     	;在中断描述符表IDT中安装门描述符
   147                              <2> ;                                        	;R8=中断向量
   148                              <2> ;                                        	;RDI:RSI=门描述符
   149                              <2> ;          push r8
   150                              <2> ;          push r9
   151                              <2> 
   152                              <2> ;          shl r8, 4                         	;中断号乘以16，得到表内偏移
   153                              <2> ;          mov r9, UPPER_IDT_LINEAR        	;中断描述符表的高端线性地址
   154                              <2> ;          mov [r9 + r8], rsi
   155                              <2> ;          mov [r9 + r8 + 8], rdi
   156                              <2> 
   157                              <2> ;          pop r9
   158                              <2> ;          pop r8
   159                              <2> 
   160                              <2> ;          ret
   161                              <2> %endif
   222                              <1> %include "../kernel/memory.asm"
     1                              <2> %ifndef MEMORY_ASM
     2                              <2> %define MEMORY_ASM
     3                              <2> 
     4                              <2> %include "../bootloader/global_def.asm"
     1                              <3> %ifndef GLOBAL_DEF_ASM
     2                              <3> %define GLOBAL_DEF_ASM
     3                              <3> %define PLATFORM_QEMU_X64 1
     4                              <3> %define PLATFORM_X64 2
     5                              <3> %define DEBUG_PLATFORM PLATFORM_QEMU_X64
     6                              <3> %define DEBUG_MODE 1
     7                              <3> 
     8                              <3> 
     9                              <3> ;|----------------------|
    10                              <3> ;|	100000 ~ END	|
    11                              <3> ;|	   KERNEL	|
    12                              <3> ;|----------------------|
    13                              <3> ;|	E0000 ~ 100000	|
    14                              <3> ;| Extended System BIOS |
    15                              <3> ;|----------------------|
    16                              <3> ;|	C0000 ~ Dffff	|
    17                              <3> ;|     Expansion Area   |
    18                              <3> ;|----------------------|
    19                              <3> ;|	A0000 ~ bffff	|
    20                              <3> ;|   Legacy Video Area  |
    21                              <3> ;|----------------------|
    22                              <3> ;|	9f000 ~ A0000	|
    23                              <3> ;|	 BIOS reserve	|
    24                              <3> ;|----------------------|
    25                              <3> ;|	90000 ~ 9f000	|
    26                              <3> ;|	 kernel tmpbuf	|
    27                              <3> ;|----------------------|
    28                              <3> ;|	10000 ~ 90000	|
    29                              <3> ;|	   LOADER	|
    30                              <3> ;|----------------------|
    31                              <3> ;|	8000 ~ 10000	|
    32                              <3> ;|	  VBE info	|
    33                              <3> ;|----------------------|
    34                              <3> ;|	7e00 ~ 8000	|
    35                              <3> ;|	  mem info	|
    36                              <3> ;|----------------------|
    37                              <3> ;|	7c00 ~ 7e00	|
    38                              <3> ;|	 MBR (BOOT)	|
    39                              <3> ;|----------------------|
    40                              <3> ;|	0000 ~ 7c00	|
    41                              <3> ;|	 BIOS Code	|
    42                              <3> ;|----------------------|
    43                              <3> 
    44                              <3> 
    45                              <3> ;_______________________________________________________
    46                              <3> ; START	END	    SIZE	        USED
    47                              <3> ; FFFF0	FFFFF	16B	        BIOS System Entry
    48                              <3> ; F0000	FFFEF	64KB-16B	BIOS System Code
    49                              <3> ; C8000	EFFFF	160KB	    ROM/Mapped IO
    50                              <3> ; C0000	C7FFF	32KB	    Graphic Adapter BIOS
    51                              <3> ; B8000	BFFFF	32KB	    Chroma Text Video Buffer
    52                              <3> ; B0000	B7FFF	32KB	    Mono Text Video Buffer
    53                              <3> ; A0000	AFFFF	64KB	    Graphic Video Buffer
    54                              <3> ; 9FC00	9FFFF	1KB	        Extended BIOS Data Area
    55                              <3> ; 7E00	9FBFF	622080B     Useable 608KB	
    56                              <3> ; 7C00	7DFF	512B	    MBR
    57                              <3> ; 500	7BFF	30464B      Useable 30KB	
    58                              <3> ; 400	4FF	    256B	    BIOS Data Area
    59                              <3> ; 000	3FF	    1KB	        IVT
    60                              <3> ; _____________________________________________________
    61                              <3> 
    62                              <3> 
    63                              <3> 
    64                              <3> 
    65                              <3> 
    66                              <3> 
    67                              <3> 
    68                              <3> 
    69                              <3> 
    70                              <3> 
    71                              <3> 
    72                              <3> ;|----------------------|
    73                              <3> ;|	100000 ~ END	|
    74                              <3> ;|	   KERNEL	|
    75                              <3> ;|----------------------|
    76                              <3> ;|	E0000 ~ 100000	|
    77                              <3> ;| Extended System BIOS |
    78                              <3> ;|----------------------|
    79                              <3> ;|	C0000 ~ Dffff	|
    80                              <3> ;|     Expansion Area   |
    81                              <3> ;|----------------------|
    82                              <3> ;|	A0000 ~ bffff	|
    83                              <3> ;|   Legacy Video Area  |
    84                              <3> ;|----------------------|
    85                              <3> ;|	9F000 ~ A0000	|
    86                              <3> ;|	 BIOS reserve	|
    87                              <3> ;|----------------------|
    88                              <3> ;|	90000 ~ 9F000	|
    89                              <3> ;|	 kernel tmpbuf	|
    90                              <3> ;|----------------------|
    91                              <3> ;|	10000 ~ 90000	|
    92                              <3> ;|	   LOADER	|
    93                              <3> ;|----------------------|
    94                              <3> ;|	8000 ~ 10000	|
    95                              <3> ;|	  VBE info	|
    96                              <3> ;|----------------------|
    97                              <3> ;|	7E00 ~ 8000	|
    98                              <3> ;|	  mem info	|
    99                              <3> ;|----------------------|
   100                              <3> ;|	7C00 ~ 7E00	|
   101                              <3> ;|	 MBR (BOOT)	|
   102                              <3> ;|----------------------|
   103                              <3> ;|	0000 ~ 7C00	|
   104                              <3> ;|	 BIOS Code	|
   105                              <3> ;|----------------------|
   106                              <3> 
   107                              <3> 
   108                              <3> 
   109                              <3> 
   110                              <3> 
   111                              <3> 
   112                              <3> 
   113                              <3> 
   114                              <3> 
   115                              <3> 
   116                              <3> ;______________________________________________
   117                              <3> ; ----------------Vbe Info Block------------
   118                              <3> ; typedef struct {
   119                              <3> ;     unsigned char       vbe_signature;
   120                              <3> ;     unsigned short      vbe_version;
   121                              <3> ;     unsigned long       oem_string_ptr;
   122                              <3> ;     unsigned char       capabilities;
   123                              <3> ;     unsigned long       video_mode_ptr;
   124                              <3> ;     unsigned short      total_memory;
   125                              <3> ;     unsigned short      oem_software_rev;
   126                              <3> ;     unsigned long       oem_vendor_name_ptr;
   127                              <3> ;     unsigned long       oem_product_name_ptr;
   128                              <3> ;     unsigned long       oem_product_rev_ptr;
   129                              <3> ;     unsigned char       reserved[222];
   130                              <3> ;     unsigned char       oem_data[256];  
   131                              <3> ; } VbeInfoBlock;
   132                              <3> ;______________________________________________
   133                              <3> 
   134                              <3> 
   135                              <3> BaseOfKernelFile	equ	0x00
   136                              <3> OffsetOfKernelFile	equ	0x100000
   137                              <3> BaseTmpOfKernelAddr	equ	0x9000
   138                              <3> OffsetTmpOfKernelFile	equ	0x0000
   139                              <3> VBEStructBufferAddr	equ	0x8000
   140                              <3> VBEModeStructBufferAddr	equ	0x8200
   141                              <3> MemoryStructBufferAddr	equ	0x8800
   142                              <3> 
   143                              <3> 
   144                              <3> 
   145                              <3> KernelSpaceUpperAddress equ 0xFFFF800000000000
   146                              <3> 
   147                              <3> GDTPointerUpperAddr equ 0xFFFF800000104000
   148                              <3> IDTPointerUpperAddr equ 0xFFFF80000010400a
   149                              <3> TSSPointerUpperAddr equ 0xFFFF800000104014
   150                              <3> 
   151                              <3> VideoFrameBufferAddress equ 0xFFFF800003000000
   152                              <3> KernelStartSectorNum	equ	16
   153                              <3> 
   154                              <3> 
   155                              <3> 
   156                              <3> 
   157                              <3> MasterSectorReadNumPort    equ	0x1F2
   158                              <3> MasterSectorReadPort    equ	0x1F0
   159                              <3> 
   160                              <3> SlaveReadNumPort    equ	0x172
   161                              <3> SlaveSectorReadPort    equ	0x170
   162                              <3> 
   163                              <3> SectorReadNumPort    equ	MasterSectorReadNumPort
   164                              <3> SectorReadPort    equ	MasterSectorReadPort
   165                              <3> 
   166                              <3> struc vbe_info_block
   167                              <3>     .signature                 resb 4    ; 'VESA' signature (must be "VESA")
   168                              <3>     .version                   resw 1    ; VBE version (e.g., 0x0300 for VBE 3.0)
   169                              <3>     .oem_string_ptr            resd 1    ; Pointer to OEM string
   170                              <3>     .capabilities              resd 1    ; Capabilities of the video card
   171                              <3>     .video_mode_ptr            resd 1    ; Pointer to supported video modes
   172                              <3>     .total_memory              resw 1    ; Total memory in 64KB blocks
   173                              <3> 
   174                              <3>     ; VBE 2.0+ fields
   175                              <3>     .oem_software_rev          resw 1    ; OEM software revision
   176                              <3>     .oem_vendor_name_ptr       resd 1    ; Pointer to OEM vendor name string
   177                              <3>     .oem_product_name_ptr      resd 1    ; Pointer to OEM product name string
   178                              <3>     .oem_product_rev_ptr       resd 1    ; Pointer to OEM product revision string
   179                              <3>     .reserved                  resb 222  ; Reserved for VBE implementation
   180                              <3>     .oem_data                  resb 256  ; Data area for OEM-specific information
   181                              <3> endstruc
   182                              <3> 
   183                              <3> struc vbe_mode_info_block
   184                              <3>     .attributes                resw 1    ; Mode attributes
   185                              <3>     .winA_attributes           resb 1    ; Window A attributes
   186                              <3>     .winB_attributes           resb 1    ; Window B attributes
   187                              <3>     .win_granularity           resw 1    ; Window granularity in KB
   188                              <3>     .win_size                  resw 1    ; Window size in KB
   189                              <3>     .winA_segment              resw 1    ; Window A segment
   190                              <3>     .winB_segment              resw 1    ; Window B segment
   191                              <3>     .win_func_ptr              resd 1    ; Pointer to window function
   192                              <3>     .bytes_per_scanline        resw 1    ; Bytes per scanline
   193                              <3> 
   194                              <3>     ; VBE 1.2+ fields
   195                              <3>     .x_resolution              resw 1    ; Horizontal resolution in pixels
   196                              <3>     .y_resolution              resw 1    ; Vertical resolution in pixels
   197                              <3>     .x_char_size               resb 1    ; Character cell width in pixels
   198                              <3>     .y_char_size               resb 1    ; Character cell height in pixels
   199                              <3>     .number_of_planes          resb 1    ; Number of memory planes
   200                              <3>     .bits_per_pixel            resb 1    ; Bits per pixel
   201                              <3>     .number_of_banks           resb 1    ; Number of banks
   202                              <3>     .memory_model              resb 1    ; Memory model type
   203                              <3>     .bank_size                 resb 1    ; Bank size in KB
   204                              <3>     .number_of_image_pages     resb 1    ; Number of images
   205                              <3>     .reserved1                 resb 1    ; Reserved
   206                              <3> 
   207                              <3>     ; Direct Color fields (VBE 1.2+)
   208                              <3>     .red_mask_size             resb 1    ; Size of direct color red mask
   209                              <3>     .red_field_position        resb 1    ; Bit position of red mask
   210                              <3>     .green_mask_size           resb 1    ; Size of direct color green mask
   211                              <3>     .green_field_position      resb 1    ; Bit position of green mask
   212                              <3>     .blue_mask_size            resb 1    ; Size of direct color blue mask
   213                              <3>     .blue_field_position       resb 1    ; Bit position of blue mask
   214                              <3>     .reserved_mask_size        resb 1    ; Size of direct color reserved mask
   215                              <3>     .reserved_field_position   resb 1    ; Bit position of reserved mask
   216                              <3>     .direct_color_mode_info    resb 1    ; Direct color mode attributes
   217                              <3> 
   218                              <3>     ; VBE 2.0+ fields
   219                              <3>     .phys_base_ptr             resd 1    ; Physical address for flat memory frame buffer
   220                              <3>     .reserved2                 resd 1    ; Reserved
   221                              <3>     .reserved3                 resw 1    ; Reserved
   222                              <3> 
   223                              <3>     ; VBE 3.0+ fields
   224                              <3>     .lin_bytes_per_scanline    resw 1    ; Bytes per scanline for linear modes
   225                              <3>     .bnk_number_of_image_pages resb 1    ; Number of images for banked modes
   226                              <3>     .lin_number_of_image_pages resb 1    ; Number of images for linear modes
   227                              <3>     .lin_red_mask_size         resb 1    ; Size of direct color red mask (linear modes)
   228                              <3>     .lin_red_field_position    resb 1    ; Bit position of red mask (linear modes)
   229                              <3>     .lin_green_mask_size       resb 1    ; Size of direct color green mask (linear modes)
   230                              <3>     .lin_green_field_position  resb 1    ; Bit position of green mask (linear modes)
   231                              <3>     .lin_blue_mask_size        resb 1    ; Size of direct color blue mask (linear modes)
   232                              <3>     .lin_blue_field_position   resb 1    ; Bit position of blue mask (linear modes)
   233                              <3>     .lin_reserved_mask_size    resb 1    ; Size of direct color reserved mask (linear modes)
   234                              <3>     .lin_reserved_field_position resb 1  ; Bit position of reserved mask (linear modes)
   235                              <3>     .max_pixel_clock           resd 1    ; Maximum pixel clock (Hz)
   236                              <3>     .reserved4                 resb 190  ; Reserved for future expansion
   237                              <3> endstruc
   238                              <3> 
   239                              <3> struc e820_memory_entry
   240                              <3>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   241                              <3>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   242                              <3>     .length_low               resd 1    ; Lower 32 bits of the length
   243                              <3>     .length_high              resd 1    ; Upper 32 bits of the length
   244                              <3>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   245                              <3>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   246                              <3> endstruc
   247                              <3> 
   248                              <3> %endif
     5                              <2> %include "../kernel/stddef.asm"
     1                              <3> %ifndef STDDEF_ASM
     2                              <3> %define STDDEF_ASM
     3                              <3> 
     4                              <3> ;-----------Data Type Standard------------;
     5                              <3> %define USE_DT_STANDARD
     6                              <3> %ifdef USE_DT_STANDARD
     7                              <3>     %macro gbyte 1 ; 参数1：变量名, 参数2：初始值(1字节)
     8                              <3>         %1: db %2
     9                              <3>         %endmacro
    10                              <3> 
    11                              <3>     %macro g2byte 1 ; 参数1：变量名, 参数2：初始值(4字节)
    12                              <3>         %1: dw %2
    13                              <3>         %endmacro
    14                              <3> 
    15                              <3>     %macro g4byte 1 ; 参数1：变量名, 参数2：初始值(4字节)
    16                              <3>         %1: dd %2
    17                              <3>         %endmacro
    18                              <3> 
    19                              <3>     %macro g8byte 1 ; 参数1：变量名, 参数2：初始值(8字节)
    20                              <3>         %1: dq %2
    21                              <3>         %endmacro
    22                              <3> 
    23                              <3> 
    24                              <3>     ; %macro lvar 1
    25                              <3>     ;     %define %1 qword [rbp - 112-(__local_offset + 8)]
    26                              <3> 
    27                              <3>     ;     %assign __local_offset  __local_offset + 8
    28                              <3> 
    29                              <3>     ;     sub rsp, 8
    30                              <3>     ;     %endmacro
    31                              <3> 
    32                              <3>     ; 初始化局部变量追踪
    33                              <3>     %macro LOCAL_BEGIN 0
    34                              <3>         %push local_ctx              ; 创建新的局部上下文
    35                              <3>         %assign %$local_offset 0     ; 初始化局部偏移计数器
    36                              <3>     %endmacro
    37                              <3> 
    38                              <3>     ; 定义局部变量
    39                              <3>     ; %1 - 变量名
    40                              <3>     ; %2 - 变量大小(字节)
    41                              <3>     %macro lvar 1
    42                              <3>         %assign %$local_offset %$local_offset+8   ; 累加偏移
    43                              <3>         %define %$var_%1 %$local_offset               ; 定义变量偏移
    44                              <3>         %define %1 qword [rbp - %$var_%1]
    45                              <3>         sub rsp,8
    46                              <3>     %endmacro
    47                              <3> 
    48                              <3>     %macro lstr 1
    49                              <3>         %assign %$local_offset %$local_offset+8   ; 累加偏移
    50                              <3>         %define %$str_%1 %$local_offset               ; 定义变量偏移
    51                              <3>         %define %1  rbp - %$str_%1
    52                              <3>         %define %1.size 5
    53                              <3>         sub rsp,%1.size
    54                              <3>     %endmacro
    55                              <3> 
    56                              <3>     ; 分配栈空间并保存寄存器
    57                              <3>     %macro lalloc 0
    58                              <3>         %if %$local_offset > 0
    59                              <3>             ; 16字节对齐
    60                              <3>             %assign pad (16 - (%$local_offset % 16))
    61                              <3>             %if pad < 16
    62                              <3>                 %assign %$local_offset %$local_offset + pad
    63                              <3>             %endif
    64                              <3>             sub rsp, %$local_offset
    65                              <3>         %endif
    66                              <3>     %endmacro
    67                              <3> 
    68                              <3> 
    69                              <3>     ; ; 获取局部变量的访问表达式
    70                              <3>     ; %macro locvar 1-*
    71                              <3>     ;     ; [rbp - %$var_%1 ]
    72                              <3> 
    73                              <3>     ;     %ifctx local_ctx
    74                              <3>     ;         ; %ifidn %2, ""
    75                              <3>     ;             qword [rbp - %$var_%1]
    76                              <3>     ;         ; %else
    77                              <3>     ;         ;     [rbp - %$var_%1 - %2]
    78                              <3>     ;         ; %endif
    79                              <3>     ;     %endif
    80                              <3>     ; %endmacro
    81                              <3> 
    82                              <3>     ;     %macro locvar 1-2
    83                              <3>     ;     ; [rbp - %$var_%1 ]
    84                              <3> 
    85                              <3>     ;     %ifctx local_ctx
    86                              <3>     ;         %ifidn %2, ""
    87                              <3>     ;             [rbp - %$var_%1]
    88                              <3>     ;         %else
    89                              <3>     ;             [rbp - %$var_%1 - %2]
    90                              <3>     ;         %endif
    91                              <3>     ;     %endif
    92                              <3>     ; %endmacro
    93                              <3> 
    94                              <3> 
    95                              <3> %endif
    96                              <3> 
    97                              <3> ;-----------Calling Conventions Standard------------;
    98                              <3> %define USE_CC_STANDARD
    99                              <3> %ifdef USE_CC_STANDARD
   100                              <3> 
   101                              <3>     ;caller maintain the stack balance 
   102                              <3>         ; debug_times: db 0
   103                              <3>         ; cmp byte [rel debug_times],3
   104                              <3>         ; je debug_stop
   105                              <3>         ; add byte [rel debug_times],1
   106                              <3>     ; -------------------------------
   107                              <3>     ; 栈帧结构定义
   108                              <3>     ; -------------------------------
   109                              <3>     ; 调用后的栈布局:
   110                              <3>     ; [rsp+0x00] 返回地址 (8字节)
   111                              <3>     ; [rsp+0x08] 旧RBP     (8字节) <- rbp指向这里
   112                              <3>     ; [rsp+0x10] 参数1     (8字节)
   113                              <3>     ; [rsp+0x18] 参数2
   114                              <3>     ; ...
   115                              <3>     ; [rsp+X]    局部变量区
   116                              <3>     ; -------------------------------
   117                              <3> 
   118                              <3>     %define PARAM_OFFSET   16      ; 第一个参数的偏移量(返回地址8 + 旧RBP8)
   119                              <3>     %macro function 1-* ; 1=函数名, 2=返回参数数量, 3=参数列表
   120                              <3>         %assign param_count %0 - 2 ; 参数数量
   121                              <3>         
   122                              <3>         %if param_count < 0
   123                              <3>             %assign param_count 0 ; 如果没有参数，设置为 0
   124                              <3>         %endif
   125                              <3>         %if param_count < 1
   126                              <3>             %assign ret_param_count 0 ; 返回参数数量
   127                              <3>         %else
   128                              <3>             %assign ret_param_count %2 ; 返回参数数量
   129                              <3>         %endif
   130                              <3> 
   131                              <3>         ; 准备调用
   132                              <3>         prepare_call param_count, ret_param_count
   133                              <3> 
   134                              <3>         ; 如果有参数，将参数压入栈
   135                              <3>         %if param_count > 0
   136                              <3>             %assign i 0
   137                              <3>             mov [rsp-8], rax ; 保存返回地址
   138                              <3>             %rep param_count
   139                              <3>                 %rotate 1
   140                              <3>                 mov rax, %2
   141                              <3>                 mov [rsp + 8*i], rax ; 将参数压入栈
   142                              <3>                 %assign i i+1
   143                              <3>             %endrep
   144                              <3>             %rotate 1
   145                              <3>             %rotate 1
   146                              <3>             mov rax,[rsp-8]; 保存返回地址
   147                              <3>         %endif
   148                              <3> 
   149                              <3>         ; 调用函数
   150                              <3>         call %1
   151                              <3> 
   152                              <3>         ; 清理栈空间
   153                              <3>         cleanup_call param_count, ret_param_count
   154                              <3> 
   155                              <3>     %endmacro
   156                              <3> 
   157                              <3>     %macro align_stack_16 0
   158                              <3>         test rsp, 0xF
   159                              <3>         jz %%skip_align
   160                              <3>         sub rsp,8
   161                              <3>         %%skip_align:
   162                              <3>     %endmacro
   163                              <3> 
   164                              <3>     %macro prologue 0;local var size(bytes)
   165                              <3>         push rbp
   166                              <3>         mov rbp, rsp
   167                              <3> 
   168                              <3> 
   169                              <3>         pushallq
   170                              <3>         LOCAL_BEGIN
   171                              <3>         
   172                              <3> 
   173                              <3>         ; 调试信息可以放在这里
   174                              <3>         ; %ifdef DEBUG
   175                              <3>         ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
   176                              <3>         ; %endif
   177                              <3>     %endmacro
   178                              <3>     %macro epilogue 0
   179                              <3>         %pop
   180                              <3>         mov rax, rbp
   181                              <3>         sub rax, 8*14
   182                              <3>         mov rsp, rax
   183                              <3> 
   184                              <3>         popallq
   185                              <3> 
   186                              <3>         mov rsp, rbp
   187                              <3>         pop rbp
   188                              <3>         ret
   189                              <3>     %endmacro
   190                              <3> 
   191                              <3>     %macro prolog 1;local var size(bytes)
   192                              <3>         push rbp
   193                              <3>         mov rbp, rsp
   194                              <3> 
   195                              <3> 
   196                              <3>         mov [rbp-8],rax
   197                              <3>         mov rax, %1
   198                              <3>         add rax, 15
   199                              <3>         and rax, ~15
   200                              <3>         sub rsp, rax
   201                              <3>         mov rax,[rbp-8]
   202                              <3> 
   203                              <3>         pushallq
   204                              <3>         
   205                              <3>         ; 调试信息可以放在这里
   206                              <3>         ; %ifdef DEBUG
   207                              <3>         ;     mov [rbp-8], rdi    ; 保存第一个参数用于调试
   208                              <3>         ; %endif
   209                              <3>     %endmacro
   210                              <3> 
   211                              <3>     %macro epilog 0
   212                              <3>         popallq
   213                              <3> 
   214                              <3>         mov rsp, rbp
   215                              <3>         pop rbp
   216                              <3>         ret
   217                              <3>     %endmacro
   218                              <3> 
   219                              <3>     %macro get_param 2;1=register, 2=param index(from 1)
   220                              <3>         mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   221                              <3>     %endmacro
   222                              <3> 
   223                              <3>     %macro set_ret_param 2;1=register, 2=param index(from 1)
   224                              <3>         mov [rbp + PARAM_OFFSET + 8*(%2-1)], %1
   225                              <3>     %endmacro
   226                              <3> 
   227                              <3>     %macro prepare_call 2;1=param count, 2=return param count
   228                              <3>         %assign total_space ((%1 + %2) * 8)
   229                              <3>         
   230                              <3>         %if (total_space % 16) != 0
   231                              <3>             %assign total_space total_space + 8  ; 添加填充
   232                              <3>         %endif
   233                              <3>         
   234                              <3>         sub rsp, total_space
   235                              <3>     %endmacro
   236                              <3> 
   237                              <3>     %macro cleanup_call 2;1=param count, 2=return param count
   238                              <3>         %assign total_space ((%1 + %2) * 8)
   239                              <3>         %if (total_space % 16) != 0
   240                              <3>             %assign total_space total_space + 8
   241                              <3>         %endif
   242                              <3>         add rsp, total_space
   243                              <3>     %endmacro
   244                              <3> 
   245                              <3>     %macro pushallq 0
   246                              <3>         push rax
   247                              <3>         push rbx
   248                              <3>         push rcx
   249                              <3>         push rdx
   250                              <3>         push rsi
   251                              <3>         push rdi
   252                              <3>         push r8
   253                              <3>         push r9
   254                              <3>         push r10
   255                              <3>         push r11
   256                              <3>         push r12
   257                              <3>         push r13
   258                              <3>         push r14
   259                              <3>         push r15
   260                              <3>     %endmacro
   261                              <3> 
   262                              <3>     %macro popallq 0
   263                              <3>         pop r15
   264                              <3>         pop r14
   265                              <3>         pop r13
   266                              <3>         pop r12
   267                              <3>         pop r11
   268                              <3>         pop r10
   269                              <3>         pop r9
   270                              <3>         pop r8
   271                              <3>         pop rdi
   272                              <3>         pop rsi
   273                              <3>         pop rdx
   274                              <3>         pop rcx
   275                              <3>         pop rbx
   276                              <3>         pop rax
   277                              <3>     %endmacro
   278                              <3> 
   279                              <3>     %endif
   280                              <3> ;---------------------ABI Standard------------------;
   281                              <3> %define USE_ABI_STANDARD
   282                              <3> %ifdef USE_ABI_STANDARD
   283                              <3> 
   284                              <3> 
   285                              <3>     %define ABI_File_None   0       ; 无文件类型
   286                              <3>     %define ABI_File_REL    1       ; 可重定位文件
   287                              <3>     %define ABI_File_EXEC   2       ; 可执行文件
   288                              <3>     %define ABI_File_DYN    3       ; 共享目标文件
   289                              <3>     %define ABI_File_CORE   4       ; 核心文件
   290                              <3> 
   291                              <3>     %define Section_Type_NULL    0      ; 未使用
   292                              <3>     %define Section_Type_LOAD    1      ; 可加载段
   293                              <3>     %define Section_Type_DYNAMIC 2      ; 动态链接信息
   294                              <3>     %define Section_Type_INTERP  3      ; 解释器路径
   295                              <3>     %define Section_Type_NOTE    4      ; 辅助信息
   296                              <3>     %define Section_Type_SHLIB   5      ; 保留
   297                              <3> 
   298                              <3>     %macro ABI_HEADER 4 ;1=File Type, 2=Entry Point Address, 3=Section Header Offset, 4=Section Header Count
   299                              <3>         db 0xA5, 'A', 'B', 'I'     ; ABI Magic Number
   300                              <3>         db 1                       ; Encode Type
   301                              <3>         db 1                       ; ABI Version
   302                              <3> 
   303                              <3>         dw %1                      ; ABI File Type
   304                              <3>         dq %2                      ; Entry Point Address
   305                              <3>         dw 32                      ; ABI Headers Size
   306                              <3> 
   307                              <3>         dq %3                      ; Section Header Offset
   308                              <3>         dw 32                      ; Section Header Size
   309                              <3>         dw %4                      ; Section Header Count
   310                              <3>         dw 0                       ; Symble Table Entry Size
   311                              <3>     %endmacro
   312                              <3>     STRUC struct_ABI_HEADER
   313                              <3>         .magic:         resb 4    ; ABI Magic Number (4 bytes)
   314                              <3>         .encode_type:   resb 1    ; Encode Type (1 byte)
   315                              <3>         .abi_version:   resb 1    ; ABI Version (1 byte)
   316                              <3>         .file_type:     resw 1    ; ABI File Type (2 bytes)
   317                              <3>         .entry_point:   resq 1    ; Entry Point Address (8 bytes)
   318                              <3>         .header_size:   resw 1    ; ABI Headers Size (2 bytes)
   319                              <3>         .section_offset: resq 1   ; Section Header Offset (8 bytes)
   320                              <3>         .section_size:  resw 1    ; Section Header Size (2 bytes)
   321                              <3>         .section_count: resw 1    ; Section Header Count (2 bytes)
   322                              <3>         .sym_table_size: resw 1   ; Symbol Table Entry Size (2 bytes)
   323                              <3>     ENDSTRUC
   324                              <3> 
   325                              <3>     %macro SECTION_HEADER 4 ;1=Section Type, 2=Virtual Address, 3=Section Offset, 4=Section Size
   326                              <3>         dq %1                  ; Section Type
   327                              <3>         dq %2                  ; Virtual Address
   328                              <3>         dq %3                  ; Section Offset
   329                              <3>         dq %4                  ; Section Size
   330                              <3>     %endmacro
   331                              <3>     STRUC struct_SECTION_HEADER
   332                              <3>         .type:      resq 1    ; Section Type (8 bytes)
   333                              <3>         .vaddr:     resq 1    ; Virtual Address (8 bytes)
   334                              <3>         .offset:    resq 1    ; Section Offset (8 bytes)
   335                              <3>         .size:      resq 1    ; Section Size (8 bytes)
   336                              <3>     ENDSTRUC
   337                              <3>     %endif
   338                              <3> 
   339                              <3> %endif
     6                              <2> 
     7                              <2> [BITS 64]
     8                              <2> 
     9 00001B09 2D2D2D2D2D2D2D2D2D- <2> memory_physical_table db "-------------------------Physical Memory Table: %x-----------------------------\n", 0
     9 00001B12 2D2D2D2D2D2D2D2D2D- <2>
     9 00001B1B 2D2D2D2D2D2D2D5068- <2>
     9 00001B24 79736963616C204D65- <2>
     9 00001B2D 6D6F7279205461626C- <2>
     9 00001B36 653A2025782D2D2D2D- <2>
     9 00001B3F 2D2D2D2D2D2D2D2D2D- <2>
     9 00001B48 2D2D2D2D2D2D2D2D2D- <2>
     9 00001B51 2D2D2D2D2D2D2D5C6E- <2>
     9 00001B5A 00                  <2>
    10 00001B5B 2D2D2D2D2D2D2D2D2D- <2> memory_physical_usable db "-------------------------Physical Memory Usable: %x----------------------------\n", 0
    10 00001B64 2D2D2D2D2D2D2D2D2D- <2>
    10 00001B6D 2D2D2D2D2D2D2D5068- <2>
    10 00001B76 79736963616C204D65- <2>
    10 00001B7F 6D6F72792055736162- <2>
    10 00001B88 6C653A2025782D2D2D- <2>
    10 00001B91 2D2D2D2D2D2D2D2D2D- <2>
    10 00001B9A 2D2D2D2D2D2D2D2D2D- <2>
    10 00001BA3 2D2D2D2D2D2D2D5C6E- <2>
    10 00001BAC 00                  <2>
    11 00001BAD 546F74616C20506879- <2> memory_total_physical_usable_memory db "Total Physical Usable Meomry:%d\n", 0
    11 00001BB6 736963616C20557361- <2>
    11 00001BBF 626C65204D656F6D72- <2>
    11 00001BC8 793A25645C6E00      <2>
    12                              <2> 
    13 00001BCF 506879736963616C20- <2> memory_physical_address db "Physical address: %x", 0
    13 00001BD8 616464726573733A20- <2>
    13 00001BE1 257800              <2>
    14 00001BE4 202020202050687973- <2> memory_physical_length db "     Physical length: %x", 0
    14 00001BED 6963616C206C656E67- <2>
    14 00001BF6 74683A20257800      <2>
    15 00001BFD 202020202050687973- <2> memory_physical_type db "     Physical type: %d\n", 0
    15 00001C06 6963616C2074797065- <2>
    15 00001C0F 3A2025645C6E00      <2>
    16                              <2> 
    17 00001C16 0000000000000000    <2> memory_hex_messages: dq 0
    18 00001C1E 0000000000000000    <2> meomry_decimal_messages: dq 0
    19                              <2> 
    20                              <2> %define MEMORY_PAGE_OFFSET	0xffff800000000000
    21                              <2> 
    22                              <2> %define MEMORY_PAGE_GDT_SHIFT	39
    23                              <2> %define MEMORY_PAGE_1G_SHIFT	30
    24                              <2> %define MEMORY_PAGE_2M_SHIFT	21
    25                              <2> %define MEMORY_PAGE_4K_SHIFT	12
    26                              <2> 
    27                              <2> %define MEMORY_PAGE_2M_SIZE	(1 << MEMORY_PAGE_2M_SHIFT)
    28                              <2> %define MEMORY_PAGE_4K_SIZE	(1 << MEMORY_PAGE_4K_SHIFT)
    29                              <2> 
    30                              <2> %define MEMORY_PAGE_2M_MASK	(~ (MEMORY_PAGE_2M_SIZE - 1))
    31                              <2> %define MEMORY_PAGE_4K_MASK	(~ (MEMORY_PAGE_4K_SIZE - 1))
    32                              <2> 
    33                              <2> %macro MEMORY_PAGE_4K_ALIGN 1
    34                              <2>     ; Align the given address (argument 1) to the nearest 4K boundary
    35                              <2>     ; Formula: ((addr + PAGE_4K_SIZE - 1) & PAGE_4K_MASK)
    36                              <2> 
    37                              <2>     mov qword[rsp],%1
    38                              <2>     add qword[rsp],MEMORY_PAGE_4K_SIZE - 1
    39                              <2>     and qword[rsp],MEMORY_PAGE_4K_MASK
    40                              <2>     mov %1,qword[rsp]
    41                              <2>     ; pop %1
    42                              <2> 
    43                              <2>     ; push %1
    44                              <2>     ; push rax
    45                              <2>     ; mov rax, %1                ; Load the address into rax
    46                              <2>     ; add rax, MEMORY_PAGE_4K_SIZE - 1     ; Add 4K size - 1 (PAGE_4K_SIZE - 1)
    47                              <2>     ; and rax, MEMORY_PAGE_4K_MASK  ; Apply the 4K mask (PAGE_4K_MASK)
    48                              <2>     ; mov %1, rax                ; Store the aligned address back
    49                              <2>     ; pop rax
    50                              <2>     ; pop %1
    51                              <2>     %endmacro
    52                              <2> 
    53                              <2> %macro MEMORY_PAGE_2M_ALIGN 1
    54                              <2>     ; Align the given address (argument 1) to the nearest 2M boundary
    55                              <2>     ; Formula: ((addr + PAGE_2M_SIZE - 1) & PAGE_2M_MASK)
    56                              <2>     ; push %1
    57                              <2> 
    58                              <2> 
    59                              <2>     mov qword[rsp],%1
    60                              <2>     add qword[rsp],MEMORY_PAGE_2M_SIZE - 1
    61                              <2>     and qword[rsp],MEMORY_PAGE_2M_SIZE
    62                              <2>     mov %1,qword[rsp]
    63                              <2> 
    64                              <2>     ; push rax
    65                              <2>     ; mov rax, %1                ; Load the address into rax
    66                              <2>     ; add rax, MEMORY_PAGE_2M_SIZE - 1     ; Add 2M size - 1 (PAGE_2M_SIZE - 1)
    67                              <2>     ; and rax, MEMORY_PAGE_2M_MASK  ; Apply the 2M mask (PAGE_2M_MASK)
    68                              <2>     ; mov %1, rax                ; Store the aligned address back
    69                              <2>     ; pop rax
    70                              <2>     ; pop %1
    71                              <2>     %endmacro
    72                              <2> 
    73                              <2> struc global_memory_info
    74 00000000 ????????????????    <2>     .e820_addr:    resq 1  ; 0  32 e820 address
    75 00000008 ????????????????    <2>     .e820_size:    resq 1  ; 8  e820 usable meomory zone size
    76 00000010 ????????????????    <2>     .e820_count:   resq 1  ; 16 e820 usable meomory zone count
    77                              <2> 
    78 00000018 ????????????????    <2>     .bitmap_addr:  resq 1  ; 24 bitmap address
    79 00000020 ????????????????    <2>     .bitmap_size:  resq 1  ; 32 bitmap size
    80 00000028 ????????????????    <2>     .bitmap_count: resq 1  ; 40 bitmap count
    81                              <2> 
    82 00000030 ????????????????    <2>     .pages_addr:   resq 1  ; 48 pages address
    83 00000038 ????????????????    <2>     .pages_size:   resq 1  ; 56 pages size
    84 00000040 ????????????????    <2>     .pages_count:  resq 1  ; 64 pages count
    85                              <2> 
    86 00000048 ????????????????    <2>     .zones_addr:   resq 1  ; 72 zones address
    87 00000050 ????????????????    <2>     .zones_size:   resq 1  ; 80 zones size
    88 00000058 ????????????????    <2>     .zones_count:  resq 1  ; 88 zones count
    89                              <2> 
    90                              <2>     endstruc
    91                              <2> global_memory_info_ptr:;
    92                              <2>     istruc global_memory_info
    93                              <2> 
    94 00001C26 0000000000000000    <2>         at global_memory_info.e820_addr,    dq 0  ; 0  32 e820 address
    95 00001C2E 0000000000000000    <2>         at global_memory_info.e820_size,    dq 0  ; 8  e820 all meomory zone size
    96 00001C36 0000000000000000    <2>         at global_memory_info.e820_count,   dq 0  ; 16 e820 usable meomory zone count
    97                              <2> 
    98 00001C3E 0000000000000000    <2>         at global_memory_info.bitmap_addr,  dq 0  ; 24 bitmap address
    99 00001C46 0000000000000000    <2>         at global_memory_info.bitmap_size,  dq 0  ; 32 bitmap size
   100 00001C4E 0000000000000000    <2>         at global_memory_info.bitmap_count, dq 0  ; 40 bitmap count
   101                              <2> 
   102 00001C56 0000000000000000    <2>         at global_memory_info.pages_addr,   dq 0  ; 48 pages address
   103 00001C5E 0000000000000000    <2>         at global_memory_info.pages_size,   dq 0  ; 56 pages size
   104 00001C66 0000000000000000    <2>         at global_memory_info.pages_count,  dq 0  ; 64 pages count
   105                              <2> 
   106 00001C6E 0000000000000000    <2>         at global_memory_info.zones_addr,   dq 0  ; 72 zones address
   107 00001C76 0000000000000000    <2>         at global_memory_info.zones_size,   dq 0  ; 80 zones size
   108 00001C7E 0000000000000000    <2>         at global_memory_info.zones_count,  dq 0  ; 88 zones count
   109                              <2> 
   110                              <2>     iend
   111                              <2> 
   112                              <2> struc e820_memory_info
   113 00000000 ????????            <2>     .base_addr_low            resd 1    ; Lower 32 bits of the base address
   114 00000004 ????????            <2>     .base_addr_high           resd 1    ; Upper 32 bits of the base address
   115 00000008 ????????            <2>     .length_low               resd 1    ; Lower 32 bits of the length
   116 0000000C ????????            <2>     .length_high              resd 1    ; Upper 32 bits of the length
   117 00000010 ????????            <2>     .type                     resd 1    ; Memory type (1 = usable, others = reserved, etc.)
   118                              <2>     ; .acpi_attributes          resd 1    ; ACPI 3.0+ attributes (optional, may be zero)
   119                              <2>     endstruc
   120                              <2> 
   121                              <2> struc page_info
   122 00000000 ????????????????    <2>     .zone_info_address:     resq 1  ; 0  parent zone_info_address
   123 00000008 ????????????????    <2>     .physical_address:      resq 1  ; 8  page start physical address
   124                              <2> 
   125 00000010 ????????????????    <2>     .page_attribute:        resq 1  ; 16 page attribute
   126 00000018 ????????????????    <2>     .reference_count:       resq 1  ; 24 reference count for multi map
   127                              <2> 
   128 00000020 ????????????????    <2>     .age:                   resq 1  ; 32
   129                              <2> 
   130                              <2>  endstruc
   131                              <2> 
   132                              <2> struc zone_info
   133 00000000 ????????????????    <2>     .pages_group:                   resq 1  ; 0  zone pages start address
   134 00000008 ????????????????    <2>     .pages_length:                  resq 1  ; 8  zone pages length
   135                              <2> 
   136 00000010 ????????????????    <2>     .zone_start_address:            resq 1  ; 16 zone_start_address
   137 00000018 ????????????????    <2>     .zone_end_address:              resq 1  ; 24 zone_end_address
   138 00000020 ????????????????    <2>     .zone_length:                   resq 1  ; 32 zone_length
   139 00000028 ????????????????    <2>     .zone_attribute:                resq 1  ; 40 zone_attribute
   140                              <2> 
   141 00000030 ????????????????    <2>     .global_memory_info_address:    resq 1  ; 48 global_memory_info_address
   142                              <2> 
   143 00000038 ????????????????    <2>     .page_using_count:              resq 1  ; 56 page_using_count
   144 00000040 ????????????????    <2>     .page_free_count:               resq 1  ; 64 page_free_count
   145 00000048 ????????????????    <2>     .total_pages_link:              resq 1  ; 72 total_pages_link
   146                              <2> 
   147                              <2>  endstruc
   148                              <2> memory_init:;input:kernel_end
   149                              <2>     prolog 2;
   192 00001C86 55                  <3>  push rbp
   193 00001C87 4889E5              <3>  mov rbp, rsp
   194                              <3> 
   195                              <3> 
   196 00001C8A 488945F8            <3>  mov [rbp-8],rax
   197 00001C8E B802000000          <3>  mov rax, %1
   198 00001C93 4883C00F            <3>  add rax, 15
   199 00001C97 4883E0F0            <3>  and rax, ~15
   200 00001C9B 4829C4              <3>  sub rsp, rax
   201 00001C9E 488B45F8            <3>  mov rax,[rbp-8]
   202                              <3> 
   203                              <3>  pushallq
   246 00001CA2 50                  <4>  push rax
   247 00001CA3 53                  <4>  push rbx
   248 00001CA4 51                  <4>  push rcx
   249 00001CA5 52                  <4>  push rdx
   250 00001CA6 56                  <4>  push rsi
   251 00001CA7 57                  <4>  push rdi
   252 00001CA8 4150                <4>  push r8
   253 00001CAA 4151                <4>  push r9
   254 00001CAC 4152                <4>  push r10
   255 00001CAE 4153                <4>  push r11
   256 00001CB0 4154                <4>  push r12
   257 00001CB2 4155                <4>  push r13
   258 00001CB4 4156                <4>  push r14
   259 00001CB6 4157                <4>  push r15
   204                              <3> 
   205                              <3> 
   206                              <3> 
   207                              <3> 
   208                              <3> 
   150                              <2> 
   151                              <2>     get_param rsi, 1
   220 00001CB8 488B7510            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   152                              <2>     function parse_e820
   120                              <3>  %assign param_count %0 - 2
   121                              <3> 
   122                              <3>  %if param_count < 0
   123                              <3>  %assign param_count 0
   124                              <3>  %endif
   125                              <3>  %if param_count < 1
   126                              <3>  %assign ret_param_count 0
   127                              <3>  %else
   128                              <3>  %assign ret_param_count %2
   129                              <3>  %endif
   130                              <3> 
   131                              <3> 
   132                              <3>  prepare_call param_count, ret_param_count
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00001CBC 4883EC00            <4>  sub rsp, total_space
   133                              <3> 
   134                              <3> 
   135                              <3>  %if param_count > 0
   136                              <3>  %assign i 0
   137                              <3>  mov [rsp-8], rax
   138                              <3>  %rep param_count
   139                              <3>  %rotate 1
   140                              <3>  mov rax, %2
   141                              <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   143                              <3>  %endrep
   144                              <3>  %rotate 1
   145                              <3>  %rotate 1
   146                              <3>  mov rax,[rsp-8]
   147                              <3>  %endif
   148                              <3> 
   149                              <3> 
   150 00001CC0 E8A1010000          <3>  call %1
   151                              <3> 
   152                              <3> 
   153                              <3>  cleanup_call param_count, ret_param_count
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 00001CC5 4883C400            <4>  add rsp, total_space
   154                              <3> 
   153                              <2> 
   154                              <2>     ;Get total usable memory
   155 00001CC9 488B0D5EFFFFFF      <2>     mov rcx, qword [rel global_memory_info_ptr + global_memory_info.e820_size]
   156 00001CD0 41BE00000000        <2>     mov r14,0
   157 00001CD6 41B800000000        <2>     mov r8,0
   158 00001CDC 41BD00000000        <2>     mov r13,0
   159                              <2>     .loop_e820_table:
   160 00001CE2 4831C0              <2>         xor rax,rax
   161 00001CE5 488B1D3AFFFFFF      <2>         mov rbx,qword [rel global_memory_info_ptr + global_memory_info.e820_addr]
   162 00001CEC 4C01F3              <2>         add rbx,r14
   163                              <2> 
   164 00001CEF 8B4310              <2>         mov eax,dword [rbx + e820_memory_info.type]
   165                              <2> 
   166 00001CF2 4883F801            <2>         cmp rax,1
   167 00001CF6 753C                <2>         jne .loop_e820_table_continue
   168 00001CF8 488B13              <2>         mov rdx,qword [rbx]
   169 00001CFB 4989D0              <2>         mov r8,rdx
   170                              <2>         MEMORY_PAGE_2M_ALIGN rdx
    54                              <3> 
    55                              <3> 
    56                              <3> 
    57                              <3> 
    58                              <3> 
    59 00001CFE 48891424            <3>  mov qword[rsp],%1
    60 00001D02 48810424FFFF1F00    <3>  add qword[rsp],MEMORY_PAGE_2M_SIZE - 1
    61 00001D0A 4881242400002000    <3>  and qword[rsp],MEMORY_PAGE_2M_SIZE
    62 00001D12 488B1424            <3>  mov %1,qword[rsp]
    63                              <3> 
    64                              <3> 
    65                              <3> 
    66                              <3> 
    67                              <3> 
    68                              <3> 
    69                              <3> 
    70                              <3> 
   171 00001D16 488B4308            <2>         mov rax,qword [rbx + e820_memory_info.length_low]
   172 00001D1A 4C01C0              <2>         add rax,r8
   173 00001D1D 48C1E815            <2>         shr rax,MEMORY_PAGE_2M_SHIFT
   174 00001D21 48C1E015            <2>         shl rax,MEMORY_PAGE_2M_SHIFT
   175 00001D25 4839D0              <2>         cmp rax,rdx
   176 00001D28 7E0A                <2>         jle .loop_e820_table_continue
   177 00001D2A 4829D0              <2>         sub rax,rdx
   178 00001D2D 48C1E815            <2>         shr rax,MEMORY_PAGE_2M_SHIFT
   179 00001D31 4901C5              <2>         add r13,rax
   180                              <2> 
   181                              <2>         .loop_e820_table_continue:
   182 00001D34 4983C614            <2>             add r14,20
   183 00001D38 E2A8                <2>             loop .loop_e820_table
   184                              <2> 
   185 00001D3A 4C892DDDFEFFFF      <2>     mov [rel meomry_decimal_messages], r13
   186 00001D41 488D3565FEFFFF      <2>     lea rsi, [rel memory_total_physical_usable_memory]
   187 00001D48 488D15CFFEFFFF      <2>     lea rdx, [rel meomry_decimal_messages]
   188                              <2>     function printk,1,rsi,rdx
   120                              <3>  %assign param_count %0 - 2
   121                              <3> 
   122                              <3>  %if param_count < 0
   123                              <3>  %assign param_count 0
   124                              <3>  %endif
   125                              <3>  %if param_count < 1
   126                              <3>  %assign ret_param_count 0
   127                              <3>  %else
   128                              <3>  %assign ret_param_count %2
   129                              <3>  %endif
   130                              <3> 
   131                              <3> 
   132                              <3>  prepare_call param_count, ret_param_count
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00001D4F 4883EC20            <4>  sub rsp, total_space
   133                              <3> 
   134                              <3> 
   135                              <3>  %if param_count > 0
   136                              <3>  %assign i 0
   137 00001D53 48894424F8          <3>  mov [rsp-8], rax
   138                              <3>  %rep param_count
   139                              <3>  %rotate 1
   140                              <3>  mov rax, %2
   141                              <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   143                              <3>  %endrep
   139                              <4>  %rotate 1
   140 00001D58 4889F0              <4>  mov rax, %2
   141 00001D5B 48890424            <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   139                              <4>  %rotate 1
   140 00001D5F 4889D0              <4>  mov rax, %2
   141 00001D62 4889442408          <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   144                              <3>  %rotate 1
   145                              <3>  %rotate 1
   146 00001D67 488B4424F8          <3>  mov rax,[rsp-8]
   147                              <3>  %endif
   148                              <3> 
   149                              <3> 
   150 00001D6C E8B9F0FFFF          <3>  call %1
   151                              <3> 
   152                              <3> 
   153                              <3>  cleanup_call param_count, ret_param_count
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 00001D71 4883C420            <4>  add rsp, total_space
   154                              <3> 
   189                              <2> 
   190                              <2>     ;Get all zone physical memory to bitmap
   191 00001D75 488B0DB2FEFFFF      <2>     mov rcx, qword [rel global_memory_info_ptr + global_memory_info.e820_size]
   192 00001D7C 4883E901            <2>     sub rcx,1
   193 00001D80 B814000000          <2>     mov rax,20
   194 00001D85 48F7E1              <2>     mul rcx
   195 00001D88 488B1D97FEFFFF      <2>     mov rbx,qword [rel global_memory_info_ptr + global_memory_info.e820_addr]
   196 00001D8F 4801C3              <2>     add rbx,rax
   197                              <2> 
   198 00001D92 4831C0              <2>     xor rax,rax
   199 00001D95 4831C9              <2>     xor rcx,rcx
   200 00001D98 4831D2              <2>     xor rdx,rdx
   201 00001D9B 488B03              <2>     mov rax,qword [rbx]
   202 00001D9E 8B4B10              <2>     mov ecx,dword [rbx + e820_memory_info.type]
   203 00001DA1 488B5308            <2>     mov rdx,qword [rbx + e820_memory_info.length_low]
   204 00001DA5 4801D0              <2>     add rax,rdx
   205 00001DA8 48FFC0              <2>     inc rax
   206                              <2>     MEMORY_PAGE_4K_ALIGN rax
    34                              <3> 
    35                              <3> 
    36                              <3> 
    37 00001DAB 48890424            <3>  mov qword[rsp],%1
    38 00001DAF 48810424FF0F0000    <3>  add qword[rsp],MEMORY_PAGE_4K_SIZE - 1
    39 00001DB7 4881242400F0FFFF    <3>  and qword[rsp],MEMORY_PAGE_4K_MASK
    40 00001DBF 488B0424            <3>  mov %1,qword[rsp]
    41                              <3> 
    42                              <3> 
    43                              <3> 
    44                              <3> 
    45                              <3> 
    46                              <3> 
    47                              <3> 
    48                              <3> 
    49                              <3> 
    50                              <3> 
   207                              <2>     ; function kmemset,1,rax
   208                              <2>     ; jmp $
   209                              <2> 
   210                              <2> 
   211                              <2>     epilog
   212                              <3>  popallq
   263 00001DC3 415F                <4>  pop r15
   264 00001DC5 415E                <4>  pop r14
   265 00001DC7 415D                <4>  pop r13
   266 00001DC9 415C                <4>  pop r12
   267 00001DCB 415B                <4>  pop r11
   268 00001DCD 415A                <4>  pop r10
   269 00001DCF 4159                <4>  pop r9
   270 00001DD1 4158                <4>  pop r8
   271 00001DD3 5F                  <4>  pop rdi
   272 00001DD4 5E                  <4>  pop rsi
   273 00001DD5 5A                  <4>  pop rdx
   274 00001DD6 59                  <4>  pop rcx
   275 00001DD7 5B                  <4>  pop rbx
   276 00001DD8 58                  <4>  pop rax
   213                              <3> 
   214 00001DD9 4889EC              <3>  mov rsp, rbp
   215 00001DDC 5D                  <3>  pop rbp
   216 00001DDD C3                  <3>  ret
   212                              <2> kmemset:;input:dest_addr,value,count
   213                              <2>     prolog 2;
   192 00001DDE 55                  <3>  push rbp
   193 00001DDF 4889E5              <3>  mov rbp, rsp
   194                              <3> 
   195                              <3> 
   196 00001DE2 488945F8            <3>  mov [rbp-8],rax
   197 00001DE6 B802000000          <3>  mov rax, %1
   198 00001DEB 4883C00F            <3>  add rax, 15
   199 00001DEF 4883E0F0            <3>  and rax, ~15
   200 00001DF3 4829C4              <3>  sub rsp, rax
   201 00001DF6 488B45F8            <3>  mov rax,[rbp-8]
   202                              <3> 
   203                              <3>  pushallq
   246 00001DFA 50                  <4>  push rax
   247 00001DFB 53                  <4>  push rbx
   248 00001DFC 51                  <4>  push rcx
   249 00001DFD 52                  <4>  push rdx
   250 00001DFE 56                  <4>  push rsi
   251 00001DFF 57                  <4>  push rdi
   252 00001E00 4150                <4>  push r8
   253 00001E02 4151                <4>  push r9
   254 00001E04 4152                <4>  push r10
   255 00001E06 4153                <4>  push r11
   256 00001E08 4154                <4>  push r12
   257 00001E0A 4155                <4>  push r13
   258 00001E0C 4156                <4>  push r14
   259 00001E0E 4157                <4>  push r15
   204                              <3> 
   205                              <3> 
   206                              <3> 
   207                              <3> 
   208                              <3> 
   214                              <2>     get_param rdi,1
   220 00001E10 488B7D10            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   215                              <2>     get_param rsi,2
   220 00001E14 488B7518            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   216                              <2>     get_param rdx,3
   220 00001E18 488B5520            <3>  mov %1, [rbp + PARAM_OFFSET + 8*(%2-1)]
   217                              <2> 
   218                              <2>     ; Extend the value to 64 bit
   219 00001E1C 480FB6C6            <2>     movzx rax, sil          
   220 00001E20 4889C3              <2>     mov rbx, rax            
   221 00001E23 48C1E008            <2>     shl rax, 8              
   222 00001E27 4809D8              <2>     or rax, rbx             
   223 00001E2A 48C1E010            <2>     shl rax, 16             
   224 00001E2E 4809D8              <2>     or rax, rbx             
   225 00001E31 48C1E020            <2>     shl rax, 32             
   226 00001E35 4809D8              <2>     or rax, rbx             
   227                              <2> 
   228                              <2>     ;Fill the memory with the rax using the stosq instruction
   229 00001E38 4889D1              <2>     mov rcx, rdx            
   230 00001E3B 48C1E903            <2>     shr rcx, 3              
   231 00001E3F F348AB              <2>     rep stosq               
   232                              <2> 
   233                              <2>     ; deal with the remaining bytes
   234 00001E42 4889D1              <2>     mov rcx, rdx
   235 00001E45 4883E107            <2>     and rcx, 7              
   236 00001E49 F3AA                <2>     rep stosb              
   237                              <2> 
   238                              <2>     epilog
   212                              <3>  popallq
   263 00001E4B 415F                <4>  pop r15
   264 00001E4D 415E                <4>  pop r14
   265 00001E4F 415D                <4>  pop r13
   266 00001E51 415C                <4>  pop r12
   267 00001E53 415B                <4>  pop r11
   268 00001E55 415A                <4>  pop r10
   269 00001E57 4159                <4>  pop r9
   270 00001E59 4158                <4>  pop r8
   271 00001E5B 5F                  <4>  pop rdi
   272 00001E5C 5E                  <4>  pop rsi
   273 00001E5D 5A                  <4>  pop rdx
   274 00001E5E 59                  <4>  pop rcx
   275 00001E5F 5B                  <4>  pop rbx
   276 00001E60 58                  <4>  pop rax
   213                              <3> 
   214 00001E61 4889EC              <3>  mov rsp, rbp
   215 00001E64 5D                  <3>  pop rbp
   216 00001E65 C3                  <3>  ret
   239                              <2> parse_e820:;get and print e820 info to global_memory_info
   240                              <2>     prolog 2;
   192 00001E66 55                  <3>  push rbp
   193 00001E67 4889E5              <3>  mov rbp, rsp
   194                              <3> 
   195                              <3> 
   196 00001E6A 488945F8            <3>  mov [rbp-8],rax
   197 00001E6E B802000000          <3>  mov rax, %1
   198 00001E73 4883C00F            <3>  add rax, 15
   199 00001E77 4883E0F0            <3>  and rax, ~15
   200 00001E7B 4829C4              <3>  sub rsp, rax
   201 00001E7E 488B45F8            <3>  mov rax,[rbp-8]
   202                              <3> 
   203                              <3>  pushallq
   246 00001E82 50                  <4>  push rax
   247 00001E83 53                  <4>  push rbx
   248 00001E84 51                  <4>  push rcx
   249 00001E85 52                  <4>  push rdx
   250 00001E86 56                  <4>  push rsi
   251 00001E87 57                  <4>  push rdi
   252 00001E88 4150                <4>  push r8
   253 00001E8A 4151                <4>  push r9
   254 00001E8C 4152                <4>  push r10
   255 00001E8E 4153                <4>  push r11
   256 00001E90 4154                <4>  push r12
   257 00001E92 4155                <4>  push r13
   258 00001E94 4156                <4>  push r14
   259 00001E96 4157                <4>  push r15
   204                              <3> 
   205                              <3> 
   206                              <3> 
   207                              <3> 
   208                              <3> 
   241                              <2> 
   242 00001E98 4831C0              <2>     xor rax,rax
   243 00001E9B 4831DB              <2>     xor rbx,rbx
   244 00001E9E 48BB008800000080FF- <2>     mov rbx,KernelSpaceUpperAddress+MemoryStructBufferAddr+ e820_memory_entry.base_addr_low
   244 00001EA7 FF                  <2>
   245 00001EA8 48891D77FDFFFF      <2>     mov qword [rel global_memory_info_ptr + global_memory_info.e820_addr],rbx
   246                              <2> 
   247 00001EAF 4883EB04            <2>     sub rbx,4
   248 00001EB3 488B03              <2>     mov rax,qword [rbx]
   249                              <2> 
   250 00001EB6 48890571FDFFFF      <2>     mov qword [rel global_memory_info_ptr + global_memory_info.e820_size],rax
   251                              <2> 
   252 00001EBD 4889055AFDFFFF      <2>     mov [rel meomry_decimal_messages], rax
   253 00001EC4 488D353EFCFFFF      <2>     lea rsi, [rel memory_physical_table]
   254 00001ECB 488D154CFDFFFF      <2>     lea rdx, [rel meomry_decimal_messages]
   255                              <2>     function printk,1,rsi,rdx
   120                              <3>  %assign param_count %0 - 2
   121                              <3> 
   122                              <3>  %if param_count < 0
   123                              <3>  %assign param_count 0
   124                              <3>  %endif
   125                              <3>  %if param_count < 1
   126                              <3>  %assign ret_param_count 0
   127                              <3>  %else
   128                              <3>  %assign ret_param_count %2
   129                              <3>  %endif
   130                              <3> 
   131                              <3> 
   132                              <3>  prepare_call param_count, ret_param_count
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00001ED2 4883EC20            <4>  sub rsp, total_space
   133                              <3> 
   134                              <3> 
   135                              <3>  %if param_count > 0
   136                              <3>  %assign i 0
   137 00001ED6 48894424F8          <3>  mov [rsp-8], rax
   138                              <3>  %rep param_count
   139                              <3>  %rotate 1
   140                              <3>  mov rax, %2
   141                              <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   143                              <3>  %endrep
   139                              <4>  %rotate 1
   140 00001EDB 4889F0              <4>  mov rax, %2
   141 00001EDE 48890424            <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   139                              <4>  %rotate 1
   140 00001EE2 4889D0              <4>  mov rax, %2
   141 00001EE5 4889442408          <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   144                              <3>  %rotate 1
   145                              <3>  %rotate 1
   146 00001EEA 488B4424F8          <3>  mov rax,[rsp-8]
   147                              <3>  %endif
   148                              <3> 
   149                              <3> 
   150 00001EEF E836EFFFFF          <3>  call %1
   151                              <3> 
   152                              <3> 
   153                              <3>  cleanup_call param_count, ret_param_count
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 00001EF4 4883C420            <4>  add rsp, total_space
   154                              <3> 
   256 00001EF8 4889C1              <2>     mov rcx,rax
   257 00001EFB 41BE00000000        <2>     mov r14,0
   258 00001F01 41BD00000000        <2>     mov r13,0
   259                              <2>     .loop_tale:
   260 00001F07 4831C0              <2>         xor rax,rax
   261 00001F0A 48BB008800000080FF- <2>         mov rbx,KernelSpaceUpperAddress+MemoryStructBufferAddr+ e820_memory_entry.base_addr_low
   261 00001F13 FF                  <2>
   262 00001F14 4C01F3              <2>         add rbx,r14
   263 00001F17 488B03              <2>         mov rax,qword [rbx]
   264 00001F1A 488905F5FCFFFF      <2>         mov [rel memory_hex_messages], rax
   265 00001F21 488D35A7FCFFFF      <2>         lea rsi, [rel memory_physical_address]
   266 00001F28 488D15E7FCFFFF      <2>         lea rdx, [rel memory_hex_messages]
   267                              <2>         function printk,1,rsi,rdx
   120                              <3>  %assign param_count %0 - 2
   121                              <3> 
   122                              <3>  %if param_count < 0
   123                              <3>  %assign param_count 0
   124                              <3>  %endif
   125                              <3>  %if param_count < 1
   126                              <3>  %assign ret_param_count 0
   127                              <3>  %else
   128                              <3>  %assign ret_param_count %2
   129                              <3>  %endif
   130                              <3> 
   131                              <3> 
   132                              <3>  prepare_call param_count, ret_param_count
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00001F2F 4883EC20            <4>  sub rsp, total_space
   133                              <3> 
   134                              <3> 
   135                              <3>  %if param_count > 0
   136                              <3>  %assign i 0
   137 00001F33 48894424F8          <3>  mov [rsp-8], rax
   138                              <3>  %rep param_count
   139                              <3>  %rotate 1
   140                              <3>  mov rax, %2
   141                              <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   143                              <3>  %endrep
   139                              <4>  %rotate 1
   140 00001F38 4889F0              <4>  mov rax, %2
   141 00001F3B 48890424            <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   139                              <4>  %rotate 1
   140 00001F3F 4889D0              <4>  mov rax, %2
   141 00001F42 4889442408          <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   144                              <3>  %rotate 1
   145                              <3>  %rotate 1
   146 00001F47 488B4424F8          <3>  mov rax,[rsp-8]
   147                              <3>  %endif
   148                              <3> 
   149                              <3> 
   150 00001F4C E8D9EEFFFF          <3>  call %1
   151                              <3> 
   152                              <3> 
   153                              <3>  cleanup_call param_count, ret_param_count
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 00001F51 4883C420            <4>  add rsp, total_space
   154                              <3> 
   268                              <2> 
   269 00001F55 4831C0              <2>         xor rax,rax
   270 00001F58 48BB088800000080FF- <2>         mov rbx,KernelSpaceUpperAddress+MemoryStructBufferAddr+ e820_memory_entry.length_low
   270 00001F61 FF                  <2>
   271 00001F62 4C01F3              <2>         add rbx,r14
   272 00001F65 488B03              <2>         mov rax,qword [rbx]
   273 00001F68 488905A7FCFFFF      <2>         mov [rel memory_hex_messages], rax
   274 00001F6F 488D356EFCFFFF      <2>         lea rsi, [rel memory_physical_length]
   275 00001F76 488D1599FCFFFF      <2>         lea rdx, [rel memory_hex_messages]
   276                              <2>         function printk,1,rsi,rdx
   120                              <3>  %assign param_count %0 - 2
   121                              <3> 
   122                              <3>  %if param_count < 0
   123                              <3>  %assign param_count 0
   124                              <3>  %endif
   125                              <3>  %if param_count < 1
   126                              <3>  %assign ret_param_count 0
   127                              <3>  %else
   128                              <3>  %assign ret_param_count %2
   129                              <3>  %endif
   130                              <3> 
   131                              <3> 
   132                              <3>  prepare_call param_count, ret_param_count
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00001F7D 4883EC20            <4>  sub rsp, total_space
   133                              <3> 
   134                              <3> 
   135                              <3>  %if param_count > 0
   136                              <3>  %assign i 0
   137 00001F81 48894424F8          <3>  mov [rsp-8], rax
   138                              <3>  %rep param_count
   139                              <3>  %rotate 1
   140                              <3>  mov rax, %2
   141                              <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   143                              <3>  %endrep
   139                              <4>  %rotate 1
   140 00001F86 4889F0              <4>  mov rax, %2
   141 00001F89 48890424            <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   139                              <4>  %rotate 1
   140 00001F8D 4889D0              <4>  mov rax, %2
   141 00001F90 4889442408          <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   144                              <3>  %rotate 1
   145                              <3>  %rotate 1
   146 00001F95 488B4424F8          <3>  mov rax,[rsp-8]
   147                              <3>  %endif
   148                              <3> 
   149                              <3> 
   150 00001F9A E88BEEFFFF          <3>  call %1
   151                              <3> 
   152                              <3> 
   153                              <3>  cleanup_call param_count, ret_param_count
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 00001F9F 4883C420            <4>  add rsp, total_space
   154                              <3> 
   277                              <2> 
   278 00001FA3 4831C0              <2>         xor rax,rax
   279 00001FA6 48BB108800000080FF- <2>         mov rbx,KernelSpaceUpperAddress+MemoryStructBufferAddr+ e820_memory_entry.type
   279 00001FAF FF                  <2>
   280 00001FB0 4C01F3              <2>         add rbx,r14
   281 00001FB3 8B03                <2>         mov eax,dword [rbx]
   282 00001FB5 4883F801            <2>         cmp rax,1
   283 00001FB9 7503                <2>         jne .count_skip
   284 00001FBB 49FFC5              <2>             inc r13
   285                              <2>         .count_skip:
   286 00001FBE 48890559FCFFFF      <2>         mov [rel meomry_decimal_messages], rax
   287 00001FC5 488D3531FCFFFF      <2>         lea rsi, [rel memory_physical_type]
   288 00001FCC 488D154BFCFFFF      <2>         lea rdx, [rel meomry_decimal_messages]
   289                              <2>         function printk,1,rsi,rdx
   120                              <3>  %assign param_count %0 - 2
   121                              <3> 
   122                              <3>  %if param_count < 0
   123                              <3>  %assign param_count 0
   124                              <3>  %endif
   125                              <3>  %if param_count < 1
   126                              <3>  %assign ret_param_count 0
   127                              <3>  %else
   128                              <3>  %assign ret_param_count %2
   129                              <3>  %endif
   130                              <3> 
   131                              <3> 
   132                              <3>  prepare_call param_count, ret_param_count
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00001FD3 4883EC20            <4>  sub rsp, total_space
   133                              <3> 
   134                              <3> 
   135                              <3>  %if param_count > 0
   136                              <3>  %assign i 0
   137 00001FD7 48894424F8          <3>  mov [rsp-8], rax
   138                              <3>  %rep param_count
   139                              <3>  %rotate 1
   140                              <3>  mov rax, %2
   141                              <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   143                              <3>  %endrep
   139                              <4>  %rotate 1
   140 00001FDC 4889F0              <4>  mov rax, %2
   141 00001FDF 48890424            <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   139                              <4>  %rotate 1
   140 00001FE3 4889D0              <4>  mov rax, %2
   141 00001FE6 4889442408          <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   144                              <3>  %rotate 1
   145                              <3>  %rotate 1
   146 00001FEB 488B4424F8          <3>  mov rax,[rsp-8]
   147                              <3>  %endif
   148                              <3> 
   149                              <3> 
   150 00001FF0 E835EEFFFF          <3>  call %1
   151                              <3> 
   152                              <3> 
   153                              <3>  cleanup_call param_count, ret_param_count
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 00001FF5 4883C420            <4>  add rsp, total_space
   154                              <3> 
   290                              <2> 
   291 00001FF9 4983C614            <2>         add r14,20
   292 00001FFD 48FFC9              <2>         dec rcx
   293 00002000 0F8501FFFFFF        <2>         jnz .loop_tale
   294                              <2> 
   295 00002006 4C892D29FCFFFF      <2>         mov qword [rel global_memory_info_ptr + global_memory_info.e820_count],r13
   296                              <2> 
   297 0000200D 4C892D0AFCFFFF      <2>         mov [rel meomry_decimal_messages], r13
   298 00002014 488D3540FBFFFF      <2>         lea rsi, [rel memory_physical_usable]
   299 0000201B 488D15FCFBFFFF      <2>         lea rdx, [rel meomry_decimal_messages]
   300                              <2>         function printk,1,rsi,rdx
   120                              <3>  %assign param_count %0 - 2
   121                              <3> 
   122                              <3>  %if param_count < 0
   123                              <3>  %assign param_count 0
   124                              <3>  %endif
   125                              <3>  %if param_count < 1
   126                              <3>  %assign ret_param_count 0
   127                              <3>  %else
   128                              <3>  %assign ret_param_count %2
   129                              <3>  %endif
   130                              <3> 
   131                              <3> 
   132                              <3>  prepare_call param_count, ret_param_count
   228                              <4>  %assign total_space ((%1 + %2) * 8)
   229                              <4> 
   230                              <4>  %if (total_space % 16) != 0
   231                              <4>  %assign total_space total_space + 8
   232                              <4>  %endif
   233                              <4> 
   234 00002022 4883EC20            <4>  sub rsp, total_space
   133                              <3> 
   134                              <3> 
   135                              <3>  %if param_count > 0
   136                              <3>  %assign i 0
   137 00002026 48894424F8          <3>  mov [rsp-8], rax
   138                              <3>  %rep param_count
   139                              <3>  %rotate 1
   140                              <3>  mov rax, %2
   141                              <3>  mov [rsp + 8*i], rax
   142                              <3>  %assign i i+1
   143                              <3>  %endrep
   139                              <4>  %rotate 1
   140 0000202B 4889F0              <4>  mov rax, %2
   141 0000202E 48890424            <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   139                              <4>  %rotate 1
   140 00002032 4889D0              <4>  mov rax, %2
   141 00002035 4889442408          <4>  mov [rsp + 8*i], rax
   142                              <4>  %assign i i+1
   144                              <3>  %rotate 1
   145                              <3>  %rotate 1
   146 0000203A 488B4424F8          <3>  mov rax,[rsp-8]
   147                              <3>  %endif
   148                              <3> 
   149                              <3> 
   150 0000203F E8E6EDFFFF          <3>  call %1
   151                              <3> 
   152                              <3> 
   153                              <3>  cleanup_call param_count, ret_param_count
   238                              <4>  %assign total_space ((%1 + %2) * 8)
   239                              <4>  %if (total_space % 16) != 0
   240                              <4>  %assign total_space total_space + 8
   241                              <4>  %endif
   242 00002044 4883C420            <4>  add rsp, total_space
   154                              <3> 
   301                              <2>     epilog
   212                              <3>  popallq
   263 00002048 415F                <4>  pop r15
   264 0000204A 415E                <4>  pop r14
   265 0000204C 415D                <4>  pop r13
   266 0000204E 415C                <4>  pop r12
   267 00002050 415B                <4>  pop r11
   268 00002052 415A                <4>  pop r10
   269 00002054 4159                <4>  pop r9
   270 00002056 4158                <4>  pop r8
   271 00002058 5F                  <4>  pop rdi
   272 00002059 5E                  <4>  pop rsi
   273 0000205A 5A                  <4>  pop rdx
   274 0000205B 59                  <4>  pop rcx
   275 0000205C 5B                  <4>  pop rbx
   276 0000205D 58                  <4>  pop rax
   213                              <3> 
   214 0000205E 4889EC              <3>  mov rsp, rbp
   215 00002061 5D                  <3>  pop rbp
   216 00002062 C3                  <3>  ret
   302                              <2> %endif
   223                              <1> 
   224 00002063 68656C6C6F20776F72- <1> messages: db 'hello world,here to show printk function\n', 0
   224 0000206C 6C642C686572652074- <1>
   224 00002075 6F2073686F77207072- <1>
   224 0000207E 696E746B2066756E63- <1>
   224 00002087 74696F6E5C6E00      <1>
   225                              <1> 
   226 0000208E 617364666768696A6B- <1> messages1: db 'asdfghijklmnopqrstuvwxyz_ASDFGHJKLZXCVBNM1234567890\n', 0
   226 00002097 6C6D6E6F7071727374- <1>
   226 000020A0 75767778797A5F4153- <1>
   226 000020A9 444647484A4B4C5A58- <1>
   226 000020B2 4356424E4D31323334- <1>
   226 000020BB 3536373839305C6E00  <1>
   227 000020C4 496D61676520666F72- <1> messages2: db 'Image format was not specified for ./hd60m.img and probing guessed raw\n', 0
   227 000020CD 6D617420776173206E- <1>
   227 000020D6 6F7420737065636966- <1>
   227 000020DF 69656420666F72202E- <1>
   227 000020E8 2F686436306D2E696D- <1>
   227 000020F1 6720616E642070726F- <1>
   227 000020FA 62696E672067756573- <1>
   227 00002103 736564207261775C6E- <1>
   227 0000210C 00                  <1>
   228 0000210D 4175746F6D61746963- <1> messages3: db 'Automatically detecting the format is dangerous for raw images, write operations on block 0 will be restricted.\n', 0
   228 00002116 616C6C792064657465- <1>
   228 0000211F 6374696E6720746865- <1>
   228 00002128 20666F726D61742069- <1>
   228 00002131 732064616E6765726F- <1>
   228 0000213A 757320666F72207261- <1>
   228 00002143 7720696D616765732C- <1>
   228 0000214C 207772697465206F70- <1>
   228 00002155 65726174696F6E7320- <1>
   228 0000215E 6F6E20626C6F636B20- <1>
   228 00002167 302077696C6C206265- <1>
   228 00002170 207265737472696374- <1>
   228 00002179 65642E5C6E00        <1>
   229                              <1> 
   230 0000217F 2E2E2F6B65726E656C- <1> messages4: db '../kernel/printk.asm:100: warning: word data exceeds bounds [-w+number-overflow]\n', 0
   230 00002188 2F7072696E746B2E61- <1>
   230 00002191 736D3A3130303A2077- <1>
   230 0000219A 61726E696E673A2077- <1>
   230 000021A3 6F7264206461746120- <1>
   230 000021AC 657863656564732062- <1>
   230 000021B5 6F756E6473205B2D77- <1>
   230 000021BE 2B6E756D6265722D6F- <1>
   230 000021C7 766572666C6F775D5C- <1>
   230 000021D0 6E00                <1>
   231 000021D2 5741524E494E473A20- <1> messages5: db 'WARNING: Image format was not specified for ./hd60m.img and probing guessed raw.\n', 0
   231 000021DB 496D61676520666F72- <1>
   231 000021E4 6D617420776173206E- <1>
   231 000021ED 6F7420737065636966- <1>
   231 000021F6 69656420666F72202E- <1>
   231 000021FF 2F686436306D2E696D- <1>
   231 00002208 6720616E642070726F- <1>
   231 00002211 62696E672067756573- <1>
   231 0000221A 736564207261772E5C- <1>
   231 00002223 6E00                <1>
   232 00002225 323530383820627974- <1> messages6: db '25088 bytes (25 kB, 24 KiB) copied, 0.000134717 s, 186 MB/s\n', 0
   232 0000222E 657320283235206B42- <1>
   232 00002237 2C203234204B694229- <1>
   232 00002240 20636F706965642C20- <1>
   232 00002249 302E30303031333437- <1>
   232 00002252 313720732C20313836- <1>
   232 0000225B 204D422F735C6E00    <1>
   233                              <1> 
   234 00002263 48656C6C6F2C202573- <1> format1 db "Hello, %s!\n", 0
   234 0000226C 215C6E00            <1>
   235 00002270 506879736963616C20- <1> format2 db "Physical address: %d", 0
   235 00002279 616464726573733A20- <1>
   235 00002282 256400              <1>
   236                              <1> 
   237                              <1> 
   238 00002285 4865783A2025785C6E- <1> format3 db "Hex: %x\n", 0
   238 0000228E 00                  <1>
   239 0000228F 576F726C6400        <1> string1 db "World", 0
   240                              <1> 
   241 00002295 6745230100000000    <1> hex_messages: dq 0x1234567
   242 0000229D 0000000000000000    <1> decimal_messages: dq 0
   243 000022A5 4523010000000000-   <1> params: times 10 dq 0x12345
   243 000022A5 <rep Ah>            <1>
   244 000022F5 00<rep Ah>          <1> messagess: times 10 db 0
   245                              <1> 
   246                              <1> %endif
    72                                  
    73                                  
    74                                  kernel_end:
    75                                  section_end:
